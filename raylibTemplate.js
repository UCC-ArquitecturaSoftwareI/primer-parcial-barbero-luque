// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'bin/raylibTemplate.data';
    var REMOTE_PACKAGE_BASE = 'raylibTemplate.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'resources', true, true);
Module['FS_createPath']('/resources', 'TiledAssets', true, true);
Module['FS_createPath']('/resources/TiledAssets', 'Default size', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_bin/raylibTemplate.data');

    };
    Module['addRunDependency']('datafile_bin/raylibTemplate.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"start": 0, "audio": 0, "end": 2159, "filename": "/resources/Missile.png"}, {"start": 2159, "audio": 1, "end": 2341079, "filename": "/resources/Cyberpunk Moonlight Sonata.mp3"}, {"start": 2341079, "audio": 0, "end": 2575736, "filename": "/resources/towerDefense_tilesheet.png"}, {"start": 2575736, "audio": 0, "end": 2683620, "filename": "/resources/mapTest.png"}, {"start": 2683620, "audio": 0, "end": 2685448, "filename": "/resources/TowerCreateButton.png"}, {"start": 2685448, "audio": 1, "end": 5209640, "filename": "/resources/Tower Defense Menu.mp3"}, {"start": 5209640, "audio": 0, "end": 5212685, "filename": "/resources/TowerTopArea.png"}, {"start": 5212685, "audio": 0, "end": 5214642, "filename": "/resources/ship.png"}, {"start": 5214642, "audio": 0, "end": 5216273, "filename": "/resources/TowerDeleteButton.png"}, {"start": 5216273, "audio": 0, "end": 5218449, "filename": "/resources/TowerTopStrong.png"}, {"start": 5218449, "audio": 0, "end": 5251358, "filename": "/resources/background-menu.png"}, {"start": 5251358, "audio": 0, "end": 5311816, "filename": "/resources/HudPanelRight.png"}, {"start": 5311816, "audio": 0, "end": 5311990, "filename": "/resources/health_bar.png"}, {"start": 5311990, "audio": 0, "end": 5312158, "filename": "/resources/Tower Def Background.tsx"}, {"start": 5312158, "audio": 0, "end": 5313455, "filename": "/resources/Map1.tmx"}, {"start": 5313455, "audio": 0, "end": 5315826, "filename": "/resources/TowerBase.png"}, {"start": 5315826, "audio": 0, "end": 5316168, "filename": "/resources/health_bar_decoration.png"}, {"start": 5316168, "audio": 0, "end": 5318786, "filename": "/resources/towerDefense_tile245.png"}, {"start": 5318786, "audio": 0, "end": 5429840, "filename": "/resources/Map1.png"}, {"start": 5429840, "audio": 0, "end": 5432773, "filename": "/resources/TowerTop.png"}, {"start": 5432773, "audio": 0, "end": 5443466, "filename": "/resources/shell.html"}, {"start": 5443466, "audio": 0, "end": 5446140, "filename": "/resources/TiledAssets/Default size/towerDefense_tile172.png"}, {"start": 5446140, "audio": 0, "end": 5449212, "filename": "/resources/TiledAssets/Default size/towerDefense_tile082.png"}, {"start": 5449212, "audio": 0, "end": 5452183, "filename": "/resources/TiledAssets/Default size/towerDefense_tile236.png"}, {"start": 5452183, "audio": 0, "end": 5453939, "filename": "/resources/TiledAssets/Default size/towerDefense_tile289.png"}, {"start": 5453939, "audio": 0, "end": 5456474, "filename": "/resources/TiledAssets/Default size/towerDefense_tile097.png"}, {"start": 5456474, "audio": 0, "end": 5458426, "filename": "/resources/TiledAssets/Default size/towerDefense_tile285.png"}, {"start": 5458426, "audio": 0, "end": 5461596, "filename": "/resources/TiledAssets/Default size/towerDefense_tile137.png"}, {"start": 5461596, "audio": 0, "end": 5465207, "filename": "/resources/TiledAssets/Default size/towerDefense_tile233.png"}, {"start": 5465207, "audio": 0, "end": 5467458, "filename": "/resources/TiledAssets/Default size/towerDefense_tile001.png"}, {"start": 5467458, "audio": 0, "end": 5469126, "filename": "/resources/TiledAssets/Default size/towerDefense_tile071.png"}, {"start": 5469126, "audio": 0, "end": 5470713, "filename": "/resources/TiledAssets/Default size/towerDefense_tile265.png"}, {"start": 5470713, "audio": 0, "end": 5472325, "filename": "/resources/TiledAssets/Default size/towerDefense_tile209.png"}, {"start": 5472325, "audio": 0, "end": 5475912, "filename": "/resources/TiledAssets/Default size/towerDefense_tile004.png"}, {"start": 5475912, "audio": 0, "end": 5477813, "filename": "/resources/TiledAssets/Default size/towerDefense_tile276.png"}, {"start": 5477813, "audio": 0, "end": 5478954, "filename": "/resources/TiledAssets/Default size/towerDefense_tile155.png"}, {"start": 5478954, "audio": 0, "end": 5481925, "filename": "/resources/TiledAssets/Default size/towerDefense_tile093.png"}, {"start": 5481925, "audio": 0, "end": 5485530, "filename": "/resources/TiledAssets/Default size/towerDefense_tile211.png"}, {"start": 5485530, "audio": 0, "end": 5488389, "filename": "/resources/TiledAssets/Default size/towerDefense_tile029.png"}, {"start": 5488389, "audio": 0, "end": 5491248, "filename": "/resources/TiledAssets/Default size/towerDefense_tile241.png"}, {"start": 5491248, "audio": 0, "end": 5492882, "filename": "/resources/TiledAssets/Default size/towerDefense_tile056.png"}, {"start": 5492882, "audio": 0, "end": 5494847, "filename": "/resources/TiledAssets/Default size/towerDefense_tile016.png"}, {"start": 5494847, "audio": 0, "end": 5497785, "filename": "/resources/TiledAssets/Default size/towerDefense_tile089.png"}, {"start": 5497785, "audio": 0, "end": 5499738, "filename": "/resources/TiledAssets/Default size/towerDefense_tile281.png"}, {"start": 5499738, "audio": 0, "end": 5502832, "filename": "/resources/TiledAssets/Default size/towerDefense_tile106.png"}, {"start": 5502832, "audio": 0, "end": 5506065, "filename": "/resources/TiledAssets/Default size/towerDefense_tile066.png"}, {"start": 5506065, "audio": 0, "end": 5509846, "filename": "/resources/TiledAssets/Default size/towerDefense_tile130.png"}, {"start": 5509846, "audio": 0, "end": 5512631, "filename": "/resources/TiledAssets/Default size/towerDefense_tile090.png"}, {"start": 5512631, "audio": 0, "end": 5515036, "filename": "/resources/TiledAssets/Default size/towerDefense_tile092.png"}, {"start": 5515036, "audio": 0, "end": 5517586, "filename": "/resources/TiledAssets/Default size/towerDefense_tile161.png"}, {"start": 5517586, "audio": 0, "end": 5520651, "filename": "/resources/TiledAssets/Default size/towerDefense_tile158.png"}, {"start": 5520651, "audio": 0, "end": 5521751, "filename": "/resources/TiledAssets/Default size/towerDefense_tile223.png"}, {"start": 5521751, "audio": 0, "end": 5522878, "filename": "/resources/TiledAssets/Default size/towerDefense_tile201.png"}, {"start": 5522878, "audio": 0, "end": 5525737, "filename": "/resources/TiledAssets/Default size/towerDefense_tile160.png"}, {"start": 5525737, "audio": 0, "end": 5527722, "filename": "/resources/TiledAssets/Default size/towerDefense_tile110.png"}, {"start": 5527722, "audio": 0, "end": 5528829, "filename": "/resources/TiledAssets/Default size/towerDefense_tile177.png"}, {"start": 5528829, "audio": 0, "end": 5532304, "filename": "/resources/TiledAssets/Default size/towerDefense_tile216.png"}, {"start": 5532304, "audio": 0, "end": 5535148, "filename": "/resources/TiledAssets/Default size/towerDefense_tile049.png"}, {"start": 5535148, "audio": 0, "end": 5536555, "filename": "/resources/TiledAssets/Default size/towerDefense_tile288.png"}, {"start": 5536555, "audio": 0, "end": 5539020, "filename": "/resources/TiledAssets/Default size/towerDefense_tile242.png"}, {"start": 5539020, "audio": 0, "end": 5540628, "filename": "/resources/TiledAssets/Default size/towerDefense_tile022.png"}, {"start": 5540628, "audio": 0, "end": 5544120, "filename": "/resources/TiledAssets/Default size/towerDefense_tile142.png"}, {"start": 5544120, "audio": 0, "end": 5545984, "filename": "/resources/TiledAssets/Default size/towerDefense_tile278.png"}, {"start": 5545984, "audio": 0, "end": 5548361, "filename": "/resources/TiledAssets/Default size/towerDefense_tile020.png"}, {"start": 5548361, "audio": 0, "end": 5549419, "filename": "/resources/TiledAssets/Default size/towerDefense_tile198.png"}, {"start": 5549419, "audio": 0, "end": 5550625, "filename": "/resources/TiledAssets/Default size/towerDefense_tile084.png"}, {"start": 5550625, "audio": 0, "end": 5554097, "filename": "/resources/TiledAssets/Default size/towerDefense_tile073.png"}, {"start": 5554097, "audio": 0, "end": 5555155, "filename": "/resources/TiledAssets/Default size/towerDefense_tile188.png"}, {"start": 5555155, "audio": 0, "end": 5557690, "filename": "/resources/TiledAssets/Default size/towerDefense_tile247.png"}, {"start": 5557690, "audio": 0, "end": 5559518, "filename": "/resources/TiledAssets/Default size/towerDefense_tile085.png"}, {"start": 5559518, "audio": 0, "end": 5561641, "filename": "/resources/TiledAssets/Default size/towerDefense_tile269.png"}, {"start": 5561641, "audio": 0, "end": 5563251, "filename": "/resources/TiledAssets/Default size/towerDefense_tile120.png"}, {"start": 5563251, "audio": 0, "end": 5565502, "filename": "/resources/TiledAssets/Default size/towerDefense_tile047.png"}, {"start": 5565502, "audio": 0, "end": 5567966, "filename": "/resources/TiledAssets/Default size/towerDefense_tile030.png"}, {"start": 5567966, "audio": 0, "end": 5570420, "filename": "/resources/TiledAssets/Default size/towerDefense_tile252.png"}, {"start": 5570420, "audio": 0, "end": 5572031, "filename": "/resources/TiledAssets/Default size/towerDefense_tile283.png"}, {"start": 5572031, "audio": 0, "end": 5573669, "filename": "/resources/TiledAssets/Default size/towerDefense_tile040.png"}, {"start": 5573669, "audio": 0, "end": 5575553, "filename": "/resources/TiledAssets/Default size/towerDefense_tile297.png"}, {"start": 5575553, "audio": 0, "end": 5578502, "filename": "/resources/TiledAssets/Default size/towerDefense_tile059.png"}, {"start": 5578502, "audio": 0, "end": 5581654, "filename": "/resources/TiledAssets/Default size/towerDefense_tile096.png"}, {"start": 5581654, "audio": 0, "end": 5582710, "filename": "/resources/TiledAssets/Default size/towerDefense_tile262.png"}, {"start": 5582710, "audio": 0, "end": 5584855, "filename": "/resources/TiledAssets/Default size/towerDefense_tile070.png"}, {"start": 5584855, "audio": 0, "end": 5588431, "filename": "/resources/TiledAssets/Default size/towerDefense_tile164.png"}, {"start": 5588431, "audio": 0, "end": 5590546, "filename": "/resources/TiledAssets/Default size/towerDefense_tile218.png"}, {"start": 5590546, "audio": 0, "end": 5591686, "filename": "/resources/TiledAssets/Default size/towerDefense_tile153.png"}, {"start": 5591686, "audio": 0, "end": 5592742, "filename": "/resources/TiledAssets/Default size/towerDefense_tile119.png"}, {"start": 5592742, "audio": 0, "end": 5595328, "filename": "/resources/TiledAssets/Default size/towerDefense_tile246.png"}, {"start": 5595328, "audio": 0, "end": 5597539, "filename": "/resources/TiledAssets/Default size/towerDefense_tile116.png"}, {"start": 5597539, "audio": 0, "end": 5599088, "filename": "/resources/TiledAssets/Default size/towerDefense_tile007.png"}, {"start": 5599088, "audio": 0, "end": 5601078, "filename": "/resources/TiledAssets/Default size/towerDefense_tile080.png"}, {"start": 5601078, "audio": 0, "end": 5602990, "filename": "/resources/TiledAssets/Default size/towerDefense_tile294.png"}, {"start": 5602990, "audio": 0, "end": 5606259, "filename": "/resources/TiledAssets/Default size/towerDefense_tile024.png"}, {"start": 5606259, "audio": 0, "end": 5609320, "filename": "/resources/TiledAssets/Default size/towerDefense_tile132.png"}, {"start": 5609320, "audio": 0, "end": 5611168, "filename": "/resources/TiledAssets/Default size/towerDefense_tile284.png"}, {"start": 5611168, "audio": 0, "end": 5613842, "filename": "/resources/TiledAssets/Default size/towerDefense_tile103.png"}, {"start": 5613842, "audio": 0, "end": 5615299, "filename": "/resources/TiledAssets/Default size/towerDefense_tile010.png"}, {"start": 5615299, "audio": 0, "end": 5616911, "filename": "/resources/TiledAssets/Default size/towerDefense_tile081.png"}, {"start": 5616911, "audio": 0, "end": 5619538, "filename": "/resources/TiledAssets/Default size/towerDefense_tile286.png"}, {"start": 5619538, "audio": 0, "end": 5622212, "filename": "/resources/TiledAssets/Default size/towerDefense_tile034.png"}, {"start": 5622212, "audio": 0, "end": 5623708, "filename": "/resources/TiledAssets/Default size/towerDefense_tile299.png"}, {"start": 5623708, "audio": 0, "end": 5627105, "filename": "/resources/TiledAssets/Default size/towerDefense_tile095.png"}, {"start": 5627105, "audio": 0, "end": 5629728, "filename": "/resources/TiledAssets/Default size/towerDefense_tile163.png"}, {"start": 5629728, "audio": 0, "end": 5633570, "filename": "/resources/TiledAssets/Default size/towerDefense_tile134.png"}, {"start": 5633570, "audio": 0, "end": 5635063, "filename": "/resources/TiledAssets/Default size/towerDefense_tile207.png"}, {"start": 5635063, "audio": 0, "end": 5636650, "filename": "/resources/TiledAssets/Default size/towerDefense_tile053.png"}, {"start": 5636650, "audio": 0, "end": 5638542, "filename": "/resources/TiledAssets/Default size/towerDefense_tile282.png"}, {"start": 5638542, "audio": 0, "end": 5641961, "filename": "/resources/TiledAssets/Default size/towerDefense_tile210.png"}, {"start": 5641961, "audio": 0, "end": 5643439, "filename": "/resources/TiledAssets/Default size/towerDefense_tile069.png"}, {"start": 5643439, "audio": 0, "end": 5646006, "filename": "/resources/TiledAssets/Default size/towerDefense_tile131.png"}, {"start": 5646006, "audio": 0, "end": 5648878, "filename": "/resources/TiledAssets/Default size/towerDefense_tile261.png"}, {"start": 5648878, "audio": 0, "end": 5650511, "filename": "/resources/TiledAssets/Default size/towerDefense_tile109.png"}, {"start": 5650511, "audio": 0, "end": 5652055, "filename": "/resources/TiledAssets/Default size/towerDefense_tile186.png"}, {"start": 5652055, "audio": 0, "end": 5653261, "filename": "/resources/TiledAssets/Default size/towerDefense_tile107.png"}, {"start": 5653261, "audio": 0, "end": 5655476, "filename": "/resources/TiledAssets/Default size/towerDefense_tile052.png"}, {"start": 5655476, "audio": 0, "end": 5657935, "filename": "/resources/TiledAssets/Default size/towerDefense_tile023.png"}, {"start": 5657935, "audio": 0, "end": 5660456, "filename": "/resources/TiledAssets/Default size/towerDefense_tile248.png"}, {"start": 5660456, "audio": 0, "end": 5662289, "filename": "/resources/TiledAssets/Default size/towerDefense_tile062.png"}, {"start": 5662289, "audio": 0, "end": 5663762, "filename": "/resources/TiledAssets/Default size/towerDefense_tile143.png"}, {"start": 5663762, "audio": 0, "end": 5667128, "filename": "/resources/TiledAssets/Default size/towerDefense_tile238.png"}, {"start": 5667128, "audio": 0, "end": 5670231, "filename": "/resources/TiledAssets/Default size/towerDefense_tile037.png"}, {"start": 5670231, "audio": 0, "end": 5671848, "filename": "/resources/TiledAssets/Default size/towerDefense_tile260.png"}, {"start": 5671848, "audio": 0, "end": 5675048, "filename": "/resources/TiledAssets/Default size/towerDefense_tile243.png"}, {"start": 5675048, "audio": 0, "end": 5678416, "filename": "/resources/TiledAssets/Default size/towerDefense_tile165.png"}, {"start": 5678416, "audio": 0, "end": 5681855, "filename": "/resources/TiledAssets/Default size/towerDefense_tile009.png"}, {"start": 5681855, "audio": 0, "end": 5685124, "filename": "/resources/TiledAssets/Default size/towerDefense_tile231.png"}, {"start": 5685124, "audio": 0, "end": 5687348, "filename": "/resources/TiledAssets/Default size/towerDefense_tile292.png"}, {"start": 5687348, "audio": 0, "end": 5690378, "filename": "/resources/TiledAssets/Default size/towerDefense_tile067.png"}, {"start": 5690378, "audio": 0, "end": 5691585, "filename": "/resources/TiledAssets/Default size/towerDefense_tile038.png"}, {"start": 5691585, "audio": 0, "end": 5693553, "filename": "/resources/TiledAssets/Default size/towerDefense_tile195.png"}, {"start": 5693553, "audio": 0, "end": 5695180, "filename": "/resources/TiledAssets/Default size/towerDefense_tile002.png"}, {"start": 5695180, "audio": 0, "end": 5697501, "filename": "/resources/TiledAssets/Default size/towerDefense_tile185.png"}, {"start": 5697501, "audio": 0, "end": 5699389, "filename": "/resources/TiledAssets/Default size/towerDefense_tile203.png"}, {"start": 5699389, "audio": 0, "end": 5702322, "filename": "/resources/TiledAssets/Default size/towerDefense_tile206.png"}, {"start": 5702322, "audio": 0, "end": 5705241, "filename": "/resources/TiledAssets/Default size/towerDefense_tile256.png"}, {"start": 5705241, "audio": 0, "end": 5707072, "filename": "/resources/TiledAssets/Default size/towerDefense_tile039.png"}, {"start": 5707072, "audio": 0, "end": 5708580, "filename": "/resources/TiledAssets/Default size/towerDefense_tile048.png"}, {"start": 5708580, "audio": 0, "end": 5710144, "filename": "/resources/TiledAssets/Default size/towerDefense_tile228.png"}, {"start": 5710144, "audio": 0, "end": 5711200, "filename": "/resources/TiledAssets/Default size/towerDefense_tile050.png"}, {"start": 5711200, "audio": 0, "end": 5712256, "filename": "/resources/TiledAssets/Default size/towerDefense_tile267.png"}, {"start": 5712256, "audio": 0, "end": 5714400, "filename": "/resources/TiledAssets/Default size/towerDefense_tile006.png"}, {"start": 5714400, "audio": 0, "end": 5717901, "filename": "/resources/TiledAssets/Default size/towerDefense_tile221.png"}, {"start": 5717901, "audio": 0, "end": 5721256, "filename": "/resources/TiledAssets/Default size/towerDefense_tile003.png"}, {"start": 5721256, "audio": 0, "end": 5722773, "filename": "/resources/TiledAssets/Default size/towerDefense_tile255.png"}, {"start": 5722773, "audio": 0, "end": 5725859, "filename": "/resources/TiledAssets/Default size/towerDefense_tile175.png"}, {"start": 5725859, "audio": 0, "end": 5727853, "filename": "/resources/TiledAssets/Default size/towerDefense_tile064.png"}, {"start": 5727853, "audio": 0, "end": 5731177, "filename": "/resources/TiledAssets/Default size/towerDefense_tile234.png"}, {"start": 5731177, "audio": 0, "end": 5733288, "filename": "/resources/TiledAssets/Default size/towerDefense_tile268.png"}, {"start": 5733288, "audio": 0, "end": 5735474, "filename": "/resources/TiledAssets/Default size/towerDefense_tile035.png"}, {"start": 5735474, "audio": 0, "end": 5737664, "filename": "/resources/TiledAssets/Default size/towerDefense_tile075.png"}, {"start": 5737664, "audio": 0, "end": 5738720, "filename": "/resources/TiledAssets/Default size/towerDefense_tile055.png"}, {"start": 5738720, "audio": 0, "end": 5741091, "filename": "/resources/TiledAssets/Default size/towerDefense_tile181.png"}, {"start": 5741091, "audio": 0, "end": 5743021, "filename": "/resources/TiledAssets/Default size/towerDefense_tile149.png"}, {"start": 5743021, "audio": 0, "end": 5745861, "filename": "/resources/TiledAssets/Default size/towerDefense_tile065.png"}, {"start": 5745861, "audio": 0, "end": 5748277, "filename": "/resources/TiledAssets/Default size/towerDefense_tile166.png"}, {"start": 5748277, "audio": 0, "end": 5751381, "filename": "/resources/TiledAssets/Default size/towerDefense_tile215.png"}, {"start": 5751381, "audio": 0, "end": 5753829, "filename": "/resources/TiledAssets/Default size/towerDefense_tile237.png"}, {"start": 5753829, "audio": 0, "end": 5756924, "filename": "/resources/TiledAssets/Default size/towerDefense_tile146.png"}, {"start": 5756924, "audio": 0, "end": 5759417, "filename": "/resources/TiledAssets/Default size/towerDefense_tile094.png"}, {"start": 5759417, "audio": 0, "end": 5762637, "filename": "/resources/TiledAssets/Default size/towerDefense_tile027.png"}, {"start": 5762637, "audio": 0, "end": 5763843, "filename": "/resources/TiledAssets/Default size/towerDefense_tile061.png"}, {"start": 5763843, "audio": 0, "end": 5765497, "filename": "/resources/TiledAssets/Default size/towerDefense_tile145.png"}, {"start": 5765497, "audio": 0, "end": 5767100, "filename": "/resources/TiledAssets/Default size/towerDefense_tile012.png"}, {"start": 5767100, "audio": 0, "end": 5768156, "filename": "/resources/TiledAssets/Default size/towerDefense_tile129.png"}, {"start": 5768156, "audio": 0, "end": 5769661, "filename": "/resources/TiledAssets/Default size/towerDefense_tile138.png"}, {"start": 5769661, "audio": 0, "end": 5771840, "filename": "/resources/TiledAssets/Default size/towerDefense_tile144.png"}, {"start": 5771840, "audio": 0, "end": 5774814, "filename": "/resources/TiledAssets/Default size/towerDefense_tile244.png"}, {"start": 5774814, "audio": 0, "end": 5777542, "filename": "/resources/TiledAssets/Default size/towerDefense_tile135.png"}, {"start": 5777542, "audio": 0, "end": 5779334, "filename": "/resources/TiledAssets/Default size/towerDefense_tile274.png"}, {"start": 5779334, "audio": 0, "end": 5780922, "filename": "/resources/TiledAssets/Default size/towerDefense_tile189.png"}, {"start": 5780922, "audio": 0, "end": 5782842, "filename": "/resources/TiledAssets/Default size/towerDefense_tile011.png"}, {"start": 5782842, "audio": 0, "end": 5786275, "filename": "/resources/TiledAssets/Default size/towerDefense_tile169.png"}, {"start": 5786275, "audio": 0, "end": 5789696, "filename": "/resources/TiledAssets/Default size/towerDefense_tile152.png"}, {"start": 5789696, "audio": 0, "end": 5791918, "filename": "/resources/TiledAssets/Default size/towerDefense_tile190.png"}, {"start": 5791918, "audio": 0, "end": 5794978, "filename": "/resources/TiledAssets/Default size/towerDefense_tile091.png"}, {"start": 5794978, "audio": 0, "end": 5798414, "filename": "/resources/TiledAssets/Default size/towerDefense_tile078.png"}, {"start": 5798414, "audio": 0, "end": 5801425, "filename": "/resources/TiledAssets/Default size/towerDefense_tile042.png"}, {"start": 5801425, "audio": 0, "end": 5803818, "filename": "/resources/TiledAssets/Default size/towerDefense_tile287.png"}, {"start": 5803818, "audio": 0, "end": 5807087, "filename": "/resources/TiledAssets/Default size/towerDefense_tile157.png"}, {"start": 5807087, "audio": 0, "end": 5810448, "filename": "/resources/TiledAssets/Default size/towerDefense_tile043.png"}, {"start": 5810448, "audio": 0, "end": 5812275, "filename": "/resources/TiledAssets/Default size/towerDefense_tile108.png"}, {"start": 5812275, "audio": 0, "end": 5814570, "filename": "/resources/TiledAssets/Default size/towerDefense_tile121.png"}, {"start": 5814570, "audio": 0, "end": 5816809, "filename": "/resources/TiledAssets/Default size/towerDefense_tile264.png"}, {"start": 5816809, "audio": 0, "end": 5819652, "filename": "/resources/TiledAssets/Default size/towerDefense_tile192.png"}, {"start": 5819652, "audio": 0, "end": 5822686, "filename": "/resources/TiledAssets/Default size/towerDefense_tile220.png"}, {"start": 5822686, "audio": 0, "end": 5825660, "filename": "/resources/TiledAssets/Default size/towerDefense_tile032.png"}, {"start": 5825660, "audio": 0, "end": 5826788, "filename": "/resources/TiledAssets/Default size/towerDefense_tile199.png"}, {"start": 5826788, "audio": 0, "end": 5827928, "filename": "/resources/TiledAssets/Default size/towerDefense_tile154.png"}, {"start": 5827928, "audio": 0, "end": 5829574, "filename": "/resources/TiledAssets/Default size/towerDefense_tile258.png"}, {"start": 5829574, "audio": 0, "end": 5832147, "filename": "/resources/TiledAssets/Default size/towerDefense_tile025.png"}, {"start": 5832147, "audio": 0, "end": 5833615, "filename": "/resources/TiledAssets/Default size/towerDefense_tile148.png"}, {"start": 5833615, "audio": 0, "end": 5836666, "filename": "/resources/TiledAssets/Default size/towerDefense_tile114.png"}, {"start": 5836666, "audio": 0, "end": 5837793, "filename": "/resources/TiledAssets/Default size/towerDefense_tile202.png"}, {"start": 5837793, "audio": 0, "end": 5840836, "filename": "/resources/TiledAssets/Default size/towerDefense_tile101.png"}, {"start": 5840836, "audio": 0, "end": 5842411, "filename": "/resources/TiledAssets/Default size/towerDefense_tile076.png"}, {"start": 5842411, "audio": 0, "end": 5844170, "filename": "/resources/TiledAssets/Default size/towerDefense_tile280.png"}, {"start": 5844170, "audio": 0, "end": 5846335, "filename": "/resources/TiledAssets/Default size/towerDefense_tile298.png"}, {"start": 5846335, "audio": 0, "end": 5848256, "filename": "/resources/TiledAssets/Default size/towerDefense_tile180.png"}, {"start": 5848256, "audio": 0, "end": 5849363, "filename": "/resources/TiledAssets/Default size/towerDefense_tile178.png"}, {"start": 5849363, "audio": 0, "end": 5850931, "filename": "/resources/TiledAssets/Default size/towerDefense_tile219.png"}, {"start": 5850931, "audio": 0, "end": 5854374, "filename": "/resources/TiledAssets/Default size/towerDefense_tile141.png"}, {"start": 5854374, "audio": 0, "end": 5856023, "filename": "/resources/TiledAssets/Default size/towerDefense_tile263.png"}, {"start": 5856023, "audio": 0, "end": 5859292, "filename": "/resources/TiledAssets/Default size/towerDefense_tile162.png"}, {"start": 5859292, "audio": 0, "end": 5860860, "filename": "/resources/TiledAssets/Default size/towerDefense_tile277.png"}, {"start": 5860860, "audio": 0, "end": 5863441, "filename": "/resources/TiledAssets/Default size/towerDefense_tile232.png"}, {"start": 5863441, "audio": 0, "end": 5864722, "filename": "/resources/TiledAssets/Default size/towerDefense_tile290.png"}, {"start": 5864722, "audio": 0, "end": 5866363, "filename": "/resources/TiledAssets/Default size/towerDefense_tile115.png"}, {"start": 5866363, "audio": 0, "end": 5867972, "filename": "/resources/TiledAssets/Default size/towerDefense_tile194.png"}, {"start": 5867972, "audio": 0, "end": 5870922, "filename": "/resources/TiledAssets/Default size/towerDefense_tile128.png"}, {"start": 5870922, "audio": 0, "end": 5874399, "filename": "/resources/TiledAssets/Default size/towerDefense_tile105.png"}, {"start": 5874399, "audio": 0, "end": 5876915, "filename": "/resources/TiledAssets/Default size/towerDefense_tile028.png"}, {"start": 5876915, "audio": 0, "end": 5881205, "filename": "/resources/TiledAssets/Default size/towerDefense_tile133.png"}, {"start": 5881205, "audio": 0, "end": 5882871, "filename": "/resources/TiledAssets/Default size/towerDefense_tile227.png"}, {"start": 5882871, "audio": 0, "end": 5885936, "filename": "/resources/TiledAssets/Default size/towerDefense_tile271.png"}, {"start": 5885936, "audio": 0, "end": 5887567, "filename": "/resources/TiledAssets/Default size/towerDefense_tile086.png"}, {"start": 5887567, "audio": 0, "end": 5888667, "filename": "/resources/TiledAssets/Default size/towerDefense_tile222.png"}, {"start": 5888667, "audio": 0, "end": 5889917, "filename": "/resources/TiledAssets/Default size/towerDefense_tile015.png"}, {"start": 5889917, "audio": 0, "end": 5892957, "filename": "/resources/TiledAssets/Default size/towerDefense_tile013.png"}, {"start": 5892957, "audio": 0, "end": 5894581, "filename": "/resources/TiledAssets/Default size/towerDefense_tile140.png"}, {"start": 5894581, "audio": 0, "end": 5896211, "filename": "/resources/TiledAssets/Default size/towerDefense_tile117.png"}, {"start": 5896211, "audio": 0, "end": 5899299, "filename": "/resources/TiledAssets/Default size/towerDefense_tile270.png"}, {"start": 5899299, "audio": 0, "end": 5901061, "filename": "/resources/TiledAssets/Default size/towerDefense_tile273.png"}, {"start": 5901061, "audio": 0, "end": 5903237, "filename": "/resources/TiledAssets/Default size/towerDefense_tile204.png"}, {"start": 5903237, "audio": 0, "end": 5905855, "filename": "/resources/TiledAssets/Default size/towerDefense_tile245.png"}, {"start": 5905855, "audio": 0, "end": 5908052, "filename": "/resources/TiledAssets/Default size/towerDefense_tile226.png"}, {"start": 5908052, "audio": 0, "end": 5909691, "filename": "/resources/TiledAssets/Default size/towerDefense_tile214.png"}, {"start": 5909691, "audio": 0, "end": 5912070, "filename": "/resources/TiledAssets/Default size/towerDefense_tile235.png"}, {"start": 5912070, "audio": 0, "end": 5913651, "filename": "/resources/TiledAssets/Default size/towerDefense_tile122.png"}, {"start": 5913651, "audio": 0, "end": 5915147, "filename": "/resources/TiledAssets/Default size/towerDefense_tile217.png"}, {"start": 5915147, "audio": 0, "end": 5918015, "filename": "/resources/TiledAssets/Default size/towerDefense_tile266.png"}, {"start": 5918015, "audio": 0, "end": 5919659, "filename": "/resources/TiledAssets/Default size/towerDefense_tile125.png"}, {"start": 5919659, "audio": 0, "end": 5921212, "filename": "/resources/TiledAssets/Default size/towerDefense_tile229.png"}, {"start": 5921212, "audio": 0, "end": 5923401, "filename": "/resources/TiledAssets/Default size/towerDefense_tile021.png"}, {"start": 5923401, "audio": 0, "end": 5926312, "filename": "/resources/TiledAssets/Default size/towerDefense_tile197.png"}, {"start": 5926312, "audio": 0, "end": 5928295, "filename": "/resources/TiledAssets/Default size/towerDefense_tile057.png"}, {"start": 5928295, "audio": 0, "end": 5930772, "filename": "/resources/TiledAssets/Default size/towerDefense_tile099.png"}, {"start": 5930772, "audio": 0, "end": 5934106, "filename": "/resources/TiledAssets/Default size/towerDefense_tile068.png"}, {"start": 5934106, "audio": 0, "end": 5936300, "filename": "/resources/TiledAssets/Default size/towerDefense_tile102.png"}, {"start": 5936300, "audio": 0, "end": 5937427, "filename": "/resources/TiledAssets/Default size/towerDefense_tile200.png"}, {"start": 5937427, "audio": 0, "end": 5939431, "filename": "/resources/TiledAssets/Default size/towerDefense_tile182.png"}, {"start": 5939431, "audio": 0, "end": 5941795, "filename": "/resources/TiledAssets/Default size/towerDefense_tile296.png"}, {"start": 5941795, "audio": 0, "end": 5944285, "filename": "/resources/TiledAssets/Default size/towerDefense_tile168.png"}, {"start": 5944285, "audio": 0, "end": 5946457, "filename": "/resources/TiledAssets/Default size/towerDefense_tile173.png"}, {"start": 5946457, "audio": 0, "end": 5948702, "filename": "/resources/TiledAssets/Default size/towerDefense_tile259.png"}, {"start": 5948702, "audio": 0, "end": 5950315, "filename": "/resources/TiledAssets/Default size/towerDefense_tile127.png"}, {"start": 5950315, "audio": 0, "end": 5953185, "filename": "/resources/TiledAssets/Default size/towerDefense_tile123.png"}, {"start": 5953185, "audio": 0, "end": 5955192, "filename": "/resources/TiledAssets/Default size/towerDefense_tile041.png"}, {"start": 5955192, "audio": 0, "end": 5956333, "filename": "/resources/TiledAssets/Default size/towerDefense_tile156.png"}, {"start": 5956333, "audio": 0, "end": 5958492, "filename": "/resources/TiledAssets/Default size/towerDefense_tile251.png"}, {"start": 5958492, "audio": 0, "end": 5961013, "filename": "/resources/TiledAssets/Default size/towerDefense_tile088.png"}, {"start": 5961013, "audio": 0, "end": 5962508, "filename": "/resources/TiledAssets/Default size/towerDefense_tile005.png"}, {"start": 5962508, "audio": 0, "end": 5964623, "filename": "/resources/TiledAssets/Default size/towerDefense_tile018.png"}, {"start": 5964623, "audio": 0, "end": 5967668, "filename": "/resources/TiledAssets/Default size/towerDefense_tile205.png"}, {"start": 5967668, "audio": 0, "end": 5968768, "filename": "/resources/TiledAssets/Default size/towerDefense_tile225.png"}, {"start": 5968768, "audio": 0, "end": 5970763, "filename": "/resources/TiledAssets/Default size/towerDefense_tile126.png"}, {"start": 5970763, "audio": 0, "end": 5972400, "filename": "/resources/TiledAssets/Default size/towerDefense_tile051.png"}, {"start": 5972400, "audio": 0, "end": 5973507, "filename": "/resources/TiledAssets/Default size/towerDefense_tile176.png"}, {"start": 5973507, "audio": 0, "end": 5975804, "filename": "/resources/TiledAssets/Default size/towerDefense_tile208.png"}, {"start": 5975804, "audio": 0, "end": 5977962, "filename": "/resources/TiledAssets/Default size/towerDefense_tile213.png"}, {"start": 5977962, "audio": 0, "end": 5981157, "filename": "/resources/TiledAssets/Default size/towerDefense_tile044.png"}, {"start": 5981157, "audio": 0, "end": 5982945, "filename": "/resources/TiledAssets/Default size/towerDefense_tile272.png"}, {"start": 5982945, "audio": 0, "end": 5984559, "filename": "/resources/TiledAssets/Default size/towerDefense_tile150.png"}, {"start": 5984559, "audio": 0, "end": 5985659, "filename": "/resources/TiledAssets/Default size/towerDefense_tile224.png"}, {"start": 5985659, "audio": 0, "end": 5987905, "filename": "/resources/TiledAssets/Default size/towerDefense_tile183.png"}, {"start": 5987905, "audio": 0, "end": 5991442, "filename": "/resources/TiledAssets/Default size/towerDefense_tile136.png"}, {"start": 5991442, "audio": 0, "end": 5993635, "filename": "/resources/TiledAssets/Default size/towerDefense_tile033.png"}, {"start": 5993635, "audio": 0, "end": 5996606, "filename": "/resources/TiledAssets/Default size/towerDefense_tile167.png"}, {"start": 5996606, "audio": 0, "end": 5998599, "filename": "/resources/TiledAssets/Default size/towerDefense_tile087.png"}, {"start": 5998599, "audio": 0, "end": 6001403, "filename": "/resources/TiledAssets/Default size/towerDefense_tile113.png"}, {"start": 6001403, "audio": 0, "end": 6003109, "filename": "/resources/TiledAssets/Default size/towerDefense_tile017.png"}, {"start": 6003109, "audio": 0, "end": 6004836, "filename": "/resources/TiledAssets/Default size/towerDefense_tile253.png"}, {"start": 6004836, "audio": 0, "end": 6005892, "filename": "/resources/TiledAssets/Default size/towerDefense_tile257.png"}, {"start": 6005892, "audio": 0, "end": 6006950, "filename": "/resources/TiledAssets/Default size/towerDefense_tile193.png"}, {"start": 6006950, "audio": 0, "end": 6008566, "filename": "/resources/TiledAssets/Default size/towerDefense_tile058.png"}, {"start": 6008566, "audio": 0, "end": 6010406, "filename": "/resources/TiledAssets/Default size/towerDefense_tile293.png"}, {"start": 6010406, "audio": 0, "end": 6012608, "filename": "/resources/TiledAssets/Default size/towerDefense_tile104.png"}, {"start": 6012608, "audio": 0, "end": 6014574, "filename": "/resources/TiledAssets/Default size/towerDefense_tile295.png"}, {"start": 6014574, "audio": 0, "end": 6016745, "filename": "/resources/TiledAssets/Default size/towerDefense_tile249.png"}, {"start": 6016745, "audio": 0, "end": 6018208, "filename": "/resources/TiledAssets/Default size/towerDefense_tile079.png"}, {"start": 6018208, "audio": 0, "end": 6021610, "filename": "/resources/TiledAssets/Default size/towerDefense_tile147.png"}, {"start": 6021610, "audio": 0, "end": 6024522, "filename": "/resources/TiledAssets/Default size/towerDefense_tile118.png"}, {"start": 6024522, "audio": 0, "end": 6025987, "filename": "/resources/TiledAssets/Default size/towerDefense_tile212.png"}, {"start": 6025987, "audio": 0, "end": 6028661, "filename": "/resources/TiledAssets/Default size/towerDefense_tile159.png"}, {"start": 6028661, "audio": 0, "end": 6030989, "filename": "/resources/TiledAssets/Default size/towerDefense_tile254.png"}, {"start": 6030989, "audio": 0, "end": 6033419, "filename": "/resources/TiledAssets/Default size/towerDefense_tile250.png"}, {"start": 6033419, "audio": 0, "end": 6036562, "filename": "/resources/TiledAssets/Default size/towerDefense_tile239.png"}, {"start": 6036562, "audio": 0, "end": 6039612, "filename": "/resources/TiledAssets/Default size/towerDefense_tile008.png"}, {"start": 6039612, "audio": 0, "end": 6041886, "filename": "/resources/TiledAssets/Default size/towerDefense_tile019.png"}, {"start": 6041886, "audio": 0, "end": 6045381, "filename": "/resources/TiledAssets/Default size/towerDefense_tile045.png"}, {"start": 6045381, "audio": 0, "end": 6048264, "filename": "/resources/TiledAssets/Default size/towerDefense_tile187.png"}, {"start": 6048264, "audio": 0, "end": 6051107, "filename": "/resources/TiledAssets/Default size/towerDefense_tile054.png"}, {"start": 6051107, "audio": 0, "end": 6054234, "filename": "/resources/TiledAssets/Default size/towerDefense_tile170.png"}, {"start": 6054234, "audio": 0, "end": 6057346, "filename": "/resources/TiledAssets/Default size/towerDefense_tile077.png"}, {"start": 6057346, "audio": 0, "end": 6059932, "filename": "/resources/TiledAssets/Default size/towerDefense_tile111.png"}, {"start": 6059932, "audio": 0, "end": 6061617, "filename": "/resources/TiledAssets/Default size/towerDefense_tile046.png"}, {"start": 6061617, "audio": 0, "end": 6065038, "filename": "/resources/TiledAssets/Default size/towerDefense_tile014.png"}, {"start": 6065038, "audio": 0, "end": 6067347, "filename": "/resources/TiledAssets/Default size/towerDefense_tile139.png"}, {"start": 6067347, "audio": 0, "end": 6070206, "filename": "/resources/TiledAssets/Default size/towerDefense_tile098.png"}, {"start": 6070206, "audio": 0, "end": 6072701, "filename": "/resources/TiledAssets/Default size/towerDefense_tile230.png"}, {"start": 6072701, "audio": 0, "end": 6076141, "filename": "/resources/TiledAssets/Default size/towerDefense_tile036.png"}, {"start": 6076141, "audio": 0, "end": 6079135, "filename": "/resources/TiledAssets/Default size/towerDefense_tile112.png"}, {"start": 6079135, "audio": 0, "end": 6080660, "filename": "/resources/TiledAssets/Default size/towerDefense_tile074.png"}, {"start": 6080660, "audio": 0, "end": 6084094, "filename": "/resources/TiledAssets/Default size/towerDefense_tile174.png"}, {"start": 6084094, "audio": 0, "end": 6086314, "filename": "/resources/TiledAssets/Default size/towerDefense_tile291.png"}, {"start": 6086314, "audio": 0, "end": 6087916, "filename": "/resources/TiledAssets/Default size/towerDefense_tile196.png"}, {"start": 6087916, "audio": 0, "end": 6089604, "filename": "/resources/TiledAssets/Default size/towerDefense_tile279.png"}, {"start": 6089604, "audio": 0, "end": 6091237, "filename": "/resources/TiledAssets/Default size/towerDefense_tile063.png"}, {"start": 6091237, "audio": 0, "end": 6092963, "filename": "/resources/TiledAssets/Default size/towerDefense_tile275.png"}, {"start": 6092963, "audio": 0, "end": 6096079, "filename": "/resources/TiledAssets/Default size/towerDefense_tile072.png"}, {"start": 6096079, "audio": 0, "end": 6099570, "filename": "/resources/TiledAssets/Default size/towerDefense_tile083.png"}, {"start": 6099570, "audio": 0, "end": 6100677, "filename": "/resources/TiledAssets/Default size/towerDefense_tile179.png"}, {"start": 6100677, "audio": 0, "end": 6103835, "filename": "/resources/TiledAssets/Default size/towerDefense_tile031.png"}, {"start": 6103835, "audio": 0, "end": 6106319, "filename": "/resources/TiledAssets/Default size/towerDefense_tile240.png"}, {"start": 6106319, "audio": 0, "end": 6107375, "filename": "/resources/TiledAssets/Default size/towerDefense_tile060.png"}, {"start": 6107375, "audio": 0, "end": 6110451, "filename": "/resources/TiledAssets/Default size/towerDefense_tile151.png"}, {"start": 6110451, "audio": 0, "end": 6113688, "filename": "/resources/TiledAssets/Default size/towerDefense_tile100.png"}, {"start": 6113688, "audio": 0, "end": 6117122, "filename": "/resources/TiledAssets/Default size/towerDefense_tile026.png"}, {"start": 6117122, "audio": 0, "end": 6118744, "filename": "/resources/TiledAssets/Default size/towerDefense_tile191.png"}, {"start": 6118744, "audio": 0, "end": 6120921, "filename": "/resources/TiledAssets/Default size/towerDefense_tile171.png"}, {"start": 6120921, "audio": 0, "end": 6121977, "filename": "/resources/TiledAssets/Default size/towerDefense_tile124.png"}, {"start": 6121977, "audio": 0, "end": 6123636, "filename": "/resources/TiledAssets/Default size/towerDefense_tile184.png"}], "remote_package_size": 6123636, "package_uuid": "7698f3cb-3899-4cd2-87ac-7970e0ff710c"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 370,
  'maximum': 370,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    assert(opts && opts.async, 'The call to ' + ident + ' is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.');
    assert(!EmterpreterAsync.restartFunc, 'Cannot have multiple async ccalls in flight at once');
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 133568,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5376448,
    DYNAMIC_BASE = 5376448,
    DYNAMICTOP_PTR = 133376;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'raylibTemplate.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_unstable': asmLibraryArg
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

Module['asm'] = createWasm;

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 132544;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_gameplayScreen_cpp() } });








/* no memory initializer */
var tempDoublePtr = 133552
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(298736);
assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,8,151,0,0,0,0,0,2,143,0,0,255,0,0,0,2,144,0,0,69,65,0,0,1,108,0,0,136,145,0,0,0,109,145,0,136,145,0,0,25,145,145,63,38,145,145,192,137,145,0,0,0,110,145,0,136,145,0,0,1,146,128,0,3,145,145,146,137,145,0,0,130,145,0,0,136,146,0,0,49,145,145,146,100,0,0,0,1,146,128,0,135,145,0,0,146,0,0,0,25,101,110,116,25,35,110,112,25,99,110,108,25,100,110,104,25,95,110,100,25,106,110,96,25,107,110,92,25,80,110,88,25,40,110,84,25,38,110,80,25,102,110,76,25,83,110,72,25,88,110,68,25,104,110,64,25,84,110,60,25,86,110,56,25,89,110,52,25,85,110,48,25,96,110,44,25,82,110,40,25,105,110,36,25,76,110,32,25,97,110,28,25,81,110,24,25,94,110,20,25,78,110,16,25,87,110,12,25,103,110,120,25,98,110,8,25,79,110,4,0,77,110,0,85,35,0,0,85,99,1,0,85,100,2,0,85,95,3,0,85,106,4,0,85,107,5,0,85,80,6,0,85,40,7,0,82,146,80,0,32,146,146,16,1,147,2,0,1,148,1,0,125,145,146,147,148,0,0,0,85,38,145,0,82,145,35,0,116,102,145,0,82,145,106,0,82,148,95,0,5,90,145,148,82,145,38,0,5,148,90,145,85,104,148,0,82,148,102,0,25,148,148,8,116,85,148,0,82,145,95,0,82,147,38,0,5,148,145,147,85,96,148,0,82,147,85,0,82,145,38,0,5,148,147,145,85,82,148,0,116,105,106,0,82,148,95,0,82,145,102,0,106,145,145,8,46,148,148,145,176,1,0,0,82,148,95,0,82,145,102,0,106,145,145,8,25,145,145,1,46,148,148,145,176,1,0,0,1,145,219,65,1,147,1,63,1,146,58,17,1,149,4,66,135,148,1,0,145,147,146,149,82,148,106,0,82,149,107,0,82,146,96,0,1,147,0,0,134,39,0,0,212,194,3,0,148,149,146,147,82,147,35,0,109,147,12,39,82,147,35,0,106,147,147,12,120,147,9,0,1,146,77,63,134,147,0,0,40,112,4,0,146,0,0,0,85,101,147,0,82,34,101,0,137,109,0,0,139,34,0,0,82,146,85,0,82,149,106,0,82,148,80,0,1,145,7,0,134,147,0,0,216,168,3,0,146,149,148,145,120,147,9,0,1,145,205,63,134,147,0,0,40,112,4,0,145,0,0,0,85,101,147,0,82,34,101,0,137,109,0,0,139,34,0,0,82,147,85,0,82,145,106,0,5,91,147,145,82,147,80,0,5,145,91,147,25,145,145,7,43,145,145,3,85,86,145,0,82,147,86,0,25,147,147,1,82,148,107,0,5,145,147,148,85,84,145,0,82,145,100,0,82,148,84,0,48,145,145,148,164,2,0,0,1,148,31,66,134,145,0,0,40,112,4,0,148,0,0,0,85,101,145,0,82,34,101,0,137,109,0,0,139,34,0,0,1,145,0,0,85,88,145,0,82,145,107,0,82,148,88,0,50,145,145,148,196,2,0,0,1,108,113,0,119,0,253,2,82,145,35,0,106,145,145,12,82,147,104,0,82,149,88,0,5,148,147,149,3,145,145,148,85,76,145,0,82,8,99,0,25,145,8,1,85,99,145,0,79,145,8,0,85,81,145,0,1,145,4,0,82,148,81,0,47,145,145,148,12,3,0,0,1,108,13,0,119,0,235,2,82,145,80,0,34,145,145,8,121,145,18,0,82,145,106,0,82,148,86,0,48,145,145,148,48,3,0,0,1,108,16,0,119,0,226,2,82,145,106,0,82,148,95,0,5,92,145,148,82,148,76,0,82,145,86,0,4,145,92,145,3,148,148,145,85,76,148,0,1,148,1,0,85,82,148,0,116,105,86,0,82,148,76,0,1,145,0,0,82,149,104,0,4,145,145,149,3,148,148,145,85,97,148,0,82,148,88,0,120,148,5,0,1,148,85,66,82,145,81,0,91,148,148,145,85,81,148,0,1,148,0,0,85,89,148,0,82,148,82,0,82,145,89,0,56,148,148,145,212,4,0,0,82,148,81,0,1,149,0,0,1,145,7,0,138,148,149,145,212,3,0,0,236,3,0,0,4,4,0,0,40,4,0,0,80,4,0,0,148,4,0,0,172,4,0,0,119,0,61,0,82,111,89,0,82,145,76,0,82,149,99,0,90,149,149,111,95,145,111,149,119,0,55,0,82,112,89,0,82,149,76,0,82,145,99,0,90,145,145,112,95,149,112,145,119,0,49,0,82,113,89,0,82,145,76,0,82,149,99,0,91,149,149,113,82,147,97,0,91,147,147,113,3,149,149,147,95,145,113,149,119,0,40,0,82,114,89,0,82,149,76,0,82,145,99,0,91,145,145,114,82,147,97,0,91,147,147,114,42,147,147,1,3,145,145,147,95,149,114,145,119,0,30,0,82,115,89,0,82,145,99,0,91,145,145,115,1,147,0,0,82,146,97,0,91,146,146,115,1,150,0,0,134,149,0,0,148,123,3,0,147,146,150,0,3,145,145,149,19,145,145,143,0,75,145,0,82,145,76,0,82,149,89,0,95,145,149,75,119,0,13,0,82,116,89,0,82,149,76,0,82,145,99,0,90,145,145,116,95,149,116,145,119,0,7,0,82,117,89,0,82,145,76,0,82,149,99,0,90,149,149,117,95,145,117,149,119,0,1,0,82,148,89,0,25,148,148,1,85,89,148,0,119,0,177,255,82,148,80,0,32,148,148,8,121,148,22,0,82,148,85,0,82,149,95,0,46,148,148,149,0,5,0,0,82,148,76,0,82,149,85,0,1,145,255,255,95,148,149,145,82,145,99,0,82,149,85,0,3,145,145,149,85,99,145,0,82,145,76,0,82,149,95,0,3,145,145,149,85,76,145,0,82,145,97,0,82,149,95,0,3,145,145,149,85,97,145,0,119,0,39,0,82,145,80,0,33,145,145,16,121,145,11,0,82,145,99,0,25,145,145,1,85,99,145,0,82,145,76,0,25,145,145,1,85,76,145,0,82,145,97,0,25,145,145,1,85,97,145,0,119,0,26,0,82,145,85,0,82,149,95,0,46,145,145,149,156,5,0,0,82,145,76,0,82,149,82,0,1,148,255,255,95,145,149,148,82,148,76,0,82,149,82,0,25,149,149,1,1,145,255,255,95,148,149,145,82,145,99,0,82,149,82,0,3,145,145,149,85,99,145,0,82,145,76,0,82,149,96,0,3,145,145,149,85,76,145,0,82,145,97,0,82,149,96,0,3,145,145,149,85,97,145,0,82,145,80,0,34,145,145,8,121,145,3,0,1,108,42,0,119,0,136,1,82,145,85,0,82,149,95,0,45,145,145,149,248,5,0,0,1,108,42,0,119,0,130,1,82,145,85,0,25,145,145,1,82,149,95,0,46,145,145,149,20,6,0,0,1,108,64,0,119,0,41,2,82,145,81,0,1,149,0,0,1,146,7,0,138,145,149,146,68,6,0,0,232,6,0,0,156,7,0,0,76,8,0,0,16,9,0,0,244,9,0,0,172,10,0,0,119,0,82,1,82,149,106,0,26,149,149,1,85,83,149,0,82,149,83,0,35,149,149,1,120,149,76,1,1,149,0,0,85,89,149,0,82,149,82,0,82,148,89,0,56,149,149,148,152,6,0,0,82,118,89,0,82,149,76,0,82,148,99,0,90,148,148,118,95,149,118,148,82,148,89,0,25,148,148,1,85,89,148,0,119,0,244,255,82,148,83,0,26,148,148,1,85,83,148,0,82,148,76,0,82,149,82,0,1,150,255,255,95,148,149,150,82,150,99,0,82,149,82,0,3,150,150,149,85,99,150,0,82,150,76,0,82,149,96,0,3,150,150,149,85,76,150,0,82,150,97,0,82,149,96,0,3,150,150,149,85,97,150,0,119,0,219,255,82,150,106,0,26,150,150,1,85,83,150,0,82,150,83,0,35,150,150,1,120,150,35,1,1,150,0,0,85,89,150,0,82,150,82,0,82,149,89,0,56,150,150,149,76,7,0,0,82,119,89,0,82,120,76,0,82,149,99,0,91,149,149,119,82,148,96,0,4,148,119,148,91,148,120,148,3,149,149,148,95,120,119,149,82,149,89,0,25,149,149,1,85,89,149,0,119,0,240,255,82,149,83,0,26,149,149,1,85,83,149,0,82,149,76,0,82,150,82,0,1,148,255,255,95,149,150,148,82,148,99,0,82,150,82,0,3,148,148,150,85,99,148,0,82,148,76,0,82,150,96,0,3,148,148,150,85,76,148,0,82,148,97,0,82,150,96,0,3,148,148,150,85,97,148,0,119,0,215,255,82,148,106,0,26,148,148,1,85,83,148,0,82,148,83,0,35,148,148,1,120,148,246,0,1,148,0,0,85,89,148,0,82,148,82,0,82,150,89,0,56,148,148,150,252,7,0,0,82,121,89,0,82,148,76,0,82,150,99,0,91,150,150,121,82,149,97,0,91,149,149,121,3,150,150,149,95,148,121,150,82,150,89,0,25,150,150,1,85,89,150,0,119,0,241,255,82,150,83,0,26,150,150,1,85,83,150,0,82,150,76,0,82,148,82,0,1,149,255,255,95,150,148,149,82,149,99,0,82,148,82,0,3,149,149,148,85,99,149,0,82,149,76,0,82,148,96,0,3,149,149,148,85,76,149,0,82,149,97,0,82,148,96,0,3,149,149,148,85,97,149,0,119,0,216,255,82,149,106,0,26,149,149,1,85,83,149,0,82,149,83,0,35,149,149,1,120,149,202,0,1,149,0,0,85,89,149,0,82,149,82,0,82,148,89,0,56,149,149,148,192,8,0,0,82,122,89,0,82,123,76,0,82,148,99,0,91,148,148,122,82,150,97,0,91,150,150,122,82,146,96,0,4,146,122,146,91,146,123,146,3,150,150,146,42,150,150,1,3,148,148,150,95,123,122,148,82,148,89,0,25,148,148,1,85,89,148,0,119,0,236,255,82,148,83,0,26,148,148,1,85,83,148,0,82,148,76,0,82,149,82,0,1,150,255,255,95,148,149,150,82,150,99,0,82,149,82,0,3,150,150,149,85,99,150,0,82,150,76,0,82,149,96,0,3,150,150,149,85,76,150,0,82,150,97,0,82,149,96,0,3,150,150,149,85,97,150,0,119,0,211,255,82,150,106,0,26,150,150,1,85,83,150,0,82,150,83,0,35,150,150,1,120,150,153,0,1,150,0,0,85,89,150,0,82,150,82,0,82,149,89,0,56,150,150,149,164,9,0,0,82,150,99,0,82,149,89,0,91,46,150,149,82,124,89,0,82,125,97,0,82,150,89,0,82,149,96,0,4,126,150,149,82,150,76,0,91,150,150,126,91,148,125,124,91,146,125,126,134,149,0,0,148,123,3,0,150,148,146,0,3,149,46,149,19,149,149,143,0,47,149,0,82,149,76,0,82,146,89,0,95,149,146,47,82,146,89,0,25,146,146,1,85,89,146,0,119,0,228,255,82,146,83,0,26,146,146,1,85,83,146,0,82,146,76,0,82,149,82,0,1,148,255,255,95,146,149,148,82,148,99,0,82,149,82,0,3,148,148,149,85,99,148,0,82,148,76,0,82,149,96,0,3,148,148,149,85,76,148,0,82,148,97,0,82,149,96,0,3,148,148,149,85,97,148,0,119,0,203,255,82,148,106,0,26,148,148,1,85,83,148,0,82,148,83,0,35,148,148,1,120,148,96,0,1,148,0,0,85,89,148,0,82,148,82,0,82,149,89,0,56,148,148,149,92,10,0,0,82,127,89,0,82,128,76,0,82,149,99,0,91,149,149,127,82,146,96,0,4,146,127,146,91,146,128,146,42,146,146,1,3,149,149,146,95,128,127,149,82,149,89,0,25,149,149,1,85,89,149,0,119,0,239,255,82,149,83,0,26,149,149,1,85,83,149,0,82,149,76,0,82,148,82,0,1,146,255,255,95,149,148,146,82,146,99,0,82,148,82,0,3,146,146,148,85,99,146,0,82,146,76,0,82,148,96,0,3,146,146,148,85,76,146,0,82,146,97,0,82,148,96,0,3,146,146,148,85,97,146,0,119,0,214,255,82,146,106,0,26,146,146,1,85,83,146,0,82,146,83,0,35,146,146,1,120,146,50,0,1,146,0,0,85,89,146,0,82,146,82,0,82,148,89,0,56,146,146,148,56,11,0,0,82,146,99,0,82,148,89,0,91,48,146,148,82,148,76,0,82,149,89,0,82,150,96,0,4,149,149,150,91,148,148,149,1,149,0,0,1,150,0,0,134,146,0,0,148,123,3,0,148,149,150,0,3,146,48,146,19,146,146,143,0,49,146,0,82,146,76,0,82,150,89,0,95,146,150,49,82,150,89,0,25,150,150,1,85,89,150,0,119,0,230,255,82,150,83,0,26,150,150,1,85,83,150,0,82,150,76,0,82,146,82,0,1,149,255,255,95,150,146,149,82,149,99,0,82,146,82,0,3,149,149,146,85,99,149,0,82,149,76,0,82,146,96,0,3,149,149,146,85,76,149,0,82,149,97,0,82,146,96,0,3,149,149,146,85,97,149,0,119,0,205,255,82,145,80,0,32,145,145,16,121,145,27,0,82,145,35,0,106,145,145,12,82,146,104,0,82,150,88,0,5,149,146,150,3,145,145,149,85,76,145,0,1,145,0,0,85,83,145,0,82,145,106,0,82,149,83,0,57,145,145,149,252,11,0,0,82,145,76,0,82,149,82,0,25,149,149,1,1,150,255,255,95,145,149,150,82,150,83,0,25,150,150,1,85,83,150,0,82,150,76,0,82,149,96,0,3,150,150,149,85,76,150,0,119,0,240,255,32,150,108,42,121,150,169,0,1,108,0,0,82,149,105,0,26,149,149,1,82,145,82,0,5,150,149,145,85,94,150,0,82,150,81,0,1,148,0,0,1,145,7,0,138,150,148,145,76,12,0,0,100,12,0,0,176,12,0,0,248,12,0,0,84,13,0,0,208,13,0,0,32,14,0,0,119,0,147,0,82,149,76,0,82,146,99,0,82,148,94,0,135,145,2,0,149,146,148,0,119,0,141,0,1,145,0,0,85,89,145,0,82,145,94,0,82,148,89,0,56,145,145,148,148,14,0,0,82,129,89,0,82,130,76,0,82,148,99,0,91,148,148,129,82,146,82,0,4,146,129,146,91,146,130,146,3,148,148,146,95,130,129,148,82,148,89,0,25,148,148,1,85,89,148,0,119,0,240,255,1,148,0,0,85,89,148,0,82,148,94,0,82,145,89,0,56,148,148,145,148,14,0,0,82,131,89,0,82,148,76,0,82,145,99,0,91,145,145,131,82,146,97,0,91,146,146,131,3,145,145,146,95,148,131,145,82,145,89,0,25,145,145,1,85,89,145,0,119,0,241,255,1,145,0,0,85,89,145,0,82,145,94,0,82,148,89,0,56,145,145,148,148,14,0,0,82,132,89,0,82,133,76,0,82,148,99,0,91,148,148,132,82,146,97,0,91,146,146,132,82,149,82,0,4,149,132,149,91,149,133,149,3,146,146,149,42,146,146,1,3,148,148,146,95,133,132,148,82,148,89,0,25,148,148,1,85,89,148,0,119,0,236,255,1,148,0,0,85,89,148,0,82,148,94,0,82,145,89,0,56,148,148,145,148,14,0,0,82,148,99,0,82,145,89,0,91,42,148,145,82,134,89,0,82,135,97,0,82,148,89,0,82,145,82,0,4,136,148,145,82,148,76,0,91,148,148,136,91,146,135,134,91,149,135,136,134,145,0,0,148,123,3,0,148,146,149,0,3,145,42,145,19,145,145,143,0,43,145,0,82,145,76,0,82,149,89,0,95,145,149,43,82,149,89,0,25,149,149,1,85,89,149,0,119,0,228,255,1,149,0,0,85,89,149,0,82,149,94,0,82,145,89,0,56,149,149,145,148,14,0,0,82,137,89,0,82,138,76,0,82,145,99,0,91,145,145,137,82,146,82,0,4,146,137,146,91,146,138,146,42,146,146,1,3,145,145,146,95,138,137,145,82,145,89,0,25,145,145,1,85,89,145,0,119,0,239,255,1,145,0,0,85,89,145,0,82,145,94,0,82,149,89,0,56,145,145,149,148,14,0,0,82,145,99,0,82,149,89,0,91,44,145,149,82,149,76,0,82,146,89,0,82,148,82,0,4,146,146,148,91,149,149,146,1,146,0,0,1,148,0,0,134,145,0,0,148,123,3,0,149,146,148,0,3,145,44,145,19,145,145,143,0,45,145,0,82,145,76,0,82,148,89,0,95,145,148,45,82,148,89,0,25,148,148,1,85,89,148,0,119,0,230,255,82,150,99,0,82,148,94,0,3,150,150,148,85,99,150,0,82,150,88,0,25,150,150,1,85,88,150,0,119,0,255,252,32,150,108,13,121,150,10,0,1,148,49,66,134,150,0,0,40,112,4,0,148,0,0,0,85,101,150,0,82,34,101,0,137,109,0,0,139,34,0,0,119,0,67,2,32,150,108,16,121,150,8,0,1,148,64,66,1,145,1,63,1,146,80,17,1,149,4,66,135,150,1,0,148,145,146,149,119,0,58,2,32,150,108,64,121,150,8,0,1,149,90,66,1,146,1,63,1,145,142,17,1,148,4,66,135,150,1,0,149,146,145,148,119,0,49,2,32,150,108,113,121,150,47,2,82,150,80,0,34,150,150,8,121,150,4,2,1,150,0,0,85,88,150,0,82,150,107,0,82,148,88,0,57,150,150,148,212,23,0,0,82,150,35,0,106,150,150,12,82,145,104,0,82,146,88,0,5,148,145,146,3,150,150,148,85,78,150,0,82,150,35,0,106,150,150,12,82,146,104,0,82,145,88,0,5,148,146,145,3,36,150,148,82,150,106,0,82,145,95,0,5,148,150,145,3,37,36,148,1,148,0,0,82,145,86,0,4,148,148,145,3,148,37,148,85,87,148,0,82,148,40,0,120,148,4,0,82,148,80,0,91,41,144,148,119,0,2,0,1,41,1,0,83,103,41,0,82,148,80,0,32,148,148,4,121,148,53,0,82,145,106,0,82,150,85,0,5,148,145,150,85,89,148,0,82,148,89,0,34,148,148,2,120,148,30,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,4,5,148,150,145,19,148,148,143,0,50,148,0,82,9,78,0,25,148,9,1,85,78,148,0,83,9,50,0,79,145,103,0,82,150,87,0,79,150,150,0,38,150,150,15,5,148,145,150,19,148,148,143,0,51,148,0,82,10,78,0,25,148,10,1,85,78,148,0,83,10,51,0,82,148,89,0,26,148,148,2,85,89,148,0,82,148,87,0,25,148,148,1,85,87,148,0,119,0,225,255,1,148,0,0,82,150,89,0,47,148,148,150,160,16,0,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,4,5,148,150,145,19,148,148,143,0,52,148,0,82,11,78,0,25,148,11,1,85,78,148,0,83,11,52,0,119,0,76,1,82,148,80,0,32,148,148,2,121,148,108,0,82,145,106,0,82,150,85,0,5,148,145,150,85,89,148,0,82,148,89,0,34,148,148,4,120,148,54,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,6,5,148,150,145,19,148,148,143,0,53,148,0,82,12,78,0,25,148,12,1,85,78,148,0,83,12,53,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,4,38,150,150,3,5,148,145,150,19,148,148,143,0,54,148,0,82,13,78,0,25,148,13,1,85,78,148,0,83,13,54,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,2,38,145,145,3,5,148,150,145,19,148,148,143,0,55,148,0,82,14,78,0,25,148,14,1,85,78,148,0,83,14,55,0,79,145,103,0,82,150,87,0,79,150,150,0,38,150,150,3,5,148,145,150,19,148,148,143,0,56,148,0,82,15,78,0,25,148,15,1,85,78,148,0,83,15,56,0,82,148,89,0,26,148,148,4,85,89,148,0,82,148,87,0,25,148,148,1,85,87,148,0,119,0,201,255,1,148,0,0,82,150,89,0,47,148,148,150,220,17,0,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,6,5,148,150,145,19,148,148,143,0,57,148,0,82,16,78,0,25,148,16,1,85,78,148,0,83,16,57,0,1,148,1,0,82,145,89,0,47,148,148,145,28,18,0,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,4,38,150,150,3,5,148,145,150,19,148,148,143,0,58,148,0,82,17,78,0,25,148,17,1,85,78,148,0,83,17,58,0,82,148,89,0,36,148,148,2,120,148,235,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,2,38,145,145,3,5,148,150,145,19,148,148,143,0,59,148,0,82,18,78,0,25,148,18,1,85,78,148,0,83,18,59,0,119,0,222,0,82,148,80,0,32,148,148,1,121,148,219,0,82,145,106,0,82,150,85,0,5,148,145,150,85,89,148,0,82,148,89,0,34,148,148,8,120,148,102,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,7,5,148,150,145,19,148,148,143,0,60,148,0,82,19,78,0,25,148,19,1,85,78,148,0,83,19,60,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,6,38,150,150,1,5,148,145,150,19,148,148,143,0,61,148,0,82,20,78,0,25,148,20,1,85,78,148,0,83,20,61,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,5,38,145,145,1,5,148,150,145,19,148,148,143,0,62,148,0,82,21,78,0,25,148,21,1,85,78,148,0,83,21,62,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,4,38,150,150,1,5,148,145,150,19,148,148,143,0,63,148,0,82,22,78,0,25,148,22,1,85,78,148,0,83,22,63,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,3,38,145,145,1,5,148,150,145,19,148,148,143,0,64,148,0,82,23,78,0,25,148,23,1,85,78,148,0,83,23,64,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,2,38,150,150,1,5,148,145,150,19,148,148,143,0,65,148,0,82,24,78,0,25,148,24,1,85,78,148,0,83,24,65,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,1,38,145,145,1,5,148,150,145,19,148,148,143,0,66,148,0,82,25,78,0,25,148,25,1,85,78,148,0,83,25,66,0,79,145,103,0,82,150,87,0,79,150,150,0,38,150,150,1,5,148,145,150,19,148,148,143,0,67,148,0,82,26,78,0,25,148,26,1,85,78,148,0,83,26,67,0,82,148,89,0,26,148,148,8,85,89,148,0,82,148,87,0,25,148,148,1,85,87,148,0,119,0,153,255,1,148,0,0,82,150,89,0,47,148,148,150,84,20,0,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,7,5,148,150,145,19,148,148,143,0,68,148,0,82,27,78,0,25,148,27,1,85,78,148,0,83,27,68,0,1,148,1,0,82,145,89,0,47,148,148,145,148,20,0,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,6,38,150,150,1,5,148,145,150,19,148,148,143,0,69,148,0,82,28,78,0,25,148,28,1,85,78,148,0,83,28,69,0,1,148,2,0,82,150,89,0,47,148,148,150,212,20,0,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,5,38,145,145,1,5,148,150,145,19,148,148,143,0,70,148,0,82,29,78,0,25,148,29,1,85,78,148,0,83,29,70,0,1,148,3,0,82,145,89,0,47,148,148,145,20,21,0,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,4,38,150,150,1,5,148,145,150,19,148,148,143,0,71,148,0,82,30,78,0,25,148,30,1,85,78,148,0,83,30,71,0,1,148,4,0,82,150,89,0,47,148,148,150,84,21,0,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,3,38,145,145,1,5,148,150,145,19,148,148,143,0,72,148,0,82,31,78,0,25,148,31,1,85,78,148,0,83,31,72,0,1,148,5,0,82,145,89,0,47,148,148,145,148,21,0,0,79,145,103,0,82,150,87,0,79,150,150,0,42,150,150,2,38,150,150,1,5,148,145,150,19,148,148,143,0,73,148,0,82,32,78,0,25,148,32,1,85,78,148,0,83,32,73,0,82,148,89,0,36,148,148,6,120,148,13,0,79,150,103,0,82,145,87,0,79,145,145,0,42,145,145,1,38,145,145,1,5,148,150,145,19,148,148,143,0,74,148,0,82,33,78,0,25,148,33,1,85,78,148,0,83,33,74,0,82,148,85,0,82,145,95,0,46,148,148,145,28,23,0,0,82,148,35,0,106,148,148,12,82,150,104,0,82,146,88,0,5,145,150,146,3,148,148,145,85,78,148,0,82,148,85,0,32,148,148,1,121,148,24,0,82,148,106,0,26,148,148,1,85,98,148,0,82,148,98,0,34,148,148,0,120,148,64,0,82,148,78,0,82,145,98,0,41,145,145,1,25,145,145,1,1,146,255,255,95,148,145,146,82,139,78,0,82,146,98,0,41,146,146,1,25,146,146,0,82,145,98,0,90,145,139,145,95,139,146,145,82,145,98,0,26,145,145,1,85,98,145,0,119,0,237,255,82,145,85,0,33,145,145,3,120,145,48,0,82,145,106,0,26,145,145,1,85,98,145,0,82,145,98,0,34,145,145,0,120,145,38,0,82,145,78,0,82,146,98,0,41,146,146,2,25,146,146,3,1,148,255,255,95,145,146,148,82,140,78,0,82,148,98,0,41,148,148,2,25,148,148,2,82,146,98,0,27,146,146,3,25,146,146,2,90,146,140,146,95,140,148,146,82,141,78,0,82,146,98,0,41,146,146,2,25,146,146,1,82,148,98,0,27,148,148,3,25,148,148,1,90,148,141,148,95,141,146,148,82,142,78,0,82,148,98,0,41,148,148,2,25,148,148,0,82,146,98,0,27,146,146,3,25,146,146,0,90,146,142,146,95,142,148,146,82,146,98,0,26,146,146,1,85,98,146,0,119,0,217,255,82,146,88,0,25,146,146,1,85,88,146,0,119,0,7,254,1,148,107,66,1,145,1,63,1,150,231,17,1,149,4,66,135,146,1,0,148,145,150,149,119,0,36,0,82,146,80,0,32,146,146,16,121,146,33,0,82,146,35,0,25,146,146,12,116,79,146,0,116,77,79,0,1,146,0,0,85,83,146,0,82,146,106,0,82,149,107,0,5,93,146,149,82,146,95,0,5,149,93,146,82,146,83,0,57,149,149,146,212,23,0,0,82,149,77,0,82,146,79,0,79,146,146,0,41,146,146,8,82,150,79,0,103,150,150,1,20,146,146,150,84,149,146,0,82,146,83,0,25,146,146,1,85,83,146,0,82,146,77,0,25,146,146,2,85,77,146,0,82,146,79,0,25,146,146,2,85,79,146,0,119,0,231,255,1,146,1,0,85,101,146,0,82,34,101,0,137,109,0,0,139,34,0,0,1,146,0,0,139,146,0,0,140,3,167,0,0,0,0,0,2,157,0,0,0,32,0,0,2,158,0,0,8,1,0,0,2,159,0,0,12,1,0,0,1,139,0,0,136,160,0,0,0,140,160,0,136,160,0,0,1,161,64,65,3,160,160,161,137,160,0,0,130,160,0,0,136,161,0,0,49,160,160,161,72,24,0,0,1,161,64,65,135,160,0,0,161,0,0,0,1,160,48,65,3,111,140,160,1,160,44,65,3,96,140,160,1,160,40,65,3,67,140,160,1,160,36,65,3,86,140,160,1,160,32,65,3,64,140,160,1,160,28,65,3,82,140,160,1,160,24,65,3,60,140,160,1,160,20,65,3,116,140,160,1,160,16,65,3,126,140,160,1,160,12,65,3,121,140,160,1,160,8,65,3,97,140,160,1,160,4,65,3,108,140,160,1,160,0,65,3,41,140,160,1,160,252,64,3,44,140,160,1,160,248,64,3,135,140,160,1,160,244,64,3,104,140,160,1,160,240,64,3,118,140,160,1,160,236,64,3,100,140,160,1,160,232,64,3,124,140,160,1,160,228,64,3,84,140,160,1,160,224,64,3,62,140,160,1,160,220,64,3,112,140,160,1,160,216,64,3,98,140,160,1,160,212,64,3,68,140,160,1,160,208,64,3,87,140,160,1,160,204,64,3,65,140,160,1,160,200,64,3,83,140,160,1,160,196,64,3,61,140,160,1,160,192,64,3,117,140,160,1,160,188,64,3,127,140,160,1,160,184,64,3,122,140,160,1,160,180,64,3,99,140,160,1,160,176,64,3,109,140,160,1,160,172,64,3,42,140,160,1,160,168,64,3,45,140,160,1,160,164,64,3,136,140,160,1,160,160,64,3,105,140,160,1,160,156,64,3,91,140,160,1,160,152,64,3,72,140,160,1,160,148,64,3,90,140,160,1,160,144,64,3,71,140,160,1,160,140,64,3,89,140,160,1,160,136,64,3,70,140,160,1,160,132,64,3,88,140,160,1,160,128,64,3,69,140,160,1,160,124,64,3,110,140,160,1,160,120,64,3,95,140,160,1,160,116,64,3,66,140,160,1,160,112,64,3,85,140,160,1,160,108,64,3,63,140,160,1,160,104,64,3,81,140,160,1,160,100,64,3,59,140,160,1,160,96,64,3,115,140,160,1,160,92,64,3,125,140,160,1,160,88,64,3,120,140,160,1,160,84,64,3,94,140,160,1,160,80,64,3,107,140,160,3,133,140,157,1,160,76,64,3,40,140,160,1,160,72,64,3,43,140,160,1,160,68,64,3,134,140,160,1,160,64,64,3,103,140,160,1,160,60,64,3,80,140,160,1,160,56,64,3,58,140,160,1,160,52,64,3,114,140,160,1,160,48,64,3,93,140,160,1,160,44,64,3,123,140,160,1,160,40,64,3,129,140,160,1,160,36,64,3,131,140,160,1,160,0,16,3,130,140,160,0,132,140,0,1,160,32,64,3,138,140,160,1,160,28,64,3,137,140,160,1,160,24,64,3,101,140,160,1,160,20,64,3,102,140,160,1,160,16,64,3,106,140,160,1,160,12,64,3,128,140,160,1,160,8,64,3,113,140,160,1,160,4,64,3,92,140,160,1,160,0,64,3,119,140,160,85,113,0,0,85,92,1,0,85,119,2,0,82,14,113,0,82,26,92,0,82,31,119,0,82,160,113,0,106,160,160,4,33,160,160,3,121,160,13,1,85,118,14,0,85,100,26,0,85,124,31,0,82,160,118,0,120,160,7,0,1,161,224,58,1,162,246,58,1,163,216,22,1,164,148,59,135,160,1,0,161,162,163,164,82,160,100,0,37,160,160,0,121,160,7,0,1,164,77,59,1,163,246,58,1,162,217,22,1,161,148,59,135,160,1,0,164,163,162,161,82,160,124,0,120,160,7,0,1,161,183,59,1,162,246,58,1,163,218,22,1,164,148,59,135,160,1,0,161,162,163,164,82,20,118,0,82,160,118,0,1,164,128,1,3,160,160,164,1,164,128,1,3,160,160,164,2,164,0,0,128,181,0,0,91,160,160,164,43,160,160,6,38,160,160,1,120,160,14,0,1,164,128,1,3,164,20,164,1,163,128,1,3,164,164,163,82,163,124,0,82,162,100,0,1,161,0,0,134,160,0,0,116,57,2,0,164,163,162,161,135,160,3,0,137,140,0,0,139,0,0,0,82,21,124,0,82,22,100,0,85,116,20,0,85,126,21,0,1,160,0,0,85,121,160,0,85,97,22,0,82,160,116,0,25,160,160,16,116,108,160,0,82,160,108,0,120,160,3,0,137,140,0,0,139,0,0,0,82,161,126,0,121,161,9,0,82,161,116,0,1,162,68,1,91,161,161,162,43,161,161,4,38,161,161,1,32,161,161,0,0,160,161,0,119,0,3,0,1,161,0,0,0,160,161,0,121,160,11,0,82,160,116,0,1,161,128,1,3,142,160,161,82,160,126,0,82,162,97,0,94,163,142,158,94,164,142,159,134,161,0,0,212,192,3,0,160,162,163,164,82,161,121,0,121,161,102,0,82,164,116,0,1,163,72,1,100,161,164,163,145,161,161,0,59,164,1,0,145,164,164,0,71,161,161,164,121,161,92,0,82,161,116,0,2,164,0,0,0,185,0,0,3,161,161,164,94,24,161,159,82,161,116,0,2,164,0,0,0,185,0,0,3,161,161,164,3,161,161,158,116,82,161,0,85,60,24,0,82,161,82,0,134,48,0,0,192,67,4,0,161,0,0,0,82,164,60,0,5,161,48,164,85,41,161,0,82,161,116,0,1,164,128,1,3,161,161,164,94,25,161,159,82,161,116,0,1,164,128,1,3,161,161,164,3,161,161,158,116,86,161,0,85,64,25,0,82,161,86,0,134,52,0,0,192,67,4,0,161,0,0,0,82,164,64,0,5,161,52,164,85,44,161,0,1,161,0,0,85,135,161,0,82,161,97,0,82,164,135,0,57,161,161,164,240,29,0,0,82,161,97,0,82,164,135,0,4,161,161,164,85,104,161,0,82,161,41,0,7,161,157,161,82,164,104,0,48,161,161,164,80,29,0,0,82,161,41,0,7,161,157,161,85,104,161,0,82,161,121,0,82,163,135,0,82,162,41,0,5,164,163,162,3,35,161,164,82,164,116,0,2,161,0,0,0,185,0,0,3,143,164,161,82,144,116,0,82,164,104,0,94,162,143,158,94,163,143,159,1,165,72,1,100,160,144,165,145,160,160,0,134,161,0,0,88,243,2,0,133,35,164,162,163,160,0,0,82,161,126,0,82,163,135,0,82,162,44,0,5,160,163,162,3,38,161,160,82,161,108,0,38,161,161,31,82,162,116,0,82,163,104,0,135,160,4,0,161,162,38,133,163,0,0,0,82,160,135,0,82,161,104,0,3,160,160,161,85,135,160,0,119,0,204,255,1,139,74,0,119,0,2,0,1,139,74,0,32,160,139,74,121,160,10,0,82,161,108,0,38,161,161,31,82,163,116,0,82,162,126,0,82,164,121,0,82,165,97,0,135,160,4,0,161,163,162,164,165,0,0,0,82,160,126,0,120,160,3,0,137,140,0,0,139,0,0,0,82,161,116,0,1,165,72,1,100,160,161,165,145,160,160,0,59,161,1,0,145,161,161,0,71,74,160,161,82,161,121,0,32,161,161,0,19,161,74,161,121,161,16,0,82,161,116,0,1,160,128,1,3,145,161,160,82,146,116,0,82,161,126,0,82,165,97,0,94,164,145,158,94,162,145,159,1,166,72,1,100,163,146,166,145,163,163,0,134,160,0,0,8,203,3,0,161,165,164,162,163,0,0,0,82,160,116,0,1,163,68,1,91,160,160,163,43,160,160,5,38,160,160,1,121,160,3,0,137,140,0,0,139,0,0,0,82,160,116,0,1,163,128,1,3,160,160,163,94,160,160,158,33,160,160,5,121,160,3,0,137,140,0,0,139,0,0,0,82,27,97,0,82,160,116,0,1,163,128,1,3,160,160,163,94,28,160,159,116,111,126,0,85,96,27,0,85,67,28,0,82,163,111,0,82,164,96,0,82,165,67,0,5,162,164,165,134,160,0,0,80,159,3,0,163,162,0,0,137,140,0,0,139,0,0,0,82,160,113,0,2,162,0,0,128,112,1,0,3,160,160,162,25,79,160,8,85,114,14,0,85,93,26,0,85,123,31,0,85,129,79,0,82,160,114,0,120,160,7,0,1,162,224,58,1,163,246,58,1,165,59,23,1,164,34,59,135,160,1,0,162,163,165,164,82,160,93,0,37,160,160,0,121,160,7,0,1,164,77,59,1,165,246,58,1,163,60,23,1,162,34,59,135,160,1,0,164,165,163,162,82,160,123,0,120,160,7,0,1,162,92,59,1,163,246,58,1,165,61,23,1,164,34,59,135,160,1,0,162,163,165,164,82,160,129,0,120,160,7,0,1,164,130,59,1,165,246,58,1,163,62,23,1,162,34,59,135,160,1,0,164,165,163,162,1,162,0,0,1,163,0,16,135,160,5,0,132,162,163,0,82,141,114,0,106,160,141,8,1,163,128,1,3,163,141,163,1,162,56,1,94,163,163,162,82,162,93,0,1,165,0,0,134,11,0,0,36,37,3,0,160,163,162,165,135,165,3,0,85,138,11,0,1,165,0,0,85,137,165,0,82,165,138,0,82,162,137,0,50,165,165,162,36,32,0,0,1,139,82,0,119,0,96,2,82,162,114,0,134,165,0,0,236,26,4,0,162,0,0,0,120,165,3,0,1,139,82,0,119,0,89,2,82,165,138,0,82,162,137,0,4,165,165,162,85,101,165,0,82,165,114,0,1,162,128,1,3,165,165,162,94,23,165,159,82,165,114,0,1,162,128,1,3,165,165,162,3,165,165,158,116,80,165,0,85,58,23,0,82,165,80,0,134,46,0,0,192,67,4,0,165,0,0,0,1,165,0,16,82,163,58,0,5,162,46,163,7,165,165,162,85,102,165,0,82,165,101,0,82,162,102,0,48,165,165,162,176,32,0,0,116,102,101,0,116,106,102,0,82,162,129,0,134,165,0,0,116,201,2,0,162,106,128,0,85,131,165,0,82,165,131,0,120,165,229,0,1,165,0,0,82,162,106,0,48,165,165,162,24,36,0,0,82,29,128,0,82,30,106,0,116,115,114,0,85,125,130,0,85,120,29,0,85,94,30,0,82,165,115,0,25,165,165,16,116,107,165,0,82,165,107,0,121,165,203,0,82,162,125,0,121,162,9,0,82,162,115,0,1,163,68,1,91,162,162,163,43,162,162,4,38,162,162,1,32,162,162,0,0,165,162,0,119,0,3,0,1,162,0,0,0,165,162,0,121,165,11,0,82,165,115,0,1,162,128,1,3,147,165,162,82,165,125,0,82,163,94,0,94,160,147,158,94,164,147,159,134,162,0,0,212,192,3,0,165,163,160,164,82,162,120,0,121,162,102,0,82,164,115,0,1,160,72,1,100,162,164,160,145,162,162,0,59,164,1,0,145,164,164,0,71,162,162,164,121,162,92,0,82,162,115,0,2,164,0,0,0,185,0,0,3,162,162,164,94,32,162,159,82,162,115,0,2,164,0,0,0,185,0,0,3,162,162,164,3,162,162,158,116,81,162,0,85,59,32,0,82,162,81,0,134,47,0,0,192,67,4,0,162,0,0,0,82,164,59,0,5,162,47,164,85,40,162,0,82,162,115,0,1,164,128,1,3,162,162,164,94,33,162,159,82,162,115,0,1,164,128,1,3,162,162,164,3,162,162,158,116,85,162,0,85,63,33,0,82,162,85,0,134,51,0,0,192,67,4,0,162,0,0,0,82,164,63,0,5,162,51,164,85,43,162,0,1,162,0,0,85,134,162,0,82,162,94,0,82,164,134,0,57,162,162,164,8,35,0,0,82,162,94,0,82,164,134,0,4,162,162,164,85,103,162,0,82,162,40,0,7,162,157,162,82,164,103,0,48,162,162,164,104,34,0,0,82,162,40,0,7,162,157,162,85,103,162,0,82,162,120,0,82,160,134,0,82,163,40,0,5,164,160,163,3,34,162,164,82,164,115,0,2,162,0,0,0,185,0,0,3,148,164,162,82,149,115,0,82,164,103,0,94,163,148,158,94,160,148,159,1,161,72,1,100,165,149,161,145,165,165,0,134,162,0,0,88,243,2,0,133,34,164,163,160,165,0,0,82,162,125,0,82,160,134,0,82,163,43,0,5,165,160,163,3,37,162,165,82,162,107,0,38,162,162,31,82,163,115,0,82,160,103,0,135,165,4,0,162,163,37,133,160,0,0,0,82,165,134,0,82,162,103,0,3,165,165,162,85,134,165,0,119,0,204,255,1,139,27,0,119,0,2,0,1,139,27,0,32,165,139,27,121,165,11,0,1,139,0,0,82,162,107,0,38,162,162,31,82,160,115,0,82,163,125,0,82,164,120,0,82,161,94,0,135,165,4,0,162,160,163,164,161,0,0,0,82,165,125,0,121,165,62,0,82,162,115,0,1,161,72,1,100,165,162,161,145,165,165,0,59,162,1,0,145,162,162,0,71,73,165,162,82,162,120,0,32,162,162,0,19,162,73,162,121,162,16,0,82,162,115,0,1,165,128,1,3,150,162,165,82,151,115,0,82,162,125,0,82,161,94,0,94,164,150,158,94,163,150,159,1,166,72,1,100,160,151,166,145,160,160,0,134,165,0,0,8,203,3,0,162,161,164,163,160,0,0,0,82,165,115,0,1,160,68,1,91,165,165,160,43,165,165,5,38,165,165,1,120,165,30,0,82,165,115,0,1,160,128,1,3,165,165,160,94,165,165,158,32,165,165,5,121,165,24,0,82,3,94,0,82,165,115,0,1,160,128,1,3,165,165,160,94,4,165,159,116,110,125,0,85,95,3,0,85,66,4,0,82,160,110,0,82,164,95,0,82,161,66,0,5,163,164,161,134,165,0,0,80,159,3,0,160,163,0,0,119,0,8,0,82,163,129,0,134,165,0,0,240,167,3,0,163,0,0,0,120,165,3,0,1,139,82,0,119,0,92,1,82,163,129,0,82,160,106,0,82,161,128,0,134,165,0,0,212,101,3,0,163,160,161,0,85,131,165,0,82,165,131,0,121,165,30,1,1,139,82,0,119,0,81,1,82,165,114,0,1,161,128,1,3,165,165,161,94,5,165,159,82,165,114,0,1,161,128,1,3,165,165,161,3,165,165,158,116,88,165,0,85,69,5,0,82,165,88,0,134,54,0,0,192,67,4,0,165,0,0,0,1,165,0,16,82,160,69,0,5,161,54,160,7,78,165,161,82,161,114,0,2,165,0,0,0,185,0,0,3,161,161,165,94,6,161,159,82,161,114,0,2,165,0,0,0,185,0,0,3,161,161,165,3,161,161,158,116,89,161,0,85,70,6,0,82,161,89,0,134,55,0,0,192,67,4,0,161,0,0,0,1,161,0,16,82,160,70,0,5,165,55,160,7,161,161,165,16,76,78,161,82,7,114,0,121,76,19,0,82,161,114,0,1,165,128,1,3,161,161,165,94,8,161,159,1,161,128,1,3,161,7,161,3,161,161,158,116,90,161,0,85,71,8,0,82,161,90,0,134,56,0,0,192,67,4,0,161,0,0,0,1,161,0,16,82,160,71,0,5,165,56,160,7,77,161,165,119,0,20,0,82,165,114,0,2,161,0,0,0,185,0,0,3,165,165,161,94,9,165,159,2,165,0,0,0,185,0,0,3,165,7,165,3,165,165,158,116,91,165,0,85,72,9,0,82,165,91,0,134,57,0,0,192,67,4,0,165,0,0,0,1,165,0,16,82,160,72,0,5,161,57,160,7,77,165,161,85,106,77,0,82,10,106,0,116,117,114,0,85,127,130,0,85,122,132,0,85,99,10,0,82,161,117,0,25,161,161,16,116,109,161,0,82,161,109,0,121,161,195,0,82,165,127,0,121,165,9,0,82,165,117,0,1,160,68,1,91,165,165,160,43,165,165,4,38,165,165,1,32,165,165,0,0,161,165,0,119,0,3,0,1,165,0,0,0,161,165,0,121,161,11,0,82,161,117,0,1,165,128,1,3,152,161,165,82,161,127,0,82,160,99,0,94,163,152,158,94,164,152,159,134,165,0,0,212,192,3,0,161,160,163,164,82,165,122,0,121,165,102,0,82,164,117,0,1,163,72,1,100,165,164,163,145,165,165,0,59,164,1,0,145,164,164,0,71,165,165,164,121,165,92,0,82,165,117,0,2,164,0,0,0,185,0,0,3,165,165,164,94,12,165,159,82,165,117,0,2,164,0,0,0,185,0,0,3,165,165,164,3,165,165,158,116,83,165,0,85,61,12,0,82,165,83,0,134,49,0,0,192,67,4,0,165,0,0,0,82,164,61,0,5,165,49,164,85,42,165,0,82,165,117,0,1,164,128,1,3,165,165,164,94,13,165,159,82,165,117,0,1,164,128,1,3,165,165,164,3,165,165,158,116,87,165,0,85,65,13,0,82,165,87,0,134,53,0,0,192,67,4,0,165,0,0,0,82,164,65,0,5,165,53,164,85,45,165,0,1,165,0,0,85,136,165,0,82,165,99,0,82,164,136,0,57,165,165,164,192,39,0,0,82,165,99,0,82,164,136,0,4,165,165,164,85,105,165,0,82,165,42,0,7,165,157,165,82,164,105,0,48,165,165,164,32,39,0,0,82,165,42,0,7,165,157,165,85,105,165,0,82,165,122,0,82,163,136,0,82,160,42,0,5,164,163,160,3,36,165,164,82,164,117,0,2,165,0,0,0,185,0,0,3,153,164,165,82,154,117,0,82,164,105,0,94,160,153,158,94,163,153,159,1,162,72,1,100,161,154,162,145,161,161,0,134,165,0,0,88,243,2,0,133,36,164,160,163,161,0,0,82,165,127,0,82,163,136,0,82,160,45,0,5,161,163,160,3,39,165,161,82,165,109,0,38,165,165,31,82,160,117,0,82,163,105,0,135,161,4,0,165,160,39,133,163,0,0,0,82,161,136,0,82,165,105,0,3,161,161,165,85,136,161,0,119,0,204,255,1,139,49,0,119,0,2,0,1,139,49,0,32,161,139,49,121,161,11,0,1,139,0,0,82,165,109,0,38,165,165,31,82,163,117,0,82,160,127,0,82,164,122,0,82,162,99,0,135,161,4,0,165,163,160,164,162,0,0,0,82,161,127,0,121,161,54,0,82,165,117,0,1,162,72,1], eb + 0);
  HEAPU8.set([100,161,165,162,145,161,161,0,59,165,1,0,145,165,165,0,71,75,161,165,82,165,122,0,32,165,165,0,19,165,75,165,121,165,16,0,82,165,117,0,1,161,128,1,3,155,165,161,82,156,117,0,82,165,127,0,82,162,99,0,94,164,155,158,94,160,155,159,1,166,72,1,100,163,156,166,145,163,163,0,134,161,0,0,8,203,3,0,165,162,164,160,163,0,0,0,82,161,117,0,1,163,68,1,91,161,161,163,43,161,161,5,38,161,161,1,120,161,22,0,82,161,117,0,1,163,128,1,3,161,161,163,94,161,161,158,32,161,161,5,121,161,16,0,82,15,99,0,82,161,117,0,1,163,128,1,3,161,161,163,94,16,161,159,116,112,127,0,85,98,15,0,85,68,16,0,82,163,112,0,82,164,98,0,82,162,68,0,5,160,164,162,134,161,0,0,80,159,3,0,163,160,0,0,82,161,114,0,1,160,128,1,3,161,161,160,2,160,0,0,64,183,0,0,82,163,106,0,97,161,160,163,82,163,114,0,1,160,128,1,3,163,163,160,2,160,0,0,68,183,0,0,97,163,160,130,82,163,114,0,1,161,128,1,3,163,163,161,1,161,128,1,3,163,163,161,82,161,123,0,82,162,106,0,1,164,0,0,134,160,0,0,116,57,2,0,163,161,162,164,135,160,3,0,82,160,137,0,82,164,106,0,3,160,160,164,85,137,160,0,82,17,123,0,82,18,106,0,82,160,114,0,1,164,128,1,3,160,160,164,1,164,52,1,94,19,160,164,82,160,114,0,1,164,128,1,3,160,160,164,1,164,48,1,3,160,160,164,116,84,160,0,85,62,19,0,82,160,84,0,134,50,0,0,192,67,4,0,160,0,0,0,82,162,62,0,5,164,50,162,5,160,18,164,3,160,17,160,85,123,160,0,119,0,156,253,32,160,139,82,121,160,3,0,137,140,0,0,139,0,0,0,139,0,0,0,140,1,131,0,0,0,0,0,2,124,0,0,210,0,0,0,2,125,0,0,130,0,0,0,2,126,0,0,136,0,0,0,1,121,0,0,136,127,0,0,0,122,127,0,136,127,0,0,25,127,127,63,38,127,127,192,137,127,0,0,0,123,127,0,136,127,0,0,25,127,127,16,137,127,0,0,130,127,0,0,136,128,0,0,49,127,127,128,28,42,0,0,1,128,16,0,135,127,0,0,128,0,0,0,0,50,123,0,25,112,123,8,25,113,123,4,85,112,0,0,35,127,0,212,121,127,8,0,1,128,160,33,1,129,96,34,134,127,0,0,128,45,4,0,128,129,112,50,82,118,127,0,119,0,70,3,29,55,0,210,5,110,55,124,4,127,0,110,85,113,127,0,0,109,55,0,0,111,110,0,1,114,0,0,1,129,96,34,1,128,32,35,134,127,0,0,128,45,4,0,129,128,113,50,1,128,96,34,4,127,127,128,42,127,127,2,0,120,127,0,1,127,96,34,41,128,120,2,94,127,127,128,3,43,127,111,1,108,5,0,1,127,47,0,50,127,127,108,184,42,0,0,1,121,6,0,119,0,16,0,1,127,160,33,41,128,108,2,94,1,127,128,7,99,43,1,48,127,99,1,216,42,0,0,1,121,107,0,119,0,26,3,5,127,99,1,45,127,43,127,236,42,0,0,0,117,114,0,119,0,3,0,25,108,108,1,119,0,237,255,32,127,121,6,121,127,6,3,1,121,0,0,1,105,211,0,0,115,114,0,7,66,43,105,48,127,66,105,36,43,0,0,1,51,1,0,0,106,105,0,0,116,43,0,119,0,227,2,5,127,66,105,45,127,43,127,64,43,0,0,1,51,9,0,0,106,105,0,0,116,115,0,119,0,220,2,25,20,105,10,7,77,43,20,48,127,77,20,96,43,0,0,1,51,1,0,0,106,20,0,0,116,43,0,119,0,212,2,5,127,77,20,45,127,43,127,124,43,0,0,1,51,9,0,0,106,20,0,0,116,115,0,119,0,205,2,25,31,105,12,7,88,43,31,48,127,88,31,156,43,0,0,1,51,1,0,0,106,31,0,0,116,43,0,119,0,197,2,5,127,88,31,45,127,43,127,184,43,0,0,1,51,9,0,0,106,31,0,0,116,115,0,119,0,190,2,25,42,105,16,7,98,43,42,48,127,98,42,216,43,0,0,1,51,1,0,0,106,42,0,0,116,43,0,119,0,182,2,5,127,98,42,45,127,43,127,244,43,0,0,1,51,9,0,0,106,42,0,0,116,115,0,119,0,175,2,25,44,105,18,7,100,43,44,48,127,100,44,20,44,0,0,1,51,1,0,0,106,44,0,0,116,43,0,119,0,167,2,5,127,100,44,45,127,43,127,48,44,0,0,1,51,9,0,0,106,44,0,0,116,115,0,119,0,160,2,25,45,105,22,7,101,43,45,48,127,101,45,80,44,0,0,1,51,1,0,0,106,45,0,0,116,43,0,119,0,152,2,5,127,101,45,45,127,43,127,108,44,0,0,1,51,9,0,0,106,45,0,0,116,115,0,119,0,145,2,25,46,105,28,7,102,43,46,48,127,102,46,140,44,0,0,1,51,1,0,0,106,46,0,0,116,43,0,119,0,137,2,5,127,102,46,45,127,43,127,168,44,0,0,1,51,9,0,0,106,46,0,0,116,115,0,119,0,130,2,25,47,105,30,7,103,43,47,48,127,103,47,200,44,0,0,1,51,1,0,0,106,47,0,0,116,43,0,119,0,122,2,5,127,103,47,45,127,43,127,228,44,0,0,1,51,9,0,0,106,47,0,0,116,115,0,119,0,115,2,25,48,105,36,7,104,43,48,48,127,104,48,4,45,0,0,1,51,1,0,0,106,48,0,0,116,43,0,119,0,107,2,5,127,104,48,45,127,43,127,32,45,0,0,1,51,9,0,0,106,48,0,0,116,115,0,119,0,100,2,25,49,105,40,7,56,43,49,48,127,56,49,64,45,0,0,1,51,1,0,0,106,49,0,0,116,43,0,119,0,92,2,5,127,56,49,45,127,43,127,92,45,0,0,1,51,9,0,0,106,49,0,0,116,115,0,119,0,85,2,25,2,105,42,7,57,43,2,48,127,57,2,124,45,0,0,1,51,1,0,0,106,2,0,0,116,43,0,119,0,77,2,5,127,57,2,45,127,43,127,152,45,0,0,1,51,9,0,0,106,2,0,0,116,115,0,119,0,70,2,25,3,105,46,7,58,43,3,48,127,58,3,184,45,0,0,1,51,1,0,0,106,3,0,0,116,43,0,119,0,62,2,5,127,58,3,45,127,43,127,212,45,0,0,1,51,9,0,0,106,3,0,0,116,115,0,119,0,55,2,25,4,105,52,7,59,43,4,48,127,59,4,244,45,0,0,1,51,1,0,0,106,4,0,0,116,43,0,119,0,47,2,5,127,59,4,45,127,43,127,16,46,0,0,1,51,9,0,0,106,4,0,0,116,115,0,119,0,40,2,25,5,105,58,7,60,43,5,48,127,60,5,48,46,0,0,1,51,1,0,0,106,5,0,0,116,43,0,119,0,32,2,5,127,60,5,45,127,43,127,76,46,0,0,1,51,9,0,0,106,5,0,0,116,115,0,119,0,25,2,25,6,105,60,7,61,43,6,48,127,61,6,108,46,0,0,1,51,1,0,0,106,6,0,0,116,43,0,119,0,17,2,5,127,61,6,45,127,43,127,136,46,0,0,1,51,9,0,0,106,6,0,0,116,115,0,119,0,10,2,25,7,105,66,7,62,43,7,48,127,62,7,168,46,0,0,1,51,1,0,0,106,7,0,0,116,43,0,119,0,2,2,5,127,62,7,45,127,43,127,196,46,0,0,1,51,9,0,0,106,7,0,0,116,115,0,119,0,251,1,25,8,105,70,7,63,43,8,48,127,63,8,228,46,0,0,1,51,1,0,0,106,8,0,0,116,43,0,119,0,243,1,5,127,63,8,45,127,43,127,0,47,0,0,1,51,9,0,0,106,8,0,0,116,115,0,119,0,236,1,25,9,105,72,7,64,43,9,48,127,64,9,32,47,0,0,1,51,1,0,0,106,9,0,0,116,43,0,119,0,228,1,5,127,64,9,45,127,43,127,60,47,0,0,1,51,9,0,0,106,9,0,0,116,115,0,119,0,221,1,25,10,105,78,7,65,43,10,48,127,65,10,92,47,0,0,1,51,1,0,0,106,10,0,0,116,43,0,119,0,213,1,5,127,65,10,45,127,43,127,120,47,0,0,1,51,9,0,0,106,10,0,0,116,115,0,119,0,206,1,25,11,105,82,7,67,43,11,48,127,67,11,152,47,0,0,1,51,1,0,0,106,11,0,0,116,43,0,119,0,198,1,5,127,67,11,45,127,43,127,180,47,0,0,1,51,9,0,0,106,11,0,0,116,115,0,119,0,191,1,25,12,105,88,7,68,43,12,48,127,68,12,212,47,0,0,1,51,1,0,0,106,12,0,0,116,43,0,119,0,183,1,5,127,68,12,45,127,43,127,240,47,0,0,1,51,9,0,0,106,12,0,0,116,115,0,119,0,176,1,25,13,105,96,7,69,43,13,48,127,69,13,16,48,0,0,1,51,1,0,0,106,13,0,0,116,43,0,119,0,168,1,5,127,69,13,45,127,43,127,44,48,0,0,1,51,9,0,0,106,13,0,0,116,115,0,119,0,161,1,25,14,105,100,7,70,43,14,48,127,70,14,76,48,0,0,1,51,1,0,0,106,14,0,0,116,43,0,119,0,153,1,5,127,70,14,45,127,43,127,104,48,0,0,1,51,9,0,0,106,14,0,0,116,115,0,119,0,146,1,25,15,105,102,7,71,43,15,48,127,71,15,136,48,0,0,1,51,1,0,0,106,15,0,0,116,43,0,119,0,138,1,5,127,71,15,45,127,43,127,164,48,0,0,1,51,9,0,0,106,15,0,0,116,115,0,119,0,131,1,25,16,105,106,7,72,43,16,48,127,72,16,196,48,0,0,1,51,1,0,0,106,16,0,0,116,43,0,119,0,123,1,5,127,72,16,45,127,43,127,224,48,0,0,1,51,9,0,0,106,16,0,0,116,115,0,119,0,116,1,25,17,105,108,7,73,43,17,48,127,73,17,0,49,0,0,1,51,1,0,0,106,17,0,0,116,43,0,119,0,108,1,5,127,73,17,45,127,43,127,28,49,0,0,1,51,9,0,0,106,17,0,0,116,115,0,119,0,101,1,25,18,105,112,7,74,43,18,48,127,74,18,60,49,0,0,1,51,1,0,0,106,18,0,0,116,43,0,119,0,93,1,5,127,74,18,45,127,43,127,88,49,0,0,1,51,9,0,0,106,18,0,0,116,115,0,119,0,86,1,25,19,105,120,7,75,43,19,48,127,75,19,120,49,0,0,1,51,1,0,0,106,19,0,0,116,43,0,119,0,78,1,5,127,75,19,45,127,43,127,148,49,0,0,1,51,9,0,0,106,19,0,0,116,115,0,119,0,71,1,25,21,105,126,7,76,43,21,48,127,76,21,180,49,0,0,1,51,1,0,0,106,21,0,0,116,43,0,119,0,63,1,5,127,76,21,45,127,43,127,208,49,0,0,1,51,9,0,0,106,21,0,0,116,115,0,119,0,56,1,3,22,105,125,7,78,43,22,48,127,78,22,240,49,0,0,1,51,1,0,0,106,22,0,0,116,43,0,119,0,48,1,5,127,78,22,45,127,43,127,12,50,0,0,1,51,9,0,0,106,22,0,0,116,115,0,119,0,41,1,3,23,105,126,7,79,43,23,48,127,79,23,44,50,0,0,1,51,1,0,0,106,23,0,0,116,43,0,119,0,33,1,5,127,79,23,45,127,43,127,72,50,0,0,1,51,9,0,0,106,23,0,0,116,115,0,119,0,26,1,1,127,138,0,3,24,105,127,7,80,43,24,48,127,80,24,108,50,0,0,1,51,1,0,0,106,24,0,0,116,43,0,119,0,17,1,5,127,80,24,45,127,43,127,136,50,0,0,1,51,9,0,0,106,24,0,0,116,115,0,119,0,10,1,1,127,142,0,3,25,105,127,7,81,43,25,48,127,81,25,172,50,0,0,1,51,1,0,0,106,25,0,0,116,43,0,119,0,1,1,5,127,81,25,45,127,43,127,200,50,0,0,1,51,9,0,0,106,25,0,0,116,115,0,119,0,250,0,1,127,148,0,3,26,105,127,7,82,43,26,48,127,82,26,236,50,0,0,1,51,1,0,0,106,26,0,0,116,43,0,119,0,241,0,5,127,82,26,45,127,43,127,8,51,0,0,1,51,9,0,0,106,26,0,0,116,115,0,119,0,234,0,1,127,150,0,3,27,105,127,7,83,43,27,48,127,83,27,44,51,0,0,1,51,1,0,0,106,27,0,0,116,43,0,119,0,225,0,5,127,83,27,45,127,43,127,72,51,0,0,1,51,9,0,0,106,27,0,0,116,115,0,119,0,218,0,1,127,156,0,3,28,105,127,7,84,43,28,48,127,84,28,108,51,0,0,1,51,1,0,0,106,28,0,0,116,43,0,119,0,209,0,5,127,84,28,45,127,43,127,136,51,0,0,1,51,9,0,0,106,28,0,0,116,115,0,119,0,202,0,1,127,162,0,3,29,105,127,7,85,43,29,48,127,85,29,172,51,0,0,1,51,1,0,0,106,29,0,0,116,43,0,119,0,193,0,5,127,85,29,45,127,43,127,200,51,0,0,1,51,9,0,0,106,29,0,0,116,115,0,119,0,186,0,1,127,166,0,3,30,105,127,7,86,43,30,48,127,86,30,236,51,0,0,1,51,1,0,0,106,30,0,0,116,43,0,119,0,177,0,5,127,86,30,45,127,43,127,8,52,0,0,1,51,9,0,0,106,30,0,0,116,115,0,119,0,170,0,1,127,168,0,3,32,105,127,7,87,43,32,48,127,87,32,44,52,0,0,1,51,1,0,0,106,32,0,0,116,43,0,119,0,161,0,5,127,87,32,45,127,43,127,72,52,0,0,1,51,9,0,0,106,32,0,0,116,115,0,119,0,154,0,1,127,172,0,3,33,105,127,7,89,43,33,48,127,89,33,108,52,0,0,1,51,1,0,0,106,33,0,0,116,43,0,119,0,145,0,5,127,89,33,45,127,43,127,136,52,0,0,1,51,9,0,0,106,33,0,0,116,115,0,119,0,138,0,1,127,178,0,3,34,105,127,7,90,43,34,48,127,90,34,172,52,0,0,1,51,1,0,0,106,34,0,0,116,43,0,119,0,129,0,5,127,90,34,45,127,43,127,200,52,0,0,1,51,9,0,0,106,34,0,0,116,115,0,119,0,122,0,1,127,180,0,3,35,105,127,7,91,43,35,48,127,91,35,236,52,0,0,1,51,1,0,0,106,35,0,0,116,43,0,119,0,113,0,5,127,91,35,45,127,43,127,8,53,0,0,1,51,9,0,0,106,35,0,0,116,115,0,119,0,106,0,1,127,186,0,3,36,105,127,7,92,43,36,48,127,92,36,44,53,0,0,1,51,1,0,0,106,36,0,0,116,43,0,119,0,97,0,5,127,92,36,45,127,43,127,72,53,0,0,1,51,9,0,0,106,36,0,0,116,115,0,119,0,90,0,1,127,190,0,3,37,105,127,7,93,43,37,48,127,93,37,108,53,0,0,1,51,1,0,0,106,37,0,0,116,43,0,119,0,81,0,5,127,93,37,45,127,43,127,136,53,0,0,1,51,9,0,0,106,37,0,0,116,115,0,119,0,74,0,1,127,192,0,3,38,105,127,7,94,43,38,48,127,94,38,172,53,0,0,1,51,1,0,0,106,38,0,0,116,43,0,119,0,65,0,5,127,94,38,45,127,43,127,200,53,0,0,1,51,9,0,0,106,38,0,0,116,115,0,119,0,58,0,1,127,196,0,3,39,105,127,7,95,43,39,48,127,95,39,236,53,0,0,1,51,1,0,0,106,39,0,0,116,43,0,119,0,49,0,5,127,95,39,45,127,43,127,8,54,0,0,1,51,9,0,0,106,39,0,0,116,115,0,119,0,42,0,1,127,198,0,3,40,105,127,7,96,43,40,48,127,96,40,44,54,0,0,1,51,1,0,0,106,40,0,0,116,43,0,119,0,33,0,5,127,96,40,45,127,43,127,72,54,0,0,1,51,9,0,0,106,40,0,0,116,115,0,119,0,26,0,1,127,208,0,3,41,105,127,7,97,43,41,16,52,97,41,5,127,97,41,13,53,43,127,121,52,4,0,1,128,1,0,0,127,128,0,119,0,6,0,1,129,9,0,1,130,0,0,125,128,53,129,130,0,0,0,0,127,128,0,0,51,127,0,20,128,52,53,121,128,3,0,0,127,41,0,119,0,3,0,3,128,105,124,0,127,128,0,0,106,127,0,125,116,52,43,115,0,0,0,38,127,51,15,1,128,0,0,1,130,10,0,138,127,128,130,232,54,0,0,228,54,0,0,228,54,0,0,228,54,0,0,228,54,0,0,228,54,0,0,228,54,0,0,228,54,0,0,228,54,0,0,244,54,0,0,119,0,6,0,0,105,106,0,0,115,116,0,119,0,6,253,0,117,116,0,119,0,6,0,120,51,3,0,0,117,116,0,119,0,3,0,1,121,108,0,119,0,12,0,25,107,120,1,32,54,107,48,38,127,54,1,3,119,109,127,0,109,119,0,5,111,119,124,0,114,117,0,1,127,0,0,125,120,54,127,107,0,0,0,119,0,214,252,32,127,121,107,121,127,4,0,85,112,43,0,0,118,43,0,119,0,6,0,32,127,121,108,121,127,4,0,85,112,43,0,0,118,116,0,119,0,1,0,137,122,0,0,139,118,0,0,140,6,196,0,0,0,0,0,2,187,0,0,0,202,154,59,2,188,0,0,24,2,0,0,2,189,0,0,119,85,0,0,1,184,0,0,136,190,0,0,0,185,190,0,136,190,0,0,25,190,190,63,38,190,190,192,137,190,0,0,0,186,190,0,136,190,0,0,1,191,48,2,3,190,190,191,137,190,0,0,130,190,0,0,136,191,0,0,49,190,190,191,216,55,0,0,1,191,48,2,135,190,0,0,191,0,0,0,1,191,0,0,97,186,188,191,1,191,28,2,3,191,186,191,25,53,191,12,134,9,0,0,120,122,4,0,1,0,0,0,135,10,3,0,34,191,10,0,121,191,11,0,68,191,1,0,134,15,0,0,120,122,4,0,191,0,0,0,135,32,3,0,0,34,15,0,1,124,1,0,1,125,84,85,68,167,1,0,119,0,24,0,0,32,10,0,0,34,9,0,1,191,1,8,19,191,4,191,33,191,191,0,38,191,191,1,0,124,191,0,1,190,0,8,19,190,4,190,32,190,190,0,121,190,9,0,38,192,4,1,32,192,192,0,1,193,85,85,1,194,90,85,125,190,192,193,194,0,0,0,0,191,190,0,119,0,3,0,1,190,87,85,0,191,190,0,0,125,191,0,58,167,1,0,1,191,0,0,32,191,191,0,2,190,0,0,0,0,240,127,19,190,32,190,2,194,0,0,0,0,240,127,13,190,190,194,19,191,191,190,121,191,47,0,25,45,124,3,1,190,32,0,2,194,0,0,255,255,254,255,19,194,4,194,134,191,0,0,188,30,4,0,0,190,2,45,194,0,0,0,134,191,0,0,196,130,4,0,0,125,124,0,70,190,167,167,59,193,0,0,59,192,0,0,70,193,193,192,20,190,190,193,121,190,9,0,38,193,5,32,33,193,193,0,1,192,111,85,1,195,115,85,125,190,193,192,195,0,0,0,0,194,190,0,119,0,8,0,38,195,5,32,33,195,195,0,1,192,103,85,1,193,107,85,125,190,195,192,193,0,0,0,0,194,190,0,1,190,3,0,134,191,0,0,196,130,4,0,0,194,190,0,1,190,32,0,1,194,0,32,21,194,4,194,134,191,0,0,188,30,4,0,0,190,2,45,194,0,0,0,0,51,45,0,119,0,230,3,3,194,186,188,134,191,0,0,112,236,3,0,167,194,0,0,59,194,2,0,65,113,191,194,59,194,0,0,70,194,113,194,121,194,4,0,94,191,186,188,26,191,191,1,97,186,188,191,39,191,5,32,32,191,191,97,121,191,177,0,38,194,5,32,32,194,194,0,121,194,3,0,0,191,125,0,119,0,3,0,25,194,125,9,0,191,194,0,0,139,191,0,39,191,124,2,0,52,191,0,1,191,11,0,16,191,191,3,1,194,12,0,4,194,194,3,32,194,194,0,20,191,191,194,121,191,3,0,58,168,113,0,119,0,20,0,1,191,12,0,4,126,191,3,59,127,8,0,26,126,126,1,59,191,16,0,65,127,127,191,33,191,126,0,120,191,252,255,78,191,139,0,32,191,191,45,121,191,6,0,68,191,113,0,64,191,191,127,63,191,127,191,68,168,191,0,119,0,4,0,63,191,113,127,64,168,191,127,119,0,1,0,94,11,186,188,34,194,11,0,121,194,5,0,1,194,0,0,4,194,194,11,0,191,194,0,119,0,2,0,0,191,11,0,0,62,191,0,34,191,62,0,41,191,191,31,42,191,191,31,134,12,0,0,112,138,3,0,62,191,53,0,45,191,12,53,160,58,0,0,1,191,28,2,3,191,186,191,1,194,48,0,107,191,11,194,1,194,28,2,3,194,186,194,25,85,194,11,119,0,2,0,0,85,12,0,26,194,85,1,42,191,11,31,38,191,191,2,25,191,191,43,83,194,191,0,26,98,85,2,25,191,5,15,83,98,191,0,0,129,186,0,58,169,168,0,75,67,169,0,25,99,129,1,38,191,5,32,1,194,112,33,91,194,194,67,20,191,191,194,83,129,191,0,76,191,67,0,64,191,169,191,59,194,16,0,65,169,191,194,4,194,99,186,32,194,194,1,121,194,15,0,38,194,4,8,32,194,194,0,34,191,3,1,59,190,0,0,69,190,169,190,19,191,191,190,19,194,194,191,121,194,3,0,0,130,99,0,119,0,6,0,1,194,46,0,83,99,194,0,25,130,129,2,119,0,2,0,0,130,99,0,59,194,0,0,70,194,169,194,120,194,2,0,119,0,3,0,0,129,130,0,119,0,222,255,0,8,130,0,120,3,3,0,1,184,25,0,119,0,13,0,1,194,254,255,4,194,194,186,3,194,194,8,47,194,194,3,148,59,0,0,25,194,3,2,3,194,194,53,4,112,194,98,0,150,53,0,0,151,98,0,119,0,2,0,1,184,25,0,32,194,184,25,121,194,6,0,4,194,53,186,4,194,194,98,3,112,194,8,0,150,53,0,0,151,98,0,3,48,112,52,1,191,32,0,134,194,0,0,188,30,4,0,0,191,2,48,4,0,0,0,134,194,0,0,196,130,4,0,0,139,52,0,1,191,48,0,2,190,0,0,0,0,1,0,21,190,4,190,134,194,0,0,188,30,4,0,0,191,2,48,190,0,0,0,4,190,8,186,134,194,0,0,196,130,4,0,0,186,190,0,4,152,150,151,1,190,48,0,4,191,8,186,3,191,191,152,4,191,112,191,1,193,0,0,1,192,0,0,134,194,0,0,188,30,4,0,0,190,191,193,192,0,0,0,134,194,0,0,196,130,4,0,0,98,152,0,1,192,32,0,1,193,0,32,21,193,4,193,134,194,0,0,188,30,4,0,0,192,2,48,193,0,0,0,0,51,48,0,119,0,39,3,34,194,3,0,1,193,6,0,125,140,194,193,3,0,0,0,59,193,0,0,70,193,113,193,121,193,9,0,94,193,186,188,26,155,193,28,97,186,188,155,0,6,155,0,60,193,0,0,0,0,0,16,65,170,113,193,119,0,3,0,94,6,186,188,58,170,113,0,34,194,6,0,121,194,4,0,25,194,186,32,0,193,194,0,119,0,5,0,25,194,186,32,1,192,32,1,3,194,194,192,0,193,194,0,0,172,193,0,58,171,170,0,0,173,172,0,75,68,171,0,85,173,68,0,25,173,173,4,77,193,68,0,64,193,171,193,60,194,0,0,0,202,154,59,65,171,193,194,59,194,0,0,70,194,171,194,120,194,246,255,1,194,0,0,47,194,194,6,68,62,0,0,0,13,6,0,0,36,172,0,0,175,173,0,34,194,13,29,1,193,29,0,125,63,194,13,193,0,0,0,26,69,175,4,48,193,69,36,64,61,0,0,0,37,36,0,119,0,37,0,1,56,0,0,0,70,69,0,82,193,70,0,1,194,0,0,135,14,6,0,193,194,63,0,135,194,3,0,1,193,0,0,134,16,0,0,164,123,4,0,14,194,56,193,135,17,3,0,1,193,0,0,134,56,0,0,68,126,4,0,16,17,187,193,135,193,3,0,1,194,0,0,134,18,0,0,100,82,4,0,56,193,187,194,135,194,3,0,134,19,0,0,8,120,4,0,16,17,18,194,135,194,3,0,85,70,19,0,26,70,70,4,57,194,36,70,72,61,0,0,120,56,3,0,0,37,36,0,119,0,4,0,26,100,36,4,85,100,56,0,0,37,100,0,48,194,37,175,8,62,0,0,0,177,175,0,26,54,177,4,82,194,54,0,121,194,3,0,0,176,177,0,119,0,8,0,48,194,37,54,0,62,0,0,0,177,54,0,119,0,248,255,0,176,54,0,119,0,2,0,0,176,175,0,94,194,186,188,4,156,194,63,97,186,188,156,1,194,0,0,47,194,194,156,52,62,0,0,0,13,156,0,0,36,37,0,0,175,176,0,119,0,187,255,0,7,156,0,0,35,37,0,0,174,176,0,119,0,4,0,0,7,6,0,0,35,172,0,0,174,173,0,34,194,7,0,121,194,84,0,0,20,7,0,0,39,35,0,0,179,174,0,1,194,0,0,4,157,194,20,34,194,157,9,1,193,9,0,125,64,194,157,193,0,0,0,48,193,39,179,0,63,0,0,1,57,0,0,0,71,39,0,82,21,71,0,24,193,21,64,3,193,193,57,85,71,193,0,1,193,1,0,22,193,193,64,26,193,193,1,19,193,21,193,24,194,187,64,5,57,193,194,25,71,71,4,55,194,71,179,140,62,0,0,82,193,39,0,32,193,193,0,121,193,4,0,25,193,39,4,0,194,193,0,119,0,2,0,0,194,39,0,0,141,194,0,120,57,4,0,0,142,141,0,0,180,179,0,119,0,14,0,85,179,57,0,0,142,141,0,25,180,179,4,119,0,10,0,82,193,39,0,32,193,193,0,121,193,4,0,25,193,39,4,0,194,193,0,119,0,2,0,0,194,39,0,0,142,194,0,0,180,179,0,39,194,5,32,32,194,194,102,125,65,194,172,142,0,0,0,25,193,140,25,28,193,193,9,25,193,193,1,4,192,180,65,42,192,192,2,47,193,193,192,108,63,0,0,25,193,140,25,28,193,193,9,25,193,193,1,41,193,193,2,3,193,65,193,0,194,193,0,119,0,2,0,0,194,180,0,0,143,194,0,94,194,186,188,3,20,194,64,97,186,188,20,1,194,0,0,49,194,194,20,152,63,0,0,0,38,142,0,0,178,143,0,119,0,6,0,0,39,142,0,0,179,143,0,119,0,177,255,0,38,35,0,0,178,174,0,48,194,38,178,252,63,0,0,4,194,172,38,42,194,194,2,27,114,194,9,82,22,38,0,35,194,22,10,121,194,3,0,0,81,114,0,119,0,12,0,0,80,114,0,1,89,10,0,27,89,89,10,25,94,80,1,48,194,22,89,244,63,0,0,0,81,94,0,119,0,4,0,0,80,94,0,119,0,249,255,1,81,0,0,39,193,5,32,32,193,193,102,1,192,0,0,125,194,193,192,81,0,0,0,4,194,140,194,33,192,140,0,39,193,5,32,32,193,193,103,19,192,192,193,41,192,192,31,42,192,192,31,3,158,194,192,4,192,178,172,42,192,192,2,27,192,192,9,26,192,192,9,47,192,158,192,212,66,0,0,25,192,172,4,1,194,0,36,3,194,158,194,28,194,194,9,1,193,0,4,4,194,194,193,41,194,194,2,3,46,192,194,1,194,0,36,3,194,158,194,1,192,0,36,3,192,158,192,28,192,192,9,27,192,192,9,4,23,194,192,34,192,23,8,121,192,11,0,1,91,10,0,0,109,23,0,27,115,91,10,34,192,109,7,121,192,4,0,0,91,115,0,25,109,109,1,119,0,251,255,0,90,115,0,119,0,2,0,1,90,10,0,82,24,46,0,7,78,24,90,5,192,78,90,4,25,24,192,25,192,46,4,13,58,192,178,32,192,25,0,19,192,58,192,121,192,5,0,0,43,38,0,0,74,46,0,0,83,81,0,119,0,115,0,38,194,78,1,32,194,194,0,121,194,5,0,61,194,0,0,0,0,0,90,58,192,194,0,119,0,5,0,62,194,0,0,1,0,0,0,0,0,64,67,58,192,194,0,58,144,192,0,43,192,90,1,0,79,192,0,48,194,25,79,64,65,0,0,61,194,0,0,0,0,0,63,58,192,194,0,119,0,11,0,13,193,25,79,19,193,58,193,121,193,4,0,59,193,1,0,58,194,193,0,119,0,4,0,61,193,0,0,0,0,192,63,58,194,193,0,58,192,194,0,58,149,192,0,120,124,4,0,58,128,144,0,58,138,149,0,119,0,15,0,78,192,125,0,32,59,192,45,121,59,4,0,68,194,144,0,58,192,194,0,119,0,2,0,58,192,144,0,58,128,192,0,121,59,4,0,68,194,149,0,58,192,194,0,119,0,2,0,58,192,149,0,58,138,192,0,4,192,24,25,85,46,192,0,63,192,128,138,70,192,192,128,121,192,58,0,4,192,24,25,3,49,192,90,85,46,49,0,2,192,0,0,255,201,154,59,48,192,192,49,76,66,0,0,0,41,38,0,0,73,46,0,26,101,73,4,1,192,0,0,85,73,192,0,48,192,101,41,20,66,0,0,26,102,41,4,1,192,0,0,85,102,192,0,0,42,102,0,119,0,2,0,0,42,41,0,82,192,101,0,25,95,192,1,85,101,95,0,2,192,0,0,255,201,154,59,48,192,192,95,64,66,0,0,0,41,42,0,0,73,101,0,119,0,236,255,0,40,42,0,0,72,101,0,119,0,3,0,0,40,38,0,0,72,46,0,4,192,172,40,42,192,192,2,27,116,192,9,82,26,40,0,35,192,26,10,121,192,5,0,0,43,40,0,0,74,72,0,0,83,116,0,119,0,16,0,0,82,116,0,1,92,10,0,27,92,92,10,25,96,82,1,48,192,26,92,164,66,0,0,0,43,40,0,0,74,72,0,0,83,96,0,119,0,6,0,0,82,96,0,119,0,247,255,0,43,38,0,0,74,46,0,0,83,81,0,25,47,74,4,0,44,43,0,0,84,83,0,16,192,47,178,125,181,192,47,178,0,0,0,119,0,4,0,0,44,38,0,0,84,81,0,0,181,178,0,1,192,0,0,4,161,192,84,48,192,44,181,40,67,0,0,0,183,181,0,26,55,183,4,82,192,55,0,121,192,4,0,1,60,1,0,0,182,183,0,119,0,10,0,48,192,44,55,28,67,0,0,0,183,55,0,119,0,247,255,1,60,0,0,0,182,55,0,119,0,3,0,1,60,0,0,0,182,181,0,39,192,5,32,32,192,192,103,121,192,80,0,33,192,140,0,40,192,192,1,38,192,192,1,3,192,140,192,15,192,84,192,1,194,251,255,15,194,194,84,19,192,192,194,121,192,9,0,33,192,140,0,40,192,192,1,38,192,192,1,3,192,140,192,26,192,192,1,4,118,192,84,26,164,5,1,119,0,7,0,33,192,140,0,40,192,192,1,38,192,192,1,3,192,140,192,26,118,192,1,26,164,5,2,38,192,4,8,120,192,52,0,121,60,20,0,26,192,182,4,82,27,192,0,120,27,3,0,1,111,9,0,119,0,16,0,31,192,27,10,120,192,11,0,1,93,10,0,1,110,0,0,27,93,93,10,25,97,110,1,9,192,27,93,121,192,3,0,0,111,97,0,119,0,6,0,0,110,97,0,119,0,249,255,1,111,0,0,119,0,2,0,1,111,9,0,4,192,182,172,42,192,192,2,27,192,192,9,26,117,192,9,39,192,164,32,32,192,192,102,121,192,12,0,4,159,117,111,1,192,0,0,15,192,192,159,1,194,0,0,125,145,192,159,194,0,0,0,15,194,118,145,125,119,194,118,145,0,0,0,0,165,164,0,119,0,18,0,3,194,117,84,4,160,194,111,1,194,0,0,15,194,194,160,1,192,0,0,125,146,194,160,192,0,0,0,15,192,118,146,125,119,192,118,146,0,0,0,0,165,164,0,119,0,6,0,0,119,118,0,0,165,164,0,119,0,3,0,0,119,140,0,0,165,5,0,33,166,119,0,121,166,4,0,1,194,1,0,0,192,194,0,119,0,4,0,43,194,4,3,38,194,194,1,0,192,194,0,0,28,192,0,39,192,165,32,32,61,192,102,121,61,8,0,1,88,0,0,1,192,0,0,15,192,192,84,1,194,0,0,125,153,192,84,194,0,0,0,119,0,34,0,34,194,84,0,125,66,194,161,84,0,0,0,34,194,66,0,41,194,194,31,42,194,194,31,134,29,0,0,112,138,3,0,66,194,53,0,4,194,53,29,34,194,194,2,121,194,12,0,0,87,29,0,26,103,87,1,1,194,48,0,83,103,194,0,4,194,53,103,34,194,194,2,121,194,3,0,0,87,103,0,119,0,249,255,0,86,103,0,119,0,2,0,0,86,29,0,26,194,86,1,42,192,84,31,38,192,192,2,25,192,192,43,83,194,192,0,26,104,86,2,83,104,165,0,0,88,104,0,4,153,53,104,25,192,124,1,3,192,192,119,3,192,192,28,3,50,192,153,1,194,32,0,134,192,0,0,188,30,4,0,0,194,2,50,4,0,0,0,134,192,0,0,196,130,4,0,0,125,124,0,1,194,48,0,2,193,0,0,0,0,1,0,21,193,4,193,134,192,0,0,188,30,4,0,0,194,2,50,193,0,0,0,121,61,110,0,16,192,172,44,125,147,192,172,44,0,0,0,0,75,147,0,82,192,75,0,1,193,0,0,25,194,186,9,134,30,0,0,112,138,3,0,192,193,194,0,45,194,75,147,248,69,0,0,25,194,186,9,45,194,30,194,240,69,0,0,1,193,48,0,107,186,8,193,25,132,186,8,119,0,18,0,0,132,30,0,119,0,16,0,48,193,186,30,48,70,0,0,1,194,48,0,4,192,30,186,135,193,5,0,186,194,192,0,0,131,30,0,26,105,131,1,48,193,186,105,40,70,0,0,0,131,105,0,119,0,252,255,0,132,105,0,119,0,2,0,0,132,30,0,25,192,186,9,4,192,192,132,134,193,0,0,196,130,4,0,0,132,192,0,25,75,75,4,57,193,75,172,180,69,0,0,38,193,4,8,32,193,193,0,40,192,166,1,19,193,193,192,120,193,5,0,1,192,1,0,134,193,0,0,196,130,4,0,0,189,192,0,16,193,75,182,1,192,0,0,15,192,192,119,19,193,193,192,121,193,42,0,0,76,75,0,0,121,119,0,82,193,76,0,1,192,0,0,25,194,186,9,134,31,0,0,112,138,3,0,193,192,194,0,48,194,186,31,228,70,0,0,1,192,48,0,4,193,31,186,135,194,5,0,186,192,193,0,0,134,31,0,26,106,134,1,48,194,186,106,220,70,0,0,0,134,106,0,119,0,252,255,0,133,106,0,119,0,2,0,0,133,31,0,34,192,121,9,1,191,9,0,125,193,192,121,191,0,0,0,134,194,0,0,196,130,4,0,0,133,193,0,25,76,76,4,26,162,121,9,16,194,76,182,1,193,9,0,15,193,193,121,19,194,194,193,120,194,3,0,0,120,162,0,119,0,4,0,0,121,162,0,119,0,218,255,0,120,119,0,1,193,48,0,25,191,120,9,1,192,9,0,1,190,0,0,134,194,0,0,188,30,4,0,0,193,191,192,190,0,0,0,119,0,98,0,121,60,3,0,0,194,182,0,119,0,3,0,25,190,44,4,0,194,190,0,0,148,194,0,16,194,44,148,1,190,255,255,15,190,190,119,19,194,194,190,121,194,74,0,0,77,44,0,0,123,119,0,82,194,77,0,1,190,0,0,25,192,186,9,134,33,0,0,112,138,3,0,194,190,192,0,25,192,186,9,45,192,33,192,192,71,0,0,1,190,48,0,107,186,8,190,25,135,186,8,119,0,2,0,0,135,33,0,45,190,77,44,20,72,0,0,25,108,135,1,1,192,1,0,134,190,0,0,196,130,4,0,0,135,192,0,38,190,4,8,32,190,190,0,34,192,123,1,19,190,190,192,121,190,3,0,0,137,108,0,119,0,25,0,1,192,1,0,134,190,0,0,196,130,4,0,0,189,192,0,0,137,108,0,119,0,19,0,50,190,135,186,36,72,0,0,0,137,135,0,119,0,15,0,1,192,48,0,1,194,0,0,4,194,194,186,3,194,135,194,135,190,5,0,186,192,194,0,0,136,135,0,26,107,136,1,48,190,186,107,84,72,0,0,0,136,107,0,119,0,252,255,0,137,107,0,119,0,1,0,25,190,186,9,4,154,190,137,15,192,154,123,125,194,192,154,123,0,0,0,134,190,0,0,196,130,4,0,0,137,194,0,4,163,123,154,25,77,77,4,16,190,77,148,1,194,255,255,15,194,194,163,19,190,190,194,120,190,3,0,0,122,163,0,119,0,4,0,0,123,163,0,119,0,186,255,0,122,119,0,1,194,48,0,25,192,122,18,1,191,18,0,1,193,0,0,134,190,0,0,188,30,4,0,0,194,192,191,193,0,0,0,4,193,53,88,134,190,0,0,196,130,4,0,0,88,193,0,1,193,32,0,1,191,0,32,21,191,4,191,134,190,0,0,188,30,4,0,0,193,2,50,191,0,0,0,0,51,50,0,137,185,0,0,15,191,51,2,125,190,191,2,51,0,0,0,139,190,0,0,140,3,67,0,0,0,0,0,2,53,0,0,255,0,0,0,2,54,0,0,132,0,0,0,2,55,0,0,69,65,0,0,2,56,0,0,255,255,0,0,2,57,0,0,0,16,0,0,2,58,0,0,0,0,0,1,1,45,0,0,136,59,0,0,0,46,59,0,136,59,0,0,25,59,59,63,38,59,59,192,137,59,0,0,0,47,59,0,136,59,0,0,1,60,112,4,3,59,59,60,137,59,0,0,130,59,0,0,136,60,0,0,49,59,59,60,148,73,0,0,1,60,112,4,135,59,0,0,60,0,0,0,1,59,84,4,3,39,47,59,1,59,80,4,3,44,47,59,1,59,76,4,3,41,47,59,1,59,72,4,3,38,47,59,0,36,47,0,1,59,98,4,3,34,47,59,1,59,97,4,3,24,47,59,1,59,94,4,3,42,47,59,1,59,88,4,3,43,47,59,1,59,68,4,3,30,47,59,1,59,64,4,3,26,47,59,1,59,60,4,3,25,47,59,1,59,56,4,3,35,47,59,1,59,52,4,3,23,47,59,1,59,48,4,3,32,47,59,1,59,44,4,3,29,47,59,1,59,40,4,3,16,47,59,1,59,36,4,3,31,47,59,1,59,32,4,3,40,47,59,1,59,24,4,3,7,47,59,1,59,20,4,3,17,47,59,1,59,16,4,3,22,47,59,1,59,12,4,3,27,47,59,1,59,8,4,3,33,47,59,1,59,4,4,3,37,47,59,1,59,0,4,3,6,47,59,85,44,0,0,85,41,1,0,85,38,2,0,1,59,0,0,83,34,59,0,1,59,0,0,83,24,59,0,1,59,0,0,83,42,59,0,1,60,0,0,107,42,1,60,1,59,0,0,107,42,2,59,1,59,0,0,85,30,59,0,1,59,0,0,85,26,59,0,1,59,0,0,85,35,59,0,1,59,1,0,85,23,59,0,1,59,0,0,85,29,59,0,1,59,0,0,85,16,59,0,1,59,0,0,85,31,59,0,82,59,44,0,116,40,59,0,82,59,44,0,1,60,0,0,109,59,8,60,82,60,44,0,1,59,0,0,109,60,4,59,82,59,44,0,1,60,0,0,109,59,12,60,82,59,40,0,134,60,0,0,104,224,3,0,59,0,0,0,120,60,6,0,1,60,0,0,85,39,60,0,82,4,39,0,137,46,0,0,139,4,0,0,82,60,41,0,32,60,60,1,121,60,6,0,1,60,1,0,85,39,60,0,82,4,39,0,137,46,0,0,139,4,0,0,82,59,40,0,134,60,0,0,244,70,4,0,7,59,0,0,106,5,7,4,2,60,0,0,82,68,72,73,47,60,5,60,80,77,0,0,2,60,0,0,84,65,68,73,47,60,5,60,180,75,0,0,2,60,0,0,73,66,103,67,1,59,1,0,138,5,60,59,144,75,0,0,1,45,132,0,119,0,248,1,119,0,1,0,1,60,1,0,85,31,60,0,82,59,40,0,82,61,7,0,134,60,0,0,236,154,3,0,59,61,0,0,119,0,239,1,2,60,0,0,68,78,69,73,49,60,60,5,232,75,0,0,2,60,0,0,68,78,69,73,1,61,1,0,138,5,60,61,224,75,0,0,1,45,132,0,119,0,228,1,1,45,101,0,119,0,250,1,2,60,0,0,84,65,68,73,1,61,1,0,138,5,60,61,4,76,0,0,1,45,132,0,119,0,219,1,119,0,1,0,82,60,23,0,121,60,3,0,1,45,82,0,119,0,238,1,79,60,34,0,32,60,60,0,82,61,35,0,33,61,61,0,20,60,60,61,120,60,3,0,1,45,84,0,119,0,230,1,82,60,41,0,32,60,60,2,121,60,3,0,1,45,86,0,119,0,225,1,82,60,30,0,82,61,7,0,3,60,60,61,82,61,30,0,47,60,60,61,108,76,0,0,1,45,88,0,119,0,217,1,82,60,26,0,82,61,30,0,82,59,7,0,3,61,61,59,48,60,60,61,12,77,0,0,116,27,26,0,82,60,26,0,120,60,8,0,82,48,7,0,48,61,57,48,164,76,0,0,0,60,48,0,119,0,2,0,0,60,57,0,85,26,60,0,82,60,30,0,82,61,7,0,3,60,60,61,82,61,26,0,57,60,60,61,212,76,0,0,82,60,26,0,41,60,60,1,85,26,60,0,119,0,247,255,82,61,44,0,106,61,61,4,82,59,26,0,134,60,0,0,84,33,4,0,61,59,0,0,85,33,60,0,82,60,33,0,120,60,3,0,1,45,96,0,119,0,180,1,82,60,44,0,82,59,33,0,109,60,4,59,82,60,40,0,82,61,44,0,106,61,61,4,82,62,30,0,3,61,61,62,82,62,7,0,134,59,0,0,44,26,3,0,60,61,62,0,120,59,3,0,1,45,99,0,119,0,165,1,82,59,30,0,82,62,7,0,3,59,59,62,85,30,59,0,119,0,136,1,2,59,0,0,69,84,76,80,47,59,5,59,124,80,0,0,2,59,0,0,82,68,72,73,1,62,1,0,138,5,59,62,124,77,0,0,1,45,132,0,119,0,125,1,119,0,1,0,82,59,23,0,120,59,3,0,1,45,9,0,119,0,144,1,1,59,0,0,85,23,59,0,82,59,7,0,33,59,59,13,121,59,3,0,1,45,11,0,119,0,137,1,82,59,40,0,134,8,0,0,220,87,4,0,59,0,0,0,82,59,40,0,85,59,8,0,82,59,40,0,82,59,59,0,48,59,58,59,220,77,0,0,1,45,13,0,119,0,125,1,82,59,40,0,134,13,0,0,220,87,4,0,59,0,0,0,82,59,40,0,109,59,4,13,82,59,40,0,106,59,59,4,48,59,58,59,12,78,0,0,1,45,15,0,119,0,113,1,82,62,40,0,134,59,0,0,52,185,3,0,62,0,0,0,19,59,59,53,0,18,59,0,82,59,44,0,109,59,16,18,82,59,44,0,106,59,59,16,33,59,59,1,121,59,19,0,82,59,44,0,106,59,59,16,33,59,59,2,121,59,15,0,82,59,44,0,106,59,59,16,33,59,59,4,121,59,11,0,82,59,44,0,106,59,59,16,33,59,59,8,121,59,7,0,82,59,44,0,106,59,59,16,33,59,59,16,121,59,3,0,1,45,21,0,119,0,83,1,82,62,40,0,134,59,0,0,52,185,3,0,62,0,0,0,19,59,59,53,85,16,59,0,1,59,6,0,82,62,16,0,47,59,59,62,180,78,0,0,1,45,23,0,119,0,71,1,82,59,16,0,32,59,59,3,121,59,7,0,82,59,44,0,106,59,59,16,32,59,59,16,121,59,3,0,1,45,26,0,119,0,62,1,82,59,16,0,32,59,59,3,121,59,4,0,1,59,3,0,83,34,59,0,119,0,6,0,82,59,16,0,38,59,59,1,121,59,3,0,1,45,30,0,119,0,51,1,82,62,40,0,134,59,0,0,52,185,3,0,62,0,0,0,19,59,59,53,85,17,59,0,82,59,17,0,121,59,3,0,1,45,32,0,119,0,41,1,82,62,40,0,134,59,0,0,52,185,3,0,62,0,0,0,19,59,59,53,85,22,59,0,82,59,22,0,121,59,3,0,1,45,34,0,119,0,31,1,82,62,40,0,134,59,0,0,52,185,3,0,62,0,0,0,19,59,59,53,85,29,59,0,1,59,1,0,82,62,29,0,47,59,59,62,132,79,0,0,1,45,36,0,119,0,19,1,82,59,40,0,82,59,59,0,120,59,3,0,1,45,39,0,119,0,14,1,82,59,40,0,106,59,59,4,120,59,3,0,1,45,39,0,119,0,9,1,78,59,34,0,121,59,17,0,82,59,40,0,1,62,1,0,109,59,8,62,2,62,0,0,0,0,0,64,82,59,40,0,82,59,59,0,7,62,62,59,29,62,62,4,82,59,40,0,106,59,59,4,48,62,62,59,240,79,0,0,1,45,46,0,119,0,248,0,119,0,223,0,82,62,40,0,82,61,16,0,38,61,61,2], eb + 10240);
  HEAPU8.set([1,60,3,0,1,63,1,0,125,59,61,60,63,0,0,0,82,60,16,0,38,60,60,4,1,61,1,0,1,64,0,0,125,63,60,61,64,0,0,0,3,59,59,63,109,62,8,59,2,59,0,0,0,0,0,64,82,62,40,0,82,62,62,0,7,59,59,62,82,62,40,0,106,62,62,8,7,59,59,62,82,62,40,0,106,62,62,4,48,59,59,62,104,80,0,0,1,45,42,0,119,0,218,0,82,59,41,0,32,59,59,2,121,59,191,0,1,45,44,0,119,0,213,0,2,59,0,0,83,78,82,116,47,59,5,59,152,81,0,0,2,59,0,0,69,84,76,80,1,62,1,0,138,5,59,62,168,80,0,0,1,45,132,0,119,0,178,0,119,0,1,0,82,59,23,0,121,59,3,0,1,45,48,0,119,0,197,0,1,59,0,3,82,62,7,0,48,59,59,62,212,80,0,0,1,45,50,0,119,0,191,0,82,59,7,0,29,59,59,3,85,35,59,0,82,59,35,0,27,59,59,3,82,62,7,0,46,59,59,62,252,80,0,0,1,45,52,0,119,0,181,0,1,59,0,0,85,25,59,0,82,59,35,0,82,62,25,0,57,59,59,62,108,83,0,0,82,59,40,0,134,9,0,0,52,185,3,0,59,0,0,0,82,59,25,0,41,59,59,2,25,59,59,0,95,36,59,9,82,59,40,0,134,10,0,0,52,185,3,0,59,0,0,0,82,59,25,0,41,59,59,2,25,59,59,1,95,36,59,10,82,59,40,0,134,11,0,0,52,185,3,0,59,0,0,0,82,59,25,0,41,59,59,2,25,59,59,2,95,36,59,11,82,59,25,0,41,59,59,2,25,59,59,3,1,62,255,255,95,36,59,62,82,62,25,0,25,62,62,1,85,25,62,0,119,0,220,255,2,62,0,0,83,78,82,116,1,59,1,0,138,5,62,59,180,81,0,0,1,45,132,0,119,0,111,0,119,0,1,0,82,62,23,0,121,62,3,0,1,45,57,0,119,0,130,0,82,62,44,0,106,62,62,4,121,62,3,0,1,45,59,0,119,0,125,0,78,62,34,0,121,62,36,0,82,62,41,0,32,62,62,2,121,62,3,0,1,45,62,0,119,0,118,0,82,62,35,0,120,62,3,0,1,45,64,0,119,0,114,0,82,62,35,0,82,59,7,0,48,62,62,59,32,82,0,0,1,45,66,0,119,0,108,0,1,62,4,0,83,34,62,0,1,62,0,0,85,25,62,0,82,62,7,0,82,59,25,0,57,62,62,59,108,83,0,0,82,62,40,0,134,12,0,0,52,185,3,0,62,0,0,0,82,62,25,0,41,62,62,2,25,62,62,3,95,36,62,12,82,62,25,0,25,62,62,1,85,25,62,0,119,0,241,255,82,62,40,0,106,62,62,8,38,62,62,1,120,62,3,0,1,45,71,0,119,0,82,0,82,62,7,0,82,59,40,0,106,59,59,8,41,59,59,1,46,62,62,59,168,82,0,0,1,45,73,0,119,0,74,0,1,62,1,0,83,24,62,0,82,62,44,0,106,62,62,16,32,15,62,16,1,62,0,0,85,32,62,0,121,15,19,0,82,62,40,0,106,62,62,8,82,59,32,0,56,62,62,59,108,83,0,0,82,59,40,0,134,62,0,0,148,83,4,0,59,0,0,0,19,62,62,56,0,19,62,0,82,62,32,0,41,62,62,1,96,43,62,19,82,62,32,0,25,62,62,1,85,32,62,0,119,0,239,255,82,62,40,0,106,62,62,8,82,59,32,0,56,62,62,59,108,83,0,0,82,59,40,0,134,62,0,0,148,83,4,0,59,0,0,0,19,62,62,53,0,20,62,0,82,59,44,0,106,59,59,16,91,59,55,59,5,62,20,59,19,62,62,53,0,21,62,0,82,62,32,0,95,42,62,21,82,62,32,0,25,62,62,1,85,32,62,0,119,0,234,255,45,62,45,54,184,83,0,0,1,45,0,0,82,62,23,0,121,62,3,0,1,45,133,0,119,0,18,0,106,62,7,4,2,59,0,0,0,0,0,32,19,62,62,59,120,62,3,0,1,45,135,0,119,0,11,0,82,59,40,0,82,63,7,0,134,62,0,0,236,154,3,0,59,63,0,0,82,63,40,0,134,62,0,0,220,87,4,0,63,0,0,0,119,0,222,253,1,60,9,0,1,66,127,0,138,45,60,66,216,85,0,0,212,85,0,0,252,85,0,0,212,85,0,0,32,86,0,0,212,85,0,0,68,86,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,104,86,0,0,212,85,0,0,140,86,0,0,212,85,0,0,212,85,0,0,176,86,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,86,0,0,212,85,0,0,248,86,0,0,212,85,0,0,28,87,0,0,212,85,0,0,64,87,0,0,212,85,0,0,212,85,0,0,100,87,0,0,212,85,0,0,212,85,0,0,136,87,0,0,212,85,0,0,172,87,0,0,212,85,0,0,196,87,0,0,212,85,0,0,232,87,0,0,212,85,0,0,12,88,0,0,212,85,0,0,48,88,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,84,88,0,0,212,85,0,0,120,88,0,0,212,85,0,0,212,85,0,0,156,88,0,0,212,85,0,0,192,88,0,0,212,85,0,0,228,88,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,8,89,0,0,212,85,0,0,44,89,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,80,89,0,0,212,85,0,0,116,89,0,0,212,85,0,0,152,89,0,0,212,85,0,0,188,89,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,89,0,0,212,85,0,0,212,85,0,0,248,89,0,0,212,85,0,0,28,90,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,212,85,0,0,140,93,0,0,212,85,0,0,176,93,0,0,119,0,15,2,1,63,109,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,123,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,205,63,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,205,63,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,136,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,156,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,156,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,156,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,166,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,182,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,200,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,221,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,205,63,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,1,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,205,63,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,235,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,250,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,250,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,235,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,7,65,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,82,62,40,0,1,63,4,0,109,62,8,63,1,63,1,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,23,65,134,63,0,0,40,112,4,0,62,0,0,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,40,65,134,63,0,0,40,112,4,0,62,0,0,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,53,65,134,63,0,0,40,112,4,0,62,0,0,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,40,65,134,63,0,0,40,112,4,0,62,0,0,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,235,64,134,63,0,0,40,112,4,0,62,0,0,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,78,65,134,63,0,0,40,112,4,0,62,0,0,0,85,39,63,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,82,63,40,0,79,62,34,0,109,63,8,62,1,62,1,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,62,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,77,63,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,63,86,65,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,82,62,23,0,121,62,9,0,1,63,235,64,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,82,62,41,0,121,62,6,0,1,62,1,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,82,62,44,0,106,62,62,4,120,62,9,0,1,63,96,65,134,62,0,0,40,112,4,0,63,0,0,0,85,39,62,0,82,4,39,0,137,46,0,0,139,4,0,0,82,63,40,0,82,63,63,0,82,59,44,0,106,59,59,16,5,62,63,59,25,62,62,7,29,62,62,8,85,6,62,0,82,49,40,0,82,62,40,0,106,50,62,4,82,63,6,0,5,59,63,50,106,63,49,8,5,62,59,63,3,62,62,50,85,37,62,0,82,62,44,0,106,62,62,4,82,63,30,0,82,59,37,0,82,64,31,0,33,64,64,0,40,64,64,1,38,64,64,1,134,14,0,0,228,68,3,0,62,63,59,37,64,0,0,0,82,64,44,0,109,64,8,14,82,64,44,0,106,64,64,8,120,64,6,0,1,64,0,0,85,39,64,0,82,4,39,0,137,46,0,0,139,4,0,0,82,59,44,0,106,59,59,4,135,64,7,0,59,0,0,0,82,64,44,0,1,59,0,0,109,64,4,59,82,64,38,0,33,64,64,3,121,64,8,0,82,64,38,0,82,63,40,0,106,63,63,8,25,63,63,1,13,64,64,63,0,59,64,0,119,0,3,0,1,64,0,0,0,59,64,0,40,59,59,1,78,64,34,0,33,64,64,0,20,59,59,64,121,59,9,0,79,59,24,0,121,59,3,0,1,45,111,0,119,0,6,0,82,51,40,0,106,64,51,8,109,51,12,64,119,0,2,0,1,45,111,0,32,64,45,111,121,64,5,0,82,52,40,0,106,59,52,8,25,59,59,1,109,52,12,59,82,64,44,0,82,63,44,0,106,63,63,8,82,62,37,0,82,61,40,0,106,61,61,12,82,60,44,0,106,60,60,16,82,65,16,0,82,66,29,0,134,59,0,0,16,211,1,0,64,63,62,61,60,65,66,0,120,59,6,0,1,59,0,0,85,39,59,0,82,4,39,0,137,46,0,0,139,4,0,0,78,59,24,0,121,59,29,0,82,3,44,0,82,59,44,0,106,59,59,16,32,59,59,16,121,59,13,0,82,66,40,0,106,66,66,12,134,59,0,0,168,54,3,0,3,43,66,0,120,59,18,0,1,59,0,0,85,39,59,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,12,0,82,66,40,0,106,66,66,12,134,59,0,0,128,56,3,0,3,42,66,0,120,59,6,0,1,59,0,0,85,39,59,0,82,4,39,0,137,46,0,0,139,4,0,0,82,59,31,0,33,59,59,0,1,66,0,0,33,66,66,0,19,59,59,66,121,59,10,0,1,59,2,0,82,66,40,0,106,66,66,12,47,59,59,66,200,92,0,0,82,66,44,0,134,59,0,0,40,190,2,0,66,0,0,0,78,59,34,0,121,59,28,0,82,59,40,0,79,66,34,0,109,59,8,66,82,66,40,0,79,59,34,0,109,66,12,59,1,59,3,0,82,66,38,0,49,59,59,66,4,93,0,0,82,59,40,0,82,66,38,0,109,59,12,66,82,59,44,0,82,65,35,0,82,60,40,0,106,60,60,12,134,66,0,0,60,173,2,0,59,36,65,60,120,66,14,0,1,66,0,0,85,39,66,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,8,0,78,66,24,0,121,66,6,0,82,66,40,0,25,28,66,8,82,66,28,0,25,66,66,1,85,28,66,0,82,60,44,0,106,60,60,8,135,66,7,0,60,0,0,0,82,66,44,0,1,60,0,0,109,66,8,60,1,60,1,0,85,39,60,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,66,235,64,134,60,0,0,40,112,4,0,66,0,0,0,85,39,60,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,60,160,15,106,66,7,4,43,66,66,24,83,60,66,0,1,66,161,15,106,60,7,4,43,60,60,16,83,66,60,0,1,60,162,15,106,66,7,4,43,66,66,8,83,60,66,0,1,66,163,15,106,60,7,4,83,66,60,0,1,66,160,15,134,60,0,0,40,112,4,0,66,0,0,0,85,39,60,0,82,4,39,0,137,46,0,0,139,4,0,0,119,0,1,0,1,60,0,0,139,60,0,0,140,3,111,0,0,0,0,0,2,97,0,0,0,32,0,0,2,98,0,0,8,1,0,0,2,99,0,0,12,1,0,0,2,100,0,0,0,185,0,0,2,101,0,0,72,1,0,0,2,102,0,0,128,1,0,0,2,103,0,0,68,1,0,0,1,85,0,0,136,104,0,0,0,86,104,0,136,104,0,0,1,105,208,48,3,104,104,105,137,104,0,0,130,104,0,0,136,105,0,0,49,104,104,105,144,94,0,0,1,105,208,48,135,104,0,0,105,0,0,0,1,104,196,48,3,66,86,104,1,104,192,48,3,55,86,104,1,104,188,48,3,40,86,104,1,104,184,48,3,50,86,104,1,104,180,48,3,38,86,104,1,104,176,48,3,48,86,104,1,104,172,48,3,36,86,104,1,104,168,48,3,71,86,104,1,104,164,48,3,79,86,104,1,104,160,48,3,75,86,104,1,104,156,48,3,57,86,104,1,104,152,48,3,64,86,104,1,104,148,48,3,25,86,104,1,104,144,48,3,27,86,104,1,104,140,48,3,84,86,104,1,104,136,48,3,62,86,104,1,104,132,48,3,46,86,104,1,104,128,48,3,34,86,104,1,104,124,48,3,65,86,104,1,104,120,48,3,54,86,104,1,104,116,48,3,39,86,104,1,104,112,48,3,49,86,104,1,104,108,48,3,37,86,104,1,104,104,48,3,47,86,104,1,104,100,48,3,35,86,104,1,104,96,48,3,69,86,104,1,104,92,48,3,78,86,104,1,104,88,48,3,74,86,104,1,104,84,48,3,53,86,104,1,104,80,48,3,63,86,104,1,104,0,16,3,82,86,104,1,104,76,48,3,24,86,104,1,104,72,48,3,26,86,104,1,104,68,48,3,83,86,104,1,104,64,48,3,61,86,104,1,104,60,48,3,70,86,104,1,104,56,48,3,56,86,104,1,104,52,48,3,73,86,104,0,41,86,0,1,104,48,48,3,42,86,104,1,104,44,48,3,58,86,104,1,104,40,48,3,68,86,104,1,104,36,48,3,52,86,104,1,104,32,48,3,77,86,104,1,104,28,48,3,80,86,104,1,104,24,48,3,81,86,104,1,104,20,48,3,59,86,104,1,104,16,48,3,60,86,104,1,104,12,48,3,76,86,104,1,104,8,48,3,67,86,104,1,104,4,48,3,51,86,104,1,104,0,48,3,72,86,104,85,67,0,0,85,51,1,0,85,72,2,0,82,10,67,0,82,14,51,0,82,15,72,0,82,104,67,0,106,104,104,4,32,104,104,3,121,104,137,0,82,104,67,0,2,105,0,0,128,112,1,0,3,104,104,105,25,45,104,8,85,68,10,0,85,52,14,0,85,77,15,0,85,80,45,0,82,104,68,0,120,104,7,0,1,105,224,58,1,106,246,58,1,107,8,23,1,108,139,60,135,104,1,0,105,106,107,108,82,104,52,0,37,104,104,0,121,104,7,0,1,108,77,59,1,107,246,58,1,106,9,23,1,105,139,60,135,104,1,0,108,107,106,105,82,104,77,0,120,104,7,0,1,105,92,59,1,106,246,58,1,107,10,23,1,108,139,60,135,104,1,0,105,106,107,108,82,104,80,0,120,104,7,0,1,108,130,59,1,107,246,58,1,106,11,23,1,105,139,60,135,104,1,0,108,107,106,105,82,104,68,0,3,104,104,100,2,105,0,0,64,183,0,0,82,106,52,0,97,104,105,106,82,106,68,0,3,106,106,100,2,105,0,0,68,183,0,0,82,104,77,0,97,106,105,104,1,104,0,1,85,60,104,0,82,105,80,0,134,104,0,0,192,196,2,0,105,60,76,0,85,81,104,0,82,104,81,0,121,104,3,0,1,85,12,0,119,0,44,0,82,104,60,0,120,104,13,0,82,104,80,0,134,33,0,0,240,167,3,0,104,0,0,0,82,105,80,0,134,104,0,0,244,152,3,0,105,0,0,0,45,104,33,104,144,97,0,0,1,85,64,0,119,0,30,0,82,104,68,0,3,104,104,100,3,104,104,102,82,105,76,0,82,106,60,0,1,107,0,0,134,13,0,0,116,57,2,0,104,105,106,107,135,107,3,0,85,59,13,0,82,106,80,0,82,105,59,0,82,104,76,0,134,107,0,0,108,88,3,0,106,105,104,0,85,81,107,0,82,107,81,0,121,107,3,0,1,85,16,0,119,0,8,0,82,107,59,0,82,104,60,0,48,107,107,104,0,98,0,0,1,85,64,0,119,0,2,0,119,0,203,255,32,107,85,12,121,107,11,0,82,104,68,0,1,105,1,0,1,106,181,60,82,108,81,0,134,107,0,0,12,232,3,0,104,105,106,108,137,86,0,0,139,0,0,0,119,0,17,0,32,107,85,16,121,107,11,0,82,108,68,0,1,106,1,0,1,105,236,60,82,104,81,0,134,107,0,0,12,232,3,0,108,106,105,104,137,86,0,0,139,0,0,0,119,0,5,0,32,107,85,64,121,107,3,0,137,86,0,0,139,0,0,0,85,70,10,0,85,56,14,0,85,73,15,0,82,107,70,0,120,107,7,0,1,104,224,58,1,105,246,58,1,106,230,22,1,108,32,61,135,107,1,0,104,105,106,108,82,107,56,0,37,107,107,0,121,107,7,0,1,108,77,59,1,106,246,58,1,105,231,22,1,104,32,61,135,107,1,0,108,106,105,104,82,107,73,0,120,107,7,0,1,104,65,61,1,105,246,58,1,106,232,22,1,108,32,61,135,107,1,0,104,105,106,108,82,107,70,0,3,107,107,100,3,107,107,102,2,108,0,0,128,181,0,0,91,107,107,108,43,107,107,6,38,107,107,1,121,107,198,0,82,16,73,0,82,17,56,0,116,69,70,0,1,107,0,0,85,78,107,0,85,74,16,0,85,53,17,0,82,107,69,0,25,107,107,16,116,63,107,0,82,107,63,0,120,107,3,0,137,86,0,0,139,0,0,0,82,108,78,0,121,108,8,0,82,108,69,0,91,108,108,103,43,108,108,4,38,108,108,1,32,108,108,0,0,107,108,0,119,0,3,0,1,108,0,0,0,107,108,0,121,107,10,0,82,107,69,0,3,87,107,102,82,108,78,0,82,106,53,0,94,105,87,98,94,104,87,99,134,107,0,0,212,192,3,0,108,106,105,104,82,107,74,0,121,107,92,0,82,104,69,0,100,107,104,101,145,107,107,0,59,104,1,0,145,104,104,0,71,107,107,104,121,107,83,0,82,107,69,0,3,107,107,100,94,18,107,99,82,107,69,0,3,107,107,100,3,107,107,98,116,47,107,0,85,35,18,0,82,107,47,0,134,29,0,0,192,67,4,0,107,0,0,0,82,104,35,0,5,107,29,104,85,24,107,0,82,107,69,0,3,107,107,102,94,19,107,99,82,107,69,0,3,107,107,102,3,107,107,98,116,49,107,0,85,37,19,0,82,107,49,0,134,31,0,0,192,67,4,0,107,0,0,0,82,104,37,0,5,107,31,104,85,26,107,0,1,107,0,0,85,83,107,0,82,107,53,0,82,104,83,0,57,107,107,104,12,101,0,0,82,107,53,0,82,104,83,0,4,107,107,104,85,61,107,0,82,107,24,0,7,107,97,107,82,104,61,0,48,107,107,104,120,100,0,0,82,107,24,0,7,107,97,107,85,61,107,0,82,107,74,0,82,105,83,0,82,106,24,0,5,104,105,106,3,20,107,104,82,104,69,0,3,88,104,100,82,89,69,0,82,107,61,0,94,106,88,98,94,105,88,99,100,108,89,101,145,108,108,0,134,104,0,0,88,243,2,0,82,20,107,106,105,108,0,0,82,104,78,0,82,105,83,0,82,106,26,0,5,108,105,106,3,22,104,108,82,104,63,0,38,104,104,31,82,106,69,0,82,105,61,0,135,108,4,0,104,106,22,82,105,0,0,0,82,108,83,0,82,104,61,0,3,108,108,104,85,83,108,0,119,0,207,255,1,85,36,0,119,0,2,0,1,85,36,0,32,108,85,36,121,108,10,0,82,104,63,0,38,104,104,31,82,105,69,0,82,106,78,0,82,107,74,0,82,109,53,0,135,108,4,0,104,105,106,107,109,0,0,0,82,108,78,0,120,108,3,0,137,86,0,0,139,0,0,0,82,104,69,0,100,108,104,101,145,108,108,0,59,104,1,0,145,104,104,0,71,43,108,104,82,104,74,0,32,104,104,0,19,104,43,104,121,104,14,0,82,104,69,0,3,90,104,102,82,91,69,0,82,108,78,0,82,109,53,0,94,107,90,98,94,106,90,99,100,105,91,101,145,105,105,0,134,104,0,0,8,203,3,0,108,109,107,106,105,0,0,0,82,104,69,0,91,104,104,103,43,104,104,5,38,104,104,1,121,104,3,0,137,86,0,0,139,0,0,0,82,104,69,0,3,104,104,102,94,104,104,98,33,104,104,5,121,104,3,0,137,86,0,0,139,0,0,0,82,3,53,0,82,104,69,0,3,104,104,102,94,4,104,99,116,65,78,0,85,54,3,0,85,39,4,0,82,105,65,0,82,107,54,0,82,109,39,0,5,106,107,109,134,104,0,0,80,159,3,0,105,106,0,0,137,86,0,0,139,0,0,0,82,104,70,0,3,104,104,100,2,106,0,0,64,183,0,0,82,105,56,0,97,104,106,105,82,105,70,0,3,105,105,100,2,106,0,0,68,183,0,0,82,104,73,0,97,105,106,104,82,104,70,0,3,104,104,100,94,5,104,99,82,104,70,0,3,104,104,100,3,104,104,98,116,46,104,0,85,34,5,0,82,104,46,0,134,28,0,0,192,67,4,0,104,0,0,0,1,104,0,16,82,105,34,0,5,106,28,105,7,104,104,106,85,42,104,0,82,104,70,0,3,104,104,100,3,104,104,102,82,106,42,0,1,105,0,0,134,6,0,0,116,57,2,0,104,41,106,105,135,105,3,0,85,58,6,0,82,105,58,0,120,105,3,0,1,85,64,0,119,0,195,0,82,7,58,0,116,71,70,0,1,105,0,0,85,79,105,0,85,75,41,0,85,57,7,0,82,105,71,0,25,105,105,16,116,64,105,0,82,105,64,0,121,105,177,0,82,106,79,0,121,106,8,0,82,106,71,0,91,106,106,103,43,106,106,4,38,106,106,1,32,106,106,0,0,105,106,0,119,0,3,0,1,106,0,0,0,105,106,0,121,105,10,0,82,105,71,0,3,92,105,102,82,106,79,0,82,104,57,0,94,109,92,98,94,107,92,99,134,105,0,0,212,192,3,0,106,104,109,107,82,105,75,0,121,105,92,0,82,107,71,0,100,105,107,101,145,105,105,0,59,107,1,0,145,107,107,0,71,105,105,107,121,105,83,0,82,105,71,0,3,105,105,100,94,8,105,99,82,105,71,0,3,105,105,100,3,105,105,98,116,48,105,0,85,36,8,0,82,105,48,0,134,30,0,0,192,67,4,0,105,0,0,0,82,107,36,0,5,105,30,107,85,25,105,0,82,105,71,0,3,105,105,102,94,9,105,99,82,105,71,0,3,105,105,102,3,105,105,98,116,50,105,0,85,38,9,0,82,105,50,0,134,32,0,0,192,67,4,0,105,0,0,0,82,107,38,0,5,105,32,107,85,27,105,0,1,105,0,0,85,84,105,0,82,105,57,0,82,107,84,0,57,105,105,107,192,104,0,0,82,105,57,0,82,107,84,0,4,105,105,107,85,62,105,0,82,105,25,0,7,105,97,105,82,107,62,0,48,105,105,107,44,104,0,0,82,105,25,0,7,105,97,105,85,62,105,0,82,105,75,0,82,109,84,0,82,104,25,0,5,107,109,104,3,21,105,107,82,107,71,0,3,93,107,100,82,94,71,0,82,105,62,0,94,104,93,98,94,109,93,99,100,106,94,101,145,106,106,0,134,107,0,0,88,243,2,0,82,21,105,104,109,106,0,0,82,107,79,0,82,109,84,0,82,104,27,0,5,106,109,104,3,23,107,106,82,107,64,0,38,107,107,31,82,104,71,0,82,109,62,0,135,106,4,0,107,104,23,82,109,0,0,0,82,106,84,0,82,107,62,0,3,106,106,107,85,84,106,0,119,0,207,255,1,85,55,0,119,0,2,0,1,85,55,0,32,106,85,55,121,106,11,0,1,85,0,0,82,107,64,0,38,107,107,31,82,109,71,0,82,104,79,0,82,105,75,0,82,108,57,0,135,106,4,0,107,109,104,105,108,0,0,0,82,106,79,0,121,106,48,0,82,107,71,0,100,106,107,101,145,106,106,0,59,107,1,0,145,107,107,0,71,44,106,107,82,107,75,0,32,107,107,0,19,107,44,107,121,107,14,0,82,107,71,0,3,95,107,102,82,96,71,0,82,106,79,0,82,108,57,0,94,105,95,98,94,104,95,99,100,109,96,101,145,109,109,0,134,107,0,0,8,203,3,0,106,108,105,104,109,0,0,0,82,107,71,0,91,107,107,103,43,107,107,5,38,107,107,1,120,107,20,0,82,107,71,0,3,107,107,102,94,107,107,98,32,107,107,5,121,107,15,0,82,11,57,0,82,107,71,0,3,107,107,102,94,12,107,99,116,66,79,0,85,55,11,0,85,40,12,0,82,109,66,0,82,105,55,0,82,108,40,0,5,104,105,108,134,107,0,0,80,159,3,0,109,104,0,0,82,107,58,0,82,104,42,0,48,107,107,104,204,105,0,0,1,85,64,0,119,0,2,0,119,0,49,255,32,107,85,64,121,107,3,0,137,86,0,0,139,0,0,0,139,0,0,0,140,2,106,0,0,0,0,0,136,98,0,0,0,96,98,0,136,98,0,0,25,98,98,63,38,98,98,192,137,98,0,0,0,97,98,0,136,98,0,0,1,99,192,0,3,98,98,99,137,98,0,0,130,98,0,0,136,99,0,0,49,98,98,99,52,106,0,0,1,99,192,0,135,98,0,0,99,0,0,0,1,98,184,0,3,91,97,98,1,98,180,0,3,75,97,98,1,98,176,0,3,95,97,98,1,98,172,0,3,63,97,98,1,98,168,0,3,80,97,98,1,98,164,0,3,94,97,98,1,98,160,0,3,93,97,98,1,98,156,0,3,40,97,98,1,98,152,0,3,27,97,98,1,98,148,0,3,92,97,98,1,98,144,0,3,54,97,98,1,98,140,0,3,83,97,98,1,98,136,0,3,78,97,98,1,98,132,0,3,57,97,98,1,98,128,0,3,56,97,98,25,53,97,124,25,46,97,120,25,55,97,116,25,81,97,112,25,82,97,108,25,89,97,104,25,90,97,100,25,76,97,96,25,77,97,92,25,79,97,88,25,47,97,84,25,48,97,80,25,84,97,76,25,41,97,72,25,58,97,68,25,51,97,64,25,87,97,60,25,44,97,56,25,61,97,52,25,52,97,48,25,88,97,44,25,45,97,40,25,62,97,36,25,49,97,32,25,85,97,28,25,42,97,24,25,59,97,20,25,50,97,16,25,86,97,12,25,43,97,8,25,60,97,4,0,39,97,0,85,91,0,0,85,75,1,0,82,98,91,0,25,98,98,20,116,80,98,0,82,98,91,0,25,98,98,108,116,94,98,0,82,98,91,0,25,98,98,112,116,93,98,0,82,98,91,0,25,98,98,64,116,40,98,0,82,98,91,0,25,98,98,68,116,27,98,0,82,98,91,0,25,98,98,76,116,92,98,0,82,98,91,0,25,98,98,96,116,54,98,0,82,98,91,0,1,99,164,0,3,98,98,99,116,83,98,0,82,98,91,0,25,98,98,16,116,78,98,0,82,98,91,0,1,99,184,0,3,98,98,99,116,57,98,0,82,98,92,0,41,98,98,1,82,99,54,0,3,98,98,99,85,56,98,0,82,98,91,0,1,99,132,0,3,98,98,99,116,53,98,0,116,55,75,0,82,98,91,0,1,99,180,0,3,98,98,99,116,81,98,0,82,98,91,0,1,99,176,0,3,98,98,99,116,82,98,0,82,98,91,0,1,99,168,0,3,98,98,99,116,89,98,0,82,98,91,0,1,99,160,0,94,98,98,99,29,98,98,4,85,90,98,0,82,99,53,0,82,100,55,0,5,98,99,100,85,47,98,0,82,98,94,0,82,100,55,0,41,100,100,3,3,98,98,100,116,76,98,0,82,98,94,0,82,100,55,0,41,100,100,3,3,98,98,100,25,98,98,4,116,77,98,0,82,100,75,0,82,99,91,0,106,99,99,28,5,98,100,99,85,79,98,0,82,99,91,0,134,98,0,0,64,90,4,0,99,0,0,0,120,98,7,0,1,99,177,74,1,100,184,68,1,101,105,7,1,102,70,75,135,98,1,0,99,100,101,102,82,102,57,0,1,101,0,0,82,99,80,0,41,99,99,2,82,103,40,0,5,100,99,103,135,98,5,0,102,101,100,0,1,98,0,0,85,46,98,0,82,98,40,0,1,104,1,0,1,100,4,0,138,98,104,100,92,110,0,0,152,111,0,0,44,113,0,0,16,115,0,0,116,63,76,0,82,100,77,0,82,101,63,0,54,100,100,101,28,110,0,0,82,12,46,0,25,100,12,1,85,46,100,0,85,50,12,0,82,101,63,0,82,102,81,0,82,103,82,0,82,99,89,0,82,104,83,0,82,105,90,0,134,100,0,0,116,82,3,0,101,102,103,99,104,105,0,0,85,86,100,0,82,105,93,0,82,104,47,0,82,99,50,0,3,104,104,99,41,104,104,2,100,100,105,104,145,100,100,0,89,43,100,0,1,100,0,0,85,95,100,0,82,100,80,0,82,105,95,0,56,100,100,105,12,110,0,0,82,105,95,0,82,104,40,0,5,100,105,104,85,60,100,0,1,100,0,0,85,39,100,0,82,100,40,0,82,104,39,0,56,100,100,104,252,109,0,0,82,100,86,0,82,104,60,0,82,105,39,0,3,104,104,105,41,104,104,2,100,13,100,104,145,13,13,0,88,100,43,0,145,100,100,0,65,69,13,100,145,69,69,0,82,100,57,0,82,104,60,0,82,105,39,0,3,104,104,105,41,104,104,2,3,33,100,104,88,100,33,0,145,100,100,0,63,104,100,69,145,104,104,0,89,33,104,0,82,104,39,0,25,104,104,1,85,39,104,0,119,0,227,255,82,104,95,0,25,104,104,1,85,95,104,0,119,0,213,255,82,104,63,0,25,104,104,1,85,63,104,0,119,0,180,255,82,14,91,0,82,15,80,0,82,16,78,0,82,17,79,0,3,26,16,17,82,18,57,0,82,19,40,0,82,20,27,0,82,21,56,0,134,104,0,0,180,235,0,0,14,15,26,18,19,20,21,0,137,96,0,0,139,0,0,0,119,0,187,1,116,63,76,0,82,100,77,0,82,101,63,0,54,100,100,101,88,111,0,0,82,22,46,0,25,100,22,1,85,46,100,0,85,48,22,0,82,101,63,0,82,102,81,0,82,103,82,0,82,99,89,0,82,104,83,0,82,105,90,0,134,100,0,0,116,82,3,0,101,102,103,99,104,105,0,0,85,84,100,0,82,105,93,0,82,104,47,0,82,99,48,0,3,104,104,99,41,104,104,2,100,100,105,104,145,100,100,0,89,41,100,0,1,100,0,0,85,95,100,0,82,100,80,0,82,105,95,0,56,100,100,105,72,111,0,0,116,58,95,0,82,100,84,0,82,105,58,0,25,105,105,0,41,105,105,2,100,23,100,105,145,23,23,0,88,100,41,0,145,100,100,0,65,70,23,100,145,70,70,0,82,100,57,0,82,105,58,0,25,105,105,0,41,105,105,2,3,34,100,105,88,100,34,0,145,100,100,0,63,105,100,70,145,105,105,0,89,34,105,0,82,105,95,0,25,105,105,1,85,95,105,0,119,0,228,255,82,105,63,0,25,105,105,1,85,63,105,0,119,0,195,255,82,14,91,0,82,15,80,0,82,16,78,0,82,17,79,0,3,26,16,17,82,18,57,0,82,19,40,0,82,20,27,0,82,21,56,0,134,105,0,0,180,235,0,0,14,15,26,18,19,20,21,0,137,96,0,0,139,0,0,0,119,0,1,0,116,63,76,0,82,105,77,0,82,100,63,0,54,105,105,100,236,112,0,0,82,24,46,0,25,105,24,1,85,46,105,0,85,51,24,0,82,100,63,0,82,104,81,0,82,99,82,0,82,103,89,0,82,102,83,0,82,101,90,0,134,105,0,0,116,82,3,0,100,104,99,103,102,101,0,0,85,87,105,0,82,101,93,0,82,102,47,0,82,103,51,0,3,102,102,103,41,102,102,2,100,105,101,102,145,105,105,0,89,44,105,0,1,105,0,0,85,95,105,0,82,105,80,0,82,101,95,0,56,105,105,101,220,112,0,0,82,105,95,0,41,105,105,1,85,61,105,0,82,105,87,0,82,101,61,0,25,101,101,0,41,101,101,2,100,25,105,101,145,25,25,0,88,105,44,0,145,105,105,0,65,71,25,105,145,71,71,0,82,105,57,0,82,101,61,0,25,101,101,0,41,101,101,2,3,35,105,101,88,105,35,0,145,105,105,0,63,101,105,71,145,101,101,0,89,35,101,0,82,101,87,0,82,105,61,0,25,105,105,1,41,105,105,2,100,2,101,105,145,2,2,0,88,101,44,0,145,101,101,0,65,72,2,101,145,72,72,0,82,101,57,0,82,105,61,0,25,105,105,1,41,105,105,2,3,36,101,105,88,101,36,0,145,101,101,0,63,105,101,72,145,105,105,0,89,36,105,0,82,105,95,0,25,105,105,1,85,95,105,0,119,0,206,255,82,105,63,0,25,105,105,1,85,63,105,0,119,0,173,255,82,14,91,0,82,15,80,0,82,16,78,0,82,17,79,0,3,26,16,17,82,18,57,0,82,19,40,0,82,20,27,0,82,21,56,0,134,105,0,0,180,235,0,0,14,15,26,18,19,20,21,0,137,96,0,0,139,0,0,0,119,0,1,0,116,63,76,0,82,105,77,0,82,101,63,0,54,105,105,101,208,114,0,0,82,3,46,0,25,105,3,1,85,46,105,0,85,52,3,0,82,101,63,0,82,102,81,0,82,103,82,0,82,99,89,0,82,104,83,0,82,100,90,0,134,105,0,0,116,82,3,0,101,102,103,99,104,100,0,0,85,88,105,0,82,100,93,0,82,104,47,0,82,99,52,0,3,104,104,99,41,104,104,2,100,105,100,104,145,105,105,0,89,45,105,0,1,105,0,0,85,95,105,0,82,105,80,0,82,100,95,0,56,105,105,100,192,114,0,0,82,105,95,0,27,105,105,3,85,62,105,0,82,105,88,0,82,100,62,0,25,100,100,0,41,100,100,2,100,4,105,100,145,4,4,0,88,105,45,0,145,105,105,0,65,73,4,105,145,73,73,0,82,105,57,0,82,100,62,0,25,100,100,0,41,100,100,2,3,37,105,100,88,105,37,0,145,105,105,0,63,100,105,73,145,100,100,0,89,37,100,0,82,100,88,0,82,105,62,0,25,105,105,1,41,105,105,2,100,5,100,105,145,5,5,0,88,100,45,0,145,100,100,0,65,74,5,100,145,74,74,0,82,100,57,0,82,105,62,0,25,105,105,1,41,105,105,2,3,38,100,105,88,100,38,0,145,100,100,0,63,105,100,74,145,105,105,0,89,38,105,0,82,105,88,0,82,100,62,0,25,100,100,2,41,100,100,2,100,6,105,100,145,6,6,0,88,105,45,0,145,105,105,0,65,64,6,105,145,64,64,0,82,105,57,0,82,100,62,0,25,100,100,2,41,100,100,2,3,28,105,100,88,105,28,0,145,105,105,0,63,100,105,64,145,100,100,0,89,28,100,0,82,100,95,0,25,100,100,1,85,95,100,0,119,0,186,255,82,100,63,0,25,100,100,1,85,63,100,0,119,0,153,255,82,14,91,0,82,15,80,0,82,16,78,0,82,17,79,0,3,26,16,17,82,18,57,0,82,19,40,0,82,20,27,0,82,21,56,0,134,100,0,0,180,235,0,0,14,15,26,18,19,20,21,0,137,96,0,0,139,0,0,0,119,0,1,0,116,63,76,0,82,100,77,0,82,105,63,0,54,100,100,105,4,117,0,0,82,7,46,0,25,100,7,1,85,46,100,0,85,49,7,0,82,105,63,0,82,104,81,0,82,99,82,0,82,103,89,0,82,102,83,0,82,101,90,0,134,100,0,0,116,82,3,0,105,104,99,103,102,101,0,0,85,85,100,0,82,101,93,0,82,102,47,0,82,103,49,0,3,102,102,103,41,102,102,2,100,100,101,102,145,100,100,0,89,42,100,0,1,100,0,0,85,95,100,0,82,100,80,0,82,101,95,0,56,100,100,101,244,116,0,0,82,100,95,0,41,100,100,2,85,59,100,0,82,100,85,0,82,101,59,0,25,101,101,0,41,101,101,2,100,8,100,101,145,8,8,0,88,100,42,0,145,100,100,0,65,65,8,100,145,65,65,0,82,100,57,0,82,101,59,0,25,101,101,0,41,101,101,2,3,29,100,101,88,100,29,0,145,100,100,0,63,101,100,65,145,101,101,0,89,29,101,0,82,101,85,0,82,100,59,0,25,100,100,1,41,100,100,2,100,9,101,100,145,9,9,0,88,101,42,0,145,101,101,0,65,66,9,101,145,66,66,0,82,101,57,0,82,100,59,0,25,100,100,1,41,100,100,2,3,30,101,100,88,101,30,0,145,101,101,0,63,100,101,66,145,100,100,0,89,30,100,0,82,100,85,0,82,101,59,0,25,101,101,2,41,101,101,2,100,10,100,101,145,10,10,0,88,100,42,0,145,100,100,0,65,67,10,100,145,67,67,0,82,100,57,0,82,101,59,0,25,101,101,2,41,101,101,2,3,31,100,101,88,100,31,0,145,100,100,0,63,101,100,67,145,101,101,0,89,31,101,0,82,101,85,0,82,100,59,0,25,100,100,3,41,100,100,2,100,11,101,100,145,11,11,0,88,101,42,0,145,101,101,0,65,68,11,101,145,68,68,0,82,101,57,0,82,100,59,0,25,100,100,3,41,100,100,2,3,32,101,100,88,101,32,0,145,101,101,0,63,100,101,68,145,100,100,0,89,32,100,0,82,100,95,0,25,100,100,1,85,95,100,0,119,0,166,255,82,100,63,0,25,100,100,1,85,63,100,0,119,0,133,255,82,14,91,0,82,15,80,0,82,16,78,0,82,17,79,0,3,26,16,17,82,18,57,0,82,19,40,0,82,20,27,0,82,21,56,0,134,100,0,0,180,235,0,0,14,15,26,18,19,20,21,0,137,96,0,0,139,0,0,0,119,0,233,253,139,0,0,0,140,7,164,0,0,0,0,0,2,157,0,0,67,85,0,0,2,158,0,0,255,0,0,0,2,159,0,0,0,8,0,0,1,153,0,0,136,160,0,0,0,154,160,0,136,160,0,0,25,160,160,63,38,160,160,192,137,160,0,0,0,155,160,0,136,160,0,0,25,160,160,64,137,160,0,0,130,160,0,0,136,161,0,0,49,160,160,161,176,117,0,0,1,161,64,0,135,160,0,0,161,0,0,0,25,127,155,56,25,64,155,40,0,70,155,0,25,148,155,48,25,111,155,60,85,127,1,0,33,142,0,0,25,58,70,40,0,134,58,0,25,59,70,39,25,68,148,4,1,80,0,0,1,105,0,0,1,107,0,0,0,79,80,0,0,104,105,0,1,160,255,255,47,160,160,79,48,118,0,0,2,160,0,0,255,255,255,127,4,160,160,79,47,160,160,104,40,118,0,0,134,160,0,0,120,142,4,0,1,161,61,0,85,160,161,0,1,81,255,255,119,0,4,0,3,81,104,79,119,0,2,0,0,81,79,0,82,11,127,0,78,12,11,0,41,161,12,24,42,161,161,24,120,161,3,0,1,153,92,0,119,0,127,3,0,34,12,0,0,36,11,0,41,161,34,24,42,161,161,24,1,160,0,0,1,162,38,0,138,161,160,162,8,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,4,119,0,0,16,119,0,0,119,0,5,0,0,151,36,0,119,0,8,0,1,153,10,0,119,0,6,0,25,100,36,1,85,127,100,0,78,34,100,0,0,36,100,0,119,0,204,255,32,161,153,10,121,161,19,0,1,153,0,0,0,40,36,0,0,152,36,0,102,161,40,1,33,161,161,37,121,161,3,0,0,151,152,0,119,0,11,0,25,101,152,1,25,40,40,2,85,127,40,0,78,161,40,0,33,161,161,37,121,161,3,0,0,151,101,0,119,0,3,0,0,152,101,0,119,0,242,255,4,104,151,11,121,142,4,0,134,161,0,0,196,130,4,0,0,11,104,0,120,104,2,0,119,0,3,0,0,79,81,0,119,0,149,255,82,160,127,0,102,160,160,1,134,161,0,0,108,140,4,0,160,0,0,0,32,143,161,0,82,8,127,0,121,143,5,0,1,10,1,0,1,65,255,255,0,108,107,0,119,0,12,0,102,161,8,2,32,161,161,36,121,161,6,0,1,10,3,0,102,161,8,1,26,65,161,48,1,108,1,0,119,0,4,0,1,10,1,0,1,65,255,255,0,108,107,0,3,102,8,10], eb + 20480);
  HEAPU8.set([85,127,102,0,78,15,102,0,41,161,15,24,42,161,161,24,26,138,161,32,1,161,31,0,16,161,161,138,1,160,1,0,22,160,160,138,2,162,0,0,137,40,1,0,19,160,160,162,32,160,160,0,20,161,161,160,121,161,5,0,0,7,15,0,1,87,0,0,0,131,102,0,119,0,31,0,1,88,0,0,0,132,102,0,0,139,138,0,1,161,1,0,22,161,161,139,20,161,161,88,0,112,161,0,25,103,132,1,85,127,103,0,78,18,103,0,41,161,18,24,42,161,161,24,26,139,161,32,1,161,31,0,16,161,161,139,1,160,1,0,22,160,160,139,2,162,0,0,137,40,1,0,19,160,160,162,32,160,160,0,20,161,161,160,121,161,5,0,0,7,18,0,0,87,112,0,0,131,103,0,119,0,4,0,0,88,112,0,0,132,103,0,119,0,230,255,41,161,7,24,42,161,161,24,32,161,161,42,121,161,71,0,102,160,131,1,134,161,0,0,108,140,4,0,160,0,0,0,120,161,3,0,1,153,27,0,119,0,19,0,82,28,127,0,102,161,28,2,32,161,161,36,121,161,14,0,25,69,28,1,78,161,69,0,26,161,161,48,41,161,161,2,1,160,10,0,97,4,161,160,1,109,1,0,25,133,28,3,78,160,69,0,26,160,160,48,41,160,160,3,94,145,3,160,119,0,2,0,1,153,27,0,32,160,153,27,121,160,25,0,1,153,0,0,121,108,3,0,1,126,255,255,119,0,191,2,121,142,15,0,82,160,2,0,1,161,4,0,26,161,161,1,3,160,160,161,1,161,4,0,26,161,161,1,11,161,161,0,19,160,160,161,0,35,160,0,82,37,35,0,25,160,35,4,85,2,160,0,0,82,37,0,119,0,2,0,1,82,0,0,1,109,0,0,82,160,127,0,25,133,160,1,0,145,82,0,85,127,133,0,34,78,145,0,0,38,133,0,121,78,5,0,1,161,0,32,20,161,87,161,0,160,161,0,119,0,2,0,0,160,87,0,0,89,160,0,0,110,109,0,121,78,5,0,1,161,0,0,4,161,161,145,0,160,161,0,119,0,2,0,0,160,145,0,0,146,160,0,119,0,12,0,134,71,0,0,180,90,4,0,127,0,0,0,34,160,71,0,121,160,3,0,1,126,255,255,119,0,145,2,82,38,127,0,0,89,87,0,0,110,108,0,0,146,71,0,78,160,38,0,32,160,160,46,121,160,61,0,25,66,38,1,78,160,66,0,33,160,160,42,121,160,8,0,85,127,66,0,134,72,0,0,180,90,4,0,127,0,0,0,82,9,127,0,0,115,72,0,119,0,52,0,102,161,38,2,134,160,0,0,108,140,4,0,161,0,0,0,121,160,20,0,82,39,127,0,102,160,39,3,32,160,160,36,121,160,16,0,25,67,39,2,78,160,67,0,26,160,160,48,41,160,160,2,1,161,10,0,97,4,160,161,78,161,67,0,26,161,161,48,41,161,161,3,94,41,3,161,25,56,39,4,85,127,56,0,0,9,56,0,0,115,41,0,119,0,28,0,121,110,3,0,1,126,255,255,119,0,100,2,121,142,15,0,82,161,2,0,1,160,4,0,26,160,160,1,3,161,161,160,1,160,4,0,26,160,160,1,11,160,160,0,19,161,161,160,0,42,161,0,82,43,42,0,25,161,42,4,85,2,161,0,0,83,43,0,119,0,2,0,1,83,0,0,82,161,127,0,25,57,161,2,85,127,57,0,0,9,57,0,0,115,83,0,119,0,3,0,0,9,38,0,1,115,255,255,0,44,9,0,1,130,0,0,1,161,57,0,78,160,44,0,26,160,160,65,48,161,161,160,64,123,0,0,1,126,255,255,119,0,67,2,0,156,44,0,25,44,44,1,85,127,44,0,78,161,156,0,26,161,161,65,1,160,160,31,27,162,130,58,3,160,160,162,90,45,161,160,19,161,45,158,0,85,161,0,1,161,8,0,26,160,85,1,57,161,161,160,132,123,0,0,0,130,85,0,119,0,233,255,41,161,45,24,42,161,161,24,120,161,3,0,1,126,255,255,119,0,45,2,1,161,255,255,15,76,161,65,41,161,45,24,42,161,161,24,32,161,161,19,121,161,6,0,121,76,3,0,1,126,255,255,119,0,36,2,1,153,54,0,119,0,20,0,121,76,11,0,41,161,65,2,97,4,161,85,41,161,65,3,3,46,3,161,106,47,46,4,0,48,64,0,116,48,46,0,109,48,4,47,1,153,54,0,119,0,9,0,120,142,3,0,1,126,0,0,119,0,20,2,134,161,0,0,120,198,2,0,64,85,2,6,82,49,127,0,1,153,55,0,32,161,153,54,121,161,7,0,1,153,0,0,121,142,4,0,0,49,44,0,1,153,55,0,119,0,2,0,1,106,0,0,32,161,153,55,121,161,1,2,1,153,0,0,26,161,49,1,78,86,161,0,33,160,130,0,38,162,86,15,32,162,162,3,19,160,160,162,121,160,4,0,38,160,86,223,0,161,160,0,119,0,2,0,0,161,86,0,0,140,161,0,2,161,0,0,255,255,254,255,19,161,89,161,0,63,161,0,1,161,0,32,19,161,89,161,32,161,161,0,125,128,161,89,63,0,0,0,1,161,65,0,1,163,56,0,138,140,161,163,152,125,0,0,124,125,0,0,156,125,0,0,124,125,0,0,184,125,0,0,188,125,0,0,192,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,196,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,248,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,252,125,0,0,124,125,0,0,0,126,0,0,36,126,0,0,204,126,0,0,228,126,0,0,232,126,0,0,124,125,0,0,236,126,0,0,124,125,0,0,124,125,0,0,124,125,0,0,124,125,0,0,240,126,0,0,192,127,0,0,28,128,0,0,124,125,0,0,124,125,0,0,68,128,0,0,124,125,0,0,176,128,0,0,124,125,0,0,124,125,0,0,204,128,0,0,0,55,11,0,0,92,128,0,0,119,115,0,1,122,0,0,1,125,67,85,0,135,134,0,119,0,211,0,119,0,77,0,116,148,64,0,1,161,0,0,85,68,161,0,85,64,148,0,1,118,255,255,1,153,79,0,119,0,203,0,119,0,69,0,119,0,68,0,119,0,67,0,120,115,10,0,1,160,32,0,1,163,0,0,134,161,0,0,188,30,4,0,0,160,146,163,128,0,0,0,1,94,0,0,1,153,89,0,119,0,190,0,0,118,115,0,1,153,79,0,119,0,187,0,119,0,181,0,119,0,52,0,82,160,64,0,83,59,160,0,0,55,59,0,0,92,63,0,1,119,1,0,1,122,0,0,1,125,67,85,0,135,134,0,119,0,176,0,0,19,64,0,82,20,19,0,106,21,19,4,34,161,21,0,121,161,16,0,1,161,0,0,1,160,0,0,134,22,0,0,8,120,4,0,161,160,20,21,135,23,3,0,0,24,64,0,85,24,22,0,109,24,4,23,0,25,22,0,0,26,23,0,1,120,1,0,1,123,67,85,1,153,72,0,119,0,156,0,0,25,20,0,0,26,21,0,1,160,1,8,19,160,128,160,33,160,160,0,38,160,160,1,0,120,160,0,19,161,128,159,32,161,161,0,121,161,8,0,38,162,128,1,32,162,162,0,1,163,69,85,125,161,162,157,163,0,0,0,0,160,161,0,119,0,3,0,1,161,68,85,0,160,161,0,0,123,160,0,1,153,72,0,119,0,134,0,38,161,5,1,86,163,64,0,135,106,8,0,161,0,163,146,115,128,140,0,119,0,86,1,119,0,250,255,119,0,249,255,119,0,206,255,19,161,130,158,41,161,161,24,42,161,161,24,1,160,0,0,1,162,8,0,138,161,160,162,48,127,0,0,64,127,0,0,80,127,0,0,112,127,0,0,128,127,0,0,40,127,0,0,144,127,0,0,160,127,0,0,1,106,0,0,119,0,67,1,82,160,64,0,85,160,81,0,1,106,0,0,119,0,63,1,82,160,64,0,85,160,81,0,1,106,0,0,119,0,59,1,82,51,64,0,85,51,81,0,34,162,81,0,41,162,162,31,42,162,162,31,109,51,4,162,1,106,0,0,119,0,51,1,82,162,64,0,84,162,81,0,1,106,0,0,119,0,47,1,82,162,64,0,83,162,81,0,1,106,0,0,119,0,43,1,82,162,64,0,85,162,81,0,1,106,0,0,119,0,39,1,82,52,64,0,85,52,81,0,34,160,81,0,41,160,160,31,42,160,160,31,109,52,4,160,1,106,0,0,119,0,31,1,0,16,64,0,82,160,16,0,106,161,16,4,134,17,0,0,248,78,4,0,160,161,58,0,4,136,134,17,0,54,17,0,0,91,128,0,38,160,128,8,32,160,160,0,15,162,136,115,20,160,160,162,121,160,3,0,0,161,115,0,119,0,3,0,25,160,136,1,0,161,160,0,0,117,161,0,1,121,0,0,1,124,67,85,1,153,73,0,119,0,50,0,39,161,128,8,0,90,161,0,1,161,8,0,16,161,161,115,1,160,8,0,125,116,161,115,160,0,0,0,1,141,120,0,1,153,67,0,119,0,40,0,82,30,64,0,32,160,30,0,1,161,77,85,125,84,160,161,30,0,0,0,1,161,0,0,134,73,0,0,196,192,2,0,84,161,115,0,32,144,73,0,0,55,84,0,0,92,63,0,121,144,3,0,0,161,115,0,119,0,3,0,4,160,73,84,0,161,160,0,0,119,161,0,1,122,0,0,1,125,67,85,121,144,4,0,3,160,84,115,0,161,160,0,119,0,2,0,0,161,73,0,0,135,161,0,119,0,13,0,0,50,64,0,82,25,50,0,106,26,50,4,1,120,0,0,1,123,67,85,1,153,72,0,119,0,6,0,0,90,128,0,0,116,115,0,0,141,140,0,1,153,67,0,119,0,1,0,32,161,153,67,121,161,35,0,1,153,0,0,0,53,64,0,82,161,53,0,106,163,53,4,38,160,141,32,134,13,0,0,64,63,4,0,161,163,58,160,0,14,64,0,38,160,90,8,32,160,160,0,82,163,14,0,32,163,163,0,106,161,14,4,32,161,161,0,19,163,163,161,20,160,160,163,0,114,160,0,0,54,13,0,0,91,90,0,0,117,116,0,1,160,0,0,1,163,2,0,125,121,114,160,163,0,0,0,121,114,3,0,0,163,157,0,119,0,4,0,43,160,141,4,3,160,157,160,0,163,160,0,0,124,163,0,1,153,73,0,119,0,82,0,32,163,153,72,121,163,11,0,1,153,0,0,134,54,0,0,112,138,3,0,25,26,58,0,0,91,128,0,0,117,115,0,0,121,120,0,0,124,123,0,1,153,73,0,119,0,70,0,32,163,153,79,121,163,68,0,1,153,0,0,1,95,0,0,82,149,64,0,82,31,149,0,120,31,3,0,0,93,95,0,119,0,19,0,134,74,0,0,148,126,4,0,111,31,0,0,34,77,74,0,4,163,118,95,16,163,163,74,20,163,77,163,121,163,3,0,1,153,83,0,119,0,9,0,3,61,74,95,48,163,61,118,4,130,0,0,0,95,61,0,25,149,149,4,119,0,237,255,0,93,61,0,119,0,1,0,32,163,153,83,121,163,6,0,1,153,0,0,121,77,3,0,1,126,255,255,119,0,138,0,0,93,95,0,1,160,32,0,134,163,0,0,188,30,4,0,0,160,146,93,128,0,0,0,120,93,4,0,1,94,0,0,1,153,89,0,119,0,27,0,1,96,0,0,82,150,64,0,82,32,150,0,120,32,4,0,0,94,93,0,1,153,89,0,119,0,20,0,134,75,0,0,148,126,4,0,111,32,0,0,3,96,75,96,47,163,93,96,140,130,0,0,0,94,93,0,1,153,89,0,119,0,11,0,134,163,0,0,196,130,4,0,0,111,75,0,50,163,93,96,172,130,0,0,0,94,93,0,1,153,89,0,119,0,3,0,25,150,150,4,119,0,233,255,32,163,153,73,121,163,41,0,1,153,0,0,0,27,64,0,82,163,27,0,33,163,163,0,106,160,27,4,33,160,160,0,20,163,163,160,0,29,163,0,33,163,117,0,20,163,163,29,0,113,163,0,4,163,134,54,40,160,29,1,38,160,160,1,3,60,163,160,125,55,113,54,58,0,0,0,1,163,255,255,47,163,163,117,32,131,0,0,2,163,0,0,255,255,254,255,19,163,91,163,0,160,163,0,119,0,2,0,0,160,91,0,0,92,160,0,121,113,6,0,15,161,60,117,125,163,161,117,60,0,0,0,0,160,163,0,119,0,3,0,1,163,0,0,0,160,163,0,0,119,160,0,0,122,121,0,0,125,124,0,0,135,134,0,119,0,15,0,32,160,153,89,121,160,13,0,1,153,0,0,1,163,32,0,1,161,0,32,21,161,128,161,134,160,0,0,188,30,4,0,0,163,146,94,161,0,0,0,15,160,94,146,125,106,160,146,94,0,0,0,119,0,42,0,4,137,135,55,15,160,119,137,125,129,160,137,119,0,0,0,3,62,129,122,15,160,146,62,125,147,160,62,146,0,0,0,1,161,32,0,134,160,0,0,188,30,4,0,0,161,147,62,92,0,0,0,134,160,0,0,196,130,4,0,0,125,122,0,1,161,48,0,2,163,0,0,0,0,1,0,21,163,92,163,134,160,0,0,188,30,4,0,0,161,147,62,163,0,0,0,1,163,48,0,1,161,0,0,134,160,0,0,188,30,4,0,0,163,129,137,161,0,0,0,134,160,0,0,196,130,4,0,0,55,137,0,1,161,32,0,1,163,0,32,21,163,92,163,134,160,0,0,188,30,4,0,0,161,147,62,163,0,0,0,0,106,147,0,0,80,81,0,0,105,106,0,0,107,110,0,119,0,105,252,32,160,153,92,121,160,36,0,120,0,34,0,120,107,3,0,1,126,0,0,119,0,32,0,1,97,1,0,41,160,97,2,94,33,4,160,120,33,2,0,119,0,13,0,41,163,97,3,3,163,3,163,134,160,0,0,120,198,2,0,163,33,2,6,25,99,97,1,35,160,99,10,121,160,3,0,0,97,99,0,119,0,243,255,1,126,1,0,119,0,15,0,0,98,97,0,41,160,98,2,94,160,4,160,121,160,3,0,1,126,255,255,119,0,9,0,25,98,98,1,1,160,10,0,50,160,160,98,212,132,0,0,1,126,1,0,119,0,3,0,119,0,245,255,0,126,81,0,137,154,0,0,139,126,0,0,140,0,74,0,0,0,0,0,2,63,0,0,100,127,0,0,2,64,0,0,117,40,0,0,2,65,0,0,88,253,1,0,2,66,0,0,244,37,0,0,2,67,0,0,172,253,1,0,2,68,0,0,164,40,0,0,2,69,0,0,184,253,1,0,1,61,0,0,136,70,0,0,0,62,70,0,136,70,0,0,1,71,48,1,3,70,70,71,137,70,0,0,130,70,0,0,136,71,0,0,49,70,70,71,92,133,0,0,1,71,48,1,135,70,0,0,71,0,0,0,1,70,208,0,3,36,62,70,1,70,128,0,3,57,62,70,1,70,192,0,3,26,62,70,25,58,62,104,25,59,62,80,1,70,176,0,3,37,62,70,1,70,164,0,3,38,62,70,1,70,152,0,3,39,62,70,1,70,136,0,3,40,62,70,25,27,62,112,25,28,62,88,25,29,62,64,25,30,62,48,25,31,62,32,25,32,62,20,25,33,62,8,25,34,62,4,0,35,62,0,2,70,0,0,140,253,1,0,82,70,70,0,26,70,70,1,35,70,70,1,121,70,74,3,1,70,1,0,32,70,70,1,121,70,63,0,2,70,0,0,220,253,1,0,82,2,70,0,1,70,45,1,15,70,2,70,30,71,2,60,32,71,71,0,19,70,70,71,121,70,14,0,2,71,0,0,124,253,1,0,134,70,0,0,104,41,4,0,71,0,0,0,85,36,70,0,134,70,0,0,32,70,4,0,65,36,0,0,2,70,0,0,220,253,1,0,82,5,70,0,119,0,2,0,0,5,2,0,1,70,45,1,4,70,5,70,1,71,44,1,16,70,70,71,30,71,5,60,32,71,71,0,19,70,70,71,121,70,14,0,2,71,0,0,128,253,1,0,134,70,0,0,104,41,4,0,71,0,0,0,85,36,70,0,134,70,0,0,32,70,4,0,65,36,0,0,2,70,0,0,220,253,1,0,82,14,70,0,119,0,2,0,0,14,5,0,1,70,89,2,4,70,14,70,1,71,44,1,16,70,70,71,30,71,14,60,32,71,71,0,19,70,70,71,121,70,10,0,2,71,0,0,132,253,1,0,134,70,0,0,104,41,4,0,71,0,0,0,85,36,70,0,134,70,0,0,32,70,4,0,65,36,0,0,2,70,0,0,176,253,1,0,82,47,70,0,0,19,47,0,46,70,19,67,48,135,0,0,0,3,19,0,0,48,47,0,25,24,48,8,134,70,0,0,136,106,4,0,24,0,0,0,32,70,70,1,121,70,4,0,134,70,0,0,252,134,3,0,24,69,0,0,106,48,3,4,0,3,48,0,53,70,3,67,252,134,0,0,2,70,0,0,144,253,1,0,82,20,70,0,32,70,20,1,121,70,134,0,1,71,0,0,134,70,0,0,96,68,4,0,71,0,0,0,121,70,125,0,134,70,0,0,120,78,4,0,57,0,0,0,88,41,57,0,145,41,41,0,134,44,0,0,232,141,4,0,76,70,44,0,58,44,70,0,134,70,0,0,232,141,4,0,28,70,70,5,76,70,70,0,62,71,0,0,164,112,61,10,215,163,248,63,65,70,70,71,64,70,44,70,73,70,70,41,120,70,2,0,119,0,104,0,134,70,0,0,120,78,4,0,58,0,0,0,116,26,58,0,134,70,0,0,120,78,4,0,59,0,0,0,106,71,59,4,109,26,4,71,59,70,32,0,145,70,70,0,113,26,8,70,59,71,32,0,145,71,71,0,113,26,12,71,116,36,26,0,106,70,26,4,109,36,4,70,106,71,26,8,109,36,8,71,106,70,26,12,109,36,12,70,134,70,0,0,104,15,2,0,36,67,0,0,120,70,78,0,1,70,99,0,134,71,0,0,88,136,4,0,66,0,0,0,47,70,70,71,72,137,0,0,1,70,0,0,85,37,70,0,1,71,0,0,109,37,4,71,1,70,0,0,109,37,8,70,1,71,110,40,1,73,110,40,134,72,0,0,252,136,4,0,73,0,0,0,134,70,0,0,36,220,3,0,37,71,72,0,134,70,0,0,120,78,4,0,57,0,0,0,1,70,0,0,85,38,70,0,1,72,0,0,109,38,4,72,1,70,0,0,109,38,8,70,134,72,0,0,252,136,4,0,64,0,0,0,134,70,0,0,36,220,3,0,38,64,72,0,1,70,0,0,85,39,70,0,1,72,0,0,109,39,4,72,1,70,0,0,109,39,8,70,1,72,141,40,1,73,141,40,134,71,0,0,252,136,4,0,73,0,0,0,134,70,0,0,36,220,3,0,39,72,71,0,1,71,100,0,134,70,0,0,24,104,3,0,36,71,37,57,38,39,65,0,134,70,0,0,204,117,4,0,39,0,0,0,134,70,0,0,204,117,4,0,38,0,0,0,134,70,0,0,204,117,4,0,37,0,0,0,134,70,0,0,216,77,4,0,67,36,0,0,1,71,100,0,134,70,0,0,8,114,4,0,66,71,0,0,2,70,0,0,144,253,1,0,1,71,0,0,85,70,71,0,134,71,0,0,184,106,4,0,36,0,0,0,2,71,0,0,144,253,1,0,82,4,71,0,119,0,2,0,0,4,20,0,32,71,4,2,121,71,128,0,1,70,0,0,134,71,0,0,96,68,4,0,70,0,0,0,121,71,123,0,134,71,0,0,120,78,4,0,57,0,0,0,88,45,57,0,145,45,45,0,134,46,0,0,232,141,4,0,76,71,46,0,58,46,71,0,134,71,0,0,232,141,4,0,28,71,71,5,76,71,71,0,62,70,0,0,164,112,61,10,215,163,248,63,65,71,71,70,64,71,46,71,73,71,71,45,120,71,2,0,119,0,102,0,134,71,0,0,120,78,4,0,58,0,0,0,116,40,58,0,134,71,0,0,120,78,4,0,59,0,0,0,106,70,59,4,109,40,4,70,59,71,32,0,145,71,71,0,113,40,8,71,59,70,32,0,145,70,70,0,113,40,12,70,116,36,40,0,106,71,40,4,109,36,4,71,106,70,40,8,109,36,8,70,106,71,40,12,109,36,12,71,134,71,0,0,104,15,2,0,36,67,0,0,120,71,76,0,1,71,199,0,134,70,0,0,88,136,4,0,66,0,0,0,47,71,71,70,96,139,0,0,1,71,0,0,85,27,71,0,1,70,0,0,109,27,4,70,1,71,0,0,109,27,8,71,134,70,0,0,252,136,4,0,68,0,0,0,134,71,0,0,36,220,3,0,27,68,70,0,134,71,0,0,120,78,4,0,57,0,0,0,1,71,0,0,85,28,71,0,1,70,0,0,109,28,4,70,1,71,0,0,109,28,8,71,134,70,0,0,252,136,4,0,64,0,0,0,134,71,0,0,36,220,3,0,28,64,70,0,1,71,0,0,85,29,71,0,1,70,0,0,109,29,4,70,1,71,0,0,109,29,8,71,1,70,171,40,1,73,171,40,134,72,0,0,252,136,4,0,73,0,0,0,134,71,0,0,36,220,3,0,29,70,72,0,1,72,200,0,134,71,0,0,24,104,3,0,36,72,27,57,28,29,65,0,134,71,0,0,204,117,4,0,29,0,0,0,134,71,0,0,204,117,4,0,28,0,0,0,134,71,0,0,204,117,4,0,27,0,0,0,134,71,0,0,216,77,4,0,67,36,0,0,1,72,200,0,134,71,0,0,8,114,4,0,66,72,0,0,2,71,0,0,144,253,1,0,1,72,0,0,85,71,72,0,134,72,0,0,184,106,4,0,36,0,0,0,2,72,0,0,144,253,1,0,82,6,72,0,32,72,6,3,121,72,132,0,1,71,0,0,134,72,0,0,96,68,4,0,71,0,0,0,121,72,123,0,134,72,0,0,120,78,4,0,57,0,0,0,88,42,57,0,145,42,42,0,134,43,0,0,232,141,4,0,76,72,43,0,58,43,72,0,134,72,0,0,232,141,4,0,28,72,72,5,76,72,72,0,62,71,0,0,164,112,61,10,215,163,248,63,65,72,72,71,64,72,43,72,73,72,72,42,120,72,2,0,119,0,102,0,134,72,0,0,120,78,4,0,58,0,0,0,116,30,58,0,134,72,0,0,120,78,4,0,59,0,0,0,106,71,59,4,109,30,4,71,59,72,32,0,145,72,72,0,113,30,8,72,59,71,32,0,145,71,71,0,113,30,12,71,116,36,30,0,106,72,30,4,109,36,4,72,106,71,30,8,109,36,8,71,106,72,30,12,109,36,12,72,134,72,0,0,104,15,2,0,36,67,0,0,120,72,76,0,1,72,43,1,134,71,0,0,88,136,4,0,66,0,0,0,47,72,72,71,112,141,0,0,1,72,0,0,85,31,72,0,1,71,0,0,109,31,4,71,1,72,0,0,109,31,8,72,134,71,0,0,252,136,4,0,68,0,0,0,134,72,0,0,36,220,3,0,31,68,71,0,134,72,0,0,120,78,4,0,57,0,0,0,1,72,0,0,85,32,72,0,1,71,0,0,109,32,4,71,1,72,0,0,109,32,8,72,134,71,0,0,252,136,4,0,64,0,0,0,134,72,0,0,36,220,3,0,32,64,71,0,1,72,0,0,85,33,72,0,1,71,0,0,109,33,4,71,1,72,0,0,109,33,8,72,1,71,200,40,1,73,200,40,134,70,0,0,252,136,4,0,73,0,0,0,134,72,0,0,36,220,3,0,33,71,70,0,1,70,200,0,134,72,0,0,24,104,3,0,36,70,31,57,32,33,65,0,134,72,0,0,204,117,4,0,33,0,0,0,134,72,0,0,204,117,4,0,32,0,0,0,134,72,0,0,204,117,4,0,31,0,0,0,134,72,0,0,216,77,4,0,67,36,0,0,1,70,44,1,134,72,0,0,8,114,4,0,66,70,0,0,2,72,0,0,144,253,1,0,1,70,0,0,85,72,70,0,134,70,0,0,184,106,4,0,36,0,0,0,2,70,0,0,144,253,1,0,82,7,70,0,119,0,2,0,0,7,6,0,32,70,7,1,121,70,16,0,1,72,1,0,134,70,0,0,96,68,4,0,72,0,0,0,121,70,6,0,2,70,0,0,144,253,1,0,1,72,0,0,85,70,72,0,119,0,8,0,2,72,0,0,144,253,1,0,82,8,72,0,1,61,44,0,119,0,3,0,0,8,7,0,1,61,44,0,32,72,61,44,121,72,29,0,32,72,8,2,121,72,15,0,1,70,1,0,134,72,0,0,96,68,4,0,70,0,0,0,121,72,6,0,2,72,0,0,144,253,1,0,1,70,0,0,85,72,70,0,119,0,17,0,2,70,0,0,144,253,1,0,82,0,70,0,119,0,2,0,0,0,8,0,32,70,0,3,121,70,10,0,1,72,1,0,134,70,0,0,96,68,4,0,72,0,0,0,121,70,5,0,2,70,0,0,144,253,1,0,1,72,0,0,85,70,72,0,1,70,0,0,134,72,0,0,96,68,4,0,70,0,0,0,121,72,49,0,134,72,0,0,120,78,4,0,36,0,0,0,88,71,36,0,145,71,71,0,59,73,123,2,145,73,73,0,64,70,71,73,145,70,70,0,135,72,9,0,70,0,0,0,145,72,72,0,59,70,32,0,145,70,70,0,71,72,72,70,120,72,2,0,119,0,32,0,134,72,0,0,120,78,4,0,57,0,0,0,112,73,57,4,145,73,73,0,59,71,85,0,145,71,71,0,64,70,73,71,145,70,70,0,135,72,9,0,70,0,0,0,145,72,72,0,59,70,32,0,145,70,70,0,71,72,72,70,121,72,16,0,2,72,0,0,144,253,1,0,1,70,1,0,85,72,70,0,2,72,0,0,148,253,1,0,134,70,0,0,164,116,4,0,72,64,0,0,2,72,0,0,160,253,1,0,1,71,141,40,134,70,0,0,164,116,4,0,72,71,0,0,1,71,0,0,134,70,0,0,96,68,4,0,71,0,0,0,121,70,49,0,134,70,0,0,120,78,4,0,36,0,0,0,88,72,36,0,145,72,72,0,59,73,123,2,145,73,73,0,64,71,72,73,145,71,71,0,135,70,9,0,71,0,0,0,145,70,70,0,59,71,32,0,145,71,71,0,71,70,70,71,120,70,2,0,119,0,32,0,134,70,0,0,120,78,4,0,57,0,0,0,112,73,57,4,145,73,73,0,59,72,155,0,145,72,72,0,64,71,73,72,145,71,71,0,135,70,9,0,71,0,0,0,145,70,70,0,59,71,32,0,145,71,71,0,71,70,70,71,121,70,16,0,2,70,0,0,144,253,1,0,1,71,2,0,85,70,71,0,2,70,0,0,148,253,1,0,134,71,0,0,164,116,4,0,70,64,0,0,2,70,0,0,160,253,1,0,1,72,171,40,134,71,0,0,164,116,4,0,70,72,0,0,1,72,0,0,134,71,0,0,96,68,4,0,72,0,0,0,121,71,49,0,134,71,0,0,120,78,4,0,36,0,0,0,88,70,36,0,145,70,70,0,59,73,123,2,145,73,73,0,64,72,70,73,145,72,72,0,135,71,9,0,72,0,0,0,145,71,71,0,59,72,32,0,145,72,72,0,71,71,71,72,120,71,2,0,119,0,32,0,134,71,0,0,120,78,4,0,57,0,0,0,112,73,57,4,145,73,73,0,59,70,225,0,145,70,70,0,64,72,73,70,145,72,72,0,135,71,9,0,72,0,0,0,145,71,71,0,59,72,32,0,145,72,72,0,71,71,71,72,121,71,16,0,2,71,0,0,144,253,1,0,1,72,3,0,85,71,72,0,2,71,0,0,148,253,1,0,134,72,0,0,164,116,4,0,71,64,0,0,2,71,0,0,160,253,1,0,1,70,200,40,134,72,0,0,164,116,4,0,71,70,0,0,2,72,0,0,188,253,1,0,82,49,72,0,0,9,49,0,46,72,9,69,40,145,0,0,0,11,9,0,0,50,49,0,25,23,50,8,134,72,0,0,20,135,4,0,23,0,0,0,121,72,6,0,85,34,50,0,116,36,34,0,134,72,0,0,224,66,4,0,69,36,0,0,134,72,0,0,8,1,3,0,23,0,0,0,106,50,11,4,0,11,50,0,53,72,11,69,228,144,0,0,2,72,0,0,92,253,1,0,82,51,72,0,0,10,51,0,46,72,10,65,32,146,0,0,0,12,10,0,0,52,51,0,25,22,52,8,82,70,22,0,134,72,0,0,136,135,4,0,70,0,0,0,120,72,5,0,82,70,22,0,134,72,0,0,104,205,3,0,70,0,0,0,106,52,12,4,0,12,52,0,53,72,12,65,72,145,0,0,2,72,0,0,92,253,1,0,82,53,72,0,0,1,53,0,46,72,1,65,32,146,0,0,25,60,36,4,0,15,1,0,0,54,53,0,25,21,54,8,82,70,21,0,134,72,0,0,136,135,4,0,70,0,0,0,120,72,22,0,82,70,21,0,134,72,0,0,92,117,4,0,36,70,0,0,88,72,60,0,145,72,72,0,59,70,0,0,145,70,70,0,72,72,72,70,121,72,12,0,82,71,21,0,134,70,0,0,48,137,4,0,71,0,0,0,134,72,0,0,88,123,4,0,66,70,0,0,82,70,21,0,134,72,0,0,188,137,4,0,70,0,0,0,106,54,15,4,0,15,54,0,53,72,15,65,164,145,0,0,2,72,0,0,220,253,1,0,82,13,72,0,1,72,255,0,8,72,13,72,120,72,44,0,2,72,0,0,92,253,1,0,82,55,72,0,0,16,55,0,45,72,16,65,88,146,0,0,0,18,13,0,119,0,37,0,0,17,16,0,0,56,55,0,25,25,56,8,82,70,25,0,134,72,0,0,136,135,4,0,70,0,0,0,121,72,20,0,82,70,25,0,134,72,0,0,96,138,4,0,70,0,0,0,34,72,72,1,121,72,9,0,82,71,25,0,134,70,0,0,172,138,4,0,71,0,0,0,27,70,70,100,134,72,0,0,44,122,4,0,66,70,0,0,85,35,56,0,116,36,35,0,134,72,0,0,48,78,4,0,65,36,0,0,106,56,17,4,0,17,56,0,53,72,17,65,96,146,0,0,2,72,0,0,220,253,1,0,82,18,72,0,119,0,2,0,0,18,13,0,2,72,0,0,220,253,1,0,25,70,18,1,85,72,70,0,119,0,79,0,134,70,0,0,120,78,4,0,36,0,0,0,88,72,36,0,145,72,72,0,59,71,132,254,145,71,71,0,63,70,72,71,145,70,70,0,59,71,50,0,145,71,71,0,72,70,70,71,120,70,2,0,119,0,27,0,134,70,0,0,120,78,4,0,57,0,0,0,112,72,57,4,145,72,72,0,59,73,156,255,145,73,73,0,63,71,72,73,145,71,71,0,135,70,9,0,71,0,0,0,145,70,70,0,59,71,20,0,145,71,71,0,72,70,70,71,120,70,2,0,119,0,10,0,1,71,0,0,134,70,0,0,96,68,4,0,71,0,0,0,121,70,5,0,2,70,0,0,140,253,1,0,1,71,1,0,85,70,71,0,134,71,0,0,120,78,4,0,36,0,0,0,88,70,36,0,145,70,70,0,59,73,132,254,145,73,73,0,63,71,70,73,145,71,71,0,59,73,50,0,145,73,73,0,72,71,71,73,120,71,2,0,119,0,25,0,134,71,0,0,120,78,4,0,57,0,0,0,112,70,57,4,145,70,70,0,59,72,106,255,145,72,72,0,63,73,70,72,145,73,73,0,135,71,9,0,73,0,0,0,145,71,71,0,59,73,20,0,145,73,73,0,72,71,71,73,120,71,2,0,119,0,8,0,1,73,0,0,134,71,0,0,96,68,4,0,73,0,0,0,121,71,3,0,134,71,0,0,128,111,4,0,137,62,0,0,139,0,0,0,140,2,74,0,0,0,0,0,2,66,0,0,240,24,0,0,2,67,0,0,144,0,0,0,136,68,0,0,0,64,68,0,136,68,0,0,25,68,68,63,38,68,68,192,137,68,0,0,0,65,68,0,136,68,0,0,3,68,68,67,137,68,0,0,130,68,0,0,136,69,0,0,49,68,68,69,148,148,0,0,135,68,0,0,67,0,0,0,1,68,136,0,3,61,65,68,1,68,132,0,3,60,65,68,1,68,128,0,3,10,65,68,25,23,65,124,25,8,65,120,25,62,65,116,25,24,65,112,25,55,65,108,25,54,65,104,25,28,65,100,25,42,65,96,25,43,65,92,25,44,65,88,25,45,65,84,25,56,65,80,25,27,65,76,25,63,65,72,25,29,65,68,25,46,65,64,25,36,65,60,25,52,65,56,25,37,65,52,25,53,65,48,25,30,65,44,25,47,65,40,25,31,65,36,25,48,65,32,25,32,65,28,25,49,65,24,25,33,65,20,25,50,65,16,25,34,65,12,25,51,65,8,25,35,65,4,0,7,65,0,85,61,0,0,85,60,1,0,82,68,61,0,25,68,68,64,116,23,68,0,82,68,61,0,25,68,68,68,116,8,68,0,82,68,61,0,25,68,68,76,116,62,68,0,82,68,61,0,25,68,68,96,116,24,68,0,82,68,61,0,25,68,68,4,116,55,68,0,82,68,61,0,25,68,68,12,116,54,68,0,82,69,61,0,134,68,0,0,92,77,4,0,69,0,0,0,85,28,68,0,82,68,61,0,25,68,68,88,116,42,68,0,82,68,61,0,25,68,68,92,116,43,68,0,82,68,43,0,82,69,60,0,82,70,61,0,106,70,70,8,134,22,0,0,248,229,3,0,68,69,70,0,82,69,54,0,5,70,22,69,85,44,70,0,82,70,61,0,82,70,70,0,82,69,44,0,3,70,70,69,85,45,70,0,82,70,55,0,82,69,61,0,94,69,69,67,3,70,70,69,85,56,70,0,82,70,62,0,41,70,70,1,82,69,24,0,3,70,70,69,85,27,70,0,1,70,0,0,82,69,61,0,94,69,69,67,4,70,70,69,85,63,70,0,82,70,43,0,32,70,70,4,121,70,40,0,1,70,0,0,82,69,60,0,49,70,70,69,80,150,0,0,82,70,60,0,82,69,61,0,106,69,69,8,54,70,70,69,200,150,0,0,82,70,56,0,82,69,63,0,56,70,70,69,192,150,0,0,1,70,0,0,85,10,70,0,82,70,23,0,82,69,10,0,56,70,70,69,176,150,0,0,82,70,63,0,82,69,23,0,5,57,70,69,82,69,28,0,82,70,10,0,3,70,57,70,41,70,70,2,59,68,0,0,145,68,68,0,101,69,70,68,82,68,10,0,25,68,68,1,85,10,68,0,119,0,239,255,82,68,63,0,25,68,68,1,85,63,68,0,119,0,229,255,137,64,0,0,139,0,0,0,82,68,27,0,1,70,0,0,1,73,8,0,138,68,70,73,20,151,0,0,212,151,0,0,220,152,0,0,164,153,0,0,216,154,0,0,156,155,0,0,200,156,0,0,120,157,0,0,1,69,229,73,1,71,184,68,1,72,88,5,1,73,22,74,135,70,1,0,69,71,72,73,119,0,219,1,82,70,56,0,82,69,63,0,56,70,70,69,124,158,0,0,82,69,63,0,82,71,23,0,5,70,69,71,85,29,70,0,82,70,42,0,82,71,63,0,82,69,55,0,134,19,0,0,248,229,3,0,70,71,69,0,82,71,23,0,5,69,19,71,85,46,69,0,1,69,0,0,85,10,69,0,82,69,23,0,82,71,10,0,56,69,69,71,196,151,0,0,82,71,45,0,82,70,46,0,82,72,10,0,3,70,70,72,91,69,71,70,76,69,69,0,145,69,69,0,59,71,255,0,145,71,71,0,66,38,69,71,145,38,38,0,82,71,28,0,82,69,29,0,82,70,10,0,3,69,69,70,41,69,69,2,101,71,69,38,82,69,10,0,25,69,69,1,85,10,69,0,119,0,232,255,82,69,63,0,25,69,69,1,85,63,69,0,119,0,209,255,82,69,56,0,82,71,63,0,56,69,69,71,124,158,0,0,82,71,63,0,82,70,23,0,5,69,71,70,85,36,69,0,82,69,42,0,82,70,63,0,82,71,55,0,134,20,0,0,248,229,3,0,69,70,71,0,82,70,23,0,5,71,20,70,85,52,71,0,1,71,0,0,85,10,71,0,82,71,23,0,82,70,10,0,56,71,71,70,120,152,0,0,82,71,45,0,82,70,52,0,82,69,10,0,3,70,70,69,91,71,71,70,41,71,71,2,100,6,66,71,145,6,6,0,82,71,28,0,82,70,36,0,82,69,10,0,3,70,70,69,41,70,70,2,101,71,70,6,82,70,10,0,25,70,70,1,85,10,70,0,119,0,235,255,82,70,61,0,106,70,70,72,38,70,70,2,120,70,18,0,82,71,45,0,82,69,52,0,82,72,8,0,3,69,69,72,91,70,71,69,76,70,70,0,145,70,70,0,59,71,255,0,145,71,71,0,66,40,70,71,145,40,40,0,82,71,28,0,82,70,36,0,82,69,8,0,3,70,70,69,41,70,70,2,101,71,70,40,82,70,63,0,25,70,70,1,85,63,70,0,119,0,191,255,82,70,56,0,82,71,63,0,56,70,70,71,124,158,0,0,82,71,63,0,82,69,23,0,5,70,71,69,85,37,70,0,82,70,42,0,82,69,63,0,82,71,55,0,134,21,0,0,248,229,3,0,70,69,71,0,82,69,23,0,5,71,21,69,85,53,71,0,1,71,0,0,85,10,71,0,82,71,23,0,82,69,10,0,56,71,71,69,148,153,0,0,82,69,45,0,82,70,53,0,82,72,10,0,3,70,70,72,41,70,70,1,93,71,69,70,76,71,71,0,145,71,71,0,60,69,0,0,255,255,0,0,145,69,69,0,66,41,71,69,145,41,41,0,82,69,28,0,82,71,37,0,82,70,10,0,3,71,71,70,41,71,71,2,101,69,71,41,82,71,10,0,25,71,71,1,85,10,71,0,119,0,230,255,82,71,63,0,25,71,71,1,85,63,71,0,119,0,207,255,82,71,56,0,82,69,63,0,56,71,71,69,124,158,0,0,82,69,63,0,82,70,23,0,5,71,69,70,85,30,71,0,82,71,42,0,82,70,63,0,82,69,55,0,134,11,0,0,248,229,3,0,71,70,69,0,82,70,23,0,5,69,11,70,85,47,69,0,1,69,0,0,85,10,69,0,82,69,23,0,82,70,10,0,56,69,69,70,108,154,0,0,82,71,45,0,82,72,47,0,82,73,10,0,3,72,72,73,41,72,72,1,93,70,71,72,76,70,70,0,145,70,70,0,60,71,0,0,255,255,0,0,145,71,71,0,66,69,70,71,145,69,69,0,134,12,0,0,56,234,3,0,69,0,0,0,145,12,12,0,82,69,28,0,82,71,30,0,82,70,10,0,3,71,71,70,41,71,71,2,101,69,71,12,82,71,10,0,25,71,71,1,85,10,71,0,119,0,226,255,82,71,61,0,106,71,71,72,38,71,71,2,120,71,20,0,82,69,45,0,82,70,47,0,82,72,8,0,3,70,70,72,41,70,70,1,93,71,69,70,76,71,71,0,145,71,71,0,60,69,0,0,255,255,0,0,145,69,69,0,66,39,71,69,145,39,39,0,82,69,28,0,82,71,30,0,82,70,8,0,3,71,71,70,41,71,71,2,101,69,71,39,82,71,63,0,25,71,71,1,85,63,71,0,119,0,180,255,82,71,56,0,82,69,63,0,56,71,71,69,124,158,0,0,82,69,63,0,82,70,23,0,5,71,69,70,85,31,71,0,82,71,42,0,82,70,63,0,82,69,55,0,134,13,0,0,248,229,3,0,71,70,69,0,82,70,23,0,5,69,13,70,85,48,69,0,1,69,0,0,85,10,69,0,82,69,23,0,82,70,10,0,56,69,69,70,140,155,0,0,82,69,45,0,82,70,48,0,82,71,10,0,3,70,70,71,41,70,70,2,94,69,69,70,77,69,69,0,62,70,0,0,0,0,224,255,255,255,239,65,66,25,69,70,145,25,25,0,82,70,28,0,82,69,31,0,82,71,10,0,3,69,69,71,41,69,69,2,101,70,69,25,82,69,10,0,25,69,69,1,85,10,69,0,119,0,231,255,82,69,63,0,25,69,69,1,85,63,69,0,119,0,208,255,82,69,56,0,82,70,63,0,56,69,69,70,124,158,0,0,82,70,63,0,82,71,23,0,5,69,70,71,85,32,69,0,82,69,42,0,82,71,63,0,82,70,55,0,134,14,0,0,248,229,3,0,69,71,70,0,82,71,23,0,5,70,14,71,85,49,70,0,1,70,0,0,85,10,70,0,82,70,23,0,82,71,10,0,56,70,70,71,96,156,0,0,82,71,45,0,82,69,49,0,82,72,10,0,3,69,69,72,41,69,69,2,94,71,71,69,77,71,71,0,62,69,0,0,0,0,224,255,255,255,239,65,66,70,71,69,145,70,70,0,134,15,0,0,56,234,3,0,70,0,0,0,145,15,15,0,82,70,28,0,82,69,32,0,82,71,10,0,3,69,69,71,41,69,69,2,101,70,69,15,82,69,10,0,25,69,69,1,85,10,69,0,119,0,227,255,82,69,61,0,106,69,69,72,38,69,69,2,120,69,19,0,82,69,45,0,82,70,49,0,82,71,8,0,3,70,70,71,41,70,70,2,94,69,69,70,77,69,69,0,62,70,0,0,0,0,224,255,255,255,239,65,66,26,69,70,145,26,26,0,82,70,28,0,82,69,32,0,82,71,8,0,3,69,69,71,41,69,69,2,101,70,69,26,82,69,63,0,25,69,69,1,85,63,69,0,119,0,182,255,82,69,56,0,82,70,63,0,56,69,69,70,124,158,0,0,82,70,63,0,82,71,23,0,5,69,70,71,85,33,69,0,82,69,42,0,82,71,63,0,82,70,55,0,134,16,0,0,248,229,3,0,69,71,70,0,82,71,23,0,5,70,16,71,85,50,70,0,1,70,0,0,85,10,70,0,82,70,23,0,82,71,10,0,56,70,70,71,104,157,0,0,82,70,45,0,82,71,50,0,82,69,10,0,3,71,71,69,41,71,71,2,100,2,70,71,145,2,2,0,82,70,28,0,82,71,33,0,82,69,10,0,3,71,71,69,41,71,71,2,101,70,71,2,82,71,10,0,25,71,71,1,85,10,71,0,119,0,236,255,82,71,63,0,25,71,71,1,85,63,71,0,119,0,213,255,82,71,56,0,82,70,63,0,56,71,71,70,124,158,0,0,82,70,63,0,82,69,23,0,5,71,70,69,85,34,71,0,82,71,42,0,82,69,63,0,82,70,55,0,134,17,0,0,248,229,3,0,71,69,70,0,82,69,23,0,5,70,17,69,85,51,70,0,1,70,0,0,85,10,70,0,82,70,23,0,82,69,10,0,56,70,70,69,40,158,0,0,82,69,45,0,82,71,51,0,82,72,10,0,3,71,71,72,41,71,71,2,100,70,69,71,145,70,70,0,134,18,0,0,56,234,3,0,70,0,0,0,145,18,18,0,82,70,28,0,82,69,34,0,82,71,10,0,3,69,69,71,41,69,69,2,101,70,69,18,82,69,10,0,25,69,69,1,85,10,69,0,119,0,232,255,82,69,61,0,106,69,69,72,38,69,69,2,120,69,14,0,82,69,45,0,82,70,51,0,82,71,8,0,3,70,70,71,41,70,70,2,100,3,69,70,145,3,3,0,82,69,28,0,82,70,34,0,82,71,8,0,3,70,70,71,41,70,70,2,101,69,70,3,82,70,63,0,25,70,70,1,85,63,70,0,119,0,192,255,82,68,61,0,106,68,68,72,38,68,68,1,120,68,74,0,1,68,0,0,82,70,61,0,94,70,70,67,4,68,68,70,85,63,68,0,82,68,56,0,82,70,63,0,56,68,68,70,176,159,0,0,82,70,63,0,82,73,23,0,5,68,70,73,85,35,68,0,82,73,28,0,82,70,35,0,82,72,8,0,3,70,70,72,41,70,70,2,100,68,73,70,145,68,68,0,89,7,68,0,82,68,61,0,106,68,68,76,33,68,68,3,121,68,18,0,88,73,7,0,145,73,73,0,62,70,0,0,13,34,37,0,0,0,240,58,145,70,70,0,63,68,73,70,145,68,68,0,89,7,68,0,88,4,7,0,145,4,4,0,82,68,28,0,82,70,35,0,82,73,8,0,3,70,70,73,41,70,70,2,101,68,70,4,1,70,0,0,85,10,70,0,82,70,23,0,82,68,10,0,56,70,70,68,160,159,0,0,82,70,10,0,82,68,8,0,46,70,70,68,144,159,0,0,88,5,7,0,145,5,5,0,82,70,28,0,82,68,35,0,82,73,10,0,3,68,68,73,41,68,68,2,3,9,70,68,88,70,9,0,145,70,70,0,65,68,70,5,145,68,68,0,89,9,68,0,82,68,10,0,25,68,68,1,85,10,68,0,119,0,232,255,82,68,63,0,25,68,68,1,85,63,68,0,119,0,189,255,82,68,42,0,33,68,68,4,121,68,3,0,137,64,0,0,139,0,0,0,1,68,0,0,82,70,61,0,94,70,70,67,4,68,68,70,85,63,68,0,1,68,0,0,82,70,63,0,56,68,68,70,72,160,0,0,1,68,0,0,85,10,68,0,82,68,23,0,82,70,10,0,56,68,68,70,56,160,0,0], eb + 30720);
  HEAPU8.set([82,68,63,0,82,70,23,0,5,58,68,70,82,70,28,0,82,68,10,0,3,68,58,68,41,68,68,2,59,73,0,0,145,73,73,0,101,70,68,73,82,73,10,0,25,73,73,1,85,10,73,0,119,0,239,255,82,73,63,0,25,73,73,1,85,63,73,0,119,0,229,255,116,63,55,0,82,73,56,0,82,68,63,0,56,73,73,68,188,160,0,0,1,73,0,0,85,10,73,0,82,73,23,0,82,68,10,0,56,73,73,68,172,160,0,0,82,73,63,0,82,68,23,0,5,59,73,68,82,68,28,0,82,73,10,0,3,73,59,73,41,73,73,2,59,70,0,0,145,70,70,0,101,68,73,70,82,70,10,0,25,70,70,1,85,10,70,0,119,0,239,255,82,70,63,0,25,70,70,1,85,63,70,0,119,0,229,255,137,64,0,0,139,0,0,0,140,4,103,0,0,0,0,0,2,89,0,0,255,127,0,0,2,90,0,0,1,1,0,0,2,91,0,0,143,0,0,0,2,92,0,0,144,0,0,0,2,93,0,0,144,1,0,0,2,94,0,0,160,19,0,0,2,95,0,0,0,20,0,0,2,96,0,0,255,63,0,0,2,97,0,0,255,0,0,0,1,74,0,0,136,98,0,0,0,75,98,0,136,98,0,0,25,98,98,63,38,98,98,192,137,98,0,0,0,76,98,0,136,98,0,0,25,98,98,96,137,98,0,0,130,98,0,0,136,99,0,0,49,98,98,99,92,161,0,0,1,99,96,0,135,98,0,0,99,0,0,0,25,71,76,84,25,59,76,80,25,60,76,76,25,69,76,72,25,70,76,68,25,36,76,64,25,65,76,60,25,66,76,56,25,37,76,52,25,68,76,48,25,63,76,44,25,62,76,40,25,34,76,36,25,35,76,32,25,64,76,28,25,67,76,24,25,57,76,20,25,61,76,16,25,58,76,12,25,72,76,8,25,73,76,4,0,38,76,0,85,59,0,0,85,60,1,0,85,69,2,0,85,70,3,0,1,98,0,0,85,36,98,0,1,98,0,0,85,37,98,0,1,98,0,0,85,68,98,0,2,99,0,0,0,0,1,0,135,98,10,0,99,0,0,0,85,63,98,0,82,98,63,0,120,98,6,0,1,98,0,0,85,71,98,0,82,18,71,0,137,75,0,0,139,18,0,0,82,98,70,0,34,98,98,5,121,98,3,0,1,98,5,0,85,70,98,0,82,98,68,0,120,98,3,0,1,74,7,0,119,0,11,0,82,98,68,0,26,98,98,8,82,98,98,0,82,99,68,0,26,99,99,8,106,99,99,4,25,99,99,1,49,98,98,99,88,162,0,0,1,74,7,0,32,98,74,7,121,98,6,0,1,99,1,0,1,100,1,0,134,98,0,0,48,99,3,0,68,99,100,0,82,77,68,0,0,19,77,0,26,98,77,8,25,27,98,4,82,20,27,0,25,98,20,1,85,27,98,0,1,100,120,0,95,19,20,100,82,100,68,0,120,100,3,0,1,74,10,0,119,0,11,0,82,100,68,0,26,100,100,8,82,100,100,0,82,98,68,0,26,98,98,8,106,98,98,4,25,98,98,1,49,100,100,98,208,162,0,0,1,74,10,0,32,100,74,10,121,100,6,0,1,98,1,0,1,99,1,0,134,100,0,0,48,99,3,0,68,98,99,0,82,78,68,0,0,6,78,0,26,100,78,8,25,29,100,4,82,7,29,0,25,100,7,1,85,29,100,0,1,99,94,0,95,6,7,99,82,99,36,0,1,100,1,0,82,98,37,0,22,100,100,98,20,99,99,100,85,36,99,0,82,99,37,0,25,99,99,1,85,37,99,0,82,100,68,0,134,99,0,0,0,127,3,0,100,36,37,0,85,68,99,0,82,99,36,0,1,100,1,0,82,98,37,0,22,100,100,98,20,99,99,100,85,36,99,0,82,99,37,0,25,99,99,2,85,37,99,0,82,100,68,0,134,99,0,0,0,127,3,0,100,36,37,0,85,68,99,0,1,99,0,0,85,65,99,0,1,99,0,64,82,100,65,0,56,99,99,100,188,163,0,0,82,99,63,0,82,100,65,0,41,100,100,2,1,98,0,0,97,99,100,98,82,98,65,0,25,98,98,1,85,65,98,0,119,0,244,255,1,98,0,0,85,65,98,0,82,98,60,0,26,98,98,3,82,100,65,0,56,98,98,100,80,171,0,0,82,100,59,0,82,99,65,0,3,100,100,99,134,98,0,0,236,210,3,0,100,0,0,0,19,98,98,96,85,62,98,0,1,98,3,0,85,34,98,0,1,98,0,0,85,35,98,0,82,98,63,0,82,100,62,0,41,100,100,2,3,98,98,100,116,64,98,0,82,98,64,0,121,98,5,0,82,98,64,0,26,98,98,8,106,50,98,4,119,0,2,0,1,50,0,0,85,67,50,0,1,98,0,0,85,66,98,0,82,98,67,0,82,100,66,0,56,98,98,100,240,164,0,0,82,98,65,0,2,100,0,0,0,128,0,0,4,98,98,100,82,100,64,0,82,99,66,0,41,99,99,2,94,100,100,99,82,99,59,0,4,100,100,99,47,98,98,100,224,164,0,0,82,85,65,0,82,100,64,0,82,99,66,0,41,99,99,2,94,100,100,99,82,99,59,0,3,99,99,85,82,101,60,0,4,101,101,85,134,98,0,0,36,219,3,0,100,99,101,0,85,57,98,0,82,98,34,0,82,101,57,0,49,98,98,101,224,164,0,0,116,34,57,0,82,98,64,0,82,101,66,0,41,101,101,2,3,98,98,101,116,35,98,0,82,98,66,0,25,98,98,1,85,66,98,0,119,0,214,255,82,98,63,0,82,101,62,0,41,101,101,2,94,98,98,101,121,98,28,0,82,98,63,0,82,101,62,0,41,101,101,2,94,98,98,101,26,98,98,8,106,98,98,4,82,101,70,0,41,101,101,1,45,98,98,101,112,165,0,0,82,98,63,0,82,101,62,0,41,101,101,2,94,86,98,101,82,98,70,0,41,98,98,2,0,87,98,0,3,101,86,87,135,98,11,0,86,101,87,0,82,98,63,0,82,101,62,0,41,101,101,2,94,98,98,101,26,98,98,8,82,101,70,0,109,98,4,101,82,101,63,0,82,98,62,0,41,98,98,2,94,101,101,98,120,101,3,0,1,74,29,0,119,0,17,0,82,101,63,0,82,98,62,0,41,98,98,2,94,101,101,98,26,101,101,8,82,101,101,0,82,98,63,0,82,99,62,0,41,99,99,2,94,98,98,99,26,98,98,8,106,98,98,4,25,98,98,1,49,101,101,98,204,165,0,0,1,74,29,0,32,101,74,29,121,101,11,0,1,74,0,0,82,98,63,0,82,99,62,0,41,99,99,2,3,98,98,99,1,99,1,0,1,100,4,0,134,101,0,0,48,99,3,0,98,99,100,0,82,101,59,0,82,100,65,0,3,23,101,100,82,100,63,0,82,101,62,0,41,101,101,2,94,84,100,101,0,21,84,0,26,100,84,8,25,28,100,4,82,4,28,0,25,100,4,1,85,28,100,0,41,100,4,2,97,21,100,23,82,100,35,0,121,100,64,0,82,101,59,0,82,99,65,0,3,101,101,99,25,101,101,1,134,100,0,0,236,210,3,0,101,0,0,0,19,100,100,96,85,62,100,0,82,100,63,0,82,101,62,0,41,101,101,2,3,100,100,101,116,64,100,0,82,100,64,0,121,100,5,0,82,100,64,0,26,100,100,8,106,49,100,4,119,0,2,0,1,49,0,0,85,67,49,0,1,100,0,0,85,66,100,0,82,100,67,0,82,101,66,0,56,100,100,101,60,167,0,0,82,100,65,0,4,100,100,89,82,101,64,0,82,99,66,0,41,99,99,2,94,101,101,99,82,99,59,0,4,101,101,99,47,100,100,101,36,167,0,0,82,88,65,0,82,101,64,0,82,99,66,0,41,99,99,2,94,101,101,99,82,99,59,0,3,99,99,88,25,99,99,1,82,98,60,0,4,98,98,88,26,98,98,1,134,100,0,0,36,219,3,0,101,99,98,0,85,61,100,0,82,100,34,0,82,98,61,0,54,100,100,98,52,167,0,0,82,100,66,0,25,100,100,1,85,66,100,0,119,0,220,255,1,100,0,0,85,35,100,0,82,100,59,0,82,98,65,0,3,22,100,98,82,98,35,0,121,98,209,0,82,98,35,0,4,98,22,98,85,58,98,0,82,98,58,0,17,98,98,89,82,100,34,0,1,99,2,1,17,100,100,99,19,98,98,100,120,98,3,0,1,74,41,0,119,0,245,0,1,98,0,0,85,66,98,0,82,5,66,0,82,98,34,0,82,100,66,0,25,100,100,1,41,100,100,1,93,100,94,100,26,100,100,1,56,98,98,100,184,167,0,0,25,98,5,1,85,66,98,0,119,0,245,255,82,98,66,0,3,24,98,90,3,98,5,90,49,98,98,91,24,168,0,0,25,98,24,48,1,100,8,0,134,39,0,0,156,37,4,0,98,100,0,0,82,100,36,0,82,98,37,0,22,98,39,98,20,100,100,98,85,36,100,0,82,100,37,0,25,100,100,8,85,37,100,0,82,98,68,0,134,100,0,0,0,127,3,0,98,36,37,0,85,68,100,0,119,0,73,0,82,100,66,0,3,25,100,90,49,100,24,97,120,168,0,0,3,100,93,25,4,100,100,92,1,98,9,0,134,40,0,0,156,37,4,0,100,98,0,0,82,98,36,0,82,100,37,0,22,100,40,100,20,98,98,100,85,36,98,0,82,98,37,0,25,98,98,9,85,37,98,0,82,100,68,0,134,98,0,0,0,127,3,0,100,36,37,0,85,68,98,0,119,0,49,0,82,98,66,0,3,26,98,90,1,98,23,1,49,98,25,98,224,168,0,0,25,98,26,0,1,100,0,1,4,98,98,100,1,100,7,0,134,41,0,0,156,37,4,0,98,100,0,0,82,100,36,0,82,98,37,0,22,98,41,98,20,100,100,98,85,36,100,0,82,100,37,0,25,100,100,7,85,37,100,0,82,98,68,0,134,100,0,0,0,127,3,0,98,36,37,0,85,68,100,0,119,0,23,0,1,100,192,0,3,100,100,26,1,98,24,1,4,100,100,98,1,98,8,0,134,42,0,0,156,37,4,0,100,98,0,0,82,98,36,0,82,100,37,0,22,100,42,100,20,98,98,100,85,36,98,0,82,98,37,0,25,98,98,8,85,37,98,0,82,100,68,0,134,98,0,0,0,127,3,0,100,36,37,0,85,68,98,0,119,0,1,0,1,98,224,19,82,100,66,0,90,98,98,100,121,98,22,0,82,98,36,0,82,100,34,0,82,99,66,0,41,99,99,1,93,99,94,99,4,100,100,99,82,99,37,0,22,100,100,99,20,98,98,100,85,36,98,0,82,98,37,0,1,100,224,19,82,99,66,0,91,100,100,99,3,98,98,100,85,37,98,0,82,100,68,0,134,98,0,0,0,127,3,0,100,36,37,0,85,68,98,0,1,98,0,0,85,66,98,0,82,8,66,0,82,98,58,0,82,100,66,0,25,100,100,1,41,100,100,1,93,100,95,100,26,100,100,1,56,98,98,100,212,169,0,0,25,98,8,1,85,66,98,0,119,0,245,255,1,98,5,0,134,43,0,0,156,37,4,0,8,98,0,0,82,98,36,0,82,100,37,0,22,100,43,100,20,98,98,100,85,36,98,0,82,98,37,0,25,98,98,5,85,37,98,0,82,100,68,0,134,98,0,0,0,127,3,0,100,36,37,0,85,68,98,0,1,98,64,20,82,100,66,0,90,98,98,100,121,98,22,0,82,98,36,0,82,100,58,0,82,99,66,0,41,99,99,1,93,99,95,99,4,100,100,99,82,99,37,0,22,100,100,99,20,98,98,100,85,36,98,0,82,98,37,0,1,100,64,20,82,99,66,0,91,100,100,99,3,98,98,100,85,37,98,0,82,100,68,0,134,98,0,0,0,127,3,0,100,36,37,0,85,68,98,0,82,98,65,0,82,100,34,0,3,98,98,100,85,65,98,0,119,0,78,254,82,98,59,0,82,100,65,0,91,51,98,100,79,98,22,0,49,98,98,91,244,170,0,0,25,98,51,48,1,100,8,0,134,44,0,0,156,37,4,0,98,100,0,0,82,100,36,0,82,98,37,0,22,98,44,98,20,100,100,98,85,36,100,0,82,100,37,0,25,100,100,8,85,37,100,0,82,98,68,0,134,100,0,0,0,127,3,0,98,36,37,0,85,68,100,0,119,0,20,0,3,100,93,51,4,100,100,92,1,98,9,0,134,45,0,0,156,37,4,0,100,98,0,0,82,98,36,0,82,100,37,0,22,100,45,100,20,98,98,100,85,36,98,0,82,98,37,0,25,98,98,9,85,37,98,0,82,100,68,0,134,98,0,0,0,127,3,0,100,36,37,0,85,68,98,0,82,98,65,0,25,98,98,1,85,65,98,0,119,0,30,254,32,98,74,41,121,98,7,0,1,100,33,68,1,99,236,67,1,101,154,3,1,102,59,68,135,98,1,0,100,99,101,102,82,98,60,0,82,102,65,0,56,98,98,102,72,172,0,0,82,98,59,0,82,102,65,0,91,52,98,102,82,98,59,0,82,102,65,0,91,98,98,102,49,98,98,91,236,171,0,0,25,98,52,48,1,102,8,0,134,46,0,0,156,37,4,0,98,102,0,0,82,102,36,0,82,98,37,0,22,98,46,98,20,102,102,98,85,36,102,0,82,102,37,0,25,102,102,8,85,37,102,0,82,98,68,0,134,102,0,0,0,127,3,0,98,36,37,0,85,68,102,0,119,0,20,0,3,102,93,52,4,102,102,92,1,98,9,0,134,47,0,0,156,37,4,0,102,98,0,0,82,98,36,0,82,102,37,0,22,102,47,102,20,98,98,102,85,36,98,0,82,98,37,0,25,98,98,9,85,37,98,0,82,102,68,0,134,98,0,0,0,127,3,0,102,36,37,0,85,68,98,0,82,98,65,0,25,98,98,1,85,65,98,0,119,0,203,255,1,98,0,0,1,102,7,0,134,48,0,0,156,37,4,0,98,102,0,0,82,102,36,0,82,98,37,0,22,98,48,98,20,102,102,98,85,36,102,0,82,102,37,0,25,102,102,7,85,37,102,0,82,98,68,0,134,102,0,0,0,127,3,0,98,36,37,0,85,68,102,0,82,102,37,0,120,102,2,0,119,0,16,0,82,102,36,0,1,98,0,0,82,101,37,0,22,98,98,101,20,102,102,98,85,36,102,0,82,102,37,0,25,102,102,1,85,37,102,0,82,98,68,0,134,102,0,0,0,127,3,0,98,36,37,0,85,68,102,0,119,0,239,255,1,102,0,0,85,65,102,0,82,9,63,0,1,102,0,64,82,98,65,0,56,102,102,98,48,173,0,0,82,102,65,0,41,102,102,2,94,102,9,102,121,102,8,0,82,98,63,0,82,101,65,0,41,101,101,2,94,98,98,101,26,98,98,8,135,102,7,0,98,0,0,0,82,102,65,0,25,102,102,1,85,65,102,0,119,0,237,255,135,102,7,0,9,0,0,0,1,102,1,0,85,72,102,0,1,102,0,0,85,73,102,0,82,102,60,0,1,98,176,21,8,102,102,98,85,38,102,0,1,102,0,0,85,66,102,0,82,102,60,0,82,98,66,0,56,102,102,98,12,174,0,0,1,102,0,0,85,65,102,0,82,102,38,0,82,98,65,0,56,102,102,98,200,173,0,0,82,102,72,0,82,98,59,0,82,101,66,0,82,99,65,0,3,101,101,99,91,98,98,101,3,102,102,98,85,72,102,0,82,102,73,0,82,98,72,0,3,102,102,98,85,73,102,0,82,102,65,0,25,102,102,1,85,65,102,0,119,0,237,255,82,102,72,0,2,98,0,0,241,255,0,0,9,102,102,98,85,72,102,0,82,102,73,0,2,98,0,0,241,255,0,0,9,102,102,98,85,73,102,0,82,102,66,0,82,98,38,0,3,102,102,98,85,66,102,0,1,102,176,21,85,38,102,0,119,0,214,255,82,102,68,0,120,102,3,0,1,74,87,0,119,0,11,0,82,102,68,0,26,102,102,8,82,102,102,0,82,98,68,0,26,98,98,8,106,98,98,4,25,98,98,1,49,102,102,98,68,174,0,0,1,74,87,0,32,102,74,87,121,102,6,0,1,98,1,0,1,101,1,0,134,102,0,0,48,99,3,0,68,98,101,0,82,102,73,0,43,102,102,8,19,102,102,97,0,53,102,0,82,79,68,0,0,10,79,0,26,102,79,8,25,30,102,4,82,11,30,0,25,102,11,1,85,30,102,0,95,10,11,53,82,102,68,0,120,102,3,0,1,74,90,0,119,0,11,0,82,102,68,0,26,102,102,8,82,102,102,0,82,101,68,0,26,101,101,8,106,101,101,4,25,101,101,1,49,102,102,101,200,174,0,0,1,74,90,0,32,102,74,90,121,102,6,0,1,101,1,0,1,98,1,0,134,102,0,0,48,99,3,0,68,101,98,0,82,102,73,0,19,102,102,97,0,54,102,0,82,80,68,0,0,12,80,0,26,102,80,8,25,31,102,4,82,13,31,0,25,102,13,1,85,31,102,0,95,12,13,54,82,102,68,0,120,102,3,0,1,74,93,0,119,0,11,0,82,102,68,0,26,102,102,8,82,102,102,0,82,98,68,0,26,98,98,8,106,98,98,4,25,98,98,1,49,102,102,98,72,175,0,0,1,74,93,0,32,102,74,93,121,102,6,0,1,98,1,0,1,101,1,0,134,102,0,0,48,99,3,0,68,98,101,0,82,102,72,0,43,102,102,8,19,102,102,97,0,55,102,0,82,81,68,0,0,14,81,0,26,102,81,8,25,32,102,4,82,15,32,0,25,102,15,1,85,32,102,0,95,14,15,55,82,102,68,0,120,102,3,0,1,74,96,0,119,0,11,0,82,102,68,0,26,102,102,8,82,102,102,0,82,101,68,0,26,101,101,8,106,101,101,4,25,101,101,1,49,102,102,101,204,175,0,0,1,74,96,0,32,102,74,96,121,102,6,0,1,101,1,0,1,98,1,0,134,102,0,0,48,99,3,0,68,101,98,0,82,102,72,0,19,102,102,97,0,56,102,0,82,82,68,0,0,16,82,0,26,102,82,8,25,33,102,4,82,17,33,0,25,102,17,1,85,33,102,0,95,16,17,56,82,102,69,0,82,98,68,0,26,98,98,8,25,98,98,4,116,102,98,0,82,83,68,0,26,102,83,8,82,101,69,0,82,101,101,0,135,98,11,0,102,83,101,0,82,98,68,0,26,98,98,8,85,71,98,0,82,18,71,0,137,75,0,0,139,18,0,0,140,2,89,0,0,0,0,0,2,80,0,0,255,255,0,0,2,81,0,0,255,0,0,0,136,82,0,0,0,68,82,0,136,82,0,0,25,82,82,63,38,82,82,192,137,82,0,0,0,69,82,0,136,82,0,0,25,82,82,112,137,82,0,0,130,82,0,0,136,83,0,0,49,82,82,83,180,176,0,0,1,83,112,0,135,82,0,0,83,0,0,0,25,2,69,76,25,54,69,72,25,63,69,68,25,64,69,64,25,55,69,60,25,44,69,56,25,52,69,52,25,65,69,106,25,41,69,105,25,17,69,104,25,53,69,48,25,45,69,44,25,56,69,40,25,66,69,103,25,42,69,102,25,18,69,101,25,11,69,100,25,46,69,36,25,67,69,99,25,43,69,98,25,19,69,97,25,12,69,96,25,47,69,32,25,48,69,28,25,57,69,24,25,49,69,20,25,50,69,16,25,58,69,12,25,51,69,8,25,59,69,4,85,54,0,0,85,63,1,0,82,82,54,0,82,82,82,0,120,82,3,0,137,68,0,0,139,0,0,0,82,82,54,0,106,82,82,4,120,82,3,0,137,68,0,0,139,0,0,0,82,83,63,0,121,83,6,0,82,83,54,0,106,83,83,8,33,83,83,0,0,82,83,0,119,0,3,0,1,83,0,0,0,82,83,0,120,82,3,0,137,68,0,0,139,0,0,0,82,82,54,0,106,82,82,16,82,83,63,0,45,82,82,83,168,177,0,0,137,68,0,0,139,0,0,0,82,83,63,0,34,83,83,11,121,83,6,0,82,83,54,0,106,83,83,16,34,83,83,11,0,82,83,0,119,0,3,0,1,83,0,0,0,82,83,0,120,82,8,0,1,83,4,0,1,84,127,83,134,82,0,0,48,143,3,0,83,84,69,0,137,68,0,0,139,0,0,0,82,3,54,0,116,2,3,0,106,84,3,4,109,2,4,84,106,82,3,8,109,2,8,82,106,84,3,12,109,2,12,84,106,82,3,16,109,2,16,82,134,82,0,0,220,100,1,0,2,0,0,0,85,64,82,0,82,84,54,0,82,84,84,0,135,82,7,0,84,0,0,0,82,82,54,0,1,84,0,0,85,82,84,0,82,84,54,0,82,82,63,0,109,84,16,82,1,82,0,0,85,55,82,0,82,82,54,0,106,82,82,16,1,84,1,0,1,86,10,0,138,82,84,86,152,178,0,0,184,179,0,0,52,181,0,0,148,182,0,0,216,183,0,0,144,185,0,0,68,187,0,0,208,188,0,0,220,189,0,0,220,190,0,0,119,0,94,3,82,70,54,0,106,83,70,4,106,85,70,8,5,84,83,85,135,22,10,0,84,0,0,0,82,84,54,0,85,84,22,0,1,84,0,0,85,44,84,0,82,85,54,0,106,85,85,4,82,83,54,0,106,83,83,8,5,84,85,83,82,83,44,0,56,84,84,83,12,192,0,0,82,83,64,0,82,85,44,0,41,85,85,4,100,84,83,85,145,84,84,0,62,83,0,0,209,221,1,224,208,34,211,63,145,83,83,0,65,60,84,83,145,60,60,0,82,85,64,0,82,86,44,0,41,86,86,4,3,85,85,86,112,84,85,4,145,84,84,0,62,85,0,0,217,84,201,63,180,200,226,63,145,85,85,0,65,83,84,85,145,83,83,0,63,13,60,83,145,13,13,0,82,87,64,0,82,88,44,0,41,88,88,4,3,87,87,88,112,86,87,8,145,86,86,0,62,87,0,0,201,118,190,159,26,47,189,63,145,87,87,0,65,84,86,87,145,84,84,0,63,85,13,84,145,85,85,0,59,84,255,0,145,84,84,0,65,83,85,84,145,83,83,0,75,83,83,0,19,83,83,81,0,31,83,0,82,83,54,0,82,83,83,0,82,84,44,0,95,83,84,31,82,84,44,0,25,84,84,1,85,44,84,0,119,0,195,255,82,71,54,0,106,83,71,4,106,85,71,8,5,84,83,85,41,84,84,1,135,27,10,0,84,0,0,0,82,84,54,0,85,84,27,0,1,84,0,0,85,52,84,0,82,85,54,0,106,85,85,4,82,83,54,0,106,83,83,8,5,84,85,83,41,84,84,1,82,83,52,0,56,84,84,83,12,192,0,0,82,83,64,0,82,85,55,0,41,85,85,4,100,84,83,85,145,84,84,0,62,83,0,0,209,221,1,224,208,34,211,63,145,83,83,0,65,62,84,83,145,62,62,0,82,85,64,0,82,87,55,0,41,87,87,4,3,85,85,87,112,84,85,4,145,84,84,0,62,85,0,0,217,84,201,63,180,200,226,63,145,85,85,0,65,83,84,85,145,83,83,0,63,16,62,83,145,16,16,0,82,86,64,0,82,88,55,0,41,88,88,4,3,86,86,88,112,87,86,8,145,87,87,0,62,86,0,0,201,118,190,159,26,47,189,63,145,86,86,0,65,84,87,86,145,84,84,0,63,85,16,84,145,85,85,0,59,84,255,0,145,84,84,0,65,83,85,84,145,83,83,0,75,83,83,0,19,83,83,81,0,39,83,0,82,83,54,0,82,83,83,0,82,84,52,0,95,83,84,39,82,85,64,0,82,86,55,0,41,86,86,4,3,85,85,86,112,83,85,12,145,83,83,0,59,85,255,0,145,85,85,0,65,84,83,85,145,84,84,0,75,84,84,0,19,84,84,81,0,40,84,0,82,84,54,0,82,84,84,0,82,85,52,0,25,85,85,1,95,84,85,40,82,85,52,0,25,85,85,2,85,52,85,0,82,85,55,0,25,85,85,1,85,55,85,0,119,0,173,255,82,72,54,0,106,84,72,4,106,83,72,8,5,85,84,83,41,85,85,1,135,29,10,0,85,0,0,0,82,85,54,0,85,85,29,0,1,85,0,0,83,65,85,0,1,85,0,0,83,41,85,0,1,85,0,0,83,17,85,0,1,85,0,0,85,53,85,0,82,83,54,0,106,83,83,4,82,84,54,0,106,84,84,8,5,85,83,84,82,84,53,0,56,85,85,84,12,192,0,0,82,86,64,0,82,87,53,0,41,87,87,4,100,83,86,87,145,83,83,0,59,86,31,0,145,86,86,0,65,84,83,86,145,84,84,0,134,85,0,0,140,136,4,0,84,0,0,0,75,85,85,0,83,65,85,0,82,83,64,0,82,87,53,0,41,87,87,4,3,83,83,87,112,86,83,4,145,86,86,0,59,83,63,0,145,83,83,0,65,84,86,83,145,84,84,0,134,85,0,0,140,136,4,0,84,0,0,0,75,85,85,0,83,41,85,0,82,86,64,0,82,87,53,0,41,87,87,4,3,86,86,87,112,83,86,8,145,83,83,0,59,86,31,0,145,86,86,0,65,84,83,86,145,84,84,0,134,85,0,0,140,136,4,0,84,0,0,0,75,85,85,0,83,17,85,0,82,85,54,0,82,85,85,0,82,84,53,0,41,84,84,1,79,86,65,0,19,86,86,80,41,86,86,11,79,83,41,0,19,83,83,80,41,83,83,5,20,86,86,83,79,83,17,0,19,83,83,80,20,86,86,83,96,85,84,86,82,86,53,0,25,86,86,1,85,53,86,0,119,0,186,255,82,73,54,0,106,84,73,4,106,85,73,8,5,86,84,85,27,86,86,3,135,20,10,0,86,0,0,0,82,86,54,0,85,86,20,0,1,86,0,0,85,45,86,0,1,86,0,0,85,56,86,0,82,85,54,0,106,85,85,4,82,84,54,0,106,84,84,8,5,86,85,84,27,86,86,3,82,84,45,0,56,86,86,84,12,192,0,0,82,85,64,0,82,83,56,0,41,83,83,4,100,84,85,83,145,84,84,0,59,85,255,0,145,85,85,0,65,86,84,85,145,86,86,0,75,86,86,0,19,86,86,81,0,32,86,0,82,86,54,0,82,86,86,0,82,85,45,0,95,86,85,32,82,84,64,0,82,83,56,0,41,83,83,4,3,84,84,83,112,86,84,4,145,86,86,0,59,84,255,0,145,84,84,0,65,85,86,84,145,85,85,0,75,85,85,0,19,85,85,81,0,33,85,0,82,85,54,0,82,85,85,0,82,84,45,0,25,84,84,1,95,85,84,33,82,86,64,0,82,83,56,0,41,83,83,4,3,86,86,83,112,85,86,8,145,85,85,0,59,86,255,0,145,86,86,0,65,84,85,86,145,84,84,0,75,84,84,0,19,84,84,81,0,34,84,0,82,84,54,0,82,84,84,0,82,86,45,0,25,86,86,2,95,84,86,34,82,86,45,0,25,86,86,3,85,45,86,0,82,86,56,0,25,86,86,1,85,56,86,0,119,0,189,255,82,74,54,0,106,84,74,4,106,85,74,8,5,86,84,85,41,86,86,1,135,21,10,0,86,0,0,0,82,86,54,0,85,86,21,0,1,86,0,0,83,66,86,0,1,86,0,0,83,42,86,0,1,86,0,0,83,18,86,0,1,86,0,0,83,11,86,0,1,86,0,0,85,46,86,0,82,85,54,0,106,85,85,4,82,84,54,0,106,84,84,8,5,86,85,84,82,84,46,0,56,86,86,84,12,192,0,0,82,83,64,0,82,87,46,0,41,87,87,4,100,85,83,87,145,85,85,0,59,83,31,0,145,83,83,0,65,84,85,83,145,84,84,0,134,86,0,0,140,136,4,0,84,0,0,0,75,86,86,0,83,66,86,0,82,85,64,0,82,87,46,0,41,87,87,4,3,85,85,87,112,83,85,4,145,83,83,0,59,85,31,0,145,85,85,0,65,84,83,85,145,84,84,0,134,86,0,0,140,136,4,0,84,0,0,0,75,86,86,0,83,42,86,0,82,83,64,0,82,87,46,0,41,87,87,4,3,83,83,87,112,85,83,8,145,85,85,0,59,83,31,0,145,83,83,0,65,84,85,83,145,84,84,0,134,86,0,0,140,136,4,0,84,0,0,0,75,86,86,0,83,18,86,0,82,84,64,0,82,83,46,0,41,83,83,4,3,84,84,83,112,86,84,12,145,86,86,0,62,84,0,0,112,79,227,32,25,25,201,63,145,84,84,0,73,30,86,84,1,86,1,0,1,83,0,0,125,84,30,86,83,0,0,0,83,11,84,0,82,84,54,0,82,84,84,0,82,83,46,0,41,83,83,1,79,86,66,0,19,86,86,80,41,86,86,11,79,85,42,0,19,85,85,80,41,85,85,6,20,86,86,85,79,85,18,0,19,85,85,80,41,85,85,1,20,86,86,85,79,85,11,0,19,85,85,80,20,86,86,85,96,84,83,86,82,86,46,0,25,86,86,1,85,46,86,0,119,0,166,255,82,75,54,0,106,83,75,4,106,84,75,8,5,86,83,84,41,86,86,1,135,23,10,0,86,0,0,0,82,86,54,0,85,86,23,0,1,86,0,0,83,67,86,0,1,86,0,0,83,43,86,0,1,86,0,0,83,19,86,0,1,86,0,0,83,12,86,0,1,86,0,0,85,47,86,0,82,84,54,0,106,84,84,4,82,83,54,0,106,83,83,8,5,86,84,83,82,83,47,0,56,86,86,83,12,192,0,0,82,85,64,0,82,87,47,0,41,87,87,4,100,84,85,87,145,84,84,0,59,85,15,0,145,85,85,0,65,83,84,85,145,83,83,0,134,86,0,0,140,136,4,0,83,0,0,0,75,86,86,0,83,67,86,0,82,84,64,0,82,87,47,0,41,87,87,4,3,84,84,87,112,85,84,4,145,85,85,0,59,84,15,0,145,84,84,0,65,83,85,84,145,83,83,0,134,86,0,0,140,136,4,0,83,0,0,0,75,86,86,0,83,43,86,0,82,85,64,0,82,87,47,0,41,87,87,4,3,85,85,87,112,84,85,8,145,84,84,0,59,85,15,0,145,85,85,0,65,83,84,85,145,83,83,0,134,86,0,0,140,136,4,0,83,0,0,0,75,86,86,0,83,19,86,0,82,84,64,0,82,87,47,0,41,87,87,4,3,84,84,87,112,85,84,12,145,85,85,0,59,84,15,0,145,84,84,0,65,83,85,84,145,83,83,0,134,86,0,0,140,136,4,0,83,0,0,0,75,86,86,0,83,12,86,0,82,86,54,0,82,86,86,0,82,83,47,0,41,83,83,1,79,84,67,0,19,84,84,80,41,84,84,12,79,85,43,0,19,85,85,80,41,85,85,8,20,84,84,85,79,85,19,0,19,85,85,80,41,85,85,4,20,84,84,85,79,85,12,0,19,85,85,80,20,84,84,85,96,86,83,84,82,84,47,0,25,84,84,1,85,47,84,0,119,0,167,255,82,76,54,0,106,83,76,4,106,86,76,8,5,84,83,86,41,84,84,2,135,24,10,0,84,0,0,0,82,84,54,0,85,84,24,0,1,84,0,0,85,48,84,0,1,84,0,0,85,57,84,0,82,86,54,0,106,86,86,4,82,83,54,0,106,83,83,8,5,84,86,83,41,84,84,2,82,83,48,0,56,84,84,83,12,192,0,0,82,86,64,0,82,85,57,0,41,85,85,4,100,83,86,85,145,83,83,0,59,86,255,0,145,86,86,0,65,84,83,86,145,84,84,0,75,84,84,0,19,84,84,81,0,35,84,0,82,84,54,0,82,84,84,0,82,86,48,0,95,84,86,35,82,83,64,0,82,85,57,0,41,85,85,4,3,83,83,85,112,84,83,4,145,84,84,0,59,83,255,0,145,83,83,0,65,86,84,83,145,86,86,0,75,86,86,0,19,86,86,81,0,36,86,0,82,86,54,0,82,86,86,0,82,83,48,0,25,83,83,1,95,86,83,36,82,84,64,0,82,85,57,0,41,85,85,4,3,84,84,85,112,86,84,8,145,86,86,0,59,84,255,0,145,84,84,0,65,83,86,84,145,83,83,0,75,83,83,0,19,83,83,81,0,37,83,0,82,83,54,0,82,83,83,0,82,84,48,0,25,84,84,2,95,83,84,37,82,86,64,0,82,85,57,0,41,85,85,4,3,86,86,85,112,83,86,12,145,83,83,0,59,86,255,0,145,86,86,0,65,84,83,86,145,84,84,0,75,84,84,0,19,84,84,81,0,38,84,0,82,84,54,0,82,84,84,0,82,86,48,0,25,86,86,3,95,84,86,38,82,86,48,0,25,86,86,4,85,48,86,0,82,86,57,0,25,86,86,1,85,57,86,0,119,0,171,255,82,77,54,0,106,84,77,4,106,83,77,8,5,86,84,83,41,86,86,2,135,25,10,0,86,0,0,0,82,86,54,0,85,86,25,0,1,86,0,0,85,49,86,0,82,83,54,0,106,83,83,4,82,84,54,0,106,84,84,8,5,86,83,84,82,84,49,0,56,86,86,84,12,192,0,0,82,84,64,0,82,83,49,0,41,83,83,4,100,86,84,83,145,86,86,0,62,84,0,0,209,221,1,224,208,34,211,63,145,84,84,0,65,61,86,84,145,61,61,0,82,83,64,0,82,85,49,0,41,85,85,4,3,83,83,85,112,86,83,4,145,86,86,0,62,83,0,0,217,84,201,63,180,200,226,63,145,83,83,0,65,84,86,83,145,84,84,0,63,14,61,84,145,14,14,0,82,86,64,0,82,85,49,0,41,85,85,4,3,86,86,85,112,83,86,8,145,83,83,0,62,86,0,0,201,118,190,159,26,47,189,63,145,86,86,0,65,84,83,86,145,84,84,0,63,15,14,84,145,15,15,0,82,84,54,0,82,84,84,0,82,86,49,0,41,86,86,2,101,84,86,15,82,86,49,0,25,86,86,1,85,49,86,0,119,0,201,255,82,78,54,0,106,84,78,4,106,83,78,8,5,86,84,83,27,86,86,3,41,86,86,2,135,26,10,0,86,0,0,0,82,86,54,0,85,86,26,0,1,86,0,0,85,50,86,0,1,86,0,0,85,58,86,0,82,83,54,0,106,83,83,4,82,84,54,0,106,84,84,8,5,86,83,84,27,86,86,3,82,84,50,0,56,86,86,84,12,192,0,0,82,86,64,0,82,84,58,0,41,84,84,4,100,4,86,84,145,4,4,0,82,86,54,0,82,86,86,0,82,84,50,0,41,84,84,2,101,86,84,4,82,84,64,0,82,86,58,0,41,86,86,4,3,84,84,86,112,5,84,4,145,5,5,0,82,84,54,0,82,84,84,0,82,86,50,0,25,86,86,1,41,86,86,2,101,84,86,5,82,86,64,0,82,84,58,0,41,84,84,4,3,86,86,84,112,6,86,8,145,6,6,0,82,86,54,0,82,86,86,0,82,84,50,0,25,84,84,2,41,84,84,2,101,86,84,6,82,84,50,0,25,84,84,3,85,50,84,0,82,84,58,0,25,84,84,1,85,58,84,0,119,0,207,255,82,79,54,0,106,86,79,4,106,83,79,8,5,84,86,83,41,84,84,2,41,84,84,2,135,28,10,0,84,0,0,0,82,84,54,0,85,84,28,0,1,84,0,0,85,51,84,0,1,84,0,0,85,59,84,0,82,83,54,0,106,83,83,4,82,86,54,0,106,86,86,8,5,84,83,86,41,84,84,2,82,86,51,0,56,84,84,86,12,192,0,0,82,84,64,0,82,86,59,0,41,86,86,4,100,7,84,86,145,7,7,0,82,84,54,0,82,84,84,0,82,86,51,0,41,86,86,2,101,84,86,7,82,86,64,0,82,84,59,0,41,84,84,4,3,86,86,84,112,8,86,4,145,8,8,0,82,86,54,0,82,86,86,0,82,84,51,0,25,84,84,1,41,84,84,2,101,86,84,8,82,84,64,0,82,86,59,0,41,86,86,4,3,84,84,86,112,9,84,8,145,9,9,0,82,84,54,0,82,84,84,0,82,86,51,0,25,86,86,2,41,86,86,2,101,84,86,9,82,86,64,0,82,84,59,0,41,84,84,4,3,86,86,84,112,10,86,12,145,10,10,0,82,86,54,0,82,86,86,0,82,84,51,0,25,84,84,3,41,84,84,2,101,86,84,10,82,84,51,0,25,84,84,4,85,51,84,0,82,84,59,0,25,84,84,1,85,59,84,0,119,0,195,255,82,84,64,0,135,82,7,0,84,0,0,0,1,82,0,0,85,64,82,0,82,82,54,0,106,82,82,12,36,82,82,1,121,82,3,0,137,68,0,0,139,0,0,0,82,82,54,0,1,84,1,0,109,82,12,84,82,84,54,0,82,84,84,0,120,84,3,0,137,68,0,0,139,0,0,0,82,82,54,0,134,84,0,0,48,253,1,0,82,0,0,0,137,68,0,0,139,0,0,0,140,2,97,0,0,0,0,0,1,88,0,0,136,91,0,0,0,89,91,0,136,91,0,0,25,91,91,63,38,91,91,192,137,91,0,0,0,90,91,0,136,91,0,0,1,92,224,0,3,91,91,92,137,91,0,0,130,91,0,0,136,92,0,0,49,91,91,92,196,192,0,0,1,92,224,0,135,91,0,0,92,0,0,0,1,91,208,0,3,86,90,91,1,91,204,0,3,85,90,91,1,91,200,0,3,87,90,91,1,91,196,0,3,52,90,91,1,91,192,0,3,51,90,91,1,91,188,0,3,25,90,91,1,91,184,0,3,37,90,91,1,91,180,0,3,40,90,91,1,91,176,0,3,39,90,91,1,91,172,0,3,36,90,91,1,91,168,0,3,38,90,91,1,91,164,0,3,58,90,91,1,91,160,0,3,70,90,91,1,91,156,0,3,75,90,91,1,91,152,0,3,46,90,91,1,91,148,0,3,41,90,91,1,91,144,0,3,53,90,91,1,91,140,0,3,31,90,91,1,91,136,0,3,80,90,91,1,91,132,0,3,26,90,91,1,91,128,0,3,73,90,91,25,78,90,124,25,49,90,120,25,44,90,116,25,56,90,112,25,34,90,108,25,83,90,104,25,30,90,100,25,74,90,96,25,79,90,92,25,50,90,88,25,45,90,84,25,57,90,80,25,35,90,76,25,84,90,72,25,27,90,68,25,71,90,64,25,76,90,60,25,47,90,56,25,42,90,52,25,54,90,48,25,32,90,44,25,81,90,40,25,28,90,36,25,72,90,32,25,77,90,28,25,48,90,24,25,43,90,20,25,55,90,16,25,33,90,12,25,24,90,8,25,82,90,4,0,29,90,0,85,86,0,0,85,85,1,0,82,91,86,0,25,91,91,4,116,51,91,0,82,91,86,0,25,91,91,64,116,25,91,0,82,92,86,0,134,91,0,0,92,77,4,0,92,0,0,0,85,37,91,0,82,91,86,0,25,91,91,100,116,40,91,0,82,91,86,0,25,91,91,104,116,39,91,0,82,91,86,0,1,92,128,0,3,91,91,92,116,36,91,0,82,91,86,0,1,92,144,0,3,91,91,92,116,38,91,0,82,91,51,0,82,92,38,0,41,92,92,1,3,91,91,92,85,58,91,0,82,92,86,0,134,91,0,0,36,91,4,0,92,0,0,0,121,91,7,0,1,92,104,72,1,93,184,68,1,94,0,6,1,95,145,72,135,91,1,0,92,93,94,95,82,91,25,0,1,95,1,0,1,96,4,0,138,91,95,96,124,196,0,0,248,197,0,0,212,199,0,0,0,202,0,0,1,94,0,0,85,87,94,0,82,94,58,0,82,93,87,0,49,94,94,93,216,194,0,0,1,88,47,0,119,0,92,0,82,94,40,0,82,93,87,0,41,93,93,3,3,94,94,93,116,72,94,0,82,94,40,0,82,93,87,0,41,93,93,3,3,94,94,93,25,94,94,4,116,77,94,0,82,94,87,0,82,93,38,0,4,94,94,93,85,48,94,0,82,93,48,0,82,95,25,0,5,94,93,95,85,43,94,0,116,55,77,0,82,95,36,0,82,93,87,0,5,94,95,93,85,33,94,0,116,52,72,0,82,94,55,0,82,93,52,0,54,94,94,93,52,196,0,0,82,93,52,0,82,95,25,0,5,94,93,95,85,82,94,0,82,95,39,0,82,93,33,0,82,92,52,0,3,93,93,92,82,92,72,0,4,93,93,92,41,93,93,2,100,94,95,93,145,94,94,0,89,29,94,0,88,94,29,0,145,94,94,0,59,95,0,0,145,95,95,0,70,94,94,95,120,94,3,0,1,88,41,0,119,0,41,0,1,94,0,0,85,24,94,0,82,94,25,0,82,95,24,0,56,94,94,95,36,196,0,0,82,94,37,0,82,95,43,0,82,93,24,0,3,95,95,93,41,95,95,2,100,9,94,95,145,9,9,0,88,94,29,0,145,94,94,0,65,66,9,94,145,66,66,0,82,94,85,0,82,95,82,0,82,93,24,0,3,95,95,93,41,95,95,2,3,20,94,95,88,94,20,0,145,94,94,0,63,95,94,66,145,95,95,0,89,20,95,0,82,95,24,0,25,95,95,1,85,24,95,0,119,0,227,255,82,95,52,0,25,95,95,1,85,52,95,0,119,0,195,255,82,95,87,0,25,95,95,1,85,87,95,0,119,0,160,255,32,95,88,41,121,95,8,0,1,94,183,72,1,93,184,68,1,92,109,6,1,96,145,72,135,95,1,0,94,93,92,96,119,0,6,2,32,95,88,47,121,95,4,2,137,89,0,0,139,0,0,0,119,0,1,2,1,95,0,0,85,87,95,0,82,95,58,0,82,94,87,0,49,95,95,94,156,196,0,0,1,88,47,0,119,0,74,0,82,95,40,0,82,94,87,0,41,94,94,3,3,95,95,94,116,70,95,0,82,95,40,0,82,94,87,0,41,94,94,3,3,95,95,94,25,95,95,4,116,75,95,0,82,95,87,0,82,94,38,0,4,95,95,94,85,46,95,0,116,41,46,0,116,53,75,0,82,94,36,0,82,93,87,0,5,95,94,93,85,31,95,0,116,52,70,0,82,95,53,0,82,93,52,0,54,95,95,93,176,197,0,0,116,80,52,0,82,93,39,0,82,94,31,0,82,92,52,0,3,94,94,92,82,92,70,0,4,94,94,92,41,94,94,2,100,95,93,94,145,95,95,0,89,26,95,0,88,95,26,0,145,95,95,0,59,93,0,0,145,93,93,0,70,95,95,93,120,95,3,0,1,88,9,0,119,0,29,0,82,95,37,0,82,93,41,0,25,93,93,0,41,93,93,2,100,10,95,93,145,10,10,0,88,95,26,0,145,95,95,0,65,67,10,95,145,67,67,0,82,95,85,0,82,93,80,0,25,93,93,0,41,93,93,2,3,21,95,93,88,95,21,0,145,95,95,0,63,93,95,67,145,93,93,0,89,21,93,0,82,93,52,0,25,93,93,1,85,52,93,0,119,0,210,255,82,93,87,0,25,93,93,1,85,87,93,0,119,0,178,255,32,93,88,9,121,93,8,0,1,95,183,72,1,94,184,68,1,92,18,6,1,96,145,72,135,93,1,0,95,94,92,96,119,0,167,1,32,93,88,47,121,93,165,1,137,89,0,0,139,0,0,0,119,0,162,1,1,93,0,0,85,87,93,0,82,93,58,0,82,96,87,0,49,93,93,96,24,198,0,0,1,88,47,0,119,0,98,0,82,93,40,0,82,96,87,0,41,96,96,3,3,93,93,96,116,73,93,0,82,93,40,0,82,96,87,0,41,96,96,3,3,93,93,96,25,93,93,4,116,78,93,0,82,93,87,0,82,96,38,0,4,93,93,96,85,49,93,0,82,93,49,0,41,93,93,1,85,44,93,0,116,56,78,0,82,96,36,0,82,92,87,0,5,93,96,92,85,34,93,0,116,52,73,0,82,93,56,0,82,92,52,0,54,93,93,92,140,199,0,0,82,93,52,0,41,93,93,1,85,83,93,0,82,92,39,0,82,96,34,0,82,94,52,0,3,96,96,94,82,94,73,0,4,96,96,94,41,96,96,2,100,93,92,96,145,93,93,0,89,30,93,0,88,93,30,0,145,93,93,0,59,92,0,0,145,92,92,0,70,93,93,92,120,93,3,0,1,88,17,0,119,0,49,0,82,93,37,0,82,92,44,0,25,92,92,0,41,92,92,2,100,11,93,92,145,11,11,0,88,93,30,0,145,93,93,0,65,68,11,93,145,68,68,0,82,93,85,0,82,92,83,0,25,92,92,0,41,92,92,2,3,22,93,92,88,93,22,0,145,93,93,0,63,92,93,68,145,92,92,0,89,22,92,0,82,92,37,0,82,93,44,0,25,93,93,1,41,93,93,2,100,12,92,93,145,12,12,0,88,92,30,0,145,92,92,0,65,69,12,92,145,69,69,0,82,92,85,0,82,93,83,0,25,93,93,1,41,93,93,2,3,23,92,93,88,92,23,0,145,92,92,0,63,93,92,69,145,93,93,0,89,23,93,0,82,93,52,0,25,93,93,1,85,52,93,0,119,0,188,255,82,93,87,0,25,93,93,1,85,87,93,0,119,0,154,255,32,93,88,17,121,93,8,0,1,92,183,72,1,96,184,68,1,94,39,6,1,95,145,72,135,93,1,0,92,96,94,95,119,0,48,1,32,93,88,47,121,93,46,1,137,89,0,0,139,0,0,0,119,0,43,1,1,93,0,0,85,87,93,0,82,93,58,0,82,95,87,0,49,93,93,95,244,199,0,0,1,88,47,0,119,0,118,0,82,93,40,0,82,95,87,0,41,95,95,3], eb + 40960);
  HEAPU8.set([3,93,93,95,116,74,93,0,82,93,40,0,82,95,87,0,41,95,95,3,3,93,93,95,25,93,93,4,116,79,93,0,82,93,87,0,82,95,38,0,4,93,93,95,85,50,93,0,82,93,50,0,27,93,93,3,85,45,93,0,116,57,79,0,82,95,36,0,82,94,87,0,5,93,95,94,85,35,93,0,116,52,74,0,82,93,57,0,82,94,52,0,54,93,93,94,184,201,0,0,82,93,52,0,27,93,93,3,85,84,93,0,82,94,39,0,82,95,35,0,82,96,52,0,3,95,95,96,82,96,74,0,4,95,95,96,41,95,95,2,100,93,94,95,145,93,93,0,89,27,93,0,88,93,27,0,145,93,93,0,59,94,0,0,145,94,94,0,70,93,93,94,120,93,3,0,1,88,25,0,119,0,69,0,82,93,37,0,82,94,45,0,25,94,94,0,41,94,94,2,100,2,93,94,145,2,2,0,88,93,27,0,145,93,93,0,65,59,2,93,145,59,59,0,82,93,85,0,82,94,84,0,25,94,94,0,41,94,94,2,3,13,93,94,88,93,13,0,145,93,93,0,63,94,93,59,145,94,94,0,89,13,94,0,82,94,37,0,82,93,45,0,25,93,93,1,41,93,93,2,100,3,94,93,145,3,3,0,88,94,27,0,145,94,94,0,65,60,3,94,145,60,60,0,82,94,85,0,82,93,84,0,25,93,93,1,41,93,93,2,3,14,94,93,88,94,14,0,145,94,94,0,63,93,94,60,145,93,93,0,89,14,93,0,82,93,37,0,82,94,45,0,25,94,94,2,41,94,94,2,100,4,93,94,145,4,4,0,88,93,27,0,145,93,93,0,65,61,4,93,145,61,61,0,82,93,85,0,82,94,84,0,25,94,94,2,41,94,94,2,3,15,93,94,88,93,15,0,145,93,93,0,63,94,93,61,145,94,94,0,89,15,94,0,82,94,52,0,25,94,94,1,85,52,94,0,119,0,168,255,82,94,87,0,25,94,94,1,85,87,94,0,119,0,134,255,32,94,88,25,121,94,8,0,1,93,183,72,1,95,184,68,1,96,61,6,1,92,145,72,135,94,1,0,93,95,96,92,119,0,165,0,32,94,88,47,121,94,163,0,137,89,0,0,139,0,0,0,119,0,160,0,1,94,0,0,85,87,94,0,82,94,58,0,82,92,87,0,49,94,94,92,32,202,0,0,1,88,47,0,119,0,138,0,82,94,40,0,82,92,87,0,41,92,92,3,3,94,94,92,116,71,94,0,82,94,40,0,82,92,87,0,41,92,92,3,3,94,94,92,25,94,94,4,116,76,94,0,82,94,87,0,82,92,38,0,4,94,94,92,85,47,94,0,82,94,47,0,41,94,94,2,85,42,94,0,116,54,76,0,82,92,36,0,82,96,87,0,5,94,92,96,85,32,94,0,116,52,71,0,82,94,54,0,82,96,52,0,54,94,94,96,52,204,0,0,82,94,52,0,41,94,94,2,85,81,94,0,82,96,39,0,82,92,32,0,82,95,52,0,3,92,92,95,82,95,71,0,4,92,92,95,41,92,92,2,100,94,96,92,145,94,94,0,89,28,94,0,88,94,28,0,145,94,94,0,59,96,0,0,145,96,96,0,70,94,94,96,120,94,3,0,1,88,33,0,119,0,89,0,82,94,37,0,82,96,42,0,25,96,96,0,41,96,96,2,100,5,94,96,145,5,5,0,88,94,28,0,145,94,94,0,65,62,5,94,145,62,62,0,82,94,85,0,82,96,81,0,25,96,96,0,41,96,96,2,3,16,94,96,88,94,16,0,145,94,94,0,63,96,94,62,145,96,96,0,89,16,96,0,82,96,37,0,82,94,42,0,25,94,94,1,41,94,94,2,100,6,96,94,145,6,6,0,88,96,28,0,145,96,96,0,65,63,6,96,145,63,63,0,82,96,85,0,82,94,81,0,25,94,94,1,41,94,94,2,3,17,96,94,88,96,17,0,145,96,96,0,63,94,96,63,145,94,94,0,89,17,94,0,82,94,37,0,82,96,42,0,25,96,96,2,41,96,96,2,100,7,94,96,145,7,7,0,88,94,28,0,145,94,94,0,65,64,7,94,145,64,64,0,82,94,85,0,82,96,81,0,25,96,96,2,41,96,96,2,3,18,94,96,88,94,18,0,145,94,94,0,63,96,94,64,145,96,96,0,89,18,96,0,82,96,37,0,82,94,42,0,25,94,94,3,41,94,94,2,100,8,96,94,145,8,8,0,88,96,28,0,145,96,96,0,65,65,8,96,145,65,65,0,82,96,85,0,82,94,81,0,25,94,94,3,41,94,94,2,3,19,96,94,88,96,19,0,145,96,96,0,63,94,96,65,145,94,94,0,89,19,94,0,82,94,52,0,25,94,94,1,85,52,94,0,119,0,148,255,82,94,87,0,25,94,94,1,85,87,94,0,119,0,114,255,32,94,88,33,121,94,8,0,1,96,183,72,1,92,184,68,1,95,84,6,1,93,145,72,135,94,1,0,96,92,95,93,119,0,6,0,32,94,88,47,121,94,4,0,137,89,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,1,59,0,0,0,0,0,136,55,0,0,0,54,55,0,136,55,0,0,1,56,16,1,3,55,55,56,137,55,0,0,130,55,0,0,136,56,0,0,49,55,55,56,188,204,0,0,1,56,16,1,135,55,0,0,56,0,0,0,1,55,4,1,3,11,54,55,1,55,144,0,3,25,54,55,25,15,54,48,25,13,54,4,1,55,212,0,3,3,54,55,1,55,208,0,3,20,54,55,1,55,188,0,3,22,54,55,1,55,184,0,3,5,54,55,1,55,164,0,3,12,54,55,1,55,128,0,3,14,54,55,25,16,54,120,25,17,54,112,25,18,54,92,25,19,54,88,25,21,54,68,25,23,54,64,25,24,54,24,0,26,54,0,1,55,0,1,3,27,54,55,1,55,252,0,3,4,54,55,1,55,248,0,3,6,54,55,1,55,244,0,3,7,54,55,1,55,240,0,3,8,54,55,1,55,236,0,3,9,54,55,1,55,232,0,3,10,54,55,2,55,0,0,224,253,1,0,82,55,55,0,85,3,55,0,2,56,0,0,228,253,1,0,82,56,56,0,109,3,4,56,2,55,0,0,232,253,1,0,82,55,55,0,109,3,8,55,2,56,0,0,236,253,1,0,82,56,56,0,109,3,12,56,2,55,0,0,240,253,1,0,82,55,55,0,109,3,16,55,134,30,0,0,232,141,4,0,76,55,30,0,58,30,55,0,134,56,0,0,232,141,4,0,28,56,56,5,76,56,56,0,62,57,0,0,164,112,61,10,215,163,248,63,65,56,56,57,64,55,30,56,145,55,55,0,75,42,55,0,1,55,255,255,85,20,55,0,116,25,3,0,106,56,3,4,109,25,4,56,106,55,3,8,109,25,8,55,106,56,3,12,109,25,12,56,106,55,3,16,109,25,16,55,78,55,20,0,83,11,55,0,102,56,20,1,107,11,1,56,102,55,20,2,107,11,2,55,102,56,20,3,107,11,3,56,1,55,0,0,134,56,0,0,192,84,3,0,25,42,55,11,2,56,0,0,244,253,1,0,82,56,56,0,85,22,56,0,2,55,0,0,248,253,1,0,82,55,55,0,109,22,4,55,2,56,0,0,252,253,1,0,82,56,56,0,109,22,8,56,2,55,0,0,0,254,1,0,82,55,55,0,109,22,12,55,2,56,0,0,4,254,1,0,82,56,56,0,109,22,16,56,134,55,0,0,180,141,4,0,76,55,55,0,145,55,55,0,59,57,236,255,145,57,57,0,63,56,55,57,145,56,56,0,75,31,56,0,1,56,255,255,85,5,56,0,116,25,22,0,106,57,22,4,109,25,4,57,106,56,22,8,109,25,8,56,106,57,22,12,109,25,12,57,106,56,22,16,109,25,16,56,78,56,5,0,83,11,56,0,102,57,5,1,107,11,1,57,102,56,5,2,107,11,2,56,102,57,5,3,107,11,3,57,1,56,5,0,134,57,0,0,192,84,3,0,25,56,31,11,134,29,0,0,156,135,4,0,0,0,0,0,134,57,0,0,236,136,4,0,0,0,0,0,4,53,29,57,134,56,0,0,156,135,4,0,0,0,0,0,6,56,53,56,27,57,56,207,25,41,57,49,76,57,41,0,145,41,57,0,2,57,0,0,28,254,1,0,82,57,57,0,85,12,57,0,2,56,0,0,32,254,1,0,82,56,56,0,109,12,4,56,2,57,0,0,36,254,1,0,82,57,57,0,109,12,8,57,2,56,0,0,40,254,1,0,82,56,56,0,109,12,12,56,2,57,0,0,44,254,1,0,82,57,57,0,109,12,16,57,59,57,0,0,145,57,57,0,89,14,57,0,59,56,0,0,145,56,56,0,113,14,4,56,113,14,8,41,59,57,17,0,145,57,57,0,113,14,12,57,59,57,19,0,145,57,57,0,89,16,57,0,134,55,0,0,180,141,4,0,76,55,55,0,145,55,55,0,59,58,236,255,145,58,58,0,63,56,55,58,145,56,56,0,113,16,4,56,1,56,255,255,85,17,56,0,116,13,12,0,106,57,12,4,109,13,4,57,106,56,12,8,109,13,8,56,106,57,12,12,109,13,12,57,106,56,12,16,109,13,16,56,116,15,14,0,106,57,14,4,109,15,4,57,106,56,14,8,109,15,8,56,106,57,14,12,109,15,12,57,116,25,16,0,106,56,16,4,109,25,4,56,78,56,17,0,83,11,56,0,102,57,17,1,107,11,1,57,102,56,17,2,107,11,2,56,102,57,17,3,107,11,3,57,134,57,0,0,240,241,2,0,13,15,25,11,2,57,0,0,8,254,1,0,82,57,57,0,85,18,57,0,2,56,0,0,12,254,1,0,82,56,56,0,109,18,4,56,2,57,0,0,16,254,1,0,82,57,57,0,109,18,8,57,2,56,0,0,20,254,1,0,82,56,56,0,109,18,12,56,2,57,0,0,24,254,1,0,82,57,57,0,109,18,16,57,134,56,0,0,232,141,4,0,76,56,56,0,145,56,56,0,59,58,56,255,145,58,58,0,63,57,56,58,145,57,57,0,75,43,57,0,134,58,0,0,180,141,4,0,76,58,58,0,145,58,58,0,59,56,112,254,145,56,56,0,63,57,58,56,145,57,57,0,75,44,57,0,1,57,255,255,85,19,57,0,116,25,18,0,106,56,18,4,109,25,4,56,106,57,18,8,109,25,8,57,106,56,18,12,109,25,12,56,106,57,18,16,109,25,16,57,78,57,19,0,83,11,57,0,102,56,19,1,107,11,1,56,102,57,19,2,107,11,2,57,102,56,19,3,107,11,3,56,134,56,0,0,192,84,3,0,25,43,44,11,2,56,0,0,8,254,1,0,82,56,56,0,85,21,56,0,2,57,0,0,12,254,1,0,82,57,57,0,109,21,4,57,2,56,0,0,16,254,1,0,82,56,56,0,109,21,8,56,2,57,0,0,20,254,1,0,82,57,57,0,109,21,12,57,2,56,0,0,24,254,1,0,82,56,56,0,109,21,16,56,134,57,0,0,232,141,4,0,76,57,57,0,145,57,57,0,59,58,56,255,145,58,58,0,63,56,57,58,145,56,56,0,75,45,56,0,134,58,0,0,180,141,4,0,76,58,58,0,145,58,58,0,59,57,182,254,145,57,57,0,63,56,58,57,145,56,56,0,75,46,56,0,1,56,255,255,85,23,56,0,116,25,21,0,106,57,21,4,109,25,4,57,106,56,21,8,109,25,8,56,106,57,21,12,109,25,12,57,106,56,21,16,109,25,16,56,78,56,23,0,83,11,56,0,102,57,23,1,107,11,1,57,102,56,23,2,107,11,2,56,102,57,23,3,107,11,3,57,134,57,0,0,192,84,3,0,25,45,46,11,2,57,0,0,8,254,1,0,82,57,57,0,85,24,57,0,2,56,0,0,12,254,1,0,82,56,56,0,109,24,4,56,2,57,0,0,16,254,1,0,82,57,57,0,109,24,8,57,2,56,0,0,20,254,1,0,82,56,56,0,109,24,12,56,2,57,0,0,24,254,1,0,82,57,57,0,109,24,16,57,134,56,0,0,232,141,4,0,76,56,56,0,145,56,56,0,59,58,56,255,145,58,58,0,63,57,56,58,145,57,57,0,75,47,57,0,134,58,0,0,180,141,4,0,76,58,58,0,145,58,58,0,59,56,252,254,145,56,56,0,63,57,58,56,145,57,57,0,75,48,57,0,1,57,255,255,85,26,57,0,116,25,24,0,106,56,24,4,109,25,4,56,106,57,24,8,109,25,8,57,106,56,24,12,109,25,12,56,106,57,24,16,109,25,16,57,78,57,26,0,83,11,57,0,102,56,26,1,107,11,1,56,102,57,26,2,107,11,2,57,102,56,26,3,107,11,3,56,134,56,0,0,192,84,3,0,25,47,48,11,134,57,0,0,232,141,4,0,76,57,57,0,145,57,57,0,59,58,126,255,145,58,58,0,63,56,57,58,145,56,56,0,75,49,56,0,134,58,0,0,180,141,4,0,76,58,58,0,145,58,58,0,59,57,112,254,145,57,57,0,63,56,58,57,145,56,56,0,75,50,56,0,1,56,0,0,83,27,56,0,1,57,121,0,107,27,1,57,1,56,241,255,107,27,2,56,1,57,255,255,107,27,3,57,78,57,27,0,83,11,57,0,102,56,27,1,107,11,1,56,102,57,27,2,107,11,2,57,102,56,27,3,107,11,3,56,1,57,156,41,1,58,20,0,134,56,0,0,248,244,2,0,57,49,50,58,11,0,0,0,134,58,0,0,232,141,4,0,76,58,58,0,145,58,58,0,59,57,126,255,145,57,57,0,63,56,58,57,145,56,56,0,75,51,56,0,134,57,0,0,180,141,4,0,76,57,57,0,145,57,57,0,59,58,132,254,145,58,58,0,63,56,57,58,145,56,56,0,75,52,56,0,1,56,0,0,83,4,56,0,1,58,228,255,107,4,1,58,1,56,48,0,107,4,2,56,1,58,255,255,107,4,3,58,78,58,4,0,83,11,58,0,102,56,4,1,107,11,1,56,102,58,4,2,107,11,2,58,102,56,4,3,107,11,3,56,1,58,163,41,1,57,20,0,134,56,0,0,248,244,2,0,58,51,52,57,11,0,0,0,134,57,0,0,232,141,4,0,76,57,57,0,145,57,57,0,59,58,126,255,145,58,58,0,63,56,57,58,145,56,56,0,75,32,56,0,134,58,0,0,180,141,4,0,76,58,58,0,145,58,58,0,59,57,182,254,145,57,57,0,63,56,58,57,145,56,56,0,75,33,56,0,1,56,0,0,83,6,56,0,1,57,121,0,107,6,1,57,1,56,241,255,107,6,2,56,1,57,255,255,107,6,3,57,78,57,6,0,83,11,57,0,102,56,6,1,107,11,1,56,102,57,6,2,107,11,2,57,102,56,6,3,107,11,3,56,1,57,168,41,1,58,20,0,134,56,0,0,248,244,2,0,57,32,33,58,11,0,0,0,134,58,0,0,232,141,4,0,76,58,58,0,145,58,58,0,59,57,126,255,145,57,57,0,63,56,58,57,145,56,56,0,75,34,56,0,134,57,0,0,180,141,4,0,76,57,57,0,145,57,57,0,59,58,202,254,145,58,58,0,63,56,57,58,145,56,56,0,75,35,56,0,1,56,0,0,83,7,56,0,1,58,228,255,107,7,1,58,1,56,48,0,107,7,2,56,1,58,255,255,107,7,3,58,78,58,7,0,83,11,58,0,102,56,7,1,107,11,1,56,102,58,7,2,107,11,2,58,102,56,7,3,107,11,3,56,1,58,175,41,1,57,20,0,134,56,0,0,248,244,2,0,58,34,35,57,11,0,0,0,134,57,0,0,232,141,4,0,76,57,57,0,145,57,57,0,59,58,126,255,145,58,58,0,63,56,57,58,145,56,56,0,75,36,56,0,134,58,0,0,180,141,4,0,76,58,58,0,145,58,58,0,59,57,252,254,145,57,57,0,63,56,58,57,145,56,56,0,75,37,56,0,1,56,0,0,83,8,56,0,1,57,121,0,107,8,1,57,1,56,241,255,107,8,2,56,1,57,255,255,107,8,3,57,78,57,8,0,83,11,57,0,102,56,8,1,107,11,1,56,102,57,8,2,107,11,2,57,102,56,8,3,107,11,3,56,1,57,180,41,1,58,20,0,134,56,0,0,248,244,2,0,57,36,37,58,11,0,0,0,134,58,0,0,232,141,4,0,76,58,58,0,145,58,58,0,59,57,126,255,145,57,57,0,63,56,58,57,145,56,56,0,75,38,56,0,134,57,0,0,180,141,4,0,76,57,57,0,145,57,57,0,59,58,16,255,145,58,58,0,63,56,57,58,145,56,56,0,75,39,56,0,1,56,0,0,83,9,56,0,1,58,228,255,107,9,1,58,1,56,48,0,107,9,2,56,1,58,255,255,107,9,3,58,78,58,9,0,83,11,58,0,102,56,9,1,107,11,1,56,102,58,9,2,107,11,2,58,102,56,9,3,107,11,3,56,1,58,185,41,1,57,20,0,134,56,0,0,248,244,2,0,58,38,39,57,11,0,0,0,134,57,0,0,88,136,4,0,0,0,0,0,134,56,0,0,140,54,4,0,25,57,0,0,102,1,25,11,82,2,25,0,134,28,0,0,180,141,4,0,76,58,28,0,145,57,58,0,59,58,211,255,145,58,58,0,63,56,57,58,145,56,56,0,75,40,56,0,1,56,230,255,83,10,56,0,1,58,41,0,107,10,1,58,1,56,55,0,107,10,2,56,1,58,255,255,107,10,3,58,78,58,10,0,83,11,58,0,102,56,10,1,107,11,1,56,102,58,10,2,107,11,2,58,102,56,10,3,107,11,3,56,41,57,1,24,42,57,57,24,34,57,57,0,125,58,57,2,25,0,0,0,1,57,5,0,1,55,20,0,134,56,0,0,248,244,2,0,58,57,40,55,11,0,0,0,134,56,0,0,204,117,4,0,25,0,0,0,137,54,0,0,139,0,0,0,140,5,137,0,0,0,0,0,2,128,0,0,0,128,0,0,2,129,0,0,255,255,255,255,136,130,0,0,0,118,130,0,136,130,0,0,25,130,130,63,38,130,130,192,137,130,0,0,0,119,130,0,136,130,0,0,2,131,0,0,144,129,1,0,3,130,130,131,137,130,0,0,130,130,0,0,136,131,0,0,49,130,130,131,52,216,0,0,2,131,0,0,144,129,1,0,135,130,0,0,131,0,0,0,2,130,0,0,64,129,1,0,3,109,119,130,2,130,0,0,128,129,1,0,3,103,119,130,2,130,0,0,56,129,1,0,3,85,119,130,2,130,0,0,124,129,1,0,3,104,119,130,2,130,0,0,120,129,1,0,3,106,119,130,2,130,0,0,48,129,1,0,3,117,119,130,2,130,0,0,116,129,1,0,3,110,119,130,2,130,0,0,112,129,1,0,3,111,119,130,2,130,0,0,108,129,1,0,3,86,119,130,2,130,0,0,104,129,1,0,3,105,119,130,2,130,0,0,100,129,1,0,3,87,119,130,2,130,0,0,40,129,1,0,3,90,119,130,2,130,0,0,32,129,1,0,3,93,119,130,2,130,0,0,96,129,1,0,3,97,119,130,2,130,0,0,0,0,1,0,3,114,119,130,2,130,0,0,92,129,1,0,3,88,119,130,2,130,0,0,24,129,1,0,3,91,119,130,2,130,0,0,16,129,1,0,3,94,119,130,2,130,0,0,128,128,1,0,3,108,119,130,2,130,0,0,88,129,1,0,3,113,119,130,2,130,0,0,84,129,1,0,3,98,119,130,3,116,119,128,2,130,0,0,80,129,1,0,3,89,119,130,2,130,0,0,8,129,1,0,3,92,119,130,2,130,0,0,0,129,1,0,3,95,119,130,2,130,0,0,0,128,1,0,3,107,119,130,2,130,0,0,76,129,1,0,3,112,119,130,2,130,0,0,72,129,1,0,3,96,119,130,0,115,119,0,85,103,0,0,0,27,85,0,85,27,1,0,109,27,4,2,85,104,3,0,85,106,4,0,82,130,103,0,32,130,130,0,82,131,104,0,32,131,131,0,20,130,130,131,121,130,16,0,0,81,109,0,1,130,0,0,85,81,130,0,1,131,0,0,109,81,4,131,0,65,109,0,0,66,65,0,82,67,66,0,25,68,65,4,0,69,68,0,82,70,69,0,135,131,12,0,70,0,0,0,137,118,0,0,139,67,0,0,0,9,117,0,1,131,0,0,85,9,131,0,1,130,0,0,109,9,4,130,82,131,103,0,82,131,131,0,134,130,0,0,192,67,4,0,131,0,0,0,85,110,130,0,82,131,103,0,106,131,131,4,134,130,0,0,192,67,4,0,131,0,0,0,85,111,130,0,82,131,111,0,82,132,103,0,106,132,132,8,5,130,131,132,85,86,130,0,116,105,104,0,82,130,103,0,106,130,130,28,121,130,248,0,82,130,103,0,82,130,130,0,82,132,103,0,106,132,132,4,45,130,130,132,36,220,0,0,0,48,117,0,106,53,48,4,0,54,85,0,106,63,54,4,48,132,53,63,144,218,0,0,1,132,1,0,0,130,132,0,119,0,11,0,45,131,53,63,172,218,0,0,82,131,48,0,82,133,54,0,16,131,131,133,0,132,131,0,119,0,3,0,1,131,0,0,0,132,131,0,0,130,132,0,120,130,2,0,119,0,176,1,0,71,85,0,0,72,117,0,82,130,71,0,106,132,71,4,82,131,72,0,106,133,72,4,134,73,0,0,8,120,4,0,130,132,131,133,135,74,3,0,0,75,90,0,85,75,73,0,109,75,4,74,0,76,90,0,82,77,76,0,106,78,76,4,0,79,93,0,85,79,77,0,109,79,4,78,0,80,93,0,106,82,80,4,1,133,0,0,16,133,133,82,32,131,82,0,82,132,80,0,16,132,129,132,19,131,131,132,20,133,133,131,0,83,133,0,0,84,93,0,1,131,255,255,125,133,83,131,77,0,0,0,85,84,133,0,1,132,0,0,125,131,83,132,78,0,0,0,109,84,4,131,82,120,103,0,106,133,120,28,38,133,133,3,82,132,93,0,82,130,105,0,82,134,106,0,135,131,13,0,133,120,132,130,134,0,0,0,85,87,131,0,82,131,87,0,120,131,2,0,119,0,125,1,0,5,117,0,82,131,5,0,106,133,5,4,82,134,87,0,1,130,0,0,134,6,0,0,164,123,4,0,131,133,134,130,135,7,3,0,0,8,117,0,85,8,6,0,109,8,4,7,82,130,87,0,82,134,86,0,5,100,130,134,82,134,105,0,3,134,134,100,85,105,134,0,0,10,93,0,106,11,10,4,1,130,0,0,48,130,130,11,244,219,0,0,1,130,1,0,0,134,130,0,119,0,11,0,32,133,11,0,121,133,6,0,82,133,87,0,82,131,10,0,16,133,133,131,0,130,133,0,119,0,3,0,1,133,0,0,0,130,133,0,0,134,130,0,121,134,148,255,119,0,87,1,82,134,110,0,7,134,128,134,82,130,103,0,106,130,130,8,7,134,134,130,85,97,134,0,0,12,117,0,106,13,12,4,0,14,85,0,106,15,14,4,48,130,13,15,96,220,0,0,1,130,1,0,0,134,130,0,119,0,11,0,45,133,13,15,124,220,0,0,82,133,12,0,82,131,14,0,16,133,133,131,0,130,133,0,119,0,3,0,1,133,0,0,0,130,133,0,0,134,130,0,120,134,2,0,119,0,60,1,0,16,85,0,0,17,117,0,82,134,16,0,106,130,16,4,82,133,17,0,106,131,17,4,134,18,0,0,8,120,4,0,134,130,133,131,135,19,3,0,0,20,91,0,85,20,18,0,109,20,4,19,0,21,91,0,106,22,21,4,0,23,94,0,116,23,21,0,109,23,4,22,0,24,94,0,106,25,24,4,1,133,0,0,48,133,133,25,248,220,0,0,1,133,1,0,0,131,133,0,119,0,11,0,32,130,25,0,121,130,6,0,82,130,97,0,82,134,24,0,16,130,130,134,0,133,130,0,119,0,3,0,1,130,0,0,0,133,130,0,0,131,133,0,121,131,5,0,0,26,94,0,116,26,97,0,1,133,0,0,109,26,4,133,82,121,103,0,106,131,121,28,38,131,131,3,82,130,94,0,82,134,106,0,135,133,13,0,131,121,130,114,134,0,0,0,85,88,133,0,82,133,88,0,120,133,2,0,119,0,7,1,82,133,88,0,82,131,103,0,106,131,131,8,5,101,133,131,82,122,103,0,106,133,122,44,38,133,133,7,82,134,105,0,1,130,0,0,106,132,122,20,135,131,14,0,133,134,114,101,130,132,0,0,0,28,117,0,82,131,28,0,106,133,28,4,82,132,88,0,1,130,0,0,134,29,0,0,164,123,4,0,131,133,132,130,135,30,3,0,0,31,117,0,85,31,29,0,109,31,4,30,82,130,88,0,82,132,86,0,5,102,130,132,82,132,105,0,3,132,132,102,85,105,132,0,0,32,94,0,106,33,32,4,1,130,0,0,48,130,130,33,0,222,0,0,1,130,1,0,0,132,130,0,119,0,11,0,32,133,33,0,121,133,6,0,82,133,88,0,82,131,32,0,16,133,133,131,0,130,133,0,119,0,3,0,1,133,0,0,0,130,133,0,0,132,130,0,121,132,133,255,119,0,212,0,82,130,103,0,106,130,130,8,1,133,64,0,134,132,0,0,176,180,2,0,116,128,130,133,108,113,0,0,82,132,113,0,82,133,110,0,7,132,132,133,85,98,132,0,0,34,117,0,106,35,34,4,0,36,85,0,106,37,36,4,48,133,35,37,128,222,0,0,1,133,1,0,0,132,133,0,119,0,11,0,45,130,35,37,156,222,0,0,82,130,34,0,82,131,36,0,16,130,130,131,0,133,130,0,119,0,3,0,1,130,0,0,0,133,130,0,0,132,133,0,120,132,2,0,119,0,180,0,0,38,85,0,0,39,117,0,82,132,38,0,106,133,38,4,82,130,39,0,106,131,39,4,134,40,0,0,8,120,4,0,132,133,130,131,135,41,3,0,0,42,92,0,85,42,40,0,109,42,4,41,0,43,92,0,106,44,43,4,0,45,95,0,116,45,43,0,109,45,4,44,0,46,95,0,106,47,46,4,1,130,0,0,48,130,130,47,24,223,0,0,1,130,1,0,0,131,130,0,119,0,11,0,32,133,47,0,121,133,6,0,82,133,98,0,82,132,46,0,16,133,133,132,0,130,133,0,119,0,3,0,1,133,0,0,0,130,133,0,0,131,130,0,121,131,5,0,0,49,95,0,116,49,98,0,1,130,0,0,109,49,4,130,82,130,103,0,82,130,130,0,82,131,103,0,106,131,131,4,45,130,130,131,156,223,0,0,82,124,103,0,106,131,124,32,38,131,131,3,82,133,95,0,82,132,106,0,135,130,13,0,131,124,133,108,132,0,0,0,85,89,130,0,82,130,89,0,120,130,74,0,119,0,121,0,82,131,103,0,106,131,131,8,1,132,64,0,134,130,0,0,176,180,2,0,115,128,131,132,107,112,0,0,0,50,95,0,106,51,50,4,1,132,0,0,48,132,132,51,216,223,0,0,1,132,1,0,0,130,132,0,119,0,13,0,32,131,51,0,121,131,8,0,82,131,112,0,82,133,110,0,7,131,131,133,82,133,50,0,16,131,131,133,0,132,131,0,119,0,3,0,1,131,0,0,0,132,131,0,0,130,132,0,121,130,8,0,0,52,95,0,82,130,112,0,82,132,110,0,7,130,130,132,85,52,130,0,1,132,0,0,109,52,4,132,82,125,103,0,106,130,125,32,38,130,130,3,82,131,95,0,82,133,106,0,135,132,13,0,130,125,131,107,133,0,0,0,85,89,132,0,82,132,89,0,120,132,2,0,119,0,74,0,1,132,0,0,85,96,132,0,82,132,103,0,106,132,132,8,82,130,96,0,57,132,132,130,188,224,0,0,82,132,96,0,41,132,132,2,0,126,132,0,82,127,103,0,106,130,127,44,38,130,130,7,94,133,108,126,94,131,107,126,82,134,89,0,1,135,0,0,106,136,127,20,135,132,14,0,130,133,131,134,135,136,0,0,82,132,96,0,25,132,132,1,85,96,132,0,119,0,234,255,82,123,103,0,106,130,123,48,38,130,130,7,82,136,105,0,82,135,89,0,1,134,0,0,106,131,123,8,135,132,14,0,130,136,108,135,134,131,0,0,0,55,117,0,82,132,55,0,106,130,55,4,82,131,89,0,1,134,0,0,134,56,0,0,164,123,4,0,132,130,131,134,135,57,3,0,0,58,117,0,85,58,56,0,109,58,4,57,82,134,89,0,82,131,86,0,5,99,134,131,82,131,105,0,3,131,131,99,85,105,131,0,0,59,95,0,106,60,59,4,1,134,0,0,48,134,134,60,76,225,0,0,1,134,1,0,0,131,134,0,119,0,11,0,32,130,60,0,121,130,6,0,82,130,89,0,82,132,59,0,16,130,130,132,0,134,130,0,119,0,3,0,1,130,0,0,0,134,130,0,0,131,134,0,121,131,58,255,119,0,1,0,0,61,117,0,106,62,61,4,0,64,109,0,116,64,61,0,109,64,4,62,0,65,109,0,0,66,65,0,82,67,66,0,25,68,65,4,0,69,68,0,82,70,69,0,135,131,12,0,70,0,0,0,137,118,0,0,139,67,0,0,140,2,86,0,0,0,0,0,2,79,0,0,144,0,0,0,2,80,0,0,184,68,0,0,2,81,0,0,209,72,0,0,1,76,0,0,136,82,0,0,0,77,82,0,136,82,0,0,25,82,82,63,38,82,82,192,137,82,0,0,0,78,82,0,136,82,0,0,25,82,82,112,137,82,0,0,130,82,0,0,136,83,0,0,49,82,82,83,32,226,0,0,1,83,112,0,135,82,0,0,83,0,0,0,25,74,78,100,25,72,78,96,25,75,78,92,25,57,78,88,25,73,78,84,25,40,78,80,25,49,78,76,25,51,78,72,25,50,78,68,25,48,78,64,25,69,78,60,25,70,78,56,25,71,78,52,25,47,78,48,25,46,78,44,25,52,78,40,25,41,78,36,25,55,78,32,25,44,78,28,25,56,78,24,25,45,78,20,25,53,78,16,25,42,78,12,25,54,78,8,25,43,78,4,0,39,78,0,85,74,0,0,85,72,1,0,82,82,74,0,25,82,82,20,116,73,82,0,82,82,74,0,25,82,82,64,116,40,82,0,82,83,74,0,134,82,0,0,92,77,4,0,83,0,0,0,85,49,82,0,82,82,74,0,25,82,82,100,116,51,82,0,82,82,74,0,25,82,82,104,116,50,82,0,82,82,74,0,1,83,128,0,3,82,82,83,116,48,82,0,1,82,0,0,85,75,82,0,82,82,73,0,82,83,75,0,49,82,82,83,4,227,0,0,1,76,43,0,119,0,203,1,82,82,51,0,82,83,75,0,41,83,83,3,3,82,82,83,116,69,82,0,82,82,51,0,82,83,75,0,41,83,83,3,3,82,82,83,25,82,82,4,116,70,82,0,82,83,75,0,82,84,40,0,5,82,83,84,85,71,82,0,82,84,48,0,82,83,75,0,5,82,84,83,85,47,82,0,1,82,0,0,85,46,82,0,82,82,70,0,82,83,69,0,47,82,82,83,112,227,0,0,1,76,4,0,119,0,176,1,82,82,69,0,1,83,0,0,82,84,74,0,94,84,84,79,4,83,83,84,47,82,82,83,148,227,0,0,1,76,6,0,119,0,167,1,82,82,70,0,1,83,0,0,82,84,74,0,94,84,84,79,4,83,83,84,47,82,82,83,184,227,0,0,1,76,8,0,119,0,158,1,82,82,74,0,106,82,82,4,82,83,74,0,94,83,83,79,3,82,82,83,82,83,69,0,49,82,82,83,224,227,0,0,1,76,10,0,119,0,148,1,82,82,74,0,106,82,82,4,82,83,74,0,94,83,83,79,3,82,82,83,82,83,70,0,49,82,82,83,8,228,0,0,1,76,12,0,119,0,138,1,82,82,40,0,1,85,1,0,1,83,4,0,138,82,85,83,36,229,0,0,228,229,0,0,252,230,0,0,100,232,0,0,116,57,69,0,82,83,70,0,82,84,57,0,54,83,83,84,28,234,0,0,82,84,57,0,82,85,40,0,5,83,84,85,85,54,83,0,82,11,50,0,82,12,47,0,82,13,46,0,25,83,13,1,85,46,83,0,3,85,12,13,41,85,85,2,100,83,11,85,145,83,83,0,89,43,83,0,88,83,43,0,145,83,83,0,59,85,0,0,145,85,85,0,70,83,83,85,120,83,3,0,1,76,37,0,119,0,103,1,1,83,0,0,85,39,83,0,82,83,40,0,82,85,39,0,56,83,83,85,20,229,0,0,82,83,49,0,82,85,54,0,82,84,39,0,3,85,85,84,41,85,85,2,100,14,83,85,145,14,14,0,88,83,43,0,145,83,83,0,65,64,14,83,145,64,64,0,82,83,72,0,82,85,71,0,82,84,39,0,3,85,85,84,41,85,85,2,3,34,83,85,88,83,34,0,145,83,83,0,63,85,83,64,145,85,85,0,89,34,85,0,82,85,39,0,25,85,85,1,85,39,85,0,119,0,227,255,82,85,57,0,25,85,85,1,85,57,85,0,119,0,195,255,116,57,69,0,82,83,70,0,82,84,57,0,54,83,83,84,28,234,0,0,116,52,57,0,82,15,50,0,82,16,47,0,82,17,46,0,25,83,17,1,85,46,83,0,3,84,16,17,41,84,84,2,100,83,15,84,145,83,83,0,89,41,83,0,88,83,41,0,145,83,83,0,59,84,0,0,145,84,84,0,70,83,83,84,120,83,3,0,1,76,17,0,119,0,43,1,82,83,49,0,82,84,52,0,25,84,84,0,41,84,84,2,100,18,83,84,145,18,18,0,88,83,41,0,145,83,83,0,65,65,18,83,145,65,65,0,82,83,72,0,82,84,71,0,25,84,84,0,41,84,84,2,3,35,83,84,88,83,35,0,145,83,83,0,63,84,83,65,145,84,84,0,89,35,84,0,82,84,57,0,25,84,84,1,85,57,84,0,119,0,210,255,116,57,69,0,82,84,70,0,82,83,57,0,54,84,84,83,28,234,0,0,82,84,57,0,41,84,84,1,85,55,84,0,82,19,50,0,82,20,47,0,82,21,46,0,25,84,21,1,85,46,84,0,3,83,20,21,41,83,83,2,100,84,19,83,145,84,84,0,89,44,84,0,88,84,44,0,145,84,84,0,59,83,0,0,145,83,83,0,70,84,84,83,120,84,3,0,1,76,22,0,119,0,249,0,82,84,49,0,82,83,55,0,25,83,83,0,41,83,83,2,100,22,84,83,145,22,22,0,88,84,44,0,145,84,84,0,65,66,22,84,145,66,66,0,82,84,72,0,82,83,71,0,25,83,83,0,41,83,83,2,3,36,84,83,88,84,36,0,145,84,84,0,63,83,84,66,145,83,83,0,89,36,83,0,82,83,49,0,82,84,55,0,25,84,84,1,41,84,84,2,100,23,83,84,145,23,23,0,88,83,44,0,145,83,83,0,65,67,23,83,145,67,67,0,82,83,72,0,82,84,71,0,25,84,84,1,41,84,84,2,3,37,83,84,88,83,37,0,145,83,83,0,63,84,83,67,145,84,84,0,89,37,84,0,82,84,57,0,25,84,84,1,85,57,84,0,119,0,188,255,116,57,69,0,82,84,70,0,82,83,57,0,54,84,84,83,28,234,0,0,82,84,57,0,27,84,84,3,85,56,84,0,82,24,50,0,82,25,47,0,82,26,46,0,25,84,26,1,85,46,84,0,3,83,25,26,41,83,83,2,100,84,24,83,145,84,84,0,89,45,84,0,88,84,45,0,145,84,84,0,59,83,0,0,145,83,83,0,70,84,84,83,120,84,3,0,1,76,27,0,119,0,179,0,82,84,49,0,82,83,56,0,25,83,83,0,41,83,83,2,100,27,84,83,145,27,27,0,88,84,45,0,145,84,84,0,65,68,27,84,145,68,68,0,82,84,72,0,82,83,71,0,25,83,83,0,41,83,83,2,3,38,84,83,88,84,38,0,145,84,84,0,63,83,84,68,145,83,83,0,89,38,83,0,82,83,49,0,82,84,56,0,25,84,84,1,41,84,84,2,100,2,83,84,145,2,2,0,88,83,45,0,145,83,83,0,65,58,2,83,145,58,58,0,82,83,72,0,82,84,71,0,25,84,84,1,41,84,84,2,3,28,83,84,88,83,28,0,145,83,83,0,63,84,83,58,145,84,84,0,89,28,84,0,82,84,49,0,82,83,56,0,25,83,83,2,41,83,83,2,100,3,84,83,145,3,3,0,88,84,45,0,145,84,84,0,65,59,3,84,145,59,59,0,82,84,72,0,82,83,71,0,25,83,83,2,41,83,83,2,3,29,84,83,88,84,29,0,145,84,84,0,63,83,84,59,145,83,83,0,89,29,83,0,82,83,57,0,25,83,83,1,85,57,83,0,119,0,168,255,116,57,69,0,82,83,70,0,82,84,57,0,54,83,83,84,28,234,0,0,82,83,57,0,41,83,83,2,85,53,83,0,82,4,50,0,82,5,47,0,82,6,46,0,25,83,6,1,85,46,83,0,3,84,5,6,41,84,84,2,100,83,4,84,145,83,83,0,89,42,83,0,88,83,42,0,145,83,83,0,59,84,0,0,145,84,84,0,70,83,83,84,120,83,3,0,1,76,32,0,119,0,89,0,82,83,49,0,82,84,53,0,25,84,84,0,41,84,84,2,100,7,83,84,145,7,7,0,88,83,42,0,145,83,83,0,65,60,7,83,145,60,60,0,82,83,72,0,82,84,71,0,25,84,84,0,41,84,84,2,3,30,83,84,88,83,30,0,145,83,83,0,63,84,83,60,145,84,84,0,89,30,84,0,82,84,49,0,82,83,53,0,25,83,83,1,41,83,83,2,100,8,84,83,145,8,8,0,88,84,42,0,145,84,84,0,65,61,8,84,145,61,61,0,82,84,72,0,82,83,71,0,25,83,83,1,41,83,83,2,3,31,84,83,88,84,31,0,145,84,84,0,63,83,84,61,145,83,83,0,89,31,83,0,82,83,49,0,82,84,53,0,25,84,84,2,41,84,84,2,100,9,83,84,145,9,9,0,88,83,42,0,145,83,83,0,65,62,9,83,145,62,62,0,82,83,72,0,82,84,71,0,25,84,84,2,41,84,84,2,3,32,83,84,88,83,32,0,145,83,83,0,63,84,83,62,145,84,84,0,89,32,84,0,82,84,49,0,82,83,53,0,25,83,83,3,41,83,83,2,100,10,84,83,145,10,10,0,88,84,42,0,145,84,84,0,65,63,10,84,145,63,63,0,82,84,72,0,82,83,71,0,25,83,83,3,41,83,83,2,3,33,84,83,88,84,33,0,145,84,84,0,63,83,84,63,145,83,83,0,89,33,83,0,82,83,57,0,25,83,83,1,85,57,83,0,119,0,148,255,82,82,75,0,25,82,82,1,85,75,82,0,119,0,49,254,1,82,4,0,1,85,40,0,138,76,82,85,220,234,0,0,216,234,0,0,240,234,0,0,216,234,0,0,4,235,0,0,216,234,0,0,24,235,0,0,216,234,0,0,44,235,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,64,235,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,84,235,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,104,235,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,124,235,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,144,235,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,216,234,0,0,164,235,0,0,119,0,54,0,1,85,200,72,1,83,180,5,135,82,1,0,85,80,83,81,119,0,49,0,1,83,245,72,1,85,181,5,135,82,1,0,83,80,85,81,119,0,44,0,1,85,39,73,1,83,182,5,135,82,1,0,85,80,83,81,119,0,39,0,1,83,89,73,1,85,183,5,135,82,1,0,83,80,85,81,119,0,34,0,1,85,159,73,1,83,184,5,135,82,1,0,85,80,83,81,119,0,29,0,1,83,183,72,1,85,192,5,135,82,1,0,83,80,85,81,119,0,24,0,1,85,183,72,1,83,201,5,135,82,1,0,85,80,83,81,119,0,19,0,1,83,183,72,1,85,211,5,135,82,1,0,83,80,85,81,119,0,14,0,1,85,183,72,1,83,222,5,135,82,1,0,85,80,83,81,119,0,9,0,1,83,183,72,1,85,235,5,135,82,1,0,83,80,85,81,119,0,4,0,137,77,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,7,66,0,0,0,0,0,2,57,0,0,255,255,0,0,2,58,0,0,255,0,0,0,1,54,0,0,136,59,0,0,0,55,59,0,136,59,0,0,25,59,59,63,38,59,59,192,137,59,0,0,0,56,59,0,136,59,0,0,1,60,0,1,3,59,59,60,137,59,0,0,130,59,0,0,136,60,0,0,49,59,59,60,24,236,0,0,1,60,0,1,135,59,0,0,60,0,0,0,1,59,240,0,3,52,56,59,1,59,236,0,3,40,56,59,1,59,232,0,3,41,56,59,1,59,228,0,3,28,56,59,1,59,224,0,3,16,56,59,1,59,220,0,3,12,56,59,1,59,216,0,3,27,56,59,1,59,212,0,3,53,56,59,1,59,208,0,3,37,56,59,1,59,204,0,3,39,56,59,0,38,56,0,1,59,200,0,3,42,56,59,1,59,196,0,3,11,56,59,1,59,192,0,3,51,56,59,1,59,188,0,3,48,56,59,1,59,184,0,3,29,56,59,1,59,180,0,3,49,56,59,1,59,176,0,3,36,56,59,1,59,172,0,3,50,56,59,1,59,168,0,3,30,56,59,1,59,164,0,3,43,56,59,1,59,160,0,3,31,56,59,1,59,156,0,3,44,56,59,1,59,152,0,3,32,56,59,1,59,148,0,3,45,56,59,1,59,144,0,3,33,56,59,1,59,140,0,3,46,56,59,1,59,136,0,3,34,56,59,1,59,132,0,3,47,56,59,1,59,128,0,3,35,56,59,85,52,0,0,85,40,1,0,85,41,2,0,85,28,3,0,85,16,4,0,85,12,5,0,85,27,6,0,82,59,52,0,106,59,59,72,38,59,59,1,120,59,66,0,1,59,0,0,85,53,59,0,82,59,40,0,82,60,53,0,56,59,59,60,52,238,0,0,82,60,53,0,82,61,16,0,5,59,60,61,85,42,59,0,82,61,28,0,82,60,42,0,82,62,12,0,3,60,60,62,41,60,60,2,100,59,61,60,145,59,59,0,89,11,59,0,88,59,11,0,145,59,59,0,59,61,0,0,145,61,61,0,70,59,59,61,121,59,8,0,59,59,1,0,145,59,59,0,88,61,11,0,145,61,61,0,66,17,59,61,145,17,17,0,119,0,3,0,59,17,0,0,145,17,17,0,89,51,17,0,1,61,0,0,85,37,61,0,82,61,16,0,82,59,37,0,56,61,61,59,36,238,0,0,82,61,37,0,82,59,12,0,46,61,61,59,20,238,0,0,88,7,51,0,145,7,7,0,82,61,28,0,82,59,42,0,82,60,37,0,3,59,59,60,41,59,59,2,3,13,61,59,88,61,13,0,145,61,61,0,65,59,61,7,145,59,59,0,89,13,59,0,82,59,37,0,25,59,59,1,85,37,59,0,119,0,232,255,82,59,53,0,25,59,59,1,85,53,59,0,119,0,194,255,1,59,0,0,85,53,59,0,1,59,0,0,85,39,59,0,82,59,16,0,82,61,53,0,56,59,59,61,188,238,0,0,82,59,53,0,82,61,12,0,46,59,59,61,108,238,0,0,1,54,16,0,119,0,6,0,82,59,52,0,106,59,59,72,38,59,59,2,121,59,2,0,1,54,16,0,32,59,54,16,121,59,10,0,1,54,0,0,82,59,53,0,19,59,59,57,0,18,59,0,82,10,39,0,25,59,10,1,85,39,59,0,41,59,10,1,96,38,59,18,82,59,53,0,25,59,59,1,85,53,59,0,119,0,227,255,82,59,27,0,1,60,0,0,1,64,8,0,138,59,60,64,8,239,0,0,220,239,0,0,4,241,0,0,224,241,0,0,84,243,0,0,36,244,0,0,128,245,0,0,32,246,0,0,1,61,229,73,1,62,184,68,1,63,69,7,1,64,94,74,135,60,1,0,61,62,63,64,119,0,6,2,1,61,0,0,85,53,61,0,82,61,40,0,82,60,53,0,56,61,61,60,208,239,0,0,82,60,53,0,82,62,16,0,5,61,60,62,85,48,61,0,1,61,0,0,85,37,61,0,82,61,16,0,82,62,37,0,56,61,61,62,192,239,0,0,82,61,48,0,82,62,37,0,3,61,61,62,85,29,61,0,82,63,28,0,82,64,29,0,41,64,64,2,100,60,63,64,145,60,60,0,134,62,0,0,72,47,4,0,60,0,0,0,145,62,62,0,59,60,255,0,145,60,60,0,65,61,62,60,145,61,61,0,61,60,0,0,0,0,0,63,63,61,61,60,75,61,61,0,19,61,61,58,0,25,61,0,82,61,41,0,82,60,29,0,95,61,60,25,82,60,37,0,25,60,60,1,85,37,60,0,119,0,223,255,82,60,53,0,25,60,60,1,85,53,60,0,119,0,209,255,137,55,0,0,139,0,0,0,119,0,1,0,1,60,0,0,85,53,60,0,82,60,40,0,82,61,53,0,56,60,60,61,248,240,0,0,82,61,53,0,82,62,16,0,5,60,61,62], eb + 51200);
  HEAPU8.set([85,49,60,0,1,60,0,0,85,37,60,0,82,60,39,0,82,62,37,0,56,60,60,62,112,240,0,0,82,60,49,0,82,62,37,0,41,62,62,1,93,62,38,62,3,60,60,62,85,36,60,0,82,62,28,0,82,61,36,0,41,61,61,2,100,60,62,61,145,60,60,0,134,15,0,0,184,173,3,0,60,0,0,0,82,60,41,0,82,62,36,0,95,60,62,15,82,62,37,0,25,62,62,1,85,37,62,0,119,0,232,255,82,62,52,0,106,62,62,72,38,62,62,2,120,62,27,0,82,63,28,0,82,64,49,0,82,65,12,0,3,64,64,65,41,64,64,2,100,61,63,64,145,61,61,0,134,60,0,0,72,47,4,0,61,0,0,0,145,60,60,0,59,61,255,0,145,61,61,0,65,62,60,61,145,62,62,0,61,61,0,0,0,0,0,63,63,62,62,61,75,62,62,0,19,62,62,58,0,26,62,0,82,62,41,0,82,61,49,0,82,60,12,0,3,61,61,60,95,62,61,26,82,61,53,0,25,61,61,1,85,53,61,0,119,0,188,255,137,55,0,0,139,0,0,0,119,0,1,0,1,61,0,0,85,53,61,0,82,61,40,0,82,62,53,0,56,61,61,62,212,241,0,0,82,62,53,0,82,60,16,0,5,61,62,60,85,50,61,0,1,61,0,0,85,37,61,0,82,61,16,0,82,60,37,0,56,61,61,60,196,241,0,0,82,61,50,0,82,60,37,0,3,61,61,60,85,30,61,0,82,63,28,0,82,64,30,0,41,64,64,2,100,62,63,64,145,62,62,0,134,60,0,0,72,47,4,0,62,0,0,0,145,60,60,0,60,62,0,0,255,255,0,0,145,62,62,0,65,61,60,62,145,61,61,0,61,62,0,0,0,0,0,63,63,61,61,62,75,61,61,0,19,61,61,57,0,19,61,0,82,61,41,0,82,62,30,0,41,62,62,1,96,61,62,19,82,62,37,0,25,62,62,1,85,37,62,0,119,0,221,255,82,62,53,0,25,62,62,1,85,53,62,0,119,0,207,255,137,55,0,0,139,0,0,0,119,0,1,0,1,62,0,0,85,53,62,0,82,62,40,0,82,61,53,0,56,62,62,61,72,243,0,0,82,61,53,0,82,60,16,0,5,62,61,60,85,43,62,0,1,62,0,0,85,37,62,0,82,62,39,0,82,60,37,0,56,62,62,60,184,242,0,0,82,62,43,0,82,60,37,0,41,60,60,1,93,60,38,60,3,62,62,60,85,31,62,0,82,64,28,0,82,65,31,0,41,65,65,2,100,63,64,65,145,63,63,0,134,61,0,0,72,47,4,0,63,0,0,0,145,61,61,0,134,60,0,0,84,235,3,0,61,0,0,0,145,60,60,0,60,61,0,0,255,255,0,0,145,61,61,0,65,62,60,61,145,62,62,0,61,61,0,0,0,0,0,63,63,62,62,61,75,62,62,0,19,62,62,57,0,20,62,0,82,62,41,0,82,61,31,0,41,61,61,1,96,62,61,20,82,61,37,0,25,61,61,1,85,37,61,0,119,0,215,255,82,61,52,0,106,61,61,72,38,61,61,2,120,61,29,0,82,63,28,0,82,64,43,0,82,65,12,0,3,64,64,65,41,64,64,2,100,60,63,64,145,60,60,0,134,62,0,0,72,47,4,0,60,0,0,0,145,62,62,0,60,60,0,0,255,255,0,0,145,60,60,0,65,61,62,60,145,61,61,0,61,60,0,0,0,0,0,63,63,61,61,60,75,61,61,0,19,61,61,57,0,21,61,0,82,61,41,0,82,60,43,0,82,62,12,0,3,60,60,62,41,60,60,1,96,61,60,21,82,60,53,0,25,60,60,1,85,53,60,0,119,0,169,255,137,55,0,0,139,0,0,0,119,0,1,0,1,60,0,0,85,53,60,0,82,60,40,0,82,61,53,0,56,60,60,61,24,244,0,0,82,61,53,0,82,62,16,0,5,60,61,62,85,44,60,0,1,60,0,0,85,37,60,0,82,60,16,0,82,62,37,0,56,60,60,62,8,244,0,0,82,60,44,0,82,62,37,0,3,60,60,62,85,32,60,0,82,61,28,0,82,63,32,0,41,63,63,2,100,62,61,63,145,62,62,0,134,60,0,0,72,47,4,0,62,0,0,0,145,60,60,0,62,62,0,0,0,0,224,255,255,255,239,65,65,60,60,62,61,62,0,0,0,0,0,63,63,60,60,62,75,22,60,0,82,60,41,0,82,62,32,0,41,62,62,2,97,60,62,22,82,62,37,0,25,62,62,1,85,37,62,0,119,0,224,255,82,62,53,0,25,62,62,1,85,53,62,0,119,0,210,255,137,55,0,0,139,0,0,0,119,0,1,0,1,62,0,0,85,53,62,0,82,62,40,0,82,60,53,0,56,62,62,60,116,245,0,0,82,60,53,0,82,61,16,0,5,62,60,61,85,45,62,0,1,62,0,0,85,37,62,0,82,62,39,0,82,61,37,0,56,62,62,61,240,244,0,0,82,62,45,0,82,61,37,0,41,61,61,1,93,61,38,61,3,62,62,61,85,33,62,0,82,63,28,0,82,64,33,0,41,64,64,2,100,60,63,64,145,60,60,0,134,61,0,0,72,47,4,0,60,0,0,0,145,61,61,0,134,62,0,0,84,235,3,0,61,0,0,0,145,62,62,0,62,61,0,0,0,0,224,255,255,255,239,65,65,62,62,61,61,61,0,0,0,0,0,63,63,62,62,61,75,23,62,0,82,62,41,0,82,61,33,0,41,61,61,2,97,62,61,23,82,61,37,0,25,61,61,1,85,37,61,0,119,0,218,255,82,61,52,0,106,61,61,72,38,61,61,2,120,61,26,0,82,60,28,0,82,63,45,0,82,64,12,0,3,63,63,64,41,63,63,2,100,62,60,63,145,62,62,0,134,61,0,0,72,47,4,0,62,0,0,0,145,61,61,0,62,62,0,0,0,0,224,255,255,255,239,65,65,61,61,62,61,62,0,0,0,0,0,63,63,61,61,62,75,24,61,0,82,61,41,0,82,62,45,0,82,60,12,0,3,62,62,60,41,62,62,2,97,61,62,24,82,62,53,0,25,62,62,1,85,53,62,0,119,0,175,255,137,55,0,0,139,0,0,0,119,0,1,0,1,62,0,0,85,53,62,0,82,62,40,0,82,61,53,0,56,62,62,61,20,246,0,0,82,61,53,0,82,60,16,0,5,62,61,60,85,46,62,0,1,62,0,0,85,37,62,0,82,62,16,0,82,60,37,0,56,62,62,60,4,246,0,0,82,62,46,0,82,60,37,0,3,62,62,60,85,34,62,0,82,62,28,0,82,60,34,0,41,60,60,2,100,8,62,60,145,8,8,0,82,62,41,0,82,60,34,0,41,60,60,2,101,62,60,8,82,60,37,0,25,60,60,1,85,37,60,0,119,0,236,255,82,60,53,0,25,60,60,1,85,53,60,0,119,0,222,255,137,55,0,0,139,0,0,0,119,0,1,0,1,60,0,0,85,53,60,0,82,60,40,0,82,62,53,0,56,60,60,62,16,247,0,0,82,62,53,0,82,61,16,0,5,60,62,61,85,47,60,0,1,60,0,0,85,37,60,0,82,60,39,0,82,61,37,0,56,60,60,61,188,246,0,0,82,60,47,0,82,61,37,0,41,61,61,1,93,61,38,61,3,60,60,61,85,35,60,0,82,61,28,0,82,62,35,0,41,62,62,2,100,60,61,62,145,60,60,0,134,14,0,0,84,235,3,0,60,0,0,0,145,14,14,0,82,60,41,0,82,61,35,0,41,61,61,2,101,60,61,14,82,61,37,0,25,61,61,1,85,37,61,0,119,0,230,255,82,61,52,0,106,61,61,72,38,61,61,2,120,61,14,0,82,61,28,0,82,60,47,0,82,62,12,0,3,60,60,62,41,60,60,2,100,9,61,60,145,9,9,0,82,61,41,0,82,60,47,0,82,62,12,0,3,60,60,62,41,60,60,2,101,61,60,9,82,60,53,0,25,60,60,1,85,53,60,0,119,0,199,255,137,55,0,0,139,0,0,0,119,0,245,253,139,0,0,0,140,2,123,0,0,0,0,0,2,113,0,0,186,128,0,0,2,114,0,0,189,128,0,0,2,115,0,0,185,128,0,0,2,116,0,0,0,1,0,0,2,117,0,0,12,3,2,0,2,118,0,0,20,4,2,0,2,119,0,0,190,128,0,0,3,62,0,1,106,3,0,4,38,120,3,1,120,120,228,0,82,4,0,0,38,120,3,3,120,120,2,0,139,0,0,0,1,120,0,0,4,120,120,4,3,63,0,120,3,68,4,1,2,120,0,0,244,2,2,0,82,12,120,0,48,120,63,12,168,247,0,0,135,120,15,0,2,120,0,0,248,2,2,0,82,120,120,0,45,120,120,63,0,248,0,0,25,100,62,4,82,16,100,0,38,120,16,3,33,120,120,3,121,120,4,0,0,102,63,0,0,103,68,0,119,0,203,0,2,120,0,0,236,2,2,0,85,120,68,0,38,120,16,254,85,100,120,0,39,121,68,1,109,63,4,121,85,62,68,0,139,0,0,0,43,121,4,3,0,109,121,0,48,121,4,116,208,248,0,0,106,21,63,8,106,30,63,12,41,121,109,1,41,121,121,2,3,72,117,121,46,121,21,72,72,248,0,0,48,121,21,12,56,248,0,0,135,121,15,0,106,121,21,12,46,121,121,63,72,248,0,0,135,121,15,0,45,121,30,21,132,248,0,0,2,121,0,0,228,2,2,0,2,120,0,0,228,2,2,0,82,120,120,0,1,122,1,0,22,122,122,109,11,122,122,0,19,120,120,122,85,121,120,0,0,102,63,0,0,103,68,0,119,0,161,0,45,120,30,72,148,248,0,0,25,97,30,8,119,0,11,0,48,120,30,12,160,248,0,0,135,120,15,0,25,96,30,8,82,120,96,0,45,120,120,63,184,248,0,0,0,97,96,0,119,0,2,0,135,120,15,0,109,21,12,30,85,97,21,0,0,102,63,0,0,103,68,0,119,0,142,0,106,42,63,24,106,5,63,12,45,120,5,63,120,249,0,0,25,89,63,16,25,85,89,4,82,7,85,0,120,7,8,0,82,8,89,0,120,8,3,0,1,49,0,0,119,0,49,0,0,48,8,0,0,56,89,0,119,0,3,0,0,48,7,0,0,56,85,0,0,46,48,0,0,54,56,0,25,86,46,20,82,9,86,0,120,9,8,0,25,73,46,16,82,10,73,0,120,10,2,0,119,0,9,0,0,47,10,0,0,55,73,0,119,0,3,0,0,47,9,0,0,55,86,0,0,46,47,0,0,54,55,0,119,0,242,255,48,120,54,12,104,249,0,0,135,120,15,0,119,0,23,0,1,120,0,0,85,54,120,0,0,49,46,0,119,0,19,0,106,6,63,8,48,120,6,12,136,249,0,0,135,120,15,0,25,88,6,12,82,120,88,0,46,120,120,63,156,249,0,0,135,120,15,0,25,99,5,8,82,120,99,0,45,120,120,63,188,249,0,0,85,88,5,0,85,99,6,0,0,49,5,0,119,0,2,0,135,120,15,0,120,42,4,0,0,102,63,0,0,103,68,0,119,0,78,0,106,11,63,28,41,120,11,2,3,74,118,120,82,120,74,0,45,120,120,63,36,250,0,0,85,74,49,0,120,49,34,0,2,120,0,0,232,2,2,0,2,121,0,0,232,2,2,0,82,121,121,0,1,122,1,0,22,122,122,11,11,122,122,0,19,121,121,122,85,120,121,0,0,102,63,0,0,103,68,0,119,0,57,0,2,121,0,0,244,2,2,0,82,121,121,0,48,121,42,121,64,250,0,0,135,121,15,0,119,0,14,0,25,75,42,16,82,120,75,0,45,120,120,63,88,250,0,0,0,121,75,0,119,0,3,0,25,120,42,20,0,121,120,0,85,121,49,0,120,49,4,0,0,102,63,0,0,103,68,0,119,0,37,0,2,121,0,0,244,2,2,0,82,13,121,0,48,121,49,13,140,250,0,0,135,121,15,0,109,49,24,42,25,90,63,16,82,14,90,0,121,14,8,0,48,121,14,13,172,250,0,0,135,121,15,0,119,0,4,0,109,49,16,14,109,14,24,49,119,0,1,0,106,15,90,4,120,15,4,0,0,102,63,0,0,103,68,0,119,0,15,0,2,121,0,0,244,2,2,0,82,121,121,0,48,121,15,121,232,250,0,0,135,121,15,0,119,0,8,0,109,49,20,15,109,15,24,49,0,102,63,0,0,103,68,0,119,0,3,0,0,102,0,0,0,103,1,0,2,121,0,0,244,2,2,0,82,17,121,0,48,121,62,17,28,251,0,0,135,121,15,0,25,101,62,4,82,18,101,0,38,121,18,2,120,121,244,0,2,121,0,0,252,2,2,0,82,121,121,0,45,121,121,62,172,251,0,0,2,121,0,0,240,2,2,0,82,121,121,0,3,64,121,103,2,121,0,0,240,2,2,0,85,121,64,0,2,121,0,0,252,2,2,0,85,121,102,0,39,120,64,1,109,102,4,120,2,120,0,0,248,2,2,0,82,120,120,0,46,120,102,120,136,251,0,0,139,0,0,0,2,120,0,0,248,2,2,0,1,121,0,0,85,120,121,0,2,121,0,0,236,2,2,0,1,120,0,0,85,121,120,0,139,0,0,0,2,120,0,0,248,2,2,0,82,120,120,0,45,120,120,62,248,251,0,0,2,120,0,0,236,2,2,0,82,120,120,0,3,65,120,103,2,120,0,0,236,2,2,0,85,120,65,0,2,120,0,0,248,2,2,0,85,120,102,0,39,121,65,1,109,102,4,121,97,102,65,65,139,0,0,0,38,121,18,248,3,66,121,103,43,121,18,3,0,110,121,0,48,121,18,116,192,252,0,0,106,19,62,8,106,20,62,12,41,121,110,1,41,121,121,2,3,76,117,121,46,121,19,76,72,252,0,0,48,121,19,17,56,252,0,0,135,121,15,0,106,121,19,12,46,121,121,62,72,252,0,0,135,121,15,0,45,121,20,19,124,252,0,0,2,121,0,0,228,2,2,0,2,120,0,0,228,2,2,0,82,120,120,0,1,122,1,0,22,122,122,110,11,122,122,0,19,120,120,122,85,121,120,0,119,0,145,0,45,120,20,76,140,252,0,0,25,94,20,8,119,0,11,0,48,120,20,17,152,252,0,0,135,120,15,0,25,93,20,8,82,120,93,0,45,120,120,62,176,252,0,0,0,94,93,0,119,0,2,0,135,120,15,0,109,19,12,20,85,94,19,0,119,0,128,0,106,22,62,24,106,23,62,12,45,120,23,62,104,253,0,0,25,91,62,16,25,77,91,4,82,25,77,0,120,25,8,0,82,26,91,0,120,26,3,0,1,53,0,0,119,0,49,0,0,52,26,0,0,59,91,0,119,0,3,0,0,52,25,0,0,59,77,0,0,50,52,0,0,57,59,0,25,78,50,20,82,27,78,0,120,27,8,0,25,79,50,16,82,28,79,0,120,28,2,0,119,0,9,0,0,51,28,0,0,58,79,0,119,0,3,0,0,51,27,0,0,58,78,0,0,50,51,0,0,57,58,0,119,0,242,255,48,120,57,17,88,253,0,0,135,120,15,0,119,0,23,0,1,120,0,0,85,57,120,0,0,53,50,0,119,0,19,0,106,24,62,8,48,120,24,17,120,253,0,0,135,120,15,0,25,87,24,12,82,120,87,0,46,120,120,62,140,253,0,0,135,120,15,0,25,95,23,8,82,120,95,0,45,120,120,62,172,253,0,0,85,87,23,0,85,95,24,0,0,53,23,0,119,0,2,0,135,120,15,0,121,22,67,0,106,29,62,28,41,120,29,2,3,80,118,120,82,120,80,0,45,120,120,62,0,254,0,0,85,80,53,0,120,53,30,0,2,120,0,0,232,2,2,0,2,121,0,0,232,2,2,0,82,121,121,0,1,122,1,0,22,122,122,29,11,122,122,0,19,121,121,122,85,120,121,0,119,0,48,0,2,121,0,0,244,2,2,0,82,121,121,0,48,121,22,121,28,254,0,0,135,121,15,0,119,0,12,0,25,81,22,16,82,120,81,0,45,120,120,62,52,254,0,0,0,121,81,0,119,0,3,0,25,120,22,20,0,121,120,0,85,121,53,0,120,53,2,0,119,0,30,0,2,121,0,0,244,2,2,0,82,31,121,0,48,121,53,31,96,254,0,0,135,121,15,0,109,53,24,22,25,92,62,16,82,32,92,0,121,32,8,0,48,121,32,31,128,254,0,0,135,121,15,0,119,0,4,0,109,53,16,32,109,32,24,53,119,0,1,0,106,33,92,4,121,33,11,0,2,121,0,0,244,2,2,0,82,121,121,0,48,121,33,121,176,254,0,0,135,121,15,0,119,0,4,0,109,53,20,33,109,33,24,53,119,0,1,0,39,120,66,1,109,102,4,120,97,102,66,66,2,120,0,0,248,2,2,0,82,120,120,0,45,120,102,120,240,254,0,0,2,120,0,0,236,2,2,0,85,120,66,0,139,0,0,0,119,0,9,0,0,104,66,0,119,0,7,0,38,120,18,254,85,101,120,0,39,121,103,1,109,102,4,121,97,102,103,103,0,104,103,0,43,121,104,3,0,111,121,0,48,121,104,116,168,255,0,0,41,121,111,1,41,121,121,2,3,82,117,121,2,121,0,0,228,2,2,0,82,34,121,0,1,121,1,0,22,121,121,111,0,105,121,0,19,121,34,105,120,121,8,0,2,121,0,0,228,2,2,0,20,120,34,105,85,121,120,0,25,2,82,8,0,43,82,0,119,0,12,0,25,35,82,8,82,36,35,0,2,120,0,0,244,2,2,0,82,120,120,0,48,120,36,120,140,255,0,0,135,120,15,0,119,0,3,0,0,2,35,0,0,43,36,0,85,2,102,0,109,43,12,102,109,102,8,43,109,102,12,82,139,0,0,0,43,120,104,8,0,112,120,0,120,112,3,0,1,44,0,0,119,0,42,0,2,120,0,0,255,255,255,0,48,120,120,104,212,255,0,0,1,44,31,0,119,0,36,0,2,120,0,0,0,255,15,0,3,120,112,120,43,120,120,16,38,120,120,8,0,69,120,0,22,120,112,69,0,106,120,0,2,120,0,0,0,240,7,0,3,120,106,120,43,120,120,16,38,120,120,4,0,70,120,0,22,120,106,70,0,107,120,0,2,120,0,0,0,192,3,0,3,120,107,120,43,120,120,16,38,120,120,2,0,71,120,0,1,120,14,0,20,121,70,69,20,121,121,71,4,120,120,121,22,121,107,71,43,121,121,15,3,67,120,121,25,121,67,7,24,121,104,121,38,121,121,1,41,120,67,1,20,121,121,120,0,44,121,0,41,121,44,2,3,83,118,121,109,102,28,44,1,120,0,0,109,102,20,120,1,121,0,0,109,102,16,121,2,121,0,0,232,2,2,0,82,37,121,0,1,121,1,0,22,121,121,44,0,108,121,0,19,121,37,108,120,121,10,0,2,121,0,0,232,2,2,0,20,120,37,108,85,121,120,0,85,83,102,0,109,102,24,83,109,102,12,102,109,102,8,102,139,0,0,0,82,38,83,0,106,120,38,4,38,120,120,248,45,120,120,104,220,0,1,0,0,60,38,0,119,0,41,0,32,121,44,31,121,121,4,0,1,121,0,0,0,120,121,0,119,0,5,0,1,121,25,0,43,122,44,1,4,121,121,122,0,120,121,0,22,120,104,120,0,45,120,0,0,61,38,0,25,120,61,16,43,121,45,31,41,121,121,2,3,84,120,121,82,39,84,0,120,39,2,0,119,0,11,0,106,121,39,4,38,121,121,248,45,121,121,104,64,1,1,0,0,60,39,0,119,0,16,0,41,121,45,1,0,45,121,0,0,61,39,0,119,0,240,255,2,121,0,0,244,2,2,0,82,121,121,0,48,121,84,121,104,1,1,0,135,121,15,0,85,84,102,0,109,102,24,61,109,102,12,102,109,102,8,102,139,0,0,0,25,98,60,8,82,40,98,0,2,121,0,0,244,2,2,0,82,41,121,0,18,121,41,40,18,120,41,60,19,121,121,120,120,121,2,0,135,121,15,0,109,40,12,102,85,98,102,0,109,102,8,40,109,102,12,60,1,120,0,0,109,102,24,120,139,0,0,0,140,9,114,0,0,0,0,0,136,105,0,0,0,100,105,0,136,105,0,0,1,106,160,0,3,105,105,106,137,105,0,0,130,105,0,0,136,106,0,0,49,105,105,106,252,1,1,0,1,106,160,0,135,105,0,0,106,0,0,0,1,105,152,0,3,78,100,105,1,105,148,0,3,87,100,105,1,105,144,0,3,68,100,105,1,105,140,0,3,79,100,105,1,105,136,0,3,96,100,105,1,105,132,0,3,95,100,105,1,105,128,0,3,99,100,105,1,105,156,0,3,58,100,105,25,88,100,124,25,89,100,120,25,69,100,116,25,53,100,112,25,74,100,108,25,92,100,104,25,72,100,100,25,56,100,96,25,77,100,92,25,90,100,16,25,70,100,8,0,54,100,0,25,75,100,88,25,85,100,84,25,82,100,80,25,84,100,76,25,81,100,72,25,83,100,68,25,80,100,64,25,76,100,60,25,91,100,56,25,71,100,52,25,55,100,48,25,93,100,44,25,73,100,40,25,57,100,36,25,94,100,32,25,97,100,28,25,98,100,24,85,78,0,0,85,87,1,0,85,68,2,0,85,79,3,0,85,96,4,0,85,95,5,0,85,99,6,0,38,105,7,1,83,58,105,0,85,88,8,0,82,106,87,0,32,106,106,0,121,106,4,0,1,106,1,0,0,105,106,0,119,0,5,0,82,106,79,0,82,107,68,0,17,106,106,107,0,105,106,0,121,105,3,0,137,100,0,0,139,0,0,0,82,105,79,0,82,106,68,0,25,106,106,1,46,105,105,106,248,5,1,0,1,105,255,0,85,85,105,0,1,105,0,0,85,82,105,0,1,105,255,0,85,84,105,0,1,105,0,0,85,81,105,0,1,105,255,0,85,83,105,0,1,105,0,0,85,80,105,0,1,105,0,0,85,76,105,0,82,105,87,0,82,106,76,0,56,105,105,106,56,4,1,0,82,105,78,0,82,106,76,0,41,106,106,2,25,106,106,0,91,105,105,106,85,91,105,0,82,105,78,0,82,106,76,0,41,106,106,2,25,106,106,1,91,105,105,106,85,71,105,0,82,105,78,0,82,106,76,0,41,106,106,2,25,106,106,2,91,105,105,106,85,55,105,0,82,105,82,0,82,106,91,0,47,105,105,106,196,3,1,0,116,82,91,0,82,105,91,0,82,106,85,0,47,105,105,106,216,3,1,0,116,85,91,0,82,105,81,0,82,106,71,0,47,105,105,106,236,3,1,0,116,81,71,0,82,105,71,0,82,106,84,0,47,105,105,106,0,4,1,0,116,84,71,0,82,105,80,0,82,106,55,0,47,105,105,106,20,4,1,0,116,80,55,0,82,105,55,0,82,106,83,0,47,105,105,106,40,4,1,0,116,83,55,0,82,105,76,0,25,105,105,1,85,76,105,0,119,0,201,255,82,105,82,0,82,106,85,0,4,105,105,106,85,93,105,0,82,105,81,0,82,106,84,0,4,105,105,106,85,73,105,0,82,105,80,0,82,106,83,0,4,105,105,106,85,57,105,0,1,105,1,0,85,94,105,0,82,106,73,0,82,107,57,0,15,106,106,107,1,107,2,0,1,108,1,0,125,105,106,107,108,0,0,0,85,94,105,0,82,105,57,0,82,108,93,0,47,105,105,108,184,4,1,0,82,105,73,0,82,108,93,0,47,105,105,108,184,4,1,0,1,105,0,0,85,94,105,0,82,105,87,0,82,108,96,0,82,107,68,0,4,108,108,107,5,86,105,108,82,108,79,0,82,105,68,0,4,108,108,105,6,108,86,108,85,97,108,0,82,108,87,0,82,105,97,0,4,108,108,105,85,98,108,0,82,105,78,0,1,107,0,0,82,106,87,0,82,109,94,0,82,110,97,0,134,108,0,0,160,78,3,0,105,107,106,109,110,0,0,0,82,108,88,0,1,110,4,3,3,108,108,110,82,110,99,0,82,109,94,0,95,108,110,109,82,109,88,0,1,110,3,4,3,109,109,110,82,110,99,0,82,108,78,0,82,106,97,0,41,106,106,2,82,107,94,0,3,106,106,107,90,108,108,106,95,109,110,108,82,101,96,0,82,102,95,0,82,110,78,0,82,109,97,0,82,106,68,0,4,107,101,102,28,105,102,2,82,111,99,0,41,111,111,1,78,112,58,0,38,112,112,1,82,113,88,0,134,108,0,0,192,1,1,0,110,109,106,101,107,105,111,112,113,0,0,0,82,103,96,0,82,104,95,0,82,113,78,0,82,112,97,0,41,112,112,2,3,113,113,112,82,112,98,0,82,111,79,0,3,105,103,104,28,107,104,2,82,106,99,0,41,106,106,1,25,106,106,1,78,109,58,0,38,109,109,1,82,110,88,0,134,108,0,0,192,1,1,0,113,112,103,111,105,107,106,109,110,0,0,0,137,100,0,0,139,0,0,0,78,108,58,0,38,108,108,1,121,108,176,0,82,108,68,0,32,108,108,1,121,108,83,0,1,108,255,0,85,89,108,0,1,108,255,0,85,69,108,0,1,108,255,0,85,53,108,0,1,108,0,0,85,74,108,0,82,51,89,0,82,108,87,0,82,110,74,0,56,108,108,110,16,7,1,0,82,108,78,0,82,110,74,0,41,110,110,2,25,110,110,0,91,108,108,110,48,108,51,108,104,6,1,0,82,59,89,0,119,0,6,0,82,108,78,0,82,110,74,0,41,110,110,2,25,110,110,0,91,59,108,110,85,89,59,0,82,108,69,0,82,110,78,0,82,109,74,0,41,109,109,2,25,109,109,1,91,110,110,109,48,108,108,110,168,6,1,0,82,61,69,0,119,0,6,0,82,108,78,0,82,110,74,0,41,110,110,2,25,110,110,1,91,61,108,110,85,69,61,0,82,108,53,0,82,110,78,0,82,109,74,0,41,109,109,2,25,109,109,2,91,110,110,109,48,108,108,110,232,6,1,0,82,62,53,0,119,0,6,0,82,108,78,0,82,110,74,0,41,110,110,2,25,110,110,2,91,62,108,110,85,53,62,0,82,108,74,0,25,108,108,1,85,74,108,0,119,0,201,255,82,108,88,0,25,108,108,4,82,110,68,0,95,108,110,51,82,110,88,0,1,108,4,1,3,110,110,108,82,108,68,0,82,109,69,0,95,110,108,109,82,109,88,0,1,108,4,2,3,109,109,108,82,108,68,0,82,110,53,0,95,109,108,110,137,100,0,0,139,0,0,0,82,110,68,0,1,108,1,0,82,109,88,0,82,109,109,0,22,108,108,109,26,108,108,1,45,110,110,108,192,8,1,0,1,110,0,0,85,92,110,0,1,110,0,0,85,72,110,0,1,110,0,0,85,56,110,0,1,110,0,0,85,77,110,0,82,47,92,0,82,110,87,0,82,108,77,0,56,110,110,108,120,8,1,0,82,110,78,0,82,108,77,0,41,108,108,2,25,108,108,0,91,110,110,108,48,110,110,47,208,7,1,0,82,63,92,0,119,0,6,0,82,110,78,0,82,108,77,0,41,108,108,2,25,108,108,0,91,63,110,108,85,92,63,0,82,110,78,0,82,108,77,0,41,108,108,2,25,108,108,1,91,110,110,108,82,108,72,0,48,110,110,108,16,8,1,0,82,64,72,0,119,0,6,0,82,110,78,0,82,108,77,0,41,108,108,2,25,108,108,1,91,64,110,108,85,72,64,0,82,110,78,0,82,108,77,0,41,108,108,2,25,108,108,2,91,110,110,108,82,108,56,0,48,110,110,108,80,8,1,0,82,60,56,0,119,0,6,0,82,110,78,0,82,108,77,0,41,108,108,2,25,108,108,2,91,60,110,108,85,56,60,0,82,110,77,0,25,110,110,1,85,77,110,0,119,0,201,255,82,110,88,0,25,110,110,4,82,108,68,0,95,110,108,47,82,108,88,0,1,110,4,1,3,108,108,110,82,110,68,0,82,109,72,0,95,108,110,109,82,109,88,0,1,110,4,2,3,109,109,110,82,110,68,0,82,108,56,0,95,109,110,108,137,100,0,0,139,0,0,0,0,48,90,0,1,108,0,0,85,48,108,0,1,110,0,0,109,48,4,110,0,49,70,0,1,110,0,0,85,49,110,0,1,108,0,0,109,49,4,108,0,50,54,0,1,108,0,0,85,50,108,0,1,110,0,0,109,50,4,110,1,110,0,0,85,75,110,0,82,110,87,0,82,108,75,0,56,110,110,108,228,9,1,0,0,52,90,0,82,110,52,0,106,108,52,4,82,109,78,0,82,106,75,0,41,106,106,2,25,106,106,0,91,109,109,106,1,106,0,0,134,9,0,0,164,123,4,0,110,108,109,106,135,10,3,0,0,11,90,0,85,11,9,0,109,11,4,10,0,12,70,0,82,106,12,0,106,109,12,4,82,108,78,0,82,110,75,0,41,110,110,2,25,110,110,1,91,108,108,110,1,110,0,0,134,13,0,0,164,123,4,0,106,109,108,110,135,14,3,0,0,15,70,0,85,15,13,0,109,15,4,14,0,16,54,0,82,110,16,0,106,108,16,4,82,109,78,0,82,106,75,0,41,106,106,2,25,106,106,2,91,109,109,106,1,106,0,0,134,17,0,0,164,123,4,0,110,108,109,106,135,18,3,0,0,19,54,0,85,19,17,0,109,19,4,18,82,106,75,0,25,106,106,1,85,75,106,0,119,0,201,255,82,106,87,0,28,65,106,2,0,20,90,0,82,106,20,0,106,109,20,4,34,108,65,0,41,108,108,31,42,108,108,31,134,21,0,0,164,123,4,0,106,109,65,108,135,22,3,0,0,23,90,0,85,23,21,0,109,23,4,22,82,108,87,0,28,66,108,2,0,24,70,0,82,108,24,0,106,109,24,4,34,106,66,0,41,106,106,31,42,106,106,31,134,25,0,0,164,123,4,0,108,109,66,106,135,26,3,0,0,27,70,0,85,27,25,0,109,27,4,26,82,106,87,0,28,67,106,2,0,28,54,0,82,106,28,0,106,109,28,4,34,108,67,0,41,108,108,31,42,108,108,31,134,29,0,0,164,123,4,0,106,109,67,108,135,30,3,0,0,31,54,0,85,31,29,0,109,31,4,30,82,32,87,0,0,33,90,0,82,108,33,0,106,109,33,4,34,106,32,0,41,106,106,31,42,106,106,31,134,34,0,0,68,126,4,0,108,109,32,106,135,35,3,0,0,36,90,0,85,36,34,0,109,36,4,35,82,37,87,0,0,38,70,0,82,106,38,0,106,109,38,4,34,108,37,0,41,108,108,31,42,108,108,31,134,39,0,0,68,126,4,0,106,109,37,108,135,40,3,0,0,41,70,0,85,41,39,0,109,41,4,40,82,42,87,0,0,43,54,0,82,108,43,0,106,109,43,4,34,106,42,0,41,106,106,31,42,106,106,31,134,44,0,0,68,126,4,0,108,109,42,106,135,45,3,0,0,46,54,0,85,46,44,0,109,46,4,45,82,106,88,0,25,106,106,4,82,109,68,0,82,108,90,0,95,106,109,108,82,108,88,0,1,109,4,1,3,108,108,109,82,109,68,0,82,106,70,0,95,108,109,106,82,106,88,0,1,109,4,2,3,106,106,109,82,109,68,0,82,108,54,0,95,106,109,108,137,100,0,0,139,0,0,0,140,6,82,0,0,0,0,0,2,72,0,0,0,1,0,0,2,73,0,0,4,1,0,0,2,74,0,0,4,2,0,0,2,75,0,0,64,66,15,0,1,70,0,0,136,76,0,0,0,71,76,0,136,76,0,0,1,77,128,0,3,76,76,77,137,76,0,0,130,76,0,0,136,77,0,0,49,76,76,77,236,11,1,0,1,77,128,0,135,76,0,0,77,0,0,0,25,41,71,120,25,49,71,116,25,52,71,112,25,67,71,108,25,38,71,104,25,53,71,100,25,51,71,96,25,60,71,92,25,39,71,88,25,54,71,124,25,56,71,84,25,69,71,80,25,68,71,76,25,50,71,72,25,42,71,68,25,66,71,64,25,37,71,60,25,20,71,56,25,21,71,52,25,22,71,48,25,65,71,44,25,36,71,40,25,19,71,36,25,64,71,32,25,62,71,28,25,63,71,24,25,61,71,20,25,59,71,16,25,57,71,12,25,58,71,8,25,55,71,4,0,40,71,0,85,41,0,0,85,49,1,0,85,52,2,0,85,67,3,0,85,38,4,0,85,53,5,0,82,77,67,0,82,78,38,0,5,76,77,78,85,51,76,0,82,78,51,0,41,78,78,2,41,78,78,2,135,76,10,0,78,0,0,0,85,60,76,0,1,76,0,0,85,39,76,0,82,76,51,0,41,76,76,2,82,78,39,0,56,76,76,78,8,13,1,0,82,76,49,0,82,78,39,0,90,76,76,78,83,54,76,0,79,76,54,0,41,76,76,8,85,56,76,0,82,76,60,0,82,78,39,0,41,78,78,2,82,77,56,0,97,76,78,77,82,77,39,0,25,77,77,1,85,39,77,0,119,0,236,255,1,77,0,0,85,69,77,0,82,77,38,0,82,78,69,0,57,77,77,78,152,20,1,0,1,77,0,0,85,68,77,0,82,77,67,0,82,78,68,0,57,77,77,78,136,20,1,0,82,77,69,0,82,78,67,0,5,43,77,78,82,78,60,0,82,77,68,0,3,77,43,77,41,77,77,2,41,77,77,2,3,78,78,77,85,50,78,0,82,78,41,0,121,78,10,0,82,78,69,0,82,77,67,0,5,44,78,77,82,77,41,0,82,78,68,0,3,78,44,78,41,78,78,2,3,23,77,78,119,0,2,0,1,23,0,0,85,42,23,0,82,78,50,0,82,78,78,0,25,78,78,127,6,78,78,72,85,66,78,0,82,78,50,0,106,78,78,4,25,78,78,127,6,78,78,72,85,37,78,0,82,78,50,0,106,78,78,8,25,78,78,127,6,78,78,72,85,20,78,0,82,78,41,0,121,78,34,0,82,78,42,0,79,78,78,0,82,77,66,0,45,78,78,77,84,14,1,0,82,78,42,0,103,78,78,1,82,77,37,0,45,78,78,77,76,14,1,0,82,78,42,0,103,78,78,2,82,77,20,0,45,78,78,77,68,14,1,0,82,78,50,0,116,78,66,0,82,78,50,0,82,77,37,0,109,78,4,77,82,77,50,0,82,78,20,0,109,77,8,78,82,78,50,0,1,77,0,0,109,78,12,77,119,0,8,0,1,70,15,0,119,0,6,0,1,70,15,0,119,0,4,0,1,70,15,0,119,0,2,0,1,70,15,0,32,77,70,15,121,77,133,1,1,70,0,0,85,21,75,0,1,77,0,0,85,22,77,0,82,78,53,0,82,76,66,0,82,79,37,0,82,80,20,0,1,81,1,0,134,77,0,0,132,110,2,0,78,76,79,80,22,21,81,0,82,77,50,0,82,77,77,0,82,81,53,0,25,81,81,4,82,80,22,0,91,81,81,80,41,81,81,8,4,77,77,81,85,65,77,0,82,77,50,0,106,77,77,4,82,81,53,0,3,81,81,73,82,80,22,0,91,81,81,80,41,81,81,8,4,77,77,81,85,36,77,0,82,77,50,0,106,77,77,8,82,81,53,0,3,81,81,74,82,80,22,0,91,81,81,80,41,81,81,8,4,77,77,81,85,19,77,0,82,77,50,0,82,81,53,0,25,81,81,4,82,80,22,0,91,81,81,80,85,77,81,0,82,81,50,0,82,77,53,0,3,77,77,73,82,80,22,0,91,77,77,80,109,81,4,77,82,77,50,0,82,81,53,0,3,81,81,74,82,80,22,0,91,81,81,80,109,77,8,81,82,81,50,0,82,77,22,0,109,81,12,77,82,77,69,0,82,81,67,0,5,45,77,81,82,81,68,0,3,81,45,81,25,81,81,1,85,64,81,0,82,81,69,0,82,77,67,0,5,46,81,77,82,77,67,0,3,77,46,77,82,81,68,0,3,77,77,81,26,77,77,1,85,62,77,0,82,77,69,0,82,81,67,0,5,47,77,81,82,81,67,0,3,81,47,81,82,77,68,0,3,81,81,77,85,63,81,0,82,81,69,0,82,77,67,0,5,48,81,77,82,77,67,0,3,77,48,77,82,81,68,0,3,77,77,81,25,77,77,1,85,61,77,0,82,77,64,0,82,81,51,0,47,77,77,81,12,17,1,0,82,77,60,0,82,81,64,0,41,81,81,2,41,81,81,2,3,77,77,81,85,59,77,0,82,77,65,0,27,77,77,7,28,77,77,16,1,81,0,0,82,80,59,0,82,80,80,0,4,81,81,80,47,77,77,81,64,16,1,0,1,77,0,0,82,81,59,0,82,81,81,0,4,24,77,81,119,0,4,0,82,81,65,0,27,81,81,7,28,24,81,16,82,6,59,0,82,81,6,0,3,81,81,24,85,6,81,0,82,81,36,0,27,81,81,7,28,81,81,16,1,77,0,0,82,80,59,0,106,80,80,4,4,77,77,80,47,81,81,77,148,16,1,0,1,81,0,0,82,77,59,0,106,77,77,4,4,25,81,77,119,0,4,0,82,77,36,0,27,77,77,7,28,25,77,16,82,77,59,0,25,11,77,4,82,77,11,0,3,77,77,25,85,11,77,0,82,77,19,0,27,77,77,7,28,77,77,16,1,81,0,0,82,80,59,0,106,80,80,8,4,81,81,80,47,77,77,81,236,16,1,0,1,77,0,0,82,81,59,0,106,81,81,8,4,26,77,81,119,0,4,0,82,81,19,0,27,81,81,7,28,26,81,16,82,81,59,0,25,12,81,8,82,81,12,0,3,81,81,26,85,12,81,0,82,81,62,0,82,77,51,0,47,81,81,77,56,18,1,0,82,81,60,0,82,77,62,0,41,77,77,2,41,77,77,2,3,81,81,77,85,57,81,0,82,81,65,0,27,81,81,3,28,81,81,16,1,77,0,0,82,80,57,0,82,80,80,0,4,77,77,80,47,81,81,77,108,17,1,0,1,81,0,0,82,77,57,0,82,77,77,0,4,27,81,77,119,0,4,0,82,77,65,0,27,77,77,3,28,27,77,16,82,7,57,0,82,77,7,0,3,77,77,27,85,7,77,0,82,77,36,0,27,77,77,3,28,77,77,16,1,81,0,0,82,80,57,0,106,80,80,4,4,81,81,80,47,77,77,81,192,17,1,0,1,77,0,0,82,81,57,0,106,81,81,4,4,28,77,81,119,0,4,0,82,81,36,0,27,81,81,3,28,28,81,16,82,81,57,0,25,13,81,4,82,81,13,0,3,81,81,28,85,13,81,0,82,81,19,0,27,81,81,3,28,81,81,16,1,77,0,0,82,80,57,0,106,80,80,8,4,77,77,80,47,81,81,77,24,18,1,0,1,81,0,0,82,77,57,0,106,77,77,8,4,29,81,77,119,0,4,0,82,77,19,0,27,77,77,3,28,29,77,16,82,77,57,0,25,14,77,8,82,77,14,0,3,77,77,29,85,14,77,0,82,77,63,0,82,81,51,0,47,77,77,81,100,19,1,0,82,77,60,0,82,81,63,0,41,81,81,2,41,81,81,2,3,77,77,81,85,58,77,0,82,77,65,0,27,77,77,5,28,77,77,16,1,81,0,0,82,80,58,0,82,80,80,0,4,81,81,80,47,77,77,81,152,18,1,0,1,77,0,0,82,81,58,0,82,81,81,0,4,30,77,81,119,0,4,0,82,81,65,0,27,81,81,5,28,30,81,16,82,8,58,0,82,81,8,0,3,81,81,30,85,8,81,0,82,81,36,0,27,81,81,5,28,81,81,16,1,77,0,0,82,80,58,0,106,80,80,4,4,77,77,80,47,81,81,77,236,18,1,0,1,81,0,0,82,77,58,0,106,77,77,4,4,31,81,77,119,0,4,0,82,77,36,0,27,77,77,5,28,31,77,16,82,77,58,0,25,15,77,4,82,77,15,0,3,77,77,31,85,15,77,0,82,77,19,0,27,77,77,5,28,77,77,16,1,81,0,0,82,80,58,0,106,80,80,8,4,81,81,80,47,77,77,81,68,19,1,0,1,77,0,0,82,81,58,0,106,81,81,8,4,32,77,81,119,0,4,0,82,81,19,0,27,81,81,5,28,32,81,16,82,81,58,0,25,16,81,8,82,81,16,0,3,81,81,32,85,16,81,0,82,81,61,0,82,77,51,0,47,81,81,77,120,20,1,0,82,81,60,0,82,77,61,0,41,77,77,2,41,77,77,2,3,81,81,77,85,55,81,0,82,81,65,0,28,81,81,16,1,77,0,0,82,80,55,0,82,80,80,0,4,77,77,80,47,81,81,77,192,19,1,0,1,81,0,0,82,77,55,0,82,77,77,0,4,33,81,77,119,0,3,0,82,77,65,0,28,33,77,16,82,9,55,0,82,77,9,0,3,77,77,33,85,9,77,0,82,77,36,0,28,77,77,16,1,81,0,0,82,80,55,0,106,80,80,4,4,81,81,80,47,77,77,81,12,20,1,0,1,77,0,0,82,81,55,0,106,81,81,4,4,34,77,81,119,0,3,0,82,81,36,0,28,34,81,16,82,81,55,0,25,17,81,4,82,81,17,0,3,81,81,34,85,17,81,0,82,81,19,0,28,81,81,16,1,77,0,0,82,80,55,0,106,80,80,8,4,77,77,80,47,81,81,77,92,20,1,0,1,81,0,0,82,77,55,0,106,77,77,8,4,35,81,77,119,0,3,0,82,77,19,0,28,35,77,16,82,77,55,0,25,18,77,8,82,77,18,0,3,77,77,35,85,18,77,0,82,77,68,0,25,77,77,1,85,68,77,0,119,0,41,254,82,77,69,0,25,77,77,1,85,69,77,0,119,0,31,254,1,77,0,0,85,40,77,0,82,10,60,0,82,77,51,0,41,77,77,2,82,81,40,0,56,77,77,81,224,20,1,0,82,77,52,0,82,81,40,0,82,80,40,0,41,80,80,2,94,80,10,80,95,77,81,80,82,80,40,0,25,80,80,1,85,40,80,0,119,0,241,255,135,80,7,0,10,0,0,0,137,71,0,0,139,0,0,0,140,13,87,0,0,0,0,0,2,73,0,0,184,68,0,0,2,74,0,0,235,68,0,0,2,75,0,0,180,0,0,0,2,76,0,0,184,0,0,0,2,77,0,0,204,0,0,0,2,78,0,0,212,0,0,0,2,79,0,0,26,9,0,0,2,80,0,0,224,69,0,0,1,50,0,0,136,81,0,0,0,51,81,0,136,81,0,0,25,81,81,63,38,81,81,192,137,81,0,0,0,52,81,0,136,81,0,0,25,81,81,80,137,81,0,0,130,81,0,0,136,82,0,0,49,81,81,82,128,21,1,0,1,82,80,0,135,81,0,0,82,0,0,0,25,42,52,64,25,33,52,60,25,34,52,56,25,35,52,52,25,40,52,48,25,41,52,44,25,20,52,40,25,32,52,36,25,47,52,32,25,30,52,28,25,31,52,24,25,27,52,20,25,43,52,16,25,44,52,12,25,36,52,8,25,48,52,4,0,49,52,0,85,33,0,0,85,34,1,0,85,35,2,0,85,40,3,0,85,41,4,0,85,20,5,0,85,32,6,0,85,47,7,0,85,30,8,0,85,31,9,0,85,27,10,0,85,43,11,0,85,44,12,0,82,82,33,0,134,81,0,0,52,240,1,0,82,0,0,0,85,36,81,0,82,81,35,0,121,81,3,0,82,28,35,0,119,0,9,0,82,53,33,0,106,81,53,64,106,82,53,4,5,37,81,82,1,82,160,68,82,81,47,0,91,82,82,81,5,28,37,82,85,48,28,0,82,82,41,0,121,82,3,0,82,29,41,0,119,0,9,0,82,54,33,0,106,82,54,64,106,81,54,20,5,39,82,81,1,81,160,68,82,82,47,0,91,81,81,82,5,29,39,81,85,49,29,0,82,81,33,0,106,81,81,64,34,81,81,0,121,81,5,0,1,82,164,68,1,83,8,9,135,81,1,0,82,73,83,74,1,81,64,0,82,83,33,0,106,83,83,64,47,81,81,83,184,22,1,0,1,83,3,69,1,82,9,9,135,81,1,0,83,73,82,74,1,81,0,0,82,82,33,0,106,82,82,64,49,81,81,82,132,28,1,0,82,81,33,0,106,81,81,64,36,81,81,64,121,81,107,1,1,81,6,0,82,82,33,0,106,82,82,80,50,81,81,82,0,23,1,0,1,82,24,69,1,83,14,9,135,81,1,0,82,73,83,74,1,81,6,0,82,83,33,0,106,83,83,84,50,81,81,83,36,23,1,0,1,83,125,69,1,82,15,9,135,81,1,0,83,73,82,74,1,81,6,0,82,82,33,0,106,82,82,80,50,81,81,82,76,23,1,0,1,81,0,0,85,42,81,0,82,19,42,0,137,51,0,0,139,19,0,0,1,81,6,0,82,82,33,0,106,82,82,84,50,81,81,82,116,23,1,0,1,81,0,0,85,42,81,0,82,19,42,0,137,51,0,0,139,19,0,0,82,81,20,0,34,81,81,0,121,81,4,0,82,81,32,0,39,81,81,3,85,32,81,0,82,81,32,0,38,81,81,2,121,81,6,0,82,81,32,0,38,81,81,1,120,81,4,0,1,50,26,0,119,0,2,0,1,50,26,0,32,81,50,26,121,81,13,0,82,81,20,0,34,81,81,0,121,81,3,0,135,81,1,0,80,73,79,74,82,81,20,0,82,82,33,0,106,82,82,64,54,81,81,82,232,23,1,0,135,81,1,0,80,73,79,74,82,81,33,0,106,81,81,64,82,82,20,0,49,81,81,82,16,24,1,0,1,81,0,0], eb + 61440);
  HEAPU8.set([85,42,81,0,82,19,42,0,137,51,0,0,139,19,0,0,82,81,43,0,120,81,5,0,1,82,21,70,1,83,32,9,135,81,1,0,82,73,83,74,82,81,43,0,120,81,6,0,1,81,0,0,85,42,81,0,82,19,42,0,137,51,0,0,139,19,0,0,82,81,44,0,82,83,36,0,48,81,81,83,100,24,1,0,1,83,29,70,1,82,37,9,135,81,1,0,83,73,82,74,82,81,44,0,82,82,36,0,48,81,81,82,136,24,1,0,1,81,0,0,85,42,81,0,82,19,42,0,137,51,0,0,139,19,0,0,82,82,43,0,1,83,0,0,82,84,44,0,135,81,5,0,82,83,84,0,82,81,33,0,116,81,34,0,82,81,33,0,82,84,48,0,109,81,12,84,82,84,33,0,82,81,40,0,109,84,16,81,82,81,33,0,82,84,49,0,109,81,28,84,82,84,33,0,82,81,20,0,109,84,68,81,82,81,33,0,82,84,32,0,109,81,72,84,82,84,33,0,82,81,47,0,109,84,76,81,82,81,33,0,82,84,30,0,109,81,88,84,82,84,33,0,82,81,31,0,109,84,92,81,82,81,33,0,82,84,27,0,109,81,96,84,82,55,33,0,106,84,55,80,112,81,55,56,145,81,81,0,134,24,0,0,32,188,3,0,84,81,0,0,82,81,33,0,1,84,128,0,97,81,84,24,82,56,33,0,106,84,56,84,112,81,56,60,145,81,81,0,134,25,0,0,32,188,3,0,84,81,0,0,82,81,33,0,1,84,132,0,97,81,84,25,82,57,33,0,106,84,57,80,112,81,57,56,145,81,81,0,134,26,0,0,116,140,3,0,84,81,0,0,82,81,33,0,1,84,136,0,97,81,84,26,82,58,33,0,106,84,58,84,112,81,58,60,145,81,81,0,134,21,0,0,116,140,3,0,84,81,0,0,82,81,33,0,1,84,140,0,97,81,84,21,82,59,33,0,106,84,59,80,112,81,59,56,145,81,81,0,134,22,0,0,40,69,4,0,84,81,0,0,82,81,33,0,1,84,144,0,97,81,84,22,82,60,33,0,106,84,60,84,112,81,60,60,145,81,81,0,134,23,0,0,40,69,4,0,84,81,0,0,82,81,33,0,1,84,148,0,97,81,84,23,82,61,33,0,106,81,61,20,106,83,61,64,5,84,81,83,41,84,84,2,0,38,84,0,82,84,33,0,1,83,160,0,97,84,83,38,82,62,33,0,106,84,62,4,1,81,144,0,94,81,62,81,41,81,81,1,3,84,84,81,109,62,116,84,82,84,33,0,82,83,43,0,109,84,100,83,82,63,33,0,106,84,63,100,1,81,188,0,94,81,63,81,3,84,84,81,109,63,104,84,82,64,33,0,106,83,64,104,1,81,192,0,94,81,64,81,3,83,83,81,109,64,108,83,82,65,33,0,106,84,65,108,1,81,196,0,94,81,65,81,3,84,84,81,109,65,112,84,82,66,33,0,106,83,66,112,1,81,200,0,94,81,66,81,3,83,83,81,109,66,120,83,82,84,33,0,134,83,0,0,64,90,4,0,84,0,0,0,33,45,83,0,82,13,33,0,121,45,29,0,1,84,0,0,109,13,124,84,82,69,33,0,106,83,69,120,94,81,69,77,3,83,83,81,97,69,75,83,82,70,33,0,94,84,70,75,94,81,70,78,3,84,84,81,97,70,76,84,82,84,33,0,94,84,84,76,82,83,33,0,1,81,216,0,94,83,83,81,3,84,84,83,82,83,43,0,82,81,44,0,3,83,83,81,52,84,84,83,168,27,1,0,1,83,70,70,1,81,81,9,135,84,1,0,83,73,81,74,119,0,29,0,82,71,33,0,106,81,13,120,94,83,71,77,3,81,81,83,109,71,124,81,82,72,33,0,106,84,72,124,1,83,208,0,94,83,72,83,3,84,84,83,97,72,75,84,82,84,33,0,1,81,0,0,97,84,76,81,82,81,33,0,94,81,81,75,82,84,33,0,94,84,84,78,3,81,81,84,82,84,43,0,82,83,44,0,3,84,84,83,52,81,81,84,168,27,1,0,1,84,204,70,1,83,89,9,135,81,1,0,84,73,83,74,82,81,33,0,1,83,176,0,1,84,255,255,97,81,83,84,82,84,33,0,112,14,84,56,145,14,14,0,82,84,33,0,112,15,84,48,145,15,15,0,82,67,33,0,106,83,67,100,106,81,67,104,106,82,67,80,106,85,67,4,106,86,67,20,134,84,0,0,68,51,2,0,83,81,82,14,15,85,86,0,82,84,33,0,112,16,84,60,145,16,16,0,82,84,33,0,112,17,84,52,145,17,17,0,82,68,33,0,106,86,68,108,106,85,68,112,106,82,68,84,106,81,68,8,106,83,68,24,134,84,0,0,68,51,2,0,86,85,82,16,17,81,83,0,82,83,33,0,134,84,0,0,64,90,4,0,83,0,0,0,33,46,84,0,82,18,33,0,121,46,5,0,134,84,0,0,4,135,2,0,18,0,0,0,119,0,4,0,134,84,0,0,24,152,2,0,18,0,0,0,1,84,1,0,85,42,84,0,82,19,42,0,137,51,0,0,139,19,0,0,1,84,0,0,85,42,84,0,82,19,42,0,137,51,0,0,139,19,0,0,140,5,114,0,0,0,0,0,2,102,0,0,255,0,0,0,2,103,0,0,145,30,0,0,2,104,0,0,153,153,153,25,2,105,0,0,199,113,28,7,2,106,0,0,0,0,0,8,2,107,0,0,154,153,153,153,2,108,0,0,255,255,255,255,2,109,0,0,58,85,0,0,1,101,0,0,1,110,36,0,48,110,110,1,12,29,1,0,134,110,0,0,120,142,4,0,1,111,28,0,85,110,111,0,1,17,0,0,1,18,0,0,119,0,59,2,25,90,0,4,25,91,0,104,82,25,90,0,82,111,91,0,48,111,25,111,52,29,1,0,25,111,25,1,85,90,111,0,79,71,25,0,119,0,4,0,134,71,0,0,32,17,3,0,0,0,0,0,134,111,0,0,136,137,4,0,71,0,0,0,33,111,111,0,120,111,241,255,1,111,43,0,1,110,3,0,138,71,111,110,120,29,1,0,108,29,1,0,124,29,1,0,0,62,71,0,1,88,0,0,119,0,20,0,119,0,1,0,32,111,71,45,41,111,111,31,42,111,111,31,0,93,111,0,82,34,90,0,82,111,91,0,48,111,34,111,176,29,1,0,25,111,34,1,85,90,111,0,79,62,34,0,0,88,93,0,119,0,6,0,134,62,0,0,32,17,3,0,0,0,0,0,0,88,93,0,119,0,1,0,32,70,1,0,39,111,1,16,32,111,111,16,32,110,62,48,19,111,111,110,121,111,68,0,82,5,90,0,82,111,91,0,48,111,5,111,252,29,1,0,25,111,5,1,85,90,111,0,79,79,5,0,119,0,4,0,134,79,0,0,32,17,3,0,0,0,0,0,39,111,79,32,33,111,111,120,121,111,10,0,121,70,5,0,1,60,8,0,0,64,79,0,1,101,47,0,119,0,76,0,0,59,1,0,0,63,79,0,1,101,32,0,119,0,72,0,82,13,90,0,82,111,91,0,48,111,13,111,88,30,1,0,25,111,13,1,85,90,111,0,79,80,13,0,119,0,4,0,134,80,0,0,32,17,3,0,0,0,0,0,1,111,15,0,91,110,103,80,47,111,111,110,216,30,1,0,82,111,91,0,32,97,111,0,120,97,4,0,82,111,90,0,26,111,111,1,85,90,111,0,120,2,9,0,1,110,0,0,1,112,0,0,134,111,0,0,168,69,4,0,0,110,112,0,1,17,0,0,1,18,0,0,119,0,210,1,121,97,4,0,1,17,0,0,1,18,0,0,119,0,206,1,82,111,90,0,26,111,111,1,85,90,111,0,1,17,0,0,1,18,0,0,119,0,200,1,1,60,16,0,0,64,80,0,1,101,47,0,119,0,28,0,1,111,10,0,125,92,70,111,1,0,0,0,91,111,103,62,48,111,111,92,16,31,1,0,0,59,92,0,0,63,62,0,1,101,32,0,119,0,18,0,82,111,91,0,121,111,4,0,82,111,90,0,26,111,111,1,85,90,111,0,1,112,0,0,1,110,0,0,134,111,0,0,168,69,4,0,0,112,110,0,134,111,0,0,120,142,4,0,1,110,28,0,85,111,110,0,1,17,0,0,1,18,0,0,119,0,169,1,32,110,101,32,121,110,107,0,32,110,59,10,121,110,102,0,26,94,63,48,35,110,94,10,121,110,95,0,0,95,94,0,1,98,0,0,27,110,98,10,3,98,110,95,82,26,90,0,82,110,91,0,48,110,26,110,160,31,1,0,25,110,26,1,85,90,110,0,79,72,26,0,119,0,4,0,134,72,0,0,32,17,3,0,0,0,0,0,26,95,72,48,35,110,95,10,16,111,98,104,19,110,110,111,120,110,239,255,35,110,95,10,121,110,69,0,0,27,98,0,1,28,0,0,0,65,72,0,0,96,95,0,1,110,10,0,1,111,0,0,134,29,0,0,100,82,4,0,27,28,110,111,135,30,3,0,34,111,96,0,41,111,111,31,42,111,111,31,0,31,111,0,11,32,31,0,16,111,32,30,13,110,30,32,11,112,96,0,16,112,112,29,19,110,110,112,20,111,111,110,121,111,7,0,0,19,27,0,0,20,28,0,1,61,10,0,0,69,65,0,1,101,76,0,119,0,52,0,134,27,0,0,164,123,4,0,29,30,96,31,135,28,3,0,82,33,90,0,82,111,91,0,48,111,33,111,104,32,1,0,25,111,33,1,85,90,111,0,79,73,33,0,119,0,4,0,134,73,0,0,32,17,3,0,0,0,0,0,26,96,73,48,35,111,96,10,16,110,28,104,13,112,28,104,16,113,27,107,19,112,112,113,20,110,110,112,19,111,111,110,120,111,2,0,119,0,3,0,0,65,73,0,119,0,206,255,1,111,9,0,48,111,111,96,192,32,1,0,0,11,28,0,0,12,27,0,0,89,88,0,119,0,18,0,0,19,27,0,0,20,28,0,1,61,10,0,0,69,73,0,1,101,76,0,119,0,12,0,1,11,0,0,0,12,98,0,0,89,88,0,119,0,8,0,1,11,0,0,1,12,0,0,0,89,88,0,119,0,4,0,0,60,59,0,0,64,63,0,1,101,47,0,32,111,101,47,121,111,223,0,26,111,60,1,19,111,111,60,120,111,102,0,27,111,60,23,43,111,111,5,38,111,111,7,90,81,109,111,90,35,103,64,19,111,35,102,0,82,111,0,48,111,82,60,176,33,1,0,0,83,82,0,1,99,0,0,22,111,99,81,20,111,83,111,0,99,111,0,82,36,90,0,82,111,91,0,48,111,36,111,112,33,1,0,25,111,36,1,85,90,111,0,79,74,36,0,119,0,4,0,134,74,0,0,32,17,3,0,0,0,0,0,90,37,103,74,19,111,37,102,0,83,111,0,16,111,99,106,16,110,83,60,19,111,111,110,120,111,236,255,0,21,37,0,1,40,0,0,0,41,99,0,0,66,74,0,0,84,83,0,119,0,6,0,0,21,35,0,1,40,0,0,1,41,0,0,0,66,64,0,0,84,82,0,1,111,255,255,1,110,255,255,135,38,16,0,111,110,81,0,135,39,3,0,18,110,60,84,16,111,39,40,13,112,39,40,16,113,38,41,19,112,112,113,20,111,111,112,20,110,110,111,121,110,7,0,0,19,41,0,0,20,40,0,0,61,60,0,0,69,66,0,1,101,76,0,119,0,158,0,0,42,41,0,0,43,40,0,0,46,21,0,135,44,6,0,42,43,81,0,135,45,3,0,19,110,46,102,20,110,44,110,0,47,110,0,82,48,90,0,82,110,91,0,48,110,48,110,84,34,1,0,25,110,48,1,85,90,110,0,79,75,48,0,119,0,4,0,134,75,0,0,32,17,3,0,0,0,0,0,90,46,103,75,19,110,46,102,18,110,60,110,16,111,39,45,13,112,45,39,16,113,38,47,19,112,112,113,20,111,111,112,20,110,110,111,121,110,7,0,0,19,47,0,0,20,45,0,0,61,60,0,0,69,75,0,1,101,76,0,119,0,122,0,0,42,47,0,0,43,45,0,119,0,221,255,90,49,103,64,19,110,49,102,0,85,110,0,48,110,85,60,48,35,1,0,0,86,85,0,1,100,0,0,5,110,100,60,3,100,86,110,82,50,90,0,82,110,91,0,48,110,50,110,240,34,1,0,25,110,50,1,85,90,110,0,79,76,50,0,119,0,4,0,134,76,0,0,32,17,3,0,0,0,0,0,90,51,103,76,19,110,51,102,0,86,110,0,16,110,100,105,16,111,86,60,19,110,110,111,120,110,237,255,0,22,51,0,0,23,100,0,1,24,0,0,0,67,76,0,0,87,86,0,119,0,6,0,0,22,49,0,1,23,0,0,1,24,0,0,0,67,64,0,0,87,85,0,48,110,87,60,112,36,1,0,1,110,255,255,1,111,255,255,1,112,0,0,134,52,0,0,68,126,4,0,110,111,60,112,135,53,3,0,0,6,22,0,0,54,24,0,0,55,23,0,0,68,67,0,16,112,53,54,13,111,54,53,16,110,52,55,19,111,111,110,20,112,112,111,121,112,7,0,0,19,55,0,0,20,54,0,0,61,60,0,0,69,68,0,1,101,76,0,119,0,56,0,1,112,0,0,134,56,0,0,100,82,4,0,55,54,60,112,135,57,3,0,19,112,6,102,0,58,112,0,16,112,108,57,32,111,57,255,11,110,58,0,16,110,110,56,19,111,111,110,20,112,112,111,121,112,7,0,0,19,55,0,0,20,54,0,0,61,60,0,0,69,68,0,1,101,76,0,119,0,36,0,1,112,0,0,134,7,0,0,164,123,4,0,56,57,58,112,135,8,3,0,82,9,90,0,82,112,91,0,48,112,9,112,44,36,1,0,25,112,9,1,85,90,112,0,79,77,9,0,119,0,4,0,134,77,0,0,32,17,3,0,0,0,0,0,90,6,103,77,19,112,6,102,50,112,60,112,96,36,1,0,0,19,7,0,0,20,8,0,0,61,60,0,0,69,77,0,1,101,76,0,119,0,10,0,0,54,8,0,0,55,7,0,0,68,77,0,119,0,195,255,0,19,23,0,0,20,24,0,0,61,60,0,0,69,67,0,1,101,76,0,32,112,101,76,121,112,36,0,91,112,103,69,48,112,112,61,12,37,1,0,82,10,90,0,82,112,91,0,48,112,10,112,184,36,1,0,25,112,10,1,85,90,112,0,79,78,10,0,119,0,4,0,134,78,0,0,32,17,3,0,0,0,0,0,91,112,103,78,55,112,112,61,152,36,1,0,134,112,0,0,120,142,4,0,1,111,68,0,85,112,111,0,0,11,4,0,0,12,3,0,38,111,3,1,32,111,111,0,1,112,0,0,32,112,112,0,19,111,111,112,1,112,0,0,125,89,111,88,112,0,0,0,119,0,4,0,0,11,20,0,0,12,19,0,0,89,88,0,82,112,91,0,121,112,4,0,82,112,90,0,26,112,112,1,85,90,112,0,16,112,11,4,13,111,11,4,16,110,12,3,19,111,111,110,20,112,112,111,120,112,34,0,38,112,3,1,33,112,112,0,1,111,0,0,33,111,111,0,20,112,112,111,33,111,89,0,20,112,112,111,120,112,13,0,134,112,0,0,120,142,4,0,1,111,68,0,85,112,111,0,1,111,255,255,1,112,255,255,134,14,0,0,164,123,4,0,3,4,111,112,135,17,3,0,0,18,14,0,119,0,25,0,16,112,4,11,13,111,11,4,16,110,3,12,19,111,111,110,20,112,112,111,121,112,8,0,134,112,0,0,120,142,4,0,1,111,68,0,85,112,111,0,0,17,4,0,0,18,3,0,119,0,12,0,34,111,89,0,41,111,111,31,42,111,111,31,0,15,111,0,21,111,12,89,21,112,11,15,134,16,0,0,8,120,4,0,111,112,89,15,135,17,3,0,0,18,16,0,135,112,12,0,17,0,0,0,139,18,0,0,140,1,6,0,0,0,0,0,1,4,133,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,11,0,119,0,100,4,1,4,149,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,15,0,119,0,93,4,1,4,164,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,8,0,119,0,86,4,1,4,185,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,16,0,119,0,79,4,1,4,198,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,17,0,119,0,72,4,1,4,216,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,18,0,119,0,65,4,1,4,235,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,19,0,119,0,58,4,1,4,249,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,51,4,1,4,6,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,12,0,119,0,44,4,1,4,22,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,20,0,119,0,37,4,1,4,46,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,21,0,119,0,30,4,1,4,58,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,5,0,119,0,23,4,1,4,78,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,6,0,119,0,16,4,1,4,91,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,7,0,119,0,9,4,1,4,107,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,25,0,119,0,2,4,1,4,132,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,13,0,119,0,251,3,1,4,140,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,244,3,1,4,153,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,237,3,1,4,167,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,14,0,119,0,230,3,1,4,182,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,8,0,119,0,223,3,1,4,194,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,15,0,119,0,216,3,1,4,210,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,209,3,1,4,233,89,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,202,3,1,4,3,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,195,3,1,4,20,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,3,0,119,0,188,3,1,4,40,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,181,3,1,4,56,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,26,0,119,0,174,3,1,4,71,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,16,0,119,0,167,3,1,4,82,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,22,0,119,0,160,3,1,4,98,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,23,0,119,0,153,3,1,4,119,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,17,0,119,0,146,3,1,4,135,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,24,0,119,0,139,3,1,4,157,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,18,0,119,0,132,3,1,4,172,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,25,0,119,0,125,3,1,4,189,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,19,0,119,0,118,3,1,4,201,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,20,0,119,0,111,3,1,4,213,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,104,3,1,4,227,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,26,0,119,0,97,3,1,4,242,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,21,0,119,0,90,3,1,4,252,90,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,22,0,119,0,83,3,1,4,23,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,9,0,119,0,76,3,1,4,36,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,9,0,119,0,69,3,1,4,51,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,23,0,119,0,62,3,1,4,60,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,24,0,119,0,55,3,1,4,86,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,48,3,1,4,95,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,5,0,119,0,41,3,1,4,103,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,10,0,119,0,34,3,1,4,129,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,5,0,119,0,27,3,1,4,152,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,25,0,119,0,20,3,1,4,164,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,27,0,119,0,13,3,1,4,177,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,26,0,119,0,6,3,1,4,194,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,28,0,119,0,255,2,1,4,212,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,29,0,119,0,248,2,1,4,231,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,30,0,119,0,241,2,1,4,245,91,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,234,2,1,4,7,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,227,2,1,4,26,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,11,0,119,0,220,2,1,4,47,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,213,2,1,4,67,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,31,0,119,0,206,2,1,4,81,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,10,0,119,0,199,2,1,4,104,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,192,2,1,4,115,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,32,0,119,0,185,2,1,4,127,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,12,0,119,0,178,2,1,4,165,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,33,0,119,0,171,2,1,4,179,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,11,0,119,0,164,2,1,4,194,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,13,0,119,0,157,2,1,4,214,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,12,0,119,0,150,2,1,4,243,92,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,13,0,119,0,143,2,1,4,1,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,14,0,119,0,136,2,1,4,20,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,15,0,119,0,129,2,1,4,47,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,16,0,119,0,122,2,1,4,65,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,27,0,119,0,115,2,1,4,77,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,14,0,119,0,108,2,1,4,97,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,15,0,119,0,101,2,1,4,117,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,16,0,119,0,94,2,1,4,132,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,17,0,119,0,87,2,1,4,147,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,80,2,1,4,168,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,18,0,119,0,73,2,1,4,188,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,19,0,119,0,66,2,1,4,208,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,20,0,119,0,59,2,1,4,234,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,34,0,119,0,52,2,1,4,241,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,28,0,119,0,45,2,1,4,252,93,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,29,0,119,0,38,2,1,4,8,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,30,0,119,0,31,2,1,4,24,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,31,0,119,0,24,2,1,4,36,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,32,0,119,0,17,2,1,4,53,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,33,0,119,0,10,2,1,4,64,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,34,0,119,0,3,2,1,4,76,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,252,1,1,4,88,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,27,0,119,0,245,1,1,4,102,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,35,0,119,0,238,1,1,4,116,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,231,1,1,4,132,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,3,0,119,0,224,1,1,4,145,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,6,0,119,0,217,1,1,4,169,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,17,0,119,0,210,1,1,4,191,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,203,1,1,4,208,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,18,0,119,0,196,1,1,4,218,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,6,0,119,0,189,1,1,4,233,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,19,0,119,0,182,1,1,4,248,94,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,21,0,119,0,175,1,1,4,6,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,20,0,119,0,168,1,1,4,28,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,28,0,119,0,161,1,1,4,42,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,36,0,119,0,154,1,1,4,64,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,22,0,119,0,147,1,1,4,76,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,21,0,119,0,140,1,1,4,96,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,133,1,1,4,109,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,126,1,1,4,125,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,23,0,119,0,119,1,1,4,142,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,24,0,119,0,112,1,1,4,158,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,25,0,119,0,105,1,1,4,175,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,3,0,119,0,98,1,1,4,191,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,91,1,1,4,203,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,26,0,119,0,84,1,1,4,216,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,37,0,119,0,77,1,1,4,228,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,27,0,119,0,70,1,1,4,241,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,63,1,1,4,253,95,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,28,0,119,0,56,1,1,4,10,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,29,0,119,0,49,1,1,4,22,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,30,0,119,0,42,1,1,4,35,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,35,1,1,4,47,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,31,0,119,0,28,1,1,4,60,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,22,0,119,0,21,1,1,4,72,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,32,0,119,0,14,1,1,4,85,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,1,0,119,0,7,1,1,4,97,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,33,0,119,0,0,1,1,4,110,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,7,0,119,0,249,0,1,4,122,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,34,0,119,0,242,0,1,4,135,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,23,0,119,0,235,0,1,4,154,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,24,0,119,0,228,0,1,4,173,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,25,0,119,0,221,0,1,4,192,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,29,0,119,0,214,0,1,4,205,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,30,0,119,0,207,0,1,4,223,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,200,0,1,4,240,96,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,38,0,119,0,193,0,1,4,2,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,186,0,1,4,19,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,39,0,119,0,179,0,1,4,37,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,172,0,1,4,54,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,40,0,119,0,165,0,1,4,72,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,2,0,119,0,158,0,1,4,89,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,41,0,119,0,151,0,1,4,107,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,3,0,119,0,144,0,1,4,129,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,26,0,119,0,137,0,1,4,140,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,8,0,119,0,130,0,1,4,156,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,9,0,119,0,123,0,1,4,175,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,23,0,119,0,116,0,1,4,188,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,10,0,119,0,109,0,1,4,204,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,9,0,119,0,102,0,1,4,218,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,11,0,119,0,95,0,1,4,236,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,3,0,119,0,88,0,1,4,252,97,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,81,0,1,4,18,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,5,0,119,0,74,0,1,4,41,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,6,0,119,0,67,0,1,4,65,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,7,0,119,0,60,0,1,4,90,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,10,0,119,0,53,0,1,4,111,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,12,0,119,0,46,0,1,4,135,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,13,0,119,0,39,0,1,4,156,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,24,0,119,0,32,0,1,4,175,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,14,0,119,0,25,0,1,4,194,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,18,0,1,4,221,98,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,11,0,1,4,250,98,134,3,0,0,144,58,4,0,0,4,0,0,32,2,3,0,1,4,7,0,1,5,0,0,125,3,2,4,5,0,0,0,139,3,0,0,139,1,0,0,140,2,72,0,0,0,0,0,136,65,0,0,0,63,65,0,136,65,0,0,25,65,65,63,38,65,65,192,137,65,0,0,0,64,65,0,136,65,0,0,25,65,65,112,137,65,0,0,130,65,0,0,136,66,0,0,49,65,65,66,0,56,1,0,1,66,112,0,135,65,0,0,66,0,0,0,25,59,64,108,25,49,64,104,25,62,64,100,25,37,64,96,25,52,64,92,25,61,64,88,25,60,64,84,25,25,64,80,25,55,64,76,25,31,64,72,25,29,64,68,25,30,64,64,25,53,64,60,25,54,64,56,25,57,64,52,25,58,64,48,25,50,64,44,25,51,64,40,25,28,64,36,25,27,64,32,25,26,64,28,25,56,64,24,25,32,64,20,25,34,64,16,25,35,64,12,25,36,64,8,25,33,64,4,0,24,64,0,85,59,0,0,85,49,1,0,82,65,59,0,25,65,65,20,116,52,65,0,82,65,59,0,25,65,65,108,116,61,65,0,82,65,59,0,25,65,65,112,116,60,65,0,82,65,59,0,25,65,65,64,116,25,65,0,82,65,59,0,1,66,164,0,3,65,65,66,116,55,65,0,82,65,59,0,25,65,65,124,116,31,65,0,82,65,59,0,1,66,132,0,3,65,65,66,116,29,65,0,82,65,49,0,82,66,59,0,1,67,148,0,94,66,66,67,3,65,65,66,85,30,65,0,82,65,59,0,1,66,180,0,3,65,65,66,116,53,65,0,82,65,59,0,1,66,176,0,3,65,65,66,116,54,65,0,82,65,59,0,1,66,168,0,3,65,65,66,116,57,65,0,82,65,59,0,1,66,160,0,94,65,65,66,29,65,65,4,85,58,65,0,82,65,61,0,82,66,30,0,41,66,66,3,3,65,65,66,116,50,65,0,82,65,61,0,82,66,30,0,41,66,66,3,3,65,65,66,25,65,65,4,116,51,65,0,82,66,59,0,134,65,0,0,64,90,4,0,66,0,0,0,121,65,7,0,1,66,78,71,1,67,184,68,1,68,212,7,1,69,232,71,135,65,1,0,66,67,68,69,116,37,50,0,82,65,51,0,82,69,37,0,54,65,65,69,216,62,1,0,82,65,37,0,82,69,50,0,4,65,65,69,85,28,65,0,82,69,29,0,82,68,30,0,5,65,69,68,85,27,65,0,82,68,60,0,82,69,27,0,82,67,28,0,3,69,69,67,41,69,69,2,100,65,68,69,145,65,65,0,89,26,65,0,82,68,37,0,82,69,53,0,82,67,54,0,82,66,57,0,82,70,55,0,82,71,58,0,134,65,0,0,116,82,3,0,68,69,67,66,70,71,0,0,85,56,65,0,82,65,25,0,1,66,1,0,1,71,4,0,138,65,66,71,224,58,1,0,92,59,1,0,48,60,1,0,84,61,1,0,1,71,0,0,85,62,71,0,82,71,52,0,82,70,62,0,56,71,71,70,200,62,1,0,82,70,62,0,82,66,25,0,5,71,70,66,85,33,71,0,1,71,0,0,85,24,71,0,82,71,25,0,82,66,24,0,56,71,71,66,208,58,1,0,82,71,31,0,82,66,33,0,82,70,24,0,3,66,66,70,41,66,66,2,100,6,71,66,145,6,6,0,88,71,26,0,145,71,71,0,65,38,6,71,145,38,38,0,82,71,56,0,82,66,33,0,82,70,24,0,3,66,66,70,41,66,66,2,3,14,71,66,88,71,14,0,145,71,71,0,63,66,71,38,145,66,66,0,89,14,66,0,82,66,24,0,25,66,66,1,85,24,66,0,119,0,227,255,82,66,62,0,25,66,66,1,85,62,66,0,119,0,213,255,1,71,0,0,85,62,71,0,82,71,52,0,82,70,62,0,56,71,71,70,200,62,1,0,116,32,62,0,82,71,31,0,82,70,32,0,25,70,70,0,41,70,70,2,100,7,71,70,145,7,7,0,88,71,26,0,145,71,71,0,65,39,7,71,145,39,39,0,82,71,56,0,82,70,32,0,25,70,70,0,41,70,70,2,3,15,71,70,88,71,15,0,145,71,71,0,63,70,71,39,145,70,70,0,89,15,70,0,82,70,62,0,25,70,70,1,85,62,70,0,119,0,228,255,1,70,0,0,85,62,70,0,82,70,52,0,82,71,62,0,56,70,70,71,200,62,1,0,82,70,62,0,41,70,70,1,85,34,70,0,82,70,31,0,82,71,34,0,25,71,71,0,41,71,71,2,100,8,70,71,145,8,8,0,88,70,26,0,145,70,70,0,65,40,8,70,145,40,40,0,82,70,56,0,82,71,34,0,25,71,71,0,41,71,71,2,3,16,70,71,88,70,16,0,145,70,70,0,63,71,70,40,145,71,71,0,89,16,71,0,82,71,31,0,82,70,34,0,25,70,70,1,41,70,70,2,100,9,71,70,145,9,9,0,88,71,26,0,145,71,71,0,65,41,9,71,145,41,41,0,82,71,56,0,82,70,34,0,25,70,70,1,41,70,70,2,3,17,71,70,88,71,17,0,145,71,71,0,63,70,71,41,145,70,70,0,89,17,70,0,82,70,62,0,25,70,70,1,85,62,70,0,119,0,206,255,1,70,0,0,85,62,70,0,82,70,52,0,82,71,62,0,56,70,70,71,200,62,1,0,82,70,62,0,27,70,70,3,85,35,70,0,82,70,31,0,82,71,35,0,25,71,71,0,41,71,71,2,100,10,70,71,145,10,10,0,88,70,26,0,145,70,70,0,65,42,10,70,145,42,42,0,82,70,56,0,82,71,35,0,25,71,71,0,41,71,71,2,3,18,70,71,88,70,18,0,145,70,70,0,63,71,70,42,145,71,71,0,89,18,71,0,82,71,31,0,82,70,35,0,25,70,70,1,41,70,70,2,100,11,71,70,145,11,11,0,88,71,26,0,145,71,71,0,65,43,11,71,145,43,43,0,82,71,56,0,82,70,35,0,25,70,70,1,41,70,70,2,3,19,71,70,88,71,19,0,145,71,71,0,63,70,71,43,145,70,70,0,89,19,70,0,82,70,31,0,82,71,35,0,25,71,71,2,41,71,71,2,100,12,70,71,145,12,12,0,88,70,26,0,145,70,70,0,65,44,12,70,145,44,44,0,82,70,56,0,82,71,35,0,25,71,71,2,41,71,71,2,3,20,70,71,88,70,20,0,145,70,70,0,63,71,70,44,145,71,71,0,89,20,71,0,82,71,62,0,25,71,71,1,85,62,71,0,119,0,186,255,1,71,0,0,85,62,71,0,82,71,52,0,82,70,62,0,56,71,71,70,200,62,1,0,82,71,62,0,41,71,71,2,85,36,71,0,82,71,31,0,82,70,36,0,25,70,70,0,41,70,70,2,100,2,71,70,145,2,2,0,88,71,26,0,145,71,71,0,65,45,2,71,145,45,45,0,82,71,56,0,82,70,36,0,25,70,70,0,41,70,70,2,3,21,71,70,88,71,21,0,145,71,71,0,63,70,71,45,145,70,70,0,89,21,70,0,82,70,31,0,82,71,36,0,25,71,71,1,41,71,71,2,100,3,70,71,145,3,3,0,88,70,26,0,145,70,70,0,65,46,3,70,145,46,46,0,82,70,56,0,82,71,36,0,25,71,71,1,41,71,71,2,3,22,70,71,88,70,22,0,145,70,70,0,63,71,70,46,145,71,71,0,89,22,71,0,82,71,31,0,82,70,36,0,25,70,70,2,41,70,70,2,100,4,71,70,145,4,4,0,88,71,26,0,145,71,71,0,65,47,4,71,145,47,47,0,82,71,56,0,82,70,36,0,25,70,70,2,41,70,70,2,3,23,71,70,88,71,23,0,145,71,71,0,63,70,71,47,145,70,70,0,89,23,70,0,82,70,31,0,82,71,36,0,25,71,71,3,41,71,71,2,100,5,70,71,145,5,5,0,88,70,26,0,145,70,70,0,65,48,5,70,145,48,48,0,82,70,56,0,82,71,36,0,25,71,71,3,41,71,71,2,3,13,70,71,88,70,13,0,145,70,70,0,63,71,70,48,145,71,71,0,89,13,71,0,82,71,62,0,25,71,71,1,85,62,71,0,119,0,166,255,82,65,37,0,25,65,65,1,85,37,65,0,119,0,174,254,137,63,0,0,139,0,0,0,140,3,125,0,0,0,0,0,136,120,0,0,0,117,120,0,136,120,0,0,25,120,120,64,137,120,0,0,130,120,0,0,136,121,0,0,49,120,120,121,24,63,1,0,1,121,64,0,135,120,0,0,121,0,0,0,0,115,117,0,0,116,115,0,25,119,116,64,1,120,0,0,85,116,120,0,25,116,116,4,54,120,116,119,36,63,1,0,88,3,1,0,145,3,3,0,88,120,2,0,145,120,120,0,65,99,3,120,145,99,99,0,112,23,1,16,145,23,23,0,112,121,2,4,145,121,121,0,65,120,23,121,145,120,120,0,63,67,99,120,145,67,67,0,112,34,1,32,145,34,34,0,112,121,2,8,145,121,121,0,65,120,34,121,145,120,120,0,63,91,67,120,145,91,91,0,112,45,1,48,145,45,45,0,112,122,2,12,145,122,122,0,65,121,45,122,145,121,121,0,63,120,91,121,145,120,120,0,89,115,120,0,88,56,1,0,145,56,56,0,112,120,2,16,145,120,120,0,65,100,56,120,145,100,100,0,112,4,1,16,145,4,4,0,112,121,2,20,145,121,121,0,65,120,4,121,145,120,120,0,63,72,100,120,145,72,72,0,112,15,1,32,145,15,15,0,112,121,2,24,145,121,121,0,65,120,15,121], eb + 71680);
  HEAPU8.set([145,120,120,0,63,77,72,120,145,77,77,0,112,20,1,48,145,20,20,0,112,123,2,28,145,123,123,0,65,122,20,123,145,122,122,0,63,121,77,122,145,121,121,0,113,115,16,121,88,21,1,0,145,21,21,0,112,121,2,32,145,121,121,0,65,109,21,121,145,109,109,0,112,22,1,16,145,22,22,0,112,120,2,36,145,120,120,0,65,121,22,120,145,121,121,0,63,88,109,121,145,88,88,0,112,24,1,32,145,24,24,0,112,120,2,40,145,120,120,0,65,121,24,120,145,121,121,0,63,89,88,121,145,89,89,0,112,25,1,48,145,25,25,0,112,123,2,44,145,123,123,0,65,122,25,123,145,122,122,0,63,120,89,122,145,120,120,0,113,115,32,120,88,26,1,0,145,26,26,0,112,120,2,48,145,120,120,0,65,110,26,120,145,110,110,0,112,27,1,16,145,27,27,0,112,121,2,52,145,121,121,0,65,120,27,121,145,120,120,0,63,90,110,120,145,90,90,0,112,28,1,32,145,28,28,0,112,121,2,56,145,121,121,0,65,120,28,121,145,120,120,0,63,92,90,120,145,92,92,0,112,29,1,48,145,29,29,0,112,123,2,60,145,123,123,0,65,122,29,123,145,122,122,0,63,121,92,122,145,121,121,0,113,115,48,121,112,30,1,4,145,30,30,0,88,121,2,0,145,121,121,0,65,111,30,121,145,111,111,0,112,31,1,20,145,31,31,0,112,120,2,4,145,120,120,0,65,121,31,120,145,121,121,0,63,93,111,121,145,93,93,0,112,32,1,36,145,32,32,0,112,120,2,8,145,120,120,0,65,121,32,120,145,121,121,0,63,94,93,121,145,94,94,0,112,33,1,52,145,33,33,0,112,123,2,12,145,123,123,0,65,122,33,123,145,122,122,0,63,120,94,122,145,120,120,0,113,115,4,120,112,35,1,4,145,35,35,0,112,120,2,16,145,120,120,0,65,112,35,120,145,112,112,0,112,36,1,20,145,36,36,0,112,121,2,20,145,121,121,0,65,120,36,121,145,120,120,0,63,95,112,120,145,95,95,0,112,37,1,36,145,37,37,0,112,121,2,24,145,121,121,0,65,120,37,121,145,120,120,0,63,96,95,120,145,96,96,0,112,38,1,52,145,38,38,0,112,123,2,28,145,123,123,0,65,122,38,123,145,122,122,0,63,121,96,122,145,121,121,0,113,115,20,121,112,39,1,4,145,39,39,0,112,121,2,32,145,121,121,0,65,113,39,121,145,113,113,0,112,40,1,20,145,40,40,0,112,120,2,36,145,120,120,0,65,121,40,120,145,121,121,0,63,97,113,121,145,97,97,0,112,41,1,36,145,41,41,0,112,120,2,40,145,120,120,0,65,121,41,120,145,121,121,0,63,98,97,121,145,98,98,0,112,42,1,52,145,42,42,0,112,123,2,44,145,123,123,0,65,122,42,123,145,122,122,0,63,120,98,122,145,120,120,0,113,115,36,120,112,43,1,4,145,43,43,0,112,120,2,48,145,120,120,0,65,114,43,120,145,114,114,0,112,44,1,20,145,44,44,0,112,121,2,52,145,121,121,0,65,120,44,121,145,120,120,0,63,68,114,120,145,68,68,0,112,46,1,36,145,46,46,0,112,121,2,56,145,121,121,0,65,120,46,121,145,120,120,0,63,69,68,120,145,69,69,0,112,47,1,52,145,47,47,0,112,123,2,60,145,123,123,0,65,122,47,123,145,122,122,0,63,121,69,122,145,121,121,0,113,115,52,121,112,48,1,8,145,48,48,0,88,121,2,0,145,121,121,0,65,101,48,121,145,101,101,0,112,49,1,24,145,49,49,0,112,120,2,4,145,120,120,0,65,121,49,120,145,121,121,0,63,70,101,121,145,70,70,0,112,50,1,40,145,50,50,0,112,120,2,8,145,120,120,0,65,121,50,120,145,121,121,0,63,71,70,121,145,71,71,0,112,51,1,56,145,51,51,0,112,123,2,12,145,123,123,0,65,122,51,123,145,122,122,0,63,120,71,122,145,120,120,0,113,115,8,120,112,52,1,8,145,52,52,0,112,120,2,16,145,120,120,0,65,102,52,120,145,102,102,0,112,53,1,24,145,53,53,0,112,121,2,20,145,121,121,0,65,120,53,121,145,120,120,0,63,73,102,120,145,73,73,0,112,54,1,40,145,54,54,0,112,121,2,24,145,121,121,0,65,120,54,121,145,120,120,0,63,74,73,120,145,74,74,0,112,55,1,56,145,55,55,0,112,123,2,28,145,123,123,0,65,122,55,123,145,122,122,0,63,121,74,122,145,121,121,0,113,115,24,121,112,57,1,8,145,57,57,0,112,121,2,32,145,121,121,0,65,103,57,121,145,103,103,0,112,58,1,24,145,58,58,0,112,120,2,36,145,120,120,0,65,121,58,120,145,121,121,0,63,75,103,121,145,75,75,0,112,59,1,40,145,59,59,0,112,120,2,40,145,120,120,0,65,121,59,120,145,121,121,0,63,76,75,121,145,76,76,0,112,60,1,56,145,60,60,0,112,123,2,44,145,123,123,0,65,122,60,123,145,122,122,0,63,120,76,122,145,120,120,0,113,115,40,120,112,61,1,8,145,61,61,0,112,120,2,48,145,120,120,0,65,104,61,120,145,104,104,0,112,62,1,24,145,62,62,0,112,121,2,52,145,121,121,0,65,120,62,121,145,120,120,0,63,78,104,120,145,78,78,0,112,63,1,40,145,63,63,0,112,121,2,56,145,121,121,0,65,120,63,121,145,120,120,0,63,79,78,120,145,79,79,0,112,64,1,56,145,64,64,0,112,123,2,60,145,123,123,0,65,122,64,123,145,122,122,0,63,121,79,122,145,121,121,0,113,115,56,121,112,65,1,12,145,65,65,0,88,121,2,0,145,121,121,0,65,105,65,121,145,105,105,0,112,66,1,28,145,66,66,0,112,120,2,4,145,120,120,0,65,121,66,120,145,121,121,0,63,80,105,121,145,80,80,0,112,5,1,44,145,5,5,0,112,120,2,8,145,120,120,0,65,121,5,120,145,121,121,0,63,81,80,121,145,81,81,0,112,6,1,60,145,6,6,0,112,123,2,12,145,123,123,0,65,122,6,123,145,122,122,0,63,120,81,122,145,120,120,0,113,115,12,120,112,7,1,12,145,7,7,0,112,120,2,16,145,120,120,0,65,106,7,120,145,106,106,0,112,8,1,28,145,8,8,0,112,121,2,20,145,121,121,0,65,120,8,121,145,120,120,0,63,82,106,120,145,82,82,0,112,9,1,44,145,9,9,0,112,121,2,24,145,121,121,0,65,120,9,121,145,120,120,0,63,83,82,120,145,83,83,0,112,10,1,60,145,10,10,0,112,123,2,28,145,123,123,0,65,122,10,123,145,122,122,0,63,121,83,122,145,121,121,0,113,115,28,121,112,11,1,12,145,11,11,0,112,121,2,32,145,121,121,0,65,107,11,121,145,107,107,0,112,12,1,28,145,12,12,0,112,120,2,36,145,120,120,0,65,121,12,120,145,121,121,0,63,84,107,121,145,84,84,0,112,13,1,44,145,13,13,0,112,120,2,40,145,120,120,0,65,121,13,120,145,121,121,0,63,85,84,121,145,85,85,0,112,14,1,60,145,14,14,0,112,123,2,44,145,123,123,0,65,122,14,123,145,122,122,0,63,120,85,122,145,120,120,0,113,115,44,120,112,16,1,12,145,16,16,0,112,120,2,48,145,120,120,0,65,108,16,120,145,108,108,0,112,17,1,28,145,17,17,0,112,121,2,52,145,121,121,0,65,120,17,121,145,120,120,0,63,86,108,120,145,86,86,0,112,18,1,44,145,18,18,0,112,121,2,56,145,121,121,0,65,120,18,121,145,120,120,0,63,87,86,120,145,87,87,0,112,19,1,60,145,19,19,0,112,123,2,60,145,123,123,0,65,122,19,123,145,122,122,0,63,121,87,122,145,121,121,0,113,115,60,121,0,116,0,0,0,118,115,0,25,119,116,64,116,116,118,0,25,116,116,4,25,118,118,4,54,121,116,119,4,71,1,0,137,117,0,0,139,0,0,0,140,6,70,0,0,0,0,0,2,61,0,0,128,0,0,0,2,62,0,0,255,0,0,0,2,63,0,0,247,63,0,0,1,58,0,0,136,64,0,0,0,59,64,0,136,64,0,0,25,64,64,63,38,64,64,192,137,64,0,0,0,60,64,0,136,64,0,0,1,65,112,4,3,64,64,65,137,64,0,0,130,64,0,0,136,65,0,0,49,64,64,65,140,71,1,0,1,65,112,4,135,64,0,0,65,0,0,0,1,64,84,4,3,35,60,64,1,64,80,4,3,38,60,64,1,64,76,4,3,55,60,64,1,64,72,4,3,56,60,64,1,64,68,4,3,21,60,64,1,64,64,4,3,34,60,64,0,16,60,0,1,64,56,4,3,51,60,64,1,64,52,4,3,52,60,64,1,64,48,4,3,54,60,64,1,64,44,4,3,26,60,64,1,64,40,4,3,39,60,64,1,64,36,4,3,24,60,64,1,64,32,4,3,30,60,64,1,64,97,4,3,23,60,64,1,64,96,4,3,53,60,64,1,64,28,4,3,27,60,64,1,64,24,4,3,28,60,64,1,64,20,4,3,29,60,64,1,64,16,4,3,17,60,64,1,64,12,4,3,18,60,64,1,64,8,4,3,57,60,64,1,64,4,4,3,25,60,64,1,64,92,4,3,36,60,64,1,64,88,4,3,37,60,64,1,64,0,4,3,33,60,64,85,38,0,0,85,55,1,0,85,56,2,0,85,21,3,0,85,34,4,0,1,64,60,4,97,60,64,5,1,64,0,0,85,52,64,0,82,65,38,0,134,64,0,0,160,151,3,0,65,16,0,0,85,25,64,0,82,65,25,0,1,66,105,63,134,64,0,0,144,58,4,0,65,66,0,0,121,64,20,0,82,66,25,0,1,65,116,63,134,64,0,0,144,58,4,0,66,65,0,0,121,64,14,0,1,65,123,63,134,64,0,0,40,112,4,0,65,0,0,0,33,41,64,0,1,65,0,0,1,66,0,0,125,64,41,65,66,0,0,0,85,35,64,0,82,11,35,0,137,59,0,0,139,11,0,0,82,66,38,0,134,64,0,0,160,151,3,0,66,16,0,0,85,51,64,0,82,64,51,0,78,64,64,0,120,64,2,0,119,0,10,0,82,66,51,0,1,65,131,63,134,64,0,0,144,58,4,0,66,65,0,0,120,64,242,255,1,64,1,0,85,52,64,0,119,0,239,255,82,64,52,0,120,64,14,0,1,65,154,63,134,64,0,0,40,112,4,0,65,0,0,0,33,46,64,0,1,65,0,0,1,66,0,0,125,64,46,65,66,0,0,0,85,35,64,0,82,11,35,0,137,59,0,0,139,11,0,0,82,66,38,0,134,64,0,0,160,151,3,0,66,16,0,0,85,51,64,0,82,66,51,0,1,65,173,63,1,67,3,0,134,64,0,0,96,218,3,0,66,65,67,0,121,64,14,0,1,67,177,63,134,64,0,0,40,112,4,0,67,0,0,0,33,47,64,0,1,67,0,0,1,65,0,0,125,64,47,67,65,0,0,0,85,35,64,0,82,11,35,0,137,59,0,0,139,11,0,0,82,64,51,0,25,64,64,3,85,51,64,0,82,65,51,0,1,67,10,0,134,64,0,0,44,124,4,0,65,51,67,0,85,26,64,0,82,12,51,0,82,64,51,0,78,64,64,0,33,64,64,32,120,64,4,0,25,64,12,1,85,51,64,0,119,0,249,255,1,67,201,63,1,65,3,0,134,64,0,0,96,218,3,0,12,67,65,0,121,64,14,0,1,65,177,63,134,64,0,0,40,112,4,0,65,0,0,0,33,48,64,0,1,65,0,0,1,67,0,0,125,64,48,65,67,0,0,0,85,35,64,0,82,11,35,0,137,59,0,0,139,11,0,0,82,64,51,0,25,64,64,3,85,51,64,0,82,67,51,0,1,65,0,0,1,66,10,0,134,64,0,0,44,124,4,0,67,65,66,0,85,54,64,0,82,64,55,0,116,64,54,0,82,64,56,0,116,64,26,0,82,64,21,0,121,64,4,0,82,64,21,0,1,66,3,0,85,64,66,0,82,66,34,0,120,66,3,0,1,66,3,0,85,34,66,0,82,64,54,0,82,65,26,0,82,67,34,0,1,68,4,0,1,69,0,0,134,66,0,0,80,92,3,0,64,65,67,68,69,0,0,0,120,66,14,0,1,69,205,63,134,66,0,0,40,112,4,0,69,0,0,0,33,49,66,0,1,69,0,0,1,68,0,0,125,66,49,69,68,0,0,0,85,35,66,0,82,11,35,0,137,59,0,0,139,11,0,0,82,68,54,0,82,69,26,0,82,67,34,0,1,65,4,0,1,64,0,0,134,66,0,0,32,150,3,0,68,69,67,65,64,0,0,0,85,24,66,0,82,66,24,0,120,66,14,0,1,64,77,63,134,66,0,0,40,112,4,0,64,0,0,0,33,50,66,0,1,64,0,0,1,65,0,0,125,66,50,64,65,0,0,0,85,35,66,0,82,11,35,0,137,59,0,0,139,11,0,0,82,66,54,0,34,66,66,8,2,65,0,0,0,128,0,0,82,64,54,0,17,65,65,64,20,66,66,65,121,66,5,0,1,66,0,0,85,28,66,0,1,58,28,0,119,0,55,1,1,66,0,0,85,39,66,0,1,66,0,0,85,28,66,0,82,66,26,0,82,65,28,0,49,66,66,65,224,75,1,0,1,58,64,0,119,0,180,0,82,65,38,0,134,66,0,0,52,185,3,0,65,0,0,0,19,66,66,62,85,17,66,0,82,65,38,0,134,66,0,0,52,185,3,0,65,0,0,0,19,66,66,62,85,18,66,0,82,65,38,0,134,66,0,0,52,185,3,0,65,0,0,0,19,66,66,62,85,30,66,0,82,66,17,0,33,66,66,2,82,65,18,0,33,65,65,2,20,66,66,65,121,66,3,0,1,58,37,0,119,0,154,0,82,66,30,0,19,66,66,61,121,66,3,0,1,58,37,0,119,0,149,0,82,66,30,0,41,66,66,8,85,30,66,0,82,65,38,0,134,66,0,0,52,185,3,0,65,0,0,0,19,66,66,62,0,22,66,0,82,66,30,0,20,66,66,22,85,30,66,0,82,66,30,0,82,65,54,0,46,66,66,65,164,76,1,0,1,58,39,0,119,0,131,0,82,66,39,0,120,66,12,0,82,65,54,0,1,64,4,0,1,67,0,0,134,66,0,0,96,226,3,0,65,64,67,0,85,39,66,0,82,66,39,0,120,66,3,0,1,58,42,0,119,0,118,0,1,66,0,0,85,29,66,0,82,66,29,0,34,20,66,4,1,66,0,0,85,27,66,0,120,20,2,0,119,0,80,0,82,66,54,0,82,67,27,0,4,40,66,67,85,33,40,0,36,67,40,0,120,67,70,0,82,66,38,0,134,67,0,0,52,185,3,0,66,0,0,0,83,23,67,0,79,67,23,0,47,67,61,67,180,77,1,0,82,66,38,0,134,67,0,0,52,185,3,0,66,0,0,0,83,53,67,0,79,67,23,0,4,67,67,61,83,23,67,0,82,67,33,0,79,66,23,0,47,67,67,66,104,77,1,0,1,58,49,0,119,0,82,0,1,67,0,0,85,57,67,0,79,67,23,0,82,66,57,0,56,67,67,66,248,76,1,0,78,6,53,0,82,7,39,0,82,8,27,0,25,67,8,1,85,27,67,0,41,67,8,2,82,66,29,0,3,67,67,66,95,7,67,6,82,67,57,0,25,67,67,1,85,57,67,0,119,0,240,255,82,67,33,0,79,66,23,0,47,67,67,66,204,77,1,0,1,58,54,0,119,0,57,0,1,67,0,0,85,57,67,0,79,67,23,0,82,66,57,0,56,67,67,66,248,76,1,0,82,67,38,0,134,19,0,0,52,185,3,0,67,0,0,0,82,9,39,0,82,10,27,0,25,67,10,1,85,27,67,0,41,67,10,2,82,66,29,0,3,67,67,66,95,9,67,19,82,67,57,0,25,67,67,1,85,57,67,0,119,0,237,255,82,67,29,0,25,67,67,1,85,29,67,0,119,0,172,255,82,67,54,0,82,66,27,0,56,67,67,66,156,78,1,0,82,67,28,0,82,66,54,0,5,32,67,66,82,66,24,0,82,64,27,0,3,64,32,64,82,65,34,0,5,67,64,65,41,67,67,2,3,13,66,67,82,66,39,0,82,65,27,0,41,65,65,2,3,66,66,65,82,65,34,0,134,67,0,0,164,187,2,0,13,66,65,0,82,67,27,0,25,67,67,1,85,27,67,0,119,0,231,255,82,67,28,0,25,67,67,1,85,28,67,0,119,0,72,255,32,67,58,37,121,67,26,0,82,67,17,0,83,37,67,0,82,65,18,0,107,37,1,65,82,67,30,0,107,37,2,67,82,66,38,0,134,65,0,0,52,185,3,0,66,0,0,0,107,37,3,65,82,67,24,0,82,66,34,0,134,65,0,0,164,187,2,0,67,37,66,0,1,65,1,0,85,27,65,0,1,65,0,0,85,28,65,0,82,66,39,0,135,65,7,0,66,0,0,0,1,58,31,0,119,0,95,0,32,65,58,39,121,65,21,0,82,66,24,0,135,65,7,0,66,0,0,0,82,66,39,0,135,65,7,0,66,0,0,0,1,66,215,63,134,65,0,0,40,112,4,0,66,0,0,0,33,42,65,0,1,66,0,0,1,67,0,0,125,65,42,66,67,0,0,0,85,35,65,0,82,11,35,0,137,59,0,0,139,11,0,0,119,0,73,0,32,65,58,42,121,65,18,0,82,67,24,0,135,65,7,0,67,0,0,0,1,67,77,63,134,65,0,0,40,112,4,0,67,0,0,0,33,43,65,0,1,67,0,0,1,66,0,0,125,65,43,67,66,0,0,0,85,35,65,0,82,11,35,0,137,59,0,0,139,11,0,0,119,0,54,0,32,65,58,49,121,65,20,0,82,66,24,0,135,65,7,0,66,0,0,0,82,66,39,0,135,65,7,0,66,0,0,0,134,65,0,0,40,112,4,0,63,0,0,0,33,44,65,0,1,66,0,0,1,67,0,0,125,65,44,66,67,0,0,0,85,35,65,0,82,11,35,0,137,59,0,0,139,11,0,0,119,0,33,0,32,65,58,54,121,65,20,0,82,67,24,0,135,65,7,0,67,0,0,0,82,67,39,0,135,65,7,0,67,0,0,0,134,65,0,0,40,112,4,0,63,0,0,0,33,45,65,0,1,67,0,0,1,66,0,0,125,65,45,67,66,0,0,0,85,35,65,0,82,11,35,0,137,59,0,0,139,11,0,0,119,0,12,0,32,65,58,64,121,65,10,0,82,65,39,0,120,65,3,0,1,58,66,0,119,0,6,0,82,66,39,0,135,65,7,0,66,0,0,0,1,58,66,0,119,0,1,0,32,65,58,28,121,65,11,0,1,58,0,0,82,65,26,0,82,66,28,0,49,65,65,66,180,80,1,0,1,58,66,0,119,0,248,255,1,65,0,0,85,27,65,0,119,0,35,0,32,65,58,31,121,65,28,0,1,58,0,0,82,66,38,0,1,67,4,0,134,65,0,0,44,26,3,0,66,36,67,0,82,65,28,0,82,67,54,0,5,31,65,67,82,67,24,0,82,66,34,0,5,65,31,66,41,65,65,2,3,14,67,65,82,67,27,0,82,66,34,0,5,65,67,66,41,65,65,2,3,15,14,65,82,66,34,0,134,65,0,0,164,187,2,0,15,36,66,0,82,65,27,0,25,65,65,1,85,27,65,0,119,0,6,0,32,65,58,66,121,65,4,0,1,58,0,0,116,35,24,0,119,0,12,0,82,65,27,0,82,66,54,0,47,65,65,66,96,81,1,0,1,58,31,0,119,0,205,255,82,65,28,0,25,65,65,1,85,28,65,0,1,58,28,0,119,0,200,255,82,11,35,0,137,59,0,0,139,11,0,0,140,2,52,0,0,0,0,0,2,43,0,0,0,128,0,0,2,44,0,0,0,240,0,0,2,45,0,0,68,88,84,51,2,46,0,0,68,88,84,53,1,36,0,0,136,47,0,0,0,37,47,0,136,47,0,0,25,47,47,63,38,47,47,192,137,47,0,0,0,38,47,0,136,47,0,0,1,48,240,0,3,47,47,48,137,47,0,0,130,47,0,0,136,48,0,0,49,47,47,48,244,81,1,0,1,48,240,0,135,47,0,0,48,0,0,0,25,33,38,56,25,32,38,48,25,31,38,40,25,30,38,32,25,35,38,24,25,34,38,16,25,29,38,8,0,28,38,0,1,47,224,0,3,16,38,47,1,47,204,0,3,21,38,47,1,47,200,0,3,13,38,47,1,47,232,0,3,15,38,47,25,14,38,76,1,47,230,0,3,8,38,47,25,18,38,72,1,47,229,0,3,9,38,47,25,19,38,68,1,47,228,0,3,12,38,47,25,20,38,64,25,27,38,60,85,16,1,0,1,47,0,0,85,21,47,0,1,48,0,0,109,21,4,48,1,47,0,0,109,21,8,47,1,48,0,0,109,21,12,48,1,47,0,0,109,21,16,47,82,48,16,0,1,49,228,62,134,47,0,0,248,228,3,0,48,49,0,0,85,13,47,0,82,47,13,0,120,47,18,0,116,28,16,0,1,49,4,0,1,48,178,80,134,47,0,0,48,143,3,0,49,48,28,0,116,0,21,0,106,48,21,4,109,0,4,48,106,47,21,8,109,0,8,47,106,48,21,12,109,0,12,48,106,47,21,16,109,0,16,47,137,37,0,0,139,0,0,0,1,48,4,0,1,49,1,0,82,50,13,0,134,47,0,0,220,79,3,0,15,48,49,50,78,47,15,0,33,47,47,68,121,47,3,0,1,36,7,0,119,0,142,1,102,47,15,1,33,47,47,68,121,47,3,0,1,36,7,0,119,0,137,1,102,47,15,2,33,47,47,83,121,47,3,0,1,36,7,0,119,0,132,1,102,47,15,3,33,47,47,32,121,47,3,0,1,36,7,0,119,0,127,1,1,50,124,0,1,49,1,0,82,48,13,0,134,47,0,0,220,79,3,0,14,50,49,48,116,34,16,0,1,48,124,0,109,34,4,48,1,47,2,0,1,49,4,81,134,48,0,0,48,143,3,0,47,49,34,0,106,4,14,72,116,35,16,0,109,35,4,4,1,49,2,0,1,47,34,81,134,48,0,0,48,143,3,0,49,47,35,0,25,48,14,72,106,5,48,4,116,30,16,0,109,30,4,5,1,47,2,0,1,49,70,81,134,48,0,0,48,143,3,0,47,49,30,0,25,48,14,72,106,6,48,8,116,31,16,0,109,31,4,6,1,49,2,0,1,47,109,81,134,48,0,0,48,143,3,0,49,47,31,0,25,48,14,72,106,7,48,12,116,32,16,0,109,32,4,7,1,47,2,0,1,49,136,81,134,48,0,0,48,143,3,0,47,49,32,0,106,49,14,12,109,21,4,49,106,48,14,8,109,21,8,48,106,48,14,24,120,48,4,0,1,49,1,0,109,21,12,49,119,0,3,0,106,48,14,24,109,21,12,48,25,48,14,72,106,48,48,12,32,48,48,16,121,48,149,0,25,48,14,72,106,48,48,4,32,48,48,64,121,48,22,0,106,47,21,4,106,50,21,8,5,49,47,50,41,49,49,1,135,48,10,0,49,0,0,0,85,21,48,0,106,49,21,4,106,50,21,8,5,48,49,50,41,48,48,1,0,25,48,0,82,50,21,0,1,49,1,0,82,47,13,0,134,48,0,0,220,79,3,0,50,25,49,47,1,47,3,0,109,21,16,47,119,0,124,0,25,47,14,72,106,47,47,4,32,47,47,65,121,47,120,0,25,47,14,72,106,47,47,28,45,47,47,43,188,85,1,0,106,49,21,4,106,50,21,8,5,48,49,50,41,48,48,1,135,47,10,0,48,0,0,0,85,21,47,0,106,48,21,4,106,50,21,8,5,47,48,50,41,47,47,1,0,26,47,0,82,50,21,0,1,48,1,0,82,49,13,0,134,47,0,0,220,79,3,0,50,26,48,49,1,47,0,0,83,8,47,0,1,47,0,0,85,18,47,0,106,49,21,4,106,48,21,8,5,47,49,48,82,48,18,0,56,47,47,48,176,85,1,0,82,47,21,0,82,48,18,0,41,48,48,1,93,47,47,48,42,47,47,15,83,8,47,0,82,47,21,0,82,48,18,0,41,48,48,1,3,39,47,48,81,48,39,0,41,48,48,1,84,39,48,0,82,48,21,0,82,47,18,0,41,47,47,1,3,11,48,47,81,47,11,0,79,48,8,0,3,47,47,48,84,11,47,0,82,47,18,0,25,47,47,1,85,18,47,0,119,0,226,255,1,48,5,0,109,21,16,48,119,0,60,0,25,48,14,72,106,48,48,28,45,48,48,44,168,86,1,0,106,49,21,4,106,50,21,8,5,47,49,50,41,47,47,1,135,48,10,0,47,0,0,0,85,21,48,0,106,47,21,4,106,50,21,8,5,48,47,50,41,48,48,1,0,22,48,0,82,50,21,0,1,47,1,0,82,49,13,0,134,48,0,0,220,79,3,0,50,22,47,49,1,48,0,0,83,9,48,0,1,48,0,0,85,19,48,0,106,49,21,4,106,47,21,8,5,48,49,47,82,47,19,0,56,48,48,47,160,86,1,0,82,48,21,0,82,47,19,0,41,47,47,1,93,48,48,47,42,48,48,12,83,9,48,0,82,48,21,0,82,47,19,0,41,47,47,1,3,40,48,47,81,47,40,0,41,47,47,4,84,40,47,0,82,47,21,0,82,48,19,0,41,48,48,1,3,10,47,48,81,48,10,0,79,47,9,0,3,48,48,47,84,10,48,0,82,48,19,0,25,48,48,1,85,19,48,0,119,0,226,255,1,47,6,0,109,21,16,47,25,47,14,72,106,47,47,4,32,47,47,64,121,47,25,0,25,47,14,72,106,47,47,12,32,47,47,24,121,47,21,0,106,49,21,4,106,50,21,8,5,48,49,50,27,48,48,3,135,47,10,0,48,0,0,0,85,21,47,0,106,48,21,4,106,50,21,8,5,47,48,50,27,23,47,3,82,50,21,0,1,48,1,0,82,49,13,0,134,47,0,0,220,79,3,0,50,23,48,49,1,49,4,0,109,21,16,49,119,0,143,0,25,49,14,72,106,49,49,4,32,49,49,65,121,49,55,0,25,49,14,72,106,49,49,12,32,49,49,32,121,49,51,0,106,48,21,4,106,50,21,8,5,47,48,50,41,47,47,2,135,49,10,0,47,0,0,0,85,21,49,0,106,47,21,4,106,50,21,8,5,49,47,50,41,49,49,2,0,24,49,0,82,50,21,0,1,47,1,0,82,48,13,0,134,49,0,0,220,79,3,0,50,24,47,48,1,49,0,0,83,12,49,0,1,49,0,0,85,20,49,0,106,48,21,4,106,47,21,8,5,49,48,47,41,49,49,2,82,47,20,0,56,49,49,47,244,87,1,0,82,49,21,0,82,47,20,0,90,49,49,47,83,12,49,0,82,41,21,0,82,42,20,0,25,47,42,2,90,47,41,47,95,41,42,47,82,47,21,0,82,49,20,0,25,49,49,2,78,48,12,0,95,47,49,48,82,48,20,0,25,48,48,4,85,20,48,0,119,0,232,255,1,49,7,0,109,21,16,49,119,0,85,0,25,49,14,72,106,49,49,4,33,49,49,4,121,49,5,0,25,49,14,72,106,49,49,4,33,49,49,5,120,49,77,0,1,49,0,0,25,48,14,72,106,48,48,8,48,49,49,48,80,89,1,0,106,2,14,16,1,49,1,0,106,48,14,24,48,49,49,48,84,88,1,0,41,49,2,1,85,27,49,0,119,0,2,0,85,27,2,0,25,49,14,16,116,33,49,0,1,48,2,0,1,47,166,81,134,49,0,0,48,143,3,0,48,47,33,0,82,47,27,0,135,49,10,0,47,0,0,0,85,21,49,0,82,47,21,0,82,48,27,0,1,50,1,0,82,51,13,0,134,49,0,0,220,79,3,0,47,48,50,51,25,49,14,72,106,3,49,8,47,49,3,45,248,88,1,0,2,49,0,0,68,88,84,49,1,51,1,0,138,3,49,51,200,88,1,0,119,0,35,0,119,0,1,0,25,17,21,16,25,49,14,72,106,49,49,4,32,49,49,4,121,49,4,0,1,49,11,0,85,17,49,0,119,0,26,0,1,49,12,0,85,17,49,0,119,0,23,0,47,49,3,46,40,89,1,0,2,49,0,0,68,88,84,51,1,51,1,0,138,3,49,51,24,89,1,0,119,0,15,0,119,0,1,0,1,51,13,0,109,21,16,51,119,0,11,0,2,51,0,0,68,88,84,53,1,49,1,0,138,3,51,49,64,89,1,0,119,0,5,0,119,0,1,0,1,49,14,0,109,21,16,49,119,0,1,0,32,49,36,7,121,49,7,0,116,29,16,0,1,51,4,0,1,50,212,80,134,49,0,0,48,143,3,0,51,50,29,0,82,50,13,0,134,49,0,0,172,24,4,0,50,0,0,0,116,0,21,0,106,50,21,4,109,0,4,50,106,49,21,8,109,0,8,49,106,50,21,12,109,0,12,50,106,49,21,16,109,0,16,49,137,37,0,0,139,0,0,0,140,6,103,0,0,0,0,0,2,88,0,0,143,128,0,0,2,89,0,0,144,128,0,0,2,90,0,0,148,128,0,0,2,91,0,0,149,128,0,0,2,92,0,0,145,128,0,0,2,93,0,0,146,128,0,0,136,94,0,0,0,86,94,0,136,94,0,0,25,94,94,63,38,94,94,192,137,94,0,0,0,87,94,0,136,94,0,0,25,94,94,64,137,94,0,0,130,94,0,0,136,95,0,0,49,94,94,95,40,90,1,0,1,95,64,0,135,94,0,0,95,0,0,0,25,79,87,52,25,81,87,48,25,76,87,44,25,80,87,40,25,84,87,36,25,83,87,32,25,82,87,28,25,64,87,24,25,85,87,4,0,77,87,0,89,79,1,0,85,81,2,0,85,76,3,0,85,80,4,0,88,94,79,0,145,94,94,0,59,95,0,0,145,95,95,0,72,94,94,95,121,94,6,0,62,94,0,0,148,28,229,157,153,153,185,63,145,94,94,0,89,79,94,0,82,94,76,0,82,95,81,0,47,94,94,95,168,90,1,0,116,84,81,0,116,81,76,0,116,76,84,0,82,94,80,0,34,94,94,4,121,94,59,0,59,99,1,0,145,99,99,0,61,101,0,0,0,0,0,63,145,101,101,0,88,102,79,0,145,102,102,0,66,100,101,102,145,100,100,0,64,98,99,100,145,98,98,0,59,100,2,0,135,97,17,0,98,100,0,0,145,97,97,0,59,100,2,0,145,100,100,0,65,96,97,100,145,96,96,0,59,100,1,0,145,100,100,0,64,95,96,100,145,95,95,0,134,94,0,0,228,229,2,0,95,0,0,0,145,94,94,0,89,83,94,0,82,94,76,0,82,95,81,0,4,65,94,95,76,95,65,0,145,65,95,0,62,97,0,0,80,53,221,95,251,33,25,64,145,97,97,0,88,98,83,0,145,98,98,0,66,96,97,98,145,96,96,0,135,100,18,0,96,0,0,0,145,100,100,0,65,94,65,100,145,94,94,0,59,100,104,1,145,100,100,0,66,95,94,100,145,95,95,0,75,66,95,0,85,80,66,0,82,100,80,0,36,100,100,0,1,94,4,0,125,95,100,94,66,0,0,0,85,80,95,0,82,95,76,0,82,94,81,0,4,67,95,94,76,94,67,0,145,67,94,0,82,95,80,0,76,95,95,0,145,95,95,0,66,94,67,95,145,94,94,0,89,82,94,0,82,94,81,0,76,94,94,0,145,94,94,0,89,64,94,0,82,95,80,0,41,95,95,2,28,95,95,2,134,94,0,0,176,84,4,0,95,0,0,0,121,94,3,0,134,94,0,0,36,127,4,0,134,94,0,0,236,41,3,0,85,0,0,0,82,95,85,0,134,94,0,0,248,252,2,0,95,0,0,0,1,95,7,0,134,94,0,0,252,233,2,0,95,0,0,0,1,94,0,0,85,77,94,0,82,94,80,0,28,94,94,2,82,95,77,0,56,94,94,95,244,96,1,0,78,95,5,0,102,100,5,1,102,96,5,2,102,98,5,3,134,94,0,0,248,157,3,0,95,100,96,98,2,94,0,0,60,2,2,0,88,18,94,0,145,18,18,0,2,98,0,0,80,2,2,0,82,94,98,0,76,94,94,0,145,94,94,0,66,70,18,94,145,70,70,0,2,94,0,0,64,2,2,0,88,19,94,0,145,19,19,0,2,100,0,0,84,2,2,0,82,96,100,0,76,96,96,0,145,96,96,0,66,98,19,96,145,98,98,0,134,94,0,0,80,13,4,0,70,98,0,0,88,20,0,0,145,20,20,0,112,98,0,4,145,98,98,0,134,94,0,0,124,92,4,0,20,98,0,0,2,94,0,0,60,2,2,0,88,21,94,0,145,21,21,0,2,98,0,0,80,2,2,0,82,94,98,0,76,94,94,0,145,94,94,0,66,71,21,94,145,71,71,0,2,94,0,0,64,2,2,0,88,22,94,0,145,22,22,0,2,98,0,0,72,2,2,0,88,94,98,0,145,94,94,0,63,51,22,94,145,51,51,0,2,100,0,0,84,2,2,0,82,96,100,0,76,96,96,0,145,96,96,0,66,98,51,96,145,98,98,0,134,94,0,0,80,13,4,0,71,98,0,0,88,23,0,0,145,23,23,0,88,98,64,0,145,98,98,0,62,96,0,0,20,25,67,160,70,223,145,63,145,96,96,0,65,94,98,96,145,94,94,0,135,24,19,0,94,0,0,0,145,24,24,0,88,96,79,0,145,96,96,0,65,94,24,96,145,94,94,0,63,57,23,94,145,57,57,0,112,25,0,4,145,25,25,0,88,96,64,0,145,96,96,0,62,98,0,0,20,25,67,160,70,223,145,63,145,98,98,0,65,94,96,98,145,94,94,0,135,26,20,0,94,0,0,0,145,26,26,0,88,100,79,0,145,100,100,0,65,96,26,100,145,96,96,0,63,98,25,96,145,98,98,0,134,94,0,0,124,92,4,0,57,98,0,0,2,94,0,0,60,2,2,0,88,27,94,0,145,27,27,0,2,98,0,0,68,2,2,0,88,94,98,0,145,94,94,0,63,58,27,94,145,58,58,0,2,98,0,0,80,2,2,0,82,94,98,0,76,94,94,0,145,94,94,0,66,72,58,94,145,72,72,0,2,94,0,0,64,2,2,0,88,28,94,0,145,28,28,0,2,98,0,0,72,2,2,0,88,94,98,0,145,94,94,0,63,59,28,94,145,59,59,0,2,100,0,0,84,2,2,0,82,96,100,0,76,96,96,0,145,96,96,0,66,98,59,96,145,98,98,0,134,94,0,0,80,13,4,0,72,98,0,0,88,29,0,0,145,29,29,0,88,30,64,0,145,30,30,0,88,96,82,0,145,96,96,0,63,98,30,96,145,98,98,0,62,96,0,0,20,25,67,160,70,223,145,63,145,96,96,0,65,94,98,96,145,94,94,0,135,31,19,0,94,0,0,0,145,31,31,0,88,96,79,0,145,96,96,0,65,94,31,96,145,94,94,0,63,60,29,94,145,60,60,0,112,32,0,4,145,32,32,0,88,33,64,0,145,33,33,0,88,98,82,0,145,98,98,0,63,96,33,98,145,96,96,0,62,98,0,0,20,25,67,160,70,223,145,63,145,98,98,0,65,94,96,98,145,94,94,0,135,34,20,0,94,0,0,0,145,34,34,0,88,100,79,0,145,100,100,0,65,96,34,100,145,96,96,0,63,98,32,96,145,98,98,0,134,94,0,0,124,92,4,0,60,98,0,0,2,94,0,0,60,2,2,0,88,35,94,0,145,35,35,0,2,98,0,0,68,2,2,0,88,94,98,0,145,94,94,0,63,61,35,94,145,61,61,0,2,98,0,0,80,2,2,0,82,94,98,0,76,94,94,0,145,94,94,0,66,73,61,94,145,73,73,0,2,94,0,0,64,2,2,0,88,36,94,0,145,36,36,0,2,100,0,0,84,2,2,0,82,96,100,0,76,96,96,0,145,96,96,0,66,98,36,96,145,98,98,0,134,94,0,0,80,13,4,0,73,98,0,0,88,37,0,0,145,37,37,0,88,38,64,0,145,38,38,0,88,100,82,0,145,100,100,0,59,95,2,0,145,95,95,0,65,96,100,95,145,96,96,0,63,98,38,96,145,98,98,0,62,96,0,0,20,25,67,160,70,223,145,63,145,96,96,0,65,94,98,96,145,94,94,0,135,39,19,0,94,0,0,0,145,39,39,0,88,96,79,0,145,96,96,0,65,94,39,96,145,94,94,0,63,62,37,94,145,62,62,0,112,40,0,4,145,40,40,0,88,41,64,0,145,41,41,0,88,95,82,0,145,95,95,0,59,100,2,0,145,100,100,0,65,98,95,100,145,98,98,0,63,96,41,98,145,96,96,0,62,98,0,0,20,25,67,160,70,223,145,63,145,98,98,0,65,94,96,98,145,94,94,0,135,42,20,0,94,0,0,0,145,42,42,0,88,100,79,0,145,100,100,0,65,96,42,100,145,96,96,0,63,98,40,96,145,98,98,0,134,94,0,0,124,92,4,0,62,98,0,0,88,94,82,0,145,94,94,0,59,98,2,0,145,98,98,0,65,78,94,98,145,78,78,0,88,94,64,0,145,94,94,0,63,98,94,78,145,98,98,0,89,64,98,0,82,98,77,0,25,98,98,1,85,77,98,0,119,0,208,254,82,98,80,0,30,98,98,2,120,98,7,0,134,98,0,0,68,142,2,0,134,98,0,0,64,131,4,0,137,86,0,0,139,0,0,0,78,94,5,0,102,96,5,1,102,100,5,2,102,95,5,3,134,98,0,0,248,157,3,0,94,96,100,95,2,98,0,0,60,2,2,0,88,43,98,0,145,43,43,0,2,95,0,0,80,2,2,0,82,98,95,0,76,98,98,0,145,98,98,0,66,74,43,98,145,74,74,0,2,98,0,0,64,2,2,0,88,44,98,0,145,44,44,0,2,96,0,0,84,2,2,0,82,100,96,0,76,100,100,0,145,100,100,0,66,95,44,100,145,95,95,0,134,98,0,0,80,13,4,0,74,95,0,0,88,45,0,0,145,45,45,0,112,95,0,4,145,95,95,0,134,98,0,0,124,92,4,0,45,95,0,0,2,98,0,0,60,2,2,0,88,46,98,0,145,46,46,0,2,95,0,0,80,2,2,0,82,98,95,0,76,98,98,0,145,98,98,0,66,75,46,98,145,75,75,0,2,98,0,0,64,2,2,0,88,47,98,0,145,47,47,0,2,95,0,0,72,2,2,0,88,98,95,0,145,98,98,0,63,63,47,98,145,63,63,0,2,96,0,0,84,2,2,0,82,100,96,0,76,100,100,0,145,100,100,0,66,95,63,100,145,95,95,0,134,98,0,0,80,13,4,0,75,95,0,0,88,48,0,0,145,48,48,0,88,95,64,0,145,95,95,0,62,100,0,0,20,25,67,160,70,223,145,63,145,100,100,0,65,98,95,100,145,98,98,0,135,49,19,0,98,0,0,0,145,49,49,0,88,100,79,0,145,100,100,0,65,98,49,100,145,98,98,0,63,52,48,98,145,52,52,0,112,50,0,4,145,50,50,0,88,100,64,0,145,100,100,0,62,95,0,0,20,25,67,160,70,223,145,63,145,95,95,0,65,98,100,95,145,98,98,0,135,6,20,0,98,0,0,0,145,6,6,0,88,96,79,0,145,96,96,0,65,100,6,96,145,100,100,0,63,95,50,100,145,95,95,0,134,98,0,0,124,92,4,0,52,95,0,0,2,98,0,0,60,2,2,0,88,7,98,0,145,7,7,0,2,95,0,0,68,2,2,0,88,98,95,0,145,98,98,0,63,53,7,98,145,53,53,0,2,95,0,0,80,2,2,0,82,98,95,0,76,98,98,0,145,98,98,0,66,68,53,98,145,68,68,0,2,98,0,0,64,2,2,0,88,8,98,0,145,8,8,0,2,95,0,0,72,2,2,0,88,98,95,0,145,98,98,0,63,54,8,98,145,54,54,0,2,96,0,0,84,2,2,0,82,100,96,0,76,100,100,0,145,100,100,0,66,95,54,100,145,95,95,0,134,98,0,0,80,13,4,0,68,95,0,0,88,9,0,0,145,9,9,0,88,10,64,0,145,10,10,0,88,100,82,0,145,100,100,0,63,95,10,100,145,95,95,0,62,100,0,0,20,25,67,160,70,223,145,63,145,100,100,0,65,98,95,100,145,98,98,0,135,11,19,0,98,0,0,0,145,11,11,0,88,100,79,0,145,100,100,0,65,98,11,100,145,98,98,0,63,55,9,98,145,55,55,0,112,12,0,4,145,12,12,0,88,13,64,0,145,13,13,0,88,95,82,0,145,95,95,0,63,100,13,95,145,100,100,0,62,95,0,0,20,25,67,160,70,223,145,63,145,95,95,0,65,98,100,95,145,98,98,0,135,14,20,0,98,0,0,0,145,14,14,0,88,96,79,0,145,96,96,0,65,100,14,96,145,100,100,0,63,95,12,100,145,95,95,0,134,98,0,0,124,92,4,0,55,95,0,0,2,98,0,0,60,2,2,0,88,15,98,0,145,15,15,0,2,95,0,0,68,2,2,0,88,98,95,0,145,98,98,0,63,56,15,98,145,56,56,0,2,95,0,0,80,2,2,0,82,98,95,0,76,98,98,0,145,98,98,0,66,69,56,98,145,69,69,0,2,98,0,0,64,2,2,0,88,16,98,0,145,16,16,0,2,96,0,0,84,2,2,0,82,100,96,0,76,100,100,0,145,100,100,0,66,95,16,100,145,95,95,0,134,98,0,0,80,13,4,0,69,95,0,0,88,17,0,0,145,17,17,0,112,95,0,4,145,95,95,0,134,98,0,0,124,92,4,0,17,95,0,0,134,98,0,0,68,142,2,0,134,98,0,0,64,131,4,0,137,86,0,0,139,0,0,0,140,1,52,0,0,0,0,0,2,43,0,0,0,248,0,0,2,44,0,0,240,0,0,0,2,45,0,0,192,7,0,0,2,46,0,0,224,7,0,0,2,47,0,0,0,15,0,0,136,48,0,0,0,41,48,0,136,48,0,0,25,48,48,63,38,48,48,192,137,48,0,0,0,42,48,0,136,48,0,0,25,48,48,32,137,48,0,0,130,48,0,0,136,49,0,0,49,48,48,49,80,101,1,0,1,49,32,0,135,48,0,0,49,0,0,0,25,40,42,12,25,25,42,8,25,26,42,4,25,37,42,20,25,39,42,18,25,38,42,16,106,50,0,4,106,51,0,8,5,49,50,51,41,49,49,4,135,48,10,0,49,0,0,0,85,40,48,0,1,48,11,0,106,49,0,16,49,48,48,49,180,101,1,0,1,49,4,0,1,51,53,82,134,48,0,0,48,143,3,0,49,51,42,0,82,9,40,0,137,41,0,0,139,9,0,0,1,48,0,0,85,25,48,0,1,48,0,0,85,26,48,0,106,51,0,4,106,49,0,8,5,48,51,49,82,49,25,0,56,48,48,49,164,110,1,0,106,48,0,16,1,51,1,0,1,49,10,0,138,48,51,49,24,102,1,0,220,102,1,0,204,103,1,0,184,104,1,0,144,105,1,0,168,106,1,0,192,107,1,0,184,108,1,0,52,109,1,0,220,109,1,0,119,0,32,2,82,51,0,0,82,50,25,0,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,11,49,51,145,11,11,0,82,51,40,0,82,49,25,0,41,49,49,4,101,51,49,11,82,51,0,0,82,50,25,0,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,12,49,51,145,12,12,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,4,12,82,49,0,0,82,50,25,0,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,17,51,49,145,17,17,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,8,17,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,59,51,1,0,145,51,51,0,113,49,12,51,119,0,239,1,82,49,0,0,82,50,26,0,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,21,51,49,145,21,21,0,82,49,40,0,82,51,25,0,41,51,51,4,101,49,51,21,82,49,0,0,82,50,26,0,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,22,51,49,145,22,22,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,4,22,82,51,0,0,82,50,26,0,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,23,49,51,145,23,23,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,8,23,82,49,0,0,82,50,26,0,25,50,50,1,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,24,51,49,145,24,24,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,12,24,82,49,26,0,25,49,49,2,85,26,49,0,119,0,179,1,82,49,0,0,82,51,25,0,41,51,51,1,92,49,49,51,84,39,49,0,81,51,39,0,19,51,51,43,42,51,51,11,76,51,51,0,145,49,51,0,62,51,0,0,184,121,99,0,33,132,160,63], eb + 81920);
  HEAPU8.set([145,51,51,0,65,34,49,51,145,34,34,0,82,51,40,0,82,49,25,0,41,49,49,4,101,51,49,34,81,51,39,0,19,51,51,46,42,51,51,5,76,51,51,0,145,49,51,0,62,51,0,0,104,239,45,32,4,65,144,63,145,51,51,0,65,35,49,51,145,35,35,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,4,35,81,49,39,0,38,49,49,31,76,49,49,0,145,51,49,0,62,49,0,0,184,121,99,0,33,132,160,63,145,49,49,0,65,36,51,49,145,36,36,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,8,36,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,59,51,1,0,145,51,51,0,113,49,12,51,119,0,120,1,82,49,0,0,82,50,26,0,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,18,51,49,145,18,18,0,82,49,40,0,82,51,25,0,41,51,51,4,101,49,51,18,82,49,0,0,82,50,26,0,25,50,50,1,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,19,51,49,145,19,19,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,4,19,82,51,0,0,82,50,26,0,25,50,50,2,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,20,49,51,145,20,20,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,8,20,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,59,49,1,0,145,49,49,0,113,51,12,49,82,49,26,0,25,49,49,3,85,26,49,0,119,0,66,1,82,49,0,0,82,51,25,0,41,51,51,1,92,49,49,51,84,37,49,0,81,51,37,0,19,51,51,43,42,51,51,11,76,51,51,0,145,49,51,0,62,51,0,0,184,121,99,0,33,132,160,63,145,51,51,0,65,31,49,51,145,31,31,0,82,51,40,0,82,49,25,0,41,49,49,4,101,51,49,31,81,51,37,0,19,51,51,45,42,51,51,6,76,51,51,0,145,49,51,0,62,51,0,0,184,121,99,0,33,132,160,63,145,51,51,0,65,32,49,51,145,32,32,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,4,32,81,49,37,0,38,49,49,62,42,49,49,1,76,49,49,0,145,51,49,0,62,49,0,0,184,121,99,0,33,132,160,63,145,49,49,0,65,33,51,49,145,33,33,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,8,33,81,51,37,0,38,51,51,1,32,51,51,0,121,51,5,0,59,51,0,0,145,51,51,0,58,49,51,0,119,0,4,0,59,51,1,0,145,51,51,0,58,49,51,0,58,10,49,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,12,10,119,0,252,0,82,51,0,0,82,49,25,0,41,49,49,1,92,51,51,49,84,38,51,0,81,49,38,0,2,50,0,0,0,240,0,0,19,49,49,50,42,49,49,12,76,49,49,0,145,51,49,0,62,49,0,0,125,14,208,31,17,17,177,63,145,49,49,0,65,27,51,49,145,27,27,0,82,49,40,0,82,51,25,0,41,51,51,4,101,49,51,27,81,49,38,0,19,49,49,47,42,49,49,8,76,49,49,0,145,51,49,0,62,49,0,0,125,14,208,31,17,17,177,63,145,49,49,0,65,28,51,49,145,28,28,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,4,28,81,51,38,0,19,51,51,44,42,51,51,4,76,51,51,0,145,49,51,0,62,51,0,0,125,14,208,31,17,17,177,63,145,51,51,0,65,29,49,51,145,29,29,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,8,29,81,49,38,0,38,49,49,15,76,49,49,0,145,51,49,0,62,49,0,0,125,14,208,31,17,17,177,63,145,49,49,0,65,30,51,49,145,30,30,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,12,30,119,0,182,0,82,51,0,0,82,50,26,0,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,13,49,51,145,13,13,0,82,51,40,0,82,49,25,0,41,49,49,4,101,51,49,13,82,51,0,0,82,50,26,0,25,50,50,1,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,14,49,51,145,14,14,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,4,14,82,49,0,0,82,50,26,0,25,50,50,2,91,51,49,50,76,51,51,0,145,51,51,0,59,49,255,0,145,49,49,0,66,15,51,49,145,15,15,0,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,113,49,8,15,82,51,0,0,82,50,26,0,25,50,50,3,91,49,51,50,76,49,49,0,145,49,49,0,59,51,255,0,145,51,51,0,66,16,49,51,145,16,16,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,12,16,82,51,26,0,25,51,51,4,85,26,51,0,119,0,120,0,82,49,0,0,82,51,26,0,41,51,51,2,100,1,49,51,145,1,1,0,82,49,40,0,82,51,25,0,41,51,51,4,101,49,51,1,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,59,49,0,0,145,49,49,0,113,51,4,49,82,49,40,0,82,51,25,0,41,51,51,4,3,49,49,51,59,51,0,0,145,51,51,0,113,49,8,51,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,59,49,1,0,145,49,49,0,113,51,12,49,119,0,89,0,82,49,0,0,82,51,26,0,41,51,51,2,100,2,49,51,145,2,2,0,82,49,40,0,82,51,25,0,41,51,51,4,101,49,51,2,82,51,0,0,82,49,26,0,25,49,49,1,41,49,49,2,100,3,51,49,145,3,3,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,4,3,82,51,0,0,82,49,26,0,25,49,49,2,41,49,49,2,100,4,51,49,145,4,4,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,8,4,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,59,49,1,0,145,49,49,0,113,51,12,49,82,49,26,0,25,49,49,3,85,26,49,0,119,0,47,0,82,49,0,0,82,51,26,0,41,51,51,2,100,5,49,51,145,5,5,0,82,49,40,0,82,51,25,0,41,51,51,4,101,49,51,5,82,51,0,0,82,49,26,0,25,49,49,1,41,49,49,2,100,6,51,49,145,6,6,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,4,6,82,51,0,0,82,49,26,0,25,49,49,2,41,49,49,2,100,7,51,49,145,7,7,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,8,7,82,51,0,0,82,49,26,0,25,49,49,3,41,49,49,2,100,8,51,49,145,8,8,0,82,51,40,0,82,49,25,0,41,49,49,4,3,51,51,49,113,51,12,8,82,51,26,0,25,51,51,4,85,26,51,0,119,0,1,0,82,48,25,0,25,48,48,1,85,25,48,0,119,0,201,253,82,9,40,0,137,41,0,0,139,9,0,0,140,6,49,0,0,0,0,0,136,40,0,0,0,38,40,0,136,40,0,0,25,40,40,63,38,40,40,192,137,40,0,0,0,39,40,0,136,40,0,0,25,40,40,112,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,252,110,1,0,1,41,112,0,135,40,0,0,41,0,0,0,25,31,39,96,25,30,39,92,25,33,39,88,25,34,39,84,25,35,39,80,25,26,39,76,25,29,39,72,25,22,39,68,0,18,39,0,25,32,39,104,25,28,39,64,25,27,39,60,25,20,39,56,25,37,39,52,25,25,39,48,25,24,39,44,25,36,39,40,25,21,39,36,25,14,39,32,25,15,39,28,25,19,39,24,25,23,39,20,85,30,0,0,85,33,1,0,85,34,2,0,85,35,3,0,85,26,4,0,85,29,5,0,1,40,255,255,85,22,40,0,1,40,96,20,82,40,40,0,85,18,40,0,1,41,100,20,82,41,41,0,109,18,4,41,1,40,104,20,82,40,40,0,109,18,8,40,1,41,108,20,82,41,41,0,109,18,12,41,1,40,112,20,82,40,40,0,109,18,16,40,1,40,95,68,78,40,40,0,83,32,40,0,1,41,96,68,78,41,41,0,107,32,1,41,1,40,97,68,78,40,40,0,107,32,2,40,1,41,98,68,78,41,41,0,107,32,3,41,1,40,99,68,78,40,40,0,107,32,4,40,1,41,100,68,78,41,41,0,107,32,5,41,1,40,101,68,78,40,40,0,107,32,6,40,1,41,102,68,78,41,41,0,107,32,7,41,82,41,33,0,120,41,5,0,82,40,34,0,82,42,26,0,5,41,40,42,85,33,41,0,1,41,5,0,82,42,22,0,49,41,41,42,64,112,1,0,1,41,255,255,85,22,41,0,82,42,34,0,82,40,26,0,5,41,42,40,25,12,41,1,82,42,35,0,5,40,12,42,135,41,10,0,40,0,0,0,85,20,41,0,82,41,20,0,120,41,6,0,1,41,0,0,85,31,41,0,82,11,31,0,137,38,0,0,139,11,0,0,82,42,34,0,82,43,26,0,5,40,42,43,135,41,10,0,40,0,0,0,85,25,41,0,82,41,25,0,120,41,9,0,82,40,20,0,135,41,7,0,40,0,0,0,1,41,0,0,85,31,41,0,82,11,31,0,137,38,0,0,139,11,0,0,1,41,0,0,85,24,41,0,82,41,35,0,82,40,24,0,56,41,41,40,176,114,1,0,1,41,255,255,82,40,22,0,47,41,41,40,32,113,1,0,116,21,22,0,82,40,30,0,82,43,33,0,82,42,34,0,82,44,35,0,82,45,24,0,82,46,26,0,82,47,22,0,82,48,25,0,134,41,0,0,144,190,1,0,40,43,42,44,45,46,47,48,119,0,73,0,1,41,0,0,85,14,41,0,2,41,0,0,255,255,255,127,85,15,41,0,1,41,0,0,85,21,41,0,1,41,5,0,82,48,21,0,56,41,41,48,252,113,1,0,82,48,30,0,82,47,33,0,82,46,34,0,82,45,35,0,82,44,24,0,82,42,26,0,82,43,21,0,82,40,25,0,134,41,0,0,144,190,1,0,48,47,46,45,44,42,43,40,1,41,0,0,85,19,41,0,1,41,0,0,85,23,41,0,82,40,34,0,82,43,26,0,5,41,40,43,82,43,23,0,56,41,41,43,212,113,1,0,82,41,25,0,82,43,23,0,90,41,41,43,135,16,21,0,41,0,0,0,82,41,19,0,3,41,41,16,85,19,41,0,82,41,23,0,25,41,41,1,85,23,41,0,119,0,239,255,82,41,19,0,82,43,15,0,47,41,41,43,236,113,1,0,116,15,19,0,116,14,21,0,82,41,21,0,25,41,41,1,85,21,41,0,119,0,209,255,82,41,21,0,82,43,14,0,46,41,41,43,64,114,1,0,82,43,30,0,82,40,33,0,82,42,34,0,82,44,35,0,82,45,24,0,82,46,26,0,82,47,14,0,82,48,25,0,134,41,0,0,144,190,1,0,43,40,42,44,45,46,47,48,116,21,14,0,82,41,20,0,82,47,24,0,82,45,34,0,82,44,26,0,5,46,45,44,25,46,46,1,5,48,47,46,82,46,21,0,95,41,48,46,82,46,20,0,82,41,24,0,82,44,34,0,82,45,26,0,5,47,44,45,25,47,47,1,5,48,41,47,3,46,46,48,25,13,46,1,82,48,25,0,82,41,34,0,82,45,26,0,5,47,41,45,135,46,11,0,13,48,47,0,82,46,24,0,25,46,46,1,85,24,46,0,119,0,135,255,82,47,25,0,135,46,7,0,47,0,0,0,82,47,20,0,82,45,35,0,82,44,34,0,82,42,26,0,5,41,44,42,25,41,41,1,5,48,45,41,1,41,8,0,134,46,0,0,196,160,0,0,47,48,36,41,85,37,46,0,82,41,20,0,135,46,7,0,41,0,0,0,82,46,37,0,120,46,6,0,1,46,0,0,85,31,46,0,82,11,31,0,137,38,0,0,139,11,0,0,82,41,36,0,25,41,41,45,25,41,41,12,135,46,10,0,41,0,0,0,85,28,46,0,82,46,28,0,120,46,6,0,1,46,0,0,85,31,46,0,82,11,31,0,137,38,0,0,139,11,0,0,82,46,29,0,82,41,36,0,25,41,41,45,25,41,41,12,85,46,41,0,116,27,28,0,82,46,27,0,1,48,8,0,135,41,11,0,46,32,48,0,82,41,27,0,25,41,41,8,85,27,41,0,82,41,27,0,1,48,0,0,83,41,48,0,82,48,27,0,1,41,0,0,107,48,1,41,82,41,27,0,1,48,0,0,107,41,2,48,82,48,27,0,1,41,13,0,107,48,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,41,27,0,1,48,103,68,78,48,48,0,83,41,48,0,82,48,27,0,1,41,104,68,78,41,41,0,107,48,1,41,82,41,27,0,1,48,105,68,78,48,48,0,107,41,2,48,82,48,27,0,1,41,106,68,78,41,41,0,107,48,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,41,27,0,82,48,34,0,42,48,48,24,83,41,48,0,82,48,27,0,82,41,34,0,42,41,41,16,107,48,1,41,82,41,27,0,82,48,34,0,42,48,48,8,107,41,2,48,82,48,27,0,82,41,34,0,107,48,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,41,27,0,82,48,35,0,42,48,48,24,83,41,48,0,82,48,27,0,82,41,35,0,42,41,41,16,107,48,1,41,82,41,27,0,82,48,35,0,42,48,48,8,107,41,2,48,82,48,27,0,82,41,35,0,107,48,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,6,27,0,25,41,6,1,85,27,41,0,1,41,8,0,83,6,41,0,82,41,26,0,41,41,41,2,94,41,18,41,1,48,255,0,19,41,41,48,0,17,41,0,82,7,27,0,25,41,7,1,85,27,41,0,83,7,17,0,82,8,27,0,25,41,8,1,85,27,41,0,1,41,0,0,83,8,41,0,82,9,27,0,25,41,9,1,85,27,41,0,1,41,0,0,83,9,41,0,82,10,27,0,25,41,10,1,85,27,41,0,1,41,0,0,83,10,41,0,1,48,13,0,134,41,0,0,228,211,3,0,27,48,0,0,82,41,27,0,82,48,36,0,42,48,48,24,83,41,48,0,82,48,27,0,82,41,36,0,42,41,41,16,107,48,1,41,82,41,27,0,82,48,36,0,42,48,48,8,107,41,2,48,82,48,27,0,82,41,36,0,107,48,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,41,27,0,1,48,108,68,78,48,48,0,83,41,48,0,82,48,27,0,1,41,109,68,78,41,41,0,107,48,1,41,82,41,27,0,1,48,110,68,78,48,48,0,107,41,2,48,82,48,27,0,1,41,111,68,78,41,41,0,107,48,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,48,27,0,82,46,37,0,82,47,36,0,135,41,11,0,48,46,47,0,82,41,27,0,82,47,36,0,3,41,41,47,85,27,41,0,82,47,37,0,135,41,7,0,47,0,0,0,82,47,36,0,134,41,0,0,228,211,3,0,27,47,0,0,82,41,27,0,1,47,0,0,83,41,47,0,82,47,27,0,1,41,0,0,107,47,1,41,82,41,27,0,1,47,0,0,107,41,2,47,82,47,27,0,1,41,0,0,107,47,3,41,82,41,27,0,25,41,41,4,85,27,41,0,82,41,27,0,1,47,113,68,78,47,47,0,83,41,47,0,82,47,27,0,1,41,114,68,78,41,41,0,107,47,1,41,82,41,27,0,1,47,115,68,78,47,47,0,107,41,2,47,82,47,27,0,1,41,116,68,78,41,41,0,107,47,3,41,82,41,27,0,25,41,41,4,85,27,41,0,1,47,0,0,134,41,0,0,228,211,3,0,27,47,0,0,82,41,27,0,82,47,28,0,82,46,29,0,82,46,46,0,3,47,47,46,46,41,41,47,188,118,1,0,1,47,118,68,1,46,236,67,1,48,131,4,1,45,138,68,135,41,1,0,47,46,48,45,116,31,28,0,82,11,31,0,137,38,0,0,139,11,0,0,140,0,54,0,0,0,0,0,2,46,0,0,148,253,1,0,2,47,0,0,160,253,1,0,2,48,0,0,172,253,1,0,2,49,0,0,98,127,0,0,2,50,0,0,88,253,1,0,136,51,0,0,0,45,51,0,136,51,0,0,1,52,240,0,3,51,51,52,137,51,0,0,130,51,0,0,136,52,0,0,49,51,51,52,48,119,1,0,1,52,240,0,135,51,0,0,52,0,0,0,1,51,216,0,3,21,45,51,1,51,200,0,3,26,45,51,1,51,176,0,3,43,45,51,1,51,152,0,3,44,45,51,1,51,184,0,3,27,45,51,1,51,160,0,3,28,45,51,1,51,140,0,3,29,45,51,1,51,128,0,3,30,45,51,25,31,45,112,25,32,45,100,25,33,45,88,25,18,45,76,25,19,45,64,25,20,45,48,25,22,45,36,25,23,45,24,25,24,45,12,0,25,45,0,2,51,0,0,140,253,1,0,82,51,51,0,32,51,51,1,121,51,82,1,134,51,0,0,144,223,3,0,1,51,244,37,82,51,51,0,85,21,51,0,1,52,248,37,82,52,52,0,109,21,4,52,1,51,252,37,82,51,51,0,109,21,8,51,134,51,0,0,128,204,0,0,21,0,0,0,2,51,0,0,176,253,1,0,82,37,51,0,0,0,37,0,46,51,0,48,36,120,1,0,0,14,0,0,0,38,37,0,25,52,38,8,134,51,0,0,124,122,3,0,52,0,0,0,106,38,14,4,0,14,38,0,53,51,14,48,4,120,1,0,2,51,0,0,188,253,1,0,82,41,51,0,0,5,41,0,2,51,0,0,184,253,1,0,46,51,5,51,116,120,1,0,0,16,5,0,0,42,41,0,25,52,42,8,134,51,0,0,12,175,3,0,52,0,0,0,106,42,16,4,0,16,42,0,2,51,0,0,184,253,1,0,53,51,16,51,76,120,1,0,2,51,0,0,92,253,1,0,82,39,51,0,0,15,39,0,46,51,15,50,204,120,1,0,0,2,15,0,0,40,39,0,25,17,40,8,82,52,17,0,134,51,0,0,136,135,4,0,52,0,0,0,121,51,5,0,82,52,17,0,134,51,0,0,140,27,4,0,52,0,0,0,106,40,2,4,0,2,40,0,53,51,2,50,148,120,1,0,2,51,0,0,144,253,1,0,82,1,51,0,32,51,1,1,121,51,87,0,134,51,0,0,120,78,4,0,43,0,0,0,116,26,43,0,134,51,0,0,120,78,4,0,44,0,0,0,106,52,44,4,109,26,4,52,59,51,32,0,145,51,51,0,113,26,8,51,59,52,32,0,145,52,52,0,113,26,12,52,116,21,26,0,106,51,26,4,109,21,4,51,106,52,26,8,109,21,8,52,106,51,26,12,109,21,12,51,134,35,0,0,104,15,2,0,21,48,0,0,2,51,0,0,136,253,1,0,82,3,51,0,121,35,28,0,134,51,0,0,44,80,4,0,27,46,0,0,134,51,0,0,44,80,4,0,28,47,0,0,134,51,0,0,120,78,4,0,21,0,0,0,88,4,21,0,145,4,4,0,134,51,0,0,120,78,4,0,43,0,0,0,112,52,43,4,145,52,52,0,134,51,0,0,116,61,2,0,3,27,28,4,52,0,0,0,134,51,0,0,204,117,4,0,28,0,0,0,134,51,0,0,204,117,4,0,27,0,0,0,119,0,27,0,134,51,0,0,44,80,4,0,29,46,0,0,134,51,0,0,44,80,4,0,30,47,0,0,134,51,0,0,120,78,4,0,21,0,0,0,88,6,21,0,145,6,6,0,134,51,0,0,120,78,4,0,43,0,0,0,112,52,43,4,145,52,52,0,134,51,0,0,100,64,2,0,3,29,30,6,52,0,0,0,134,51,0,0,204,117,4,0,30,0,0,0,134,51,0,0,204,117,4,0,29,0,0,0,2,51,0,0,144,253,1,0,82,7,51,0,119,0,2,0,0,7,1,0,32,51,7,2,121,51,84,0,134,51,0,0,120,78,4,0,43,0,0,0,116,31,43,0,134,51,0,0,120,78,4,0,44,0,0,0,106,52,44,4,109,31,4,52,59,51,32,0,145,51,51,0,113,31,8,51,59,52,32,0,145,52,52,0,113,31,12,52,116,21,31,0,106,51,31,4,109,21,4,51,106,52,31,8,109,21,8,52,106,51,31,12,109,21,12,51,134,36,0,0,104,15,2,0,21,48,0,0,2,51,0,0,136,253,1,0,82,8,51,0,121,36,28,0,134,51,0,0,44,80,4,0,32,46,0,0,134,51,0,0,44,80,4,0,33,47,0,0,134,51,0,0,120,78,4,0,21,0,0,0,88,9,21,0,145,9,9,0,134,51,0,0,120,78,4,0,43,0,0,0,112,52,43,4,145,52,52,0,134,51,0,0,116,61,2,0,8,32,33,9,52,0,0,0,134,51,0,0,204,117,4,0,33,0,0,0,134,51,0,0,204,117,4,0,32,0,0,0,119,0,28,0,134,51,0,0,44,80,4,0,18,46,0,0,134,51,0,0,44,80,4,0,19,47,0,0,134,51,0,0,120,78,4,0,21,0,0,0,88,10,21,0,145,10,10,0,134,51,0,0,120,78,4,0,43,0,0,0,112,52,43,4,145,52,52,0,134,51,0,0,100,64,2,0,8,18,19,10,52,0,0,0,134,51,0,0,204,117,4,0,19,0,0,0,134,51,0,0,204,117,4,0,18,0,0,0,119,0,1,0,2,51,0,0,144,253,1,0,82,51,51,0,32,51,51,3,121,51,86,0,134,51,0,0,120,78,4,0,43,0,0,0,116,20,43,0,134,51,0,0,120,78,4,0,44,0,0,0,106,52,44,4,109,20,4,52,59,51,32,0,145,51,51,0,113,20,8,51,59,52,32,0,145,52,52,0,113,20,12,52,116,21,20,0,106,51,20,4,109,21,4,51,106,52,20,8,109,21,8,52,106,51,20,12,109,21,12,51,134,34,0,0,104,15,2,0,21,48,0,0,2,51,0,0,136,253,1,0,82,11,51,0,121,34,28,0,134,51,0,0,44,80,4,0,22,46,0,0,134,51,0,0,44,80,4,0,23,47,0,0,134,51,0,0,120,78,4,0,21,0,0,0,88,12,21,0,145,12,12,0,134,51,0,0,120,78,4,0,43,0,0,0,112,52,43,4,145,52,52,0,134,51,0,0,116,61,2,0,11,22,23,12,52,0,0,0,134,51,0,0,204,117,4,0,23,0,0,0,134,51,0,0,204,117,4,0,22,0,0,0,119,0,30,0,134,51,0,0,44,80,4,0,24,46,0,0,134,51,0,0,44,80,4,0,25,47,0,0,134,51,0,0,120,78,4,0,21,0,0,0,88,13,21,0,145,13,13,0,134,51,0,0,120,78,4,0,43,0,0,0,112,52,43,4,145,52,52,0,134,51,0,0,100,64,2,0,11,24,25,13,52,0,0,0,134,51,0,0,204,117,4,0,25,0,0,0,134,51,0,0,204,117,4,0,24,0,0,0,119,0,3,0,134,51,0,0,132,225,2,0,137,45,0,0,139,0,0,0,140,1,41,0,0,0,0,0,2,32,0,0,255,0,0,0,2,33,0,0,0,248,0,0,2,34,0,0,240,0,0,0,2,35,0,0,192,7,0,0,1,29,0,0,136,36,0,0,0,30,36,0,136,36,0,0,25,36,36,63,38,36,36,192,137,36,0,0,0,31,36,0,136,36,0,0,25,36,36,48,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,112,125,1,0,1,37,48,0,135,36,0,0,37,0,0,0,25,28,31,8,0,27,31,0,25,26,31,24,25,25,31,20,25,20,31,16,25,21,31,12,25,22,31,32,25,24,31,30,25,23,31,28,106,36,0,4,121,36,70,2,106,36,0,8,121,36,68,2,106,38,0,4,106,39,0,8,5,37,38,39,41,37,37,2,135,36,10,0,37,0,0,0,85,25,36,0,1,36,11,0,106,37,0,16,49,36,36,37,232,125,1,0,1,37,4,0,1,39,53,82,134,36,0,0,48,143,3,0,37,39,27,0,119,0,47,2,106,36,0,16,32,36,36,8,121,36,3,0,1,29,9,0,119,0,10,0,106,36,0,16,32,36,36,9,121,36,3,0,1,29,9,0,119,0,5,0,106,36,0,16,32,36,36,10,121,36,2,0,1,29,9,0,32,36,29,9,121,36,6,0,1,39,4,0,1,37,117,82,134,36,0,0,48,143,3,0,39,37,28,0,1,36,0,0,85,20,36,0,1,36,0,0,85,21,36,0,106,37,0,4,106,39,0,8,5,36,37,39,82,39,20,0,56,36,36,39,160,134,1,0,106,36,0,16,1,39,1,0,1,37,10,0,138,36,39,37,160,126,1,0,24,127,1,0,168,127,1,0,160,128,1,0,44,129,1,0,44,130,1,0,88,131,1,0,240,131,1,0,124,132,1,0,116,133,1,0,119,0,253,1,82,39,25,0,82,37,20,0,41,37,37,2,82,38,0,0,82,40,20,0,90,38,38,40,95,39,37,38,82,38,25,0,82,37,20,0,41,37,37,2,3,38,38,37,82,37,0,0,82,39,20,0,90,37,37,39,107,38,1,37,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,82,38,0,0,82,39,20,0,90,38,38,39,107,37,2,38,82,38,25,0,82,37,20,0,41,37,37,2,3,38,38,37,1,37,255,255,107,38,3,37,119,0,223,1,82,37,25,0,82,38,20,0,41,38,38,2,82,39,0,0,82,40,21,0,90,39,39,40,95,37,38,39,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,82,38,0,0,82,37,21,0,90,38,38,37,107,39,1,38,82,38,25,0,82,39,20,0,41,39,39,2,3,38,38,39,82,39,0,0,82,37,21,0,90,39,39,37,107,38,2,39,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,82,38,0,0,82,37,21,0,25,37,37,1,90,38,38,37,107,39,3,38,82,38,21,0,25,38,38,2,85,21,38,0,119,0,187,1,82,38,0,0,82,37,20,0,41,37,37,1,92,38,38,37,84,24,38,0,81,39,24,0,19,39,39,33,42,39,39,11,76,39,39,0,145,37,39,0,59,39,8,0,145,39,39,0,65,38,37,39,145,38,38,0,75,38,38,0,19,38,38,32,0,18,38,0,82,38,25,0,82,39,20,0,41,39,39,2,95,38,39,18,81,37,24,0,1,40,224,7,19,37,37,40,42,37,37,5,76,37,37,0,145,38,37,0,59,37,4,0,145,37,37,0,65,39,38,37,145,39,39,0,75,39,39,0,19,39,39,32,0,19,39,0,82,39,25,0,82,37,20,0,41,37,37,2,3,39,39,37,107,39,1,19,81,38,24,0,38,38,38,31,76,38,38,0,145,37,38,0,59,38,8,0,145,38,38,0,65,39,37,38,145,39,39,0,75,39,39,0,19,39,39,32,0,2,39,0,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,107,39,2,2,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,1,38,255,255,107,39,3,38,119,0,125,1,82,39,25,0,82,38,20,0,41,38,38,2,82,37,0,0,82,40,21,0,90,37,37,40,95,39,38,37,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,82,38,0,0,82,39,21,0,25,39,39,1,90,38,38,39,107,37,1,38,82,38,25,0,82,37,20,0,41,37,37,2,3,38,38,37,82,37,0,0,82,39,21,0,25,39,39,2,90,37,37,39,107,38,2,37,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,1,38,255,255,107,37,3,38,82,38,21,0,25,38,38,3,85,21,38,0,119,0,90,1,82,38,0,0,82,39,20,0,41,39,39,1,92,38,38,39,84,22,38,0,81,37,22,0,19,37,37,33,42,37,37,11,76,37,37,0,145,39,37,0,59,37,8,0,145,37,37,0,65,38,39,37,145,38,38,0,75,38,38,0,19,38,38,32,0,15,38,0,82,38,25,0,82,37,20,0,41,37,37,2,95,38,37,15,81,39,22,0,19,39,39,35,42,39,39,6,76,39,39,0,145,38,39,0,59,39,8,0,145,39,39,0,65,37,38,39,145,37,37,0,75,37,37,0,19,37,37,32,0,16,37,0,82,37,25,0,82,39,20,0,41,39,39,2,3,37,37,39,107,37,1,16,81,38,22,0,38,38,38,62,42,38,38,1,76,38,38,0,145,39,38,0,59,38,8,0,145,38,38,0,65,37,39,38,145,37,37,0,75,37,37,0,19,37,37,32,0,17,37,0,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,107,37,2,17,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,81,38,22,0,38,38,38,1,5,38,38,32,107,37,3,38,119,0,26,1,82,38,0,0,82,39,20,0,41,39,39,1,92,38,38,39,84,23,38,0,81,37,23,0,2,40,0,0,0,240,0,0,19,37,37,40,42,37,37,12,76,37,37,0,145,39,37,0,59,37,17,0,145,37,37,0,65,38,39,37,145,38,38,0,75,38,38,0,19,38,38,32,0,3,38,0,82,38,25,0,82,37,20,0,41,37,37,2,95,38,37,3,81,39,23,0,1,40,0,15,19,39,39,40,42,39,39,8,76,39,39,0,145,38,39,0,59,39,17,0,145,39,39,0,65,37,38,39,145,37,37,0,75,37,37,0,19,37,37,32,0,4,37,0,82,37,25,0,82,39,20,0,41,39,39,2,3,37,37,39,107,37,1,4,81,38,23,0,19,38,38,34,42,38,38,4,76,38,38,0,145,39,38,0,59,38,17,0,145,38,38,0,65,37,39,38,145,37,37,0,75,37,37,0,19,37,37,32,0,5,37,0,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,107,37,2,5,81,39,23,0,38,39,39,15,76,39,39,0,145,38,39,0,59,39,17,0,145,39,39,0,65,37,38,39,145,37,37,0,75,37,37,0,19,37,37,32,0,6,37,0,82,37,25,0,82,39,20,0,41,39,39,2,3,37,37,39,107,37,3,6,119,0,207,0,82,37,25,0,82,39,20,0,41,39,39,2,82,38,0,0,82,40,21,0,90,38,38,40,95,37,39,38,82,38,25,0,82,39,20,0,41,39,39,2,3,38,38,39,82,39,0,0,82,37,21,0,25,37,37,1,90,39,39,37,107,38,1,39,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,82,38,0,0,82,37,21,0,25,37,37,2,90,38,38,37,107,39,2,38,82,38,25,0,82,39,20,0,41,39,39,2,3,38,38,39,82,39,0,0,82,37,21,0,25,37,37,3,90,39,39,37,107,38,3,39,82,39,21,0,25,39,39,4,85,21,39,0,119,0,169,0,82,39,0,0,82,40,21,0,41,40,40,2,100,37,39,40,145,37,37,0,59,39,255,0,145,39,39,0,65,38,37,39,145,38,38,0,75,38,38,0,19,38,38,32,0,7,38,0,82,38,25,0,82,39,20,0,41,39,39,2,95,38,39,7,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,1,38,0,0,107,39,1,38,82,38,25,0,82,39,20,0,41,39,39,2,3,38,38,39,1,39,0,0,107,38,2,39,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,1,38,255,255,107,39,3,38,119,0,134,0,82,37,0,0,82,40,21,0,41,40,40,2,100,39,37,40,145,39,39,0,59,37,255,0,145,37,37,0,65,38,39,37,145,38,38,0,75,38,38,0,19,38,38,32,0,8,38,0,82,38,25,0,82,37,20,0,41,37,37,2,95,38,37,8,82,39,0,0,82,40,21,0,25,40,40,1,41,40,40,2,100,38,39,40,145,38,38,0,59,39,255,0,145,39,39,0,65,37,38,39,145,37,37,0,75,37,37,0,19,37,37,32,0,9,37,0,82,37,25,0,82,39,20,0,41,39,39,2,3,37,37,39,107,37,1,9,82,38,0,0,82,40,21,0,25,40,40,2,41,40,40,2,100,39,38,40,145,39,39,0,59,38,255,0,145,38,38,0,65,37,39,38,145,37,37,0,75,37,37,0,19,37,37,32,0,10,37,0,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,107,37,2,10,82,37,25,0,82,38,20,0,41,38,38,2,3,37,37,38,1,38,255,255,107,37,3,38,82,38,21,0,25,38,38,3,85,21,38,0,119,0,72,0,82,39,0,0,82,40,21,0,41,40,40,2,100,37,39,40,145,37,37,0,59,39,255,0,145,39,39,0,65,38,37,39,145,38,38,0,75,38,38,0,19,38,38,32,0,11,38,0,82,38,25,0,82,39,20,0,41,39,39,2,95,38,39,11,82,37,0,0,82,40,21,0,41,40,40,2,100,38,37,40,145,38,38,0,59,37,255,0,145,37,37,0,65,39,38,37,145,39,39,0,75,39,39,0,19,39,39,32,0,12,39,0,82,39,25,0,82,37,20,0,41,37,37,2,3,39,39,37,107,39,1,12,82,38,0,0,82,40,21,0,41,40,40,2,100,37,38,40,145,37,37,0,59,38,255,0,145,38,38,0,65,39,37,38,145,39,39,0,75,39,39,0,19,39,39,32,0,13,39,0,82,39,25,0,82,38,20,0,41,38,38,2,3,39,39,38,107,39,2,13,82,37,0,0,82,40,21,0,41,40,40,2,100,38,37,40,145,38,38,0,59,37,255,0,145,37,37,0,65,39,38,37,145,39,39,0,75,39,39,0,19,39,39,32,0,14,39,0,82,39,25,0,82,37,20,0,41,37,37,2,3,39,39,37,107,39,3,14,82,39,21,0,25,39,39,4,85,21,39,0,119,0,1,0,82,36,20,0,25,36,36,1,85,20,36,0,119,0,236,253,116,26,25,0,82,1,26,0,137,30,0,0,139,1,0,0,1,36,0,0,85,26,36,0,82,1,26,0,137,30,0,0,139,1,0,0,140,5,42,0,0,0,0,0,1,30,0,0,136,37,0,0,0,31,37,0,136,37,0,0,25,37,37,63,38,37,37,192,137,37,0,0,0,32,37,0,136,37,0,0,25,37,37,48,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,20,135,1,0,1,38,48,0,135,37,0,0,38,0,0,0,25,25,32,40,25,15,32,36,25,19,32,32,25,24,32,28,25,28,32,24,25,29,32,20,25,18,32,16,25,20,32,12,25,17,32,8,25,26,32,4,0,16,32,0,85,15,0,0,85,19,1,0,85,24,2,0,85,28,3,0,85,29,4,0,82,37,24,0,82,38,19,0,45,37,37,38,116,135,1,0,116,25,15,0,82,6,25,0,137,31,0,0,139,6,0,0,1,37,1,0,82,38,24,0,17,37,37,38,82,38,24,0,36,38,38,4,19,37,37,38,120,37,7,0,1,38,32,64,1,39,1,63,1,40,101,6,1,41,63,64,135,37,1,0,38,39,40,41,82,37,24,0,82,41,28,0,5,21,37,41,82,40,29,0,5,37,21,40,41,37,37,1,134,41,0,0,184,110,4,0,37,0,0,0,85,17,41,0,82,41,17,0,120,41,17,0,82,37,15,0,135,41,7,0,37,0,0,0,1,37,77,63,134,41,0,0,40,112,4,0,37,0,0,0,33,27,41,0,1,37,0,0,1,40,0,0,125,41,27,37,40,0,0,0,85,25,41,0,82,6,25,0,137,31,0,0,139,6,0,0,1,41,0,0,85,20,41,0,82,5,15,0,82,41,29,0,82,40,20,0,56,41,41,40,4,142,1,0,82,41,20,0,82,40,28,0,5,22,41,40,82,41,19,0,5,40,22,41,41,40,40,1,3,40,5,40,85,26,40,0,82,40,20,0,82,41,28,0,5,23,40,41,82,41,17,0,82,37,24,0,5,40,23,37,41,40,40,1,3,41,41,40,85,16,41,0,82,41,19,0,41,41,41,3,82,40,24,0,3,41,41,40,1,40,10,0,1,37,26,0,138,41,40,37,4,137,1,0,96,137,1,0,192,137,1,0,252,136,1,0,252,136,1,0,252,136,1,0,252,136,1,0,44,138,1,0,252,136,1,0,124,138,1,0,220,138,1,0,252,136,1,0,252,136,1,0,252,136,1,0,252,136,1,0,76,139,1,0,180,139,1,0,252,136,1,0,40,140,1,0,252,136,1,0,252,136,1,0,252,136,1,0,252,136,1,0,164,140,1,0,12,141,1,0,132,141,1,0,1,30,46,0,119,0,65,1,82,40,28,0,26,40,40,1,85,18,40,0,82,40,18,0,34,40,40,0,120,40,55,1,82,40,16,0,82,37,26,0,80,37,37,0,84,40,37,0,82,37,16,0,1,40,255,255,108,37,2,40,82,40,18,0,26,40,40,1,85,18,40,0,82,40,26,0,25,40,40,2,85,26,40,0,82,40,16,0,25,40,40,4,85,16,40,0,119,0,237,255,82,40,28,0,26,40,40,1,85,18,40,0,82,40,18,0,34,40,40,0,120,40,32,1,82,40,26,0,80,7,40,0,82,40,16,0,108,40,4,7,82,40,16,0,108,40,2,7,82,40,16,0,84,40,7,0,82,40,18,0,26,40,40,1,85,18,40,0,82,40,26,0,25,40,40,2,85,26,40,0,82,40,16,0,25,40,40,6,85,16,40,0,119,0,236,255,82,40,28,0,26,40,40,1,85,18,40,0,82,40,18,0,34,40,40,0,120,40,8,1,82,40,26,0,80,8,40,0,82,40,16,0,108,40,4,8,82,40,16,0,108,40,2,8,82,40,16,0,84,40,8,0,82,40,16,0,1,37,255,255,108,40,6,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,26,0,25,37,37,2,85,26,37,0,82,37,16,0,25,37,37,8,85,16,37,0,119,0,233,255,82,37,28,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,237,0,82,37,16,0,82,40,26,0,80,40,40,0,84,37,40,0,82,40,18,0,26,40,40,1,85,18,40,0,82,40,26,0,25,40,40,4,85,26,40,0,82,40,16,0,25,40,40,2,85,16,40,0,119,0,240,255,82,40,28,0,26,40,40,1,85,18,40,0,82,40,18,0,34,40,40,0,120,40,217,0,82,40,26,0,80,9,40,0,82,40,16,0,108,40,4,9,82,40,16,0,108,40,2,9,82,40,16,0,84,40,9,0,82,40,18,0,26,40,40,1,85,18,40,0,82,40,26,0,25,40,40,4,85,26,40,0,82,40,16,0,25,40,40,6,85,16,40,0,119,0,236,255,82,40,28,0,26,40,40,1,85,18,40,0,82,40,18,0,34,40,40,0,120,40,193,0,82,40,26,0,80,10,40,0,82,40,16,0,108,40,4,10,82,40,16,0,108,40,2,10,82,40,16,0,84,40,10,0,82,40,16,0,82,37,26,0,104,37,37,2,108,40,6,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,26,0,25,37,37,4,85,26,37,0,82,37,16,0,25,37,37,8,85,16,37,0,119,0,232,255,82,37,28,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,165,0,82,33,26,0,82,37,26,0,81,37,37,0,105,40,33,2,105,39,33,4,134,11,0,0,16,72,4,0,37,40,39,0,82,39,16,0,84,39,11,0,82,39,18,0,26,39,39,1,85,18,39,0,82,39,26,0,25,39,39,6,85,26,39,0,82,39,16,0,25,39,39,2,85,16,39,0,119,0,234,255,82,39,28,0,26,39,39,1,85,18,39,0,82,39,18,0,34,39,39,0,120,39,139,0,82,34,26,0,82,39,26,0,81,39,39,0,105,40,34,2,105,37,34,4,134,12,0,0,16,72,4,0,39,40,37,0,82,37,16,0,84,37,12,0,82,37,16,0,1,40,255,255,108,37,2,40,82,40,18,0,26,40,40,1,85,18,40,0,82,40,26,0,25,40,40,6,85,26,40,0,82,40,16,0,25,40,40,4,85,16,40,0,119,0,231,255,82,37,28,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,110,0,82,37,16,0,82,40,26,0,80,40,40,0,84,37,40,0,82,40,16,0,82,37,26,0,104,37,37,2,108,40,2,37,82,37,16,0,82,40,26,0,104,40,40,4,108,37,4,40,82,40,16,0,1,37,255,255,108,40,6,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,26,0,25,37,37,6,85,26,37,0,82,37,16,0,25,37,37,8,85,16,37,0,119,0,229,255,82,40,28,0,26,40,40,1,85,18,40,0,82,40,18,0,34,40,40,0,120,40,79,0,82,35,26,0,82,40,26,0,81,40,40,0,105,37,35,2,105,39,35,4,134,13,0,0,16,72,4,0,40,37,39,0,82,39,16,0,84,39,13,0,82,39,18,0,26,39,39,1,85,18,39,0,82,39,26,0,25,39,39,8,85,26,39,0,82,39,16,0,25,39,39,2,85,16,39,0,119,0,234,255,82,39,28,0,26,39,39,1,85,18,39,0,82,39,18,0,34,39,39,0,120,39,53,0,82,36,26,0,82,39,26,0,81,39,39,0,105,37,36,2,105,40,36,4,134,14,0,0,16,72,4,0,39,37,40,0,82,40,16,0,84,40,14,0,82,40,16,0,82,37,26,0,104,37,37,6,108,40,2,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,26,0,25,37,37,8,85,26,37,0,82,37,16,0,25,37,37,4,85,16,37,0,119,0,230,255,82,37,28,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,23,0,82,37,16,0,82,40,26,0,80,40,40,0,84,37,40,0,82,40,16,0,82,37,26,0,104,37,37,2,108,40,2,37,82,37,16,0,82,40,26,0,104,40,40,4,108,37,4,40,82,40,18,0,26,40,40,1,85,18,40,0,82,40,26,0,25,40,40,8,85,26,40,0,82,40,16,0,25,40,40,6,85,16,40,0,119,0,232,255,82,41,20,0,25,41,41,1,85,20,41,0,119,0,136,254,32,41,30,46,121,41,7,0,1,40,86,64,1,37,1,63,1,39,130,6,1,38,63,64,135,41,1,0,40,37,39,38,135,41,7,0,5,0,0,0,116,25,17,0,82,6,25,0,137,31,0,0,139,6,0,0,140,5,41,0,0,0,0,0,1,29,0,0,136,36,0,0,0,30,36,0,136,36,0,0,25,36,36,63,38,36,36,192,137,36,0,0,0,31,36,0,136,36,0,0,25,36,36,48,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,140,142,1,0,1,37,48,0,135,36,0,0,37,0,0,0,25,24,31,40,25,15,31,36,25,19,31,32,25,23,31,28,25,27,31,24,25,28,31,20,25,18,31,16,25,20,31,12,25,17,31,8,25,25,31,4,0,16,31,0,85,15,0,0,85,19,1,0,85,23,2,0,85,27,3,0,85,28,4,0,82,36,23,0,82,37,19,0,45,36,36,37,236,142,1,0,116,24,15,0,82,6,24,0,137,30,0,0,139,6,0,0,1,36,1,0,82,37,23,0,17,36,36,37,82,37,23,0,36,37,37,4,19,36,36,37,120,36,7,0,1,37,32,64,1,38,1,63,1,39,52,6,1,40,88,64,135,36,1,0,37,38,39,40,82,40,23,0,82,39,27,0,82,38,28,0,1,37,0,0,134,36,0,0,212,194,3,0,40,39,38,37,85,17,36,0,82,36,17,0,120,36,17,0,82,37,15,0,135,36,7,0,37,0,0,0,1,37,77,63,134,36,0,0,40,112,4,0,37,0,0,0,33,26,36,0,1,37,0,0,1,38,0,0,125,36,26,37,38,0,0,0,85,24,36,0,82,6,24,0,137,30,0,0,139,6,0,0,1,36,0,0,85,20,36,0,82,5,15,0,82,36,28,0,82,38,20,0,56,36,36,38,108,149,1,0,82,36,20,0,82,38,27,0,5,21,36,38,82,36,19,0,5,38,21,36,3,38,5,38,85,25,38,0,82,38,20,0,82,36,27,0,5,22,38,36,82,36,17,0,82,37,23,0,5,38,22,37,3,36,36,38,85,16,36,0,82,36,19,0,41,36,36,3,82,38,23,0,3,36,36,38,1,38,10,0,1,37,26,0,138,36,38,37,108,144,1,0], eb + 92160);
  HEAPU8.set([200,144,1,0,40,145,1,0,100,144,1,0,100,144,1,0,100,144,1,0,100,144,1,0,148,145,1,0,100,144,1,0,228,145,1,0,68,146,1,0,100,144,1,0,100,144,1,0,100,144,1,0,100,144,1,0,180,146,1,0,28,147,1,0,100,144,1,0,144,147,1,0,100,144,1,0,100,144,1,0,100,144,1,0,100,144,1,0,12,148,1,0,116,148,1,0,236,148,1,0,1,29,46,0,119,0,65,1,82,38,27,0,26,38,38,1,85,18,38,0,82,38,18,0,34,38,38,0,120,38,55,1,82,38,16,0,82,37,25,0,78,37,37,0,83,38,37,0,82,37,16,0,1,38,255,255,107,37,1,38,82,38,18,0,26,38,38,1,85,18,38,0,82,38,25,0,25,38,38,1,85,25,38,0,82,38,16,0,25,38,38,2,85,16,38,0,119,0,237,255,82,38,27,0,26,38,38,1,85,18,38,0,82,38,18,0,34,38,38,0,120,38,32,1,82,38,25,0,78,7,38,0,82,38,16,0,107,38,2,7,82,38,16,0,107,38,1,7,82,38,16,0,83,38,7,0,82,38,18,0,26,38,38,1,85,18,38,0,82,38,25,0,25,38,38,1,85,25,38,0,82,38,16,0,25,38,38,3,85,16,38,0,119,0,236,255,82,38,27,0,26,38,38,1,85,18,38,0,82,38,18,0,34,38,38,0,120,38,8,1,82,38,25,0,78,8,38,0,82,38,16,0,107,38,2,8,82,38,16,0,107,38,1,8,82,38,16,0,83,38,8,0,82,38,16,0,1,37,255,255,107,38,3,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,25,0,25,37,37,1,85,25,37,0,82,37,16,0,25,37,37,4,85,16,37,0,119,0,233,255,82,37,27,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,237,0,82,37,16,0,82,38,25,0,78,38,38,0,83,37,38,0,82,38,18,0,26,38,38,1,85,18,38,0,82,38,25,0,25,38,38,2,85,25,38,0,82,38,16,0,25,38,38,1,85,16,38,0,119,0,240,255,82,38,27,0,26,38,38,1,85,18,38,0,82,38,18,0,34,38,38,0,120,38,217,0,82,38,25,0,78,9,38,0,82,38,16,0,107,38,2,9,82,38,16,0,107,38,1,9,82,38,16,0,83,38,9,0,82,38,18,0,26,38,38,1,85,18,38,0,82,38,25,0,25,38,38,2,85,25,38,0,82,38,16,0,25,38,38,3,85,16,38,0,119,0,236,255,82,38,27,0,26,38,38,1,85,18,38,0,82,38,18,0,34,38,38,0,120,38,193,0,82,38,25,0,78,10,38,0,82,38,16,0,107,38,2,10,82,38,16,0,107,38,1,10,82,38,16,0,83,38,10,0,82,38,16,0,82,37,25,0,102,37,37,1,107,38,3,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,25,0,25,37,37,2,85,25,37,0,82,37,16,0,25,37,37,4,85,16,37,0,119,0,232,255,82,37,27,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,165,0,82,32,25,0,82,37,25,0,79,37,37,0,103,38,32,1,103,39,32,2,134,11,0,0,204,75,4,0,37,38,39,0,82,39,16,0,83,39,11,0,82,39,18,0,26,39,39,1,85,18,39,0,82,39,25,0,25,39,39,3,85,25,39,0,82,39,16,0,25,39,39,1,85,16,39,0,119,0,234,255,82,39,27,0,26,39,39,1,85,18,39,0,82,39,18,0,34,39,39,0,120,39,139,0,82,33,25,0,82,39,25,0,79,39,39,0,103,38,33,1,103,37,33,2,134,12,0,0,204,75,4,0,39,38,37,0,82,37,16,0,83,37,12,0,82,37,16,0,1,38,255,255,107,37,1,38,82,38,18,0,26,38,38,1,85,18,38,0,82,38,25,0,25,38,38,3,85,25,38,0,82,38,16,0,25,38,38,2,85,16,38,0,119,0,231,255,82,37,27,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,110,0,82,37,16,0,82,38,25,0,78,38,38,0,83,37,38,0,82,38,16,0,82,37,25,0,102,37,37,1,107,38,1,37,82,37,16,0,82,38,25,0,102,38,38,2,107,37,2,38,82,38,16,0,1,37,255,255,107,38,3,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,25,0,25,37,37,3,85,25,37,0,82,37,16,0,25,37,37,4,85,16,37,0,119,0,229,255,82,38,27,0,26,38,38,1,85,18,38,0,82,38,18,0,34,38,38,0,120,38,79,0,82,34,25,0,82,38,25,0,79,38,38,0,103,37,34,1,103,39,34,2,134,13,0,0,204,75,4,0,38,37,39,0,82,39,16,0,83,39,13,0,82,39,18,0,26,39,39,1,85,18,39,0,82,39,25,0,25,39,39,4,85,25,39,0,82,39,16,0,25,39,39,1,85,16,39,0,119,0,234,255,82,39,27,0,26,39,39,1,85,18,39,0,82,39,18,0,34,39,39,0,120,39,53,0,82,35,25,0,82,39,25,0,79,39,39,0,103,37,35,1,103,38,35,2,134,14,0,0,204,75,4,0,39,37,38,0,82,38,16,0,83,38,14,0,82,38,16,0,82,37,25,0,102,37,37,3,107,38,1,37,82,37,18,0,26,37,37,1,85,18,37,0,82,37,25,0,25,37,37,4,85,25,37,0,82,37,16,0,25,37,37,2,85,16,37,0,119,0,230,255,82,37,27,0,26,37,37,1,85,18,37,0,82,37,18,0,34,37,37,0,120,37,23,0,82,37,16,0,82,38,25,0,78,38,38,0,83,37,38,0,82,38,16,0,82,37,25,0,102,37,37,1,107,38,1,37,82,37,16,0,82,38,25,0,102,38,38,2,107,37,2,38,82,38,18,0,26,38,38,1,85,18,38,0,82,38,25,0,25,38,38,4,85,25,38,0,82,38,16,0,25,38,38,3,85,16,38,0,119,0,232,255,82,36,20,0,25,36,36,1,85,20,36,0,119,0,138,254,32,36,29,46,121,36,7,0,1,38,86,64,1,37,1,63,1,39,81,6,1,40,88,64,135,36,1,0,38,37,39,40,135,36,7,0,5,0,0,0,116,24,17,0,82,6,24,0,137,30,0,0,139,6,0,0,140,1,34,0,0,0,0,0,2,27,0,0,30,128,0,0,2,28,0,0,41,128,0,0,2,29,0,0,33,128,0,0,1,25,0,0,136,30,0,0,0,26,30,0,136,30,0,0,25,30,30,48,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,248,149,1,0,1,31,48,0,135,30,0,0,31,0,0,0,25,16,26,32,25,15,26,24,25,1,26,16,25,3,26,8,0,2,26,0,2,30,0,0,124,0,2,0,106,31,0,4,85,30,31,0,82,31,0,0,32,10,31,1,1,31,2,0,2,30,0,0,124,0,2,0,82,30,30,0,49,31,31,30,28,154,1,0,121,10,28,0,25,19,0,24,2,31,0,0,132,0,2,0,82,30,19,0,85,31,30,0,2,30,0,0,136,0,2,0,106,31,19,4,85,30,31,0,25,31,0,24,25,5,31,8,2,31,0,0,176,0,2,0,82,30,5,0,85,31,30,0,2,30,0,0,180,0,2,0,106,31,5,4,85,30,31,0,2,31,0,0,120,0,2,0,1,30,4,0,85,31,30,0,134,30,0,0,184,119,4,0,137,26,0,0,139,0,0,0,82,30,0,0,33,30,30,2,121,30,26,0,82,30,0,0,121,30,3,0,137,26,0,0,139,0,0,0,2,30,0,0,192,0,2,0,59,31,0,0,145,31,31,0,89,30,31,0,59,31,0,0,145,31,31,0,89,2,31,0,59,30,0,0,145,30,30,0,113,2,4,30,2,30,0,0,124,0,2,0,1,31,0,0,85,30,31,0,2,31,0,0,120,0,2,0,1,30,0,0,85,31,30,0,137,26,0,0,139,0,0,0,2,30,0,0,168,0,2,0,82,30,30,0,85,15,30,0,2,31,0,0,172,0,2,0,82,31,31,0,109,15,4,31,2,31,0,0,184,0,2,0,82,31,31,0,85,16,31,0,2,30,0,0,188,0,2,0,82,30,30,0,109,16,4,30,2,30,0,0,192,0,2,0,134,31,0,0,204,17,4,0,15,16,0,0,145,31,31,0,89,30,31,0,2,31,0,0,132,0,2,0,2,30,0,0,168,0,2,0,82,30,30,0,85,31,30,0,2,30,0,0,136,0,2,0,2,31,0,0,172,0,2,0,82,31,31,0,85,30,31,0,2,31,0,0,176,0,2,0,2,30,0,0,184,0,2,0,82,30,30,0,85,31,30,0,2,30,0,0,180,0,2,0,2,31,0,0,188,0,2,0,82,31,31,0,85,30,31,0,25,20,0,24,2,31,0,0,168,0,2,0,82,30,20,0,85,31,30,0,2,30,0,0,172,0,2,0,106,31,20,4,85,30,31,0,25,31,0,24,25,6,31,8,2,31,0,0,184,0,2,0,82,30,6,0,85,31,30,0,2,30,0,0,188,0,2,0,106,31,6,4,85,30,31,0,2,31,0,0,132,0,2,0,82,31,31,0,85,15,31,0,2,30,0,0,136,0,2,0,82,30,30,0,109,15,4,30,2,30,0,0,168,0,2,0,82,30,30,0,85,16,30,0,2,31,0,0,172,0,2,0,82,31,31,0,109,16,4,31,134,31,0,0,204,17,4,0,15,16,0,0,145,31,31,0,62,30,0,0,133,240,30,64,225,122,116,63,145,30,30,0,74,31,31,30,121,31,3,0,1,25,41,0,119,0,35,0,2,31,0,0,176,0,2,0,82,31,31,0,85,15,31,0,2,30,0,0,180,0,2,0,82,30,30,0,109,15,4,30,2,30,0,0,184,0,2,0,82,30,30,0,85,16,30,0,2,31,0,0,188,0,2,0,82,31,31,0,109,16,4,31,134,31,0,0,204,17,4,0,15,16,0,0,145,31,31,0,62,30,0,0,133,240,30,64,225,122,116,63,145,30,30,0,74,31,31,30,121,31,3,0,1,25,41,0,119,0,7,0,2,31,0,0,120,0,2,0,1,30,4,0,85,31,30,0,134,30,0,0,184,119,4,0,32,30,25,41,121,30,41,0,2,30,0,0,168,0,2,0,82,30,30,0,85,15,30,0,2,31,0,0,172,0,2,0,82,31,31,0,109,15,4,31,2,31,0,0,184,0,2,0,82,31,31,0,85,16,31,0,2,30,0,0,188,0,2,0,82,30,30,0,109,16,4,30,134,8,0,0,204,17,4,0,15,16,0,0,145,8,8,0,2,32,0,0,192,0,2,0,88,31,32,0,145,31,31,0,64,30,8,31,145,30,30,0,59,31,0,0,145,31,31,0,71,30,30,31,121,30,6,0,2,30,0,0,120,0,2,0,1,31,0,1,85,30,31,0,119,0,6,0,2,31,0,0,120,0,2,0,1,30,0,2,85,31,30,0,119,0,1,0,2,30,0,0,168,0,2,0,82,30,30,0,85,15,30,0,2,31,0,0,172,0,2,0,82,31,31,0,109,15,4,31,2,31,0,0,184,0,2,0,82,31,31,0,85,16,31,0,2,30,0,0,188,0,2,0,82,30,30,0,109,16,4,30,134,30,0,0,168,21,4,0,15,16,0,0,145,30,30,0,137,26,0,0,139,0,0,0,121,10,120,0,2,30,0,0,128,0,2,0,2,31,0,0,128,0,2,0,82,31,31,0,25,31,31,1,85,30,31,0,2,31,0,0,120,0,2,0,82,31,31,0,32,31,31,0,1,30,2,0,2,32,0,0,128,0,2,0,82,32,32,0,17,30,30,32,19,31,31,30,121,31,45,0,134,7,0,0,184,119,4,0,2,31,0,0,24,253,1,0,86,31,31,0,64,31,7,31,59,30,44,1,71,31,31,30,121,31,34,0,25,17,0,24,2,31,0,0,132,0,2,0,82,31,31,0,85,15,31,0,2,30,0,0,136,0,2,0,82,30,30,0,109,15,4,30,116,16,17,0,106,31,17,4,109,16,4,31,134,31,0,0,204,17,4,0,15,16,0,0,145,31,31,0,62,30,0,0,201,124,126,223,81,184,158,63,145,30,30,0,71,31,31,30,121,31,10,0,2,31,0,0,120,0,2,0,1,30,2,0,85,31,30,0,2,30,0,0,128,0,2,0,1,31,0,0,85,30,31,0,119,0,6,0,1,25,7,0,119,0,4,0,1,25,7,0,119,0,2,0,1,25,7,0,32,31,25,7,121,31,9,0,2,31,0,0,128,0,2,0,1,30,1,0,85,31,30,0,2,30,0,0,120,0,2,0,1,31,1,0,85,30,31,0,25,18,0,24,2,31,0,0,132,0,2,0,82,30,18,0,85,31,30,0,2,30,0,0,136,0,2,0,106,31,18,4,85,30,31,0,25,21,0,24,2,31,0,0,140,0,2,0,82,30,21,0,85,31,30,0,2,30,0,0,144,0,2,0,106,31,21,4,85,30,31,0,2,31,0,0,148,0,2,0,2,30,0,0,132,0,2,0,82,30,30,0,85,31,30,0,2,30,0,0,152,0,2,0,2,31,0,0,136,0,2,0,82,31,31,0,85,30,31,0,2,31,0,0,24,253,1,0,134,30,0,0,184,119,4,0,87,31,30,0,1,30,40,38,106,31,0,8,85,30,31,0,59,31,0,0,145,31,31,0,89,1,31,0,59,30,0,0,145,30,30,0,113,1,4,30,137,26,0,0,139,0,0,0,82,30,0,0,121,30,99,0,82,30,0,0,33,30,30,2,121,30,3,0,137,26,0,0,139,0,0,0,2,30,0,0,120,0,2,0,82,30,30,0,32,30,30,8,121,30,6,0,2,30,0,0,24,253,1,0,134,31,0,0,184,119,4,0,87,30,31,0,2,31,0,0,225,4,2,0,78,31,31,0,38,31,31,1,120,31,10,0,2,31,0,0,32,253,1,0,134,30,0,0,184,119,4,0,87,31,30,0,2,30,0,0,225,4,2,0,1,31,1,0,83,30,31,0,25,23,0,24,2,31,0,0,168,0,2,0,82,30,23,0,85,31,30,0,2,30,0,0,172,0,2,0,106,31,23,4,85,30,31,0,2,31,0,0,120,0,2,0,82,31,31,0,32,31,31,4,121,31,54,0,2,31,0,0,226,4,2,0,78,31,31,0,38,31,31,1,121,31,10,0,25,24,0,24,2,31,0,0,132,0,2,0,82,30,24,0,85,31,30,0,2,30,0,0,136,0,2,0,106,31,24,4,85,30,31,0,2,31,0,0,226,4,2,0,1,30,0,0,83,31,30,0,2,30,0,0,132,0,2,0,82,30,30,0,85,15,30,0,2,31,0,0,136,0,2,0,82,31,31,0,109,15,4,31,2,31,0,0,168,0,2,0,82,31,31,0,85,16,31,0,2,30,0,0,172,0,2,0,82,30,30,0,109,16,4,30,134,30,0,0,204,17,4,0,15,16,0,0,145,30,30,0,62,31,0,0,199,74,54,225,81,184,142,63,145,31,31,0,74,30,30,31,121,30,10,0,2,30,0,0,24,253,1,0,134,31,0,0,184,119,4,0,87,30,31,0,2,31,0,0,120,0,2,0,1,30,8,0,85,31,30,0,137,26,0,0,139,0,0,0,2,30,0,0,120,0,2,0,82,30,30,0,32,30,30,8,121,30,10,0,25,22,0,24,2,30,0,0,148,0,2,0,82,31,22,0,85,30,31,0,2,31,0,0,152,0,2,0,106,30,22,4,85,31,30,0,2,30,0,0,132,0,2,0,82,30,30,0,85,15,30,0,2,31,0,0,136,0,2,0,82,31,31,0,109,15,4,31,2,31,0,0,148,0,2,0,82,31,31,0,85,16,31,0,2,30,0,0,152,0,2,0,82,30,30,0,109,16,4,30,2,30,0,0,156,0,2,0,134,31,0,0,204,17,4,0,15,16,0,0,145,31,31,0,89,30,31,0,2,31,0,0,156,0,2,0,88,4,31,0,145,4,4,0,134,9,0,0,184,119,4,0,2,31,0,0,160,0,2,0,2,33,0,0,32,253,1,0,86,33,33,0,64,32,9,33,145,32,32,0,66,30,4,32,145,30,30,0,89,31,30,0,2,30,0,0,225,4,2,0,1,31,0,0,83,30,31,0,2,30,0,0,160,0,2,0,88,31,30,0,145,31,31,0,62,30,0,0,29,93,35,224,77,98,64,63,145,30,30,0,73,31,31,30,121,31,124,0,1,31,40,38,82,31,31,0,106,30,0,8,45,31,31,30,124,160,1,0,2,31,0,0,132,0,2,0,82,31,31,0,85,15,31,0,2,30,0,0,136,0,2,0,82,30,30,0,109,15,4,30,2,30,0,0,148,0,2,0,82,30,30,0,85,16,30,0,2,31,0,0,152,0,2,0,82,31,31,0,109,16,4,31,2,31,0,0,164,0,2,0,59,32,104,1,145,32,32,0,134,33,0,0,168,21,4,0,15,16,0,0,145,33,33,0,64,30,32,33,145,30,30,0,89,31,30,0,2,31,0,0,164,0,2,0,88,30,31,0,145,30,30,0,59,31,30,0,145,31,31,0,71,11,30,31,2,30,0,0,164,0,2,0,88,31,30,0,145,31,31,0,59,30,74,1,145,30,30,0,73,31,31,30,20,31,11,31,121,31,6,0,2,31,0,0,120,0,2,0,1,30,16,0,85,31,30,0,119,0,72,0,2,31,0,0,164,0,2,0,88,30,31,0,145,30,30,0,59,31,30,0,145,31,31,0,73,12,30,31,2,30,0,0,164,0,2,0,88,31,30,0,145,31,31,0,59,30,120,0,145,30,30,0,71,31,31,30,19,31,12,31,121,31,6,0,2,31,0,0,120,0,2,0,1,30,64,0,85,31,30,0,119,0,51,0,2,31,0,0,164,0,2,0,88,30,31,0,145,30,30,0,59,31,120,0,145,31,31,0,73,13,30,31,2,30,0,0,164,0,2,0,88,31,30,0,145,31,31,0,59,30,210,0,145,30,30,0,71,31,31,30,19,31,13,31,121,31,6,0,2,31,0,0,120,0,2,0,1,30,32,0,85,31,30,0,119,0,30,0,2,31,0,0,164,0,2,0,88,30,31,0,145,30,30,0,59,31,210,0,145,31,31,0,73,14,30,31,2,30,0,0,164,0,2,0,88,31,30,0,145,31,31,0,59,30,44,1,145,30,30,0,71,31,31,30,19,31,14,31,121,31,6,0,2,31,0,0,120,0,2,0,1,30,128,0,85,31,30,0,119,0,9,0,2,30,0,0,120,0,2,0,1,31,0,0,85,30,31,0,119,0,4,0,1,25,23,0,119,0,2,0,1,25,23,0,32,31,25,23,121,31,20,0,2,31,0,0,156,0,2,0,59,30,0,0,145,30,30,0,89,31,30,0,2,30,0,0,160,0,2,0,59,31,0,0,145,31,31,0,89,30,31,0,2,31,0,0,164,0,2,0,59,30,0,0,145,30,30,0,89,31,30,0,2,30,0,0,120,0,2,0,1,31,0,0,85,30,31,0,59,31,0,0,145,31,31,0,89,3,31,0,59,30,0,0,145,30,30,0,113,3,4,30,2,30,0,0,140,0,2,0,82,31,3,0,85,30,31,0,2,31,0,0,144,0,2,0,106,30,3,4,85,31,30,0,2,30,0,0,124,0,2,0,1,31,0,0,85,30,31,0,137,26,0,0,139,0,0,0,140,2,56,0,0,0,0,0,2,46,0,0,196,127,0,0,2,47,0,0,202,127,0,0,2,48,0,0,24,128,0,0,2,49,0,0,25,128,0,0,1,42,0,0,136,50,0,0,0,43,50,0,136,50,0,0,1,51,224,1,3,50,50,51,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,140,161,1,0,1,51,224,1,135,50,0,0,51,0,0,0,1,50,152,0,3,37,43,50,1,50,144,0,3,36,43,50,1,50,136,0,3,35,43,50,1,50,128,0,3,34,43,50,25,33,43,120,25,32,43,112,25,31,43,104,25,30,43,96,25,29,43,88,25,28,43,80,25,27,43,72,25,26,43,64,25,24,43,56,25,23,43,48,25,22,43,40,25,21,43,32,25,39,43,24,25,38,43,16,25,25,43,8,0,20,43,0,1,50,208,1,3,40,43,50,1,50,204,1,3,7,43,50,1,50,200,1,3,13,43,50,1,50,196,1,3,4,43,50,1,50,192,1,3,5,43,50,1,50,188,1,3,12,43,50,1,50,184,1,3,6,43,50,1,50,180,1,3,8,43,50,1,50,176,1,3,9,43,50,1,50,212,1,3,14,43,50,1,50,168,1,3,15,43,50,1,50,104,1,3,16,43,50,1,50,100,1,3,10,43,50,1,50,96,1,3,11,43,50,1,50,32,1,3,17,43,50,1,50,224,0,3,18,43,50,1,50,160,0,3,19,43,50,85,40,0,0,85,7,1,0,1,51,0,31,135,50,22,0,51,0,0,0,85,20,50,0,1,51,3,0,1,52,25,42,134,50,0,0,48,143,3,0,51,52,20,0,1,52,1,31,135,50,22,0,52,0,0,0,85,25,50,0,1,52,3,0,1,51,43,42,134,50,0,0,48,143,3,0,52,51,25,0,1,51,2,31,135,50,22,0,51,0,0,0,85,38,50,0,1,51,3,0,1,52,61,42,134,50,0,0,48,143,3,0,51,52,38,0,2,52,0,0,140,139,0,0,135,50,22,0,52,0,0,0,85,39,50,0,1,52,3,0,1,51,79,42,134,50,0,0,48,143,3,0,52,51,39,0,1,50,0,0,85,13,50,0,1,51,0,8,135,50,10,0,51,0,0,0,85,4,50,0,1,51,3,31,135,50,22,0,51,0,0,0,85,5,50,0,82,51,5,0,135,50,23,0,51,0,0,0,25,50,50,1,85,12,50,0,82,51,12,0,1,52,1,0,134,50,0,0,136,80,4,0,51,52,0,0,85,6,50,0,82,52,6,0,82,51,5,0,135,50,24,0,52,51,0,0,82,50,4,0,82,51,13,0,41,51,51,2,82,52,6,0,97,50,51,52,1,52,0,0,85,8,52,0,82,52,12,0,82,51,8,0,56,52,52,51,0,164,1,0,82,52,6,0,82,51,8,0,90,52,52,51,32,52,52,32,121,52,16,0,82,52,6,0,82,51,8,0,1,50,0,0,95,52,51,50,82,50,13,0,25,50,50,1,85,13,50,0,82,50,4,0,82,51,13,0,41,51,51,2,82,52,6,0,82,53,8,0,25,53,53,1,3,52,52,53,97,50,51,52,82,52,8,0,25,52,52,1,85,8,52,0,119,0,229,255,116,21,13,0,1,51,3,0,1,50,97,42,134,52,0,0,48,143,3,0,51,50,21,0,1,52,0,0,85,9,52,0,82,2,4,0,82,52,13,0,82,50,9,0,56,52,52,50,188,167,1,0,82,50,9,0,41,50,50,2,94,50,2,50,1,51,132,42,134,52,0,0,144,58,4,0,50,51,0,0,120,52,38,0,2,52,0,0,100,0,2,0,1,50,135,98,135,51,25,0,50,0,0,0,85,52,51,0,2,51,0,0,40,255,1,0,1,50,90,98,135,52,25,0,50,0,0,0,85,51,52,0,2,52,0,0,96,0,2,0,1,50,111,98,135,51,25,0,50,0,0,0,85,52,51,0,2,51,0,0,100,0,2,0,82,51,51,0,33,51,51,0,2,52,0,0,40,255,1,0,82,52,52,0,33,52,52,0,19,51,51,52,2,52,0,0,96,0,2,0,82,52,52,0,33,52,52,0,19,51,51,52,121,51,5,0,2,51,0,0,214,4,2,0,1,52,1,0,83,51,52,0,82,51,4,0,82,50,9,0,41,50,50,2,94,51,51,50,1,50,159,42,134,52,0,0,144,58,4,0,51,50,0,0,120,52,5,0,2,52,0,0,216,4,2,0,1,50,1,0,83,52,50,0,82,52,4,0,82,51,9,0,41,51,51,2,94,52,52,51,1,51,179,42,134,50,0,0,144,58,4,0,52,51,0,0,120,50,5,0,2,50,0,0,217,4,2,0,1,51,1,0,83,50,51,0,82,50,4,0,82,52,9,0,41,52,52,2,94,50,50,52,1,52,251,42,134,51,0,0,144,58,4,0,50,52,0,0,120,51,3,0,1,42,18,0,119,0,22,0,82,52,4,0,82,50,9,0,41,50,50,2,94,52,52,50,1,50,27,43,134,51,0,0,144,58,4,0,52,50,0,0,120,51,3,0,1,42,18,0,119,0,11,0,82,50,4,0,82,52,9,0,41,52,52,2,94,50,50,52,1,52,60,43,134,51,0,0,144,58,4,0,50,52,0,0,120,51,2,0,1,42,18,0,32,51,42,18,121,51,6,0,1,42,0,0,2,51,0,0,218,4,2,0,1,52,1,0,83,51,52,0,82,51,4,0,82,50,9,0,41,50,50,2,94,51,51,50,1,50,100,43,134,52,0,0,144,58,4,0,51,50,0,0,120,52,3,0,1,42,21,0,119,0,11,0,82,50,4,0,82,51,9,0,41,51,51,2,94,50,50,51,1,51,136,43,134,52,0,0,144,58,4,0,50,51,0,0,120,52,2,0,1,42,21,0,32,52,42,21,121,52,6,0,1,42,0,0,2,52,0,0,219,4,2,0,1,51,1,0,83,52,51,0,82,52,4,0,82,50,9,0,41,50,50,2,94,52,52,50,1,50,169,43,134,51,0,0,144,58,4,0,52,50,0,0,120,51,5,0,2,51,0,0,220,4,2,0,1,50,1,0,83,51,50,0,82,51,4,0,82,52,9,0,41,52,52,2,94,51,51,52,1,52,194,43,134,50,0,0,144,58,4,0,51,52,0,0,120,50,5,0,2,50,0,0,221,4,2,0,1,52,1,0,83,50,52,0,82,50,4,0,82,51,9,0,41,51,51,2,94,50,50,51,1,51,227,43,134,52,0,0,144,58,4,0,50,51,0,0,120,52,5,0,2,52,0,0,222,4,2,0,1,51,1,0,83,52,51,0,82,52,4,0,82,50,9,0,41,50,50,2,94,52,52,50,1,50,7,44,134,51,0,0,144,58,4,0,52,50,0,0,120,51,11,0,2,51,0,0,223,4,2,0,1,50,1,0,83,51,50,0,2,51,0,0,255,132,0,0,2,52,0,0,92,0,2,0,135,50,26,0,51,52,0,0,82,52,4,0,82,51,9,0,41,51,51,2,94,52,52,51,1,51,41,44,134,50,0,0,144,58,4,0,52,51,0,0,120,50,5,0,2,50,0,0,215,4,2,0,1,51,1,0,83,50,51,0,82,50,4,0,82,52,9,0,41,52,52,2,94,50,50,52,1,52,69,44,134,51,0,0,144,58,4,0,50,52,0,0,120,51,5,0,2,51,0,0,224,4,2,0,1,52,1,0,83,51,52,0,82,52,9,0,25,52,52,1,85,9,52,0,119,0,26,255,135,52,7,0,2,0,0,0,82,51,6,0,135,52,7,0,51,0,0,0,2,52,0,0,214,4,2,0,78,52,52,0,38,52,52,1,121,52,7,0,1,51,3,0,1,50,89,44,134,52,0,0,48,143,3,0,51,50,22,0,119,0,6,0,1,50,4,0,1,51,164,44,134,52,0,0,48,143,3,0,50,51,23,0,2,52,0,0,216,4,2,0,78,52,52,0,38,52,52,1,121,52,7,0,1,51,3,0,1,50,225,44,134,52,0,0,48,143,3,0,51,50,24,0,119,0,6,0,1,50,4,0,1,51,44,45,134,52,0,0,48,143,3,0,50,51,26,0,2,52,0,0,218,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,51,3,0,1,50,136,45,134,52,0,0,48,143,3,0,51,50,27,0,2,52,0,0,219,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,50,3,0,1,51,182,45,134,52,0,0,48,143,3,0,50,51,28,0,2,52,0,0,220,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,51,3,0,1,50,229,45,134,52,0,0,48,143,3,0,51,50,29,0,2,52,0,0,221,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,50,3,0,1,51,24,46,134,52,0,0,48,143,3,0,50,51,30,0,2,52,0,0,222,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,51,3,0,1,50,71,46,134,52,0,0,48,143,3,0,51,50,31,0,2,52,0,0,223,4,2,0,78,52,52,0,38,52,52,1,121,52,11,0,2,50,0,0,92,0,2,0,88,52,50,0,145,52,52,0,87,32,52,0,1,50,3,0,1,51,118,46,134,52,0,0,48,143,3,0,50,51,32,0,2,52,0,0,215,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,51,3,0,1,50,184,46,134,52,0,0,48,143,3,0,51,50,33,0,2,52,0,0,224,4,2,0,78,52,52,0,38,52,52,1,121,52,6,0,1,50,3,0,1,51,237,46,134,52,0,0,48,143,3,0,50,51,34,0,1,52,16,47,78,52,52,0,83,14,52,0,1,51,17,47,78,51,51,0,107,14,1,51,1,52,18,47,78,52,52,0,107,14,2,52,1,51,19,47,78,51,51,0,107,14,3,51,2,51,0,0,28,255,1,0,1,50,1,0,1,53,1,0,1,54,7,0,1,55,1,0,134,52,0,0,76,10,2,0,14,50,53,54,55,0,0,0,85,51,52,0,2,52,0,0,28,255,1,0,82,52,52,0,121,52,11,0,2,52,0,0,28,255,1,0,82,52,52,0,85,35,52,0,1,51,3,0,1,55,20,47,134,52,0,0,48,143,3,0,51,55,35,0,119,0,6,0,1,55,4,0,1,51,71,47,134,52,0,0,48,143,3,0,55,51,36,0,134,52,0,0,124,249,2,0,15,0,0,0,2,52,0,0,104,0,2,0,82,51,15,0,85,52,51,0,2,51,0,0,108,0,2,0,106,52,15,4,85,51,52,0,2,52,0,0,32,255,1,0,2,51,0,0,104,0,2,0,82,51,51,0,85,52,51,0,2,51,0,0,36,255,1,0,2,52,0,0,108,0,2,0,82,52,52,0,85,51,52,0,134,52,0,0,84,67,2,0,134,52,0,0,184,40,4,0,16,0,0,0,2,41,0,0,208,254,1,0,0,44,16,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,52,41,45,204,170,1,0,2,52,0,0,16,255,1,0,1,55,0,16,135,51,10,0,55,0,0,0,85,52,51,0,1,51,0,0,85,10,51,0,1,51,0,1,82,52,10,0,56,51,51,52,164,171,1,0,2,51,0,0,16,255,1,0,82,51,51,0,82,52,10,0,41,52,52,4,1,55,7,0,97,51,52,55,2,55,0,0,16,255,1,0,82,55,55,0,82,52,10,0,41,52,52,4,3,55,55,52,1,52,0,0,109,55,4,52,2,52,0,0,16,255,1,0,82,52,52,0,82,55,10,0,41,55,55,4,3,52,52,55,1,55,0,0,109,52,8,55,2,55,0,0,16,255,1,0,82,55,55,0,82,52,10,0,41,52,52,4,3,55,55,52,2,52,0,0,28,255,1,0,82,52,52,0,109,55,12,52,82,52,10,0,25,52,52,1,85,10,52,0,119,0,216,255,2,52,0,0,20,255,1,0,1,55,1,0,85,52,55,0,1,55,0,0,85,11,55,0,1,55,32,0,82,52,11,0,56,55,55,52,28,172,1,0,2,55,0,0,0,212,1,0,82,52,11,0,41,52,52,6,3,3,55,52,134,52,0,0,184,40,4,0,17,0,0,0,0,41,3,0,0,44,17,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,52,41,45,248,171,1,0,82,52,11,0,25,52,52,1,85,11,52,0,119,0,233,255,134,52,0,0,184,40,4,0,18,0,0,0,2,41,0,0,72,254,1,0,0,44,18,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,52,41,45,56,172,1,0,134,52,0,0,184,40,4,0,19,0,0,0,2,41,0,0,140,254,1,0,0,44,19,0,25,45,41,64,116,41,44,0,25,41,41,4,25,44,44,4,54,52,41,45,104,172,1,0,2,52,0,0,136,254,1,0,2,55,0,0,140,254,1,0,85,52,55,0,1,52,3,2,135,55,27,0,52,0,0,0,1,52,113,11,135,55,28,0,52,0,0,0,1,52,2,3,1,51,3,3,135,55,29,0,52,51,0,0,1,51,226,11,135,55,30,0,51,0,0,0,1,51,5,4,135,55,31,0,51,0,0,0,1,51,1,9,135,55,32,0,51,0,0,0,1,51,68,11,135,55,30,0,51,0,0,0,59,51,0,0,59,52,0,0,59,54,0,0,59,53,1,0,135,55,33,0,51,52,54,53,59,53,1,0,135,55,34,0,53,0,0,0,1,53,0,65,135,55,35,0,53,0,0,0,2,55,0,0,44,255,1,0,82,53,40,0,85,55,53,0,2,53,0,0,48,255,1,0,82,55,7,0,85,53,55,0,1,53,3,0,1,54,110,47,134,55,0,0,48,143,3,0,53,54,37,0,137,43,0,0,139,0,0,0,140,2,63,0,0,0,0,0,2,59,0,0,255,0,0,0,1,57,0,0,136,60,0,0,0,58,60,0,136,60,0,0,25,60,60,32,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,152,173,1,0,1,61,32,0,135,60,0,0,61,0,0,0,25,19,58,20,0,47,58,0,25,51,0,4,134,60,0,0,224,154,2,0,51,1,0,0,120,60,6,1,25,25,1,11,78,2,25,0,41,60,2,24,42,60,60,24,34,60,60,0,121,60,3,0,106,36,1,4,119,0,3,0,19,60,2,59,0,36,60,0,135,5,36,0,25,56,36,1,136,60,0,0,0,55,60,0,136,60,0,0,27,61,56,1,25,61,61,15,38,61,61,240,3,60,60,61,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,40,174,1,0,27,61,56,1,25,61,61,15,38,61,61,240,135,60,0,0,61,0,0,0,78,11,25,0,41,60,11,24,42,60,60,24,34,60,60,0,121,60,3,0,106,39,1,4,119,0,3,0,19,60,11,59,0,39,60,0,25,61,39,1,1,62,0,0,134,60,0,0,88,29,4,0,1,55,61,62,134,60,0,0,228,2,3,0,47,55,0,0,25,60,0,16,134,33,0,0,64,75,4,0,60,1,0,0,25,29,0,8,82,12,29,0,32,35,12,0,121,35,4,0,1,17,0,0,1,57,30,0,119,0,102,0,26,48,12,1,19,60,48,12,32,52,60,0,121,52,4,0,19,60,48,33,0,40,60,0,119,0,6,0,48,60,33,12,196,174,1,0,0,40,33,0,119,0,2,0,9,40,33,12,82,60,51,0,41,62,40,2,94,13,60,62,120,13,4,0,0,17,40,0,1,57,30,0,119,0,83,0,82,22,13,0,120,22,4,0,0,17,40,0,1,57,30,0,119,0,78,0,25,26,1,4,0,23,22,0,106,14,23,4,46,60,14,33,68,175,1,0,121,52,4,0,19,60,14,48,0,42,60,0,119,0,6,0,48,60,14,12,44,175,1,0,0,42,14,0,119,0,2,0,9,42,14,12,46,60,42,40,68,175,1,0,0,17,40,0,1,57,30,0,119,0,59,0,25,27,23,8,102,15,27,11,41,60,15,24,42,60,60,24,34,53,60,0,19,60,15,59,0,44,60,0,121,53,4,0,106,62,23,12,0,60,62,0,119,0,2,0,0,60,44,0,0,37,60,0,78,3,25,0,41,60,3,24,42,60,60,24,34,54,60,0,121,54,4,0,82,62,26,0,0,60,62,0,119,0,3,0,19,62,3,59,0,60,62,0,45,60,37,60,24,176,1,0,121,54,4,0,82,62,1,0,0,60,62,0,119,0,2,0,0,60,1,0,0,38,60,0,121,53,7,0,82,62,27,0,134,60,0,0,48,120,4,0,62,38,37,0,120,60,17,0,119,0,21,0,120,37,2,0,119,0,19,0,0,20,44,0,0,21,27,0,0,24,38,0,78,60,21,0,78,62,24,0,53,60,60,62,24,176,1,0,26,20,20,1,120,20,2,0,119,0,9,0,25,21,21,1,25,24,24,1,119,0,247,255,82,23,23,0,120,23,185,255,0,17,40,0,1,57,30,0,119,0,1,0,32,60,57,30,121,60,100,0,134,60,0,0,32,151,3,0,19,51,33,1,47,0,0,0,25,30,0,16,82,60,30,0,25,43,60,1,77,60,43,0,145,43,60,0,77,60,12,0,145,45,60,0,112,4,0,20,145,4,4,0,65,60,4,45,145,60,60,0,71,60,60,43,20,60,35,60,121,60,38,0,41,60,12,1,35,62,12,3,26,61,12,1,19,61,61,12,33,61,61,0,20,62,62,61,38,62,62,1,20,60,60,62,0,32,60,0,66,62,43,4,145,62,62,0,135,60,18,0,62,0,0,0,145,60,60,0,75,46,60,0,16,61,32,46,125,62,61,46,32,0,0,0,134,60,0,0,76,91,3,0,51,62,0,0,82,6,29,0,26,50,6,1,19,60,50,6,120,60,5,0,0,16,6,0,19,60,50,33,0,18,60,0,119,0,11,0,48,60,33,6,4,177,1,0,0,16,6,0,0,18,33,0,119,0,6,0,0,16,6,0,9,18,33,6,119,0,3,0,0,16,12,0,0,18,17,0,82,60,51,0,41,62,18,2,94,7,60,62,120,7,30,0,25,28,0,12,82,60,19,0,116,60,28,0,116,28,19,0,82,60,51,0,41,62,18,2,97,60,62,28,82,8,19,0,82,9,8,0,120,9,3,0,0,31,19,0,119,0,22,0,106,10,9,4,26,49,16,1,19,62,49,16,120,62,4,0,19,62,10,49,0,41,62,0,119,0,6,0,48,62,10,16,132,177,1,0,0,41,10,0,119,0,2,0,9,41,10,16,82,62,51,0,41,60,41,2,97,62,60,8,0,31,19,0,119,0,5,0,82,60,19,0,116,60,7,0,116,7,19,0,0,31,19,0,82,60,30,0,25,60,60,1,85,30,60,0,1,60,0,0,85,31,60,0,135,60,37,0,5,0,0,0,134,34,0,0,60,207,1,0,51,1,0,0,137,58,0,0,139,34,0,0,140,0,48,0,0,0,0,0,2,42,0,0,159,128,0,0,2,43,0,0,160,128,0,0,136,44,0,0,0,37,44,0,136,44,0,0,25,44,44,63,38,44,44,192,137,44,0,0,0,38,44,0,136,44,0,0,1,45,48,12,3,44,44,45,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,60,178,1,0,1,45,48,12,135,44,0,0,45,0,0,0,1,44,8,12,3,26,38,44,1,44,244,11,3,25,38,44,1,44,128,11,3,36,38,44,1,44,128,3,3,20,38,44,1,44,240,11,3,8,38,44,1,44,236,11,3,7,38,44,0,9,38,0,1,44,232,11,3,28,38,44,1,44,228,11,3,27,38,44,1,44,224,11,3,30,38,44,1,44,220,11,3,21,38,44,1,44,32,12,3,0,38,44,1,44,216,11,3,17,38,44,1,44,212,11,3,22,38,44,1,44,208,11,3,32,38,44,1,44,28,12,3,1,38,44,1,44,188,11,3,24,38,44,1,44,168,11,3,34,38,44,1,44,164,11,3,18,38,44,1,44,160,11,3,19,38,44,1,44,156,11,3,33,38,44,1,44,152,11,3,23,38,44,1,44,132,11,3,35,38,44,2,44,0,0,100,2,2,0,1,45,224,0,85,44,45,0,1,44,32,4,1,46,0,8,135,45,2,0,20,44,46,0,1,45,10,0,85,8,45,0,1,45,1,0,85,7,45,0,1,46,32,12,1,44,128,3,135,45,2,0,9,46,44,0,1,45,128,0,85,28,45,0,1,45,128,0,85,27,45,0,82,46,28,0,82,47,27,0,5,44,46,47,41,44,44,2,135,45,10,0,44,0,0,0,85,30,45,0,1,45,0,0,85,21,45,0,82,44,28,0,82,47,27,0,5,45,44,47,82,47,21,0,56,45,45,47,220,179,1,0,82,45,30,0,82,47,21,0,41,47,47,2,3,4,45,47,1,47,0,0,83,0,47,0,1,45,0,0,107,0,1,45,1,47,0,0,107,0,2,47,1,45,0,0,107,0,3,45,78,45,0,0,83,4,45,0,102,47,0,1,107,4,1,47,102,45,0,2,107,4,2,45,102,47,0,3,107,4,3,47,82,47,21,0,25,47,47,1,85,21,47,0,119,0,227,255,1,47,0,0,85,17,47,0,1,47,0,0,85,22,47,0,82,45,28,0,82,44,27,0,5,47,45,44,82,44,22,0,56,47,47,44,212,180,1,0,1,47,31,0,85,32,47,0,82,2,17,0,82,47,32,0,34,47,47,0,120,47,34,0,41,47,2,2,94,47,20,47,1,44,1,0,82,45,32,0,22,44,44,45,19,47,47,44,121,47,23,0,82,47,30,0,82,44,22,0,82,45,32,0,3,44,44,45,41,44,44,2,3,5,47,44,1,44,255,255,83,1,44,0,1,47,255,255,107,1,1,47,1,44,255,255,107,1,2,44,1,47,255,255,107,1,3,47,78,47,1,0,83,5,47,0,102,44,1,1,107,5,1,44,102,47,1,2,107,5,2,47,102,44,1,3,107,5,3,44,82,44,32,0,26,44,44,1,85,32,44,0,119,0,220,255,25,31,2,1,85,17,31,0,1,47,0,2,82,45,17,0,15,47,47,45,1,45,0,0,125,44,47,45,31,0,0,0,85,17,44,0,82,44,22,0,25,44,44,32,85,22,44,0,119,0,199,255,82,45,30,0,82,47,28,0,82,46,27,0,134,44,0,0,108,22,3,0,24,45,47,46,1,46,2,0,134,44,0,0,88,176,0,0,24,46,0,0,82,46,30,0,135,44,7,0,46,0,0,0,116,26,24,0,106,46,24,4,109,26,4,46,106,44,24,8,109,26,8,44,106,46,24,12,109,26,12,46,106,44,24,16,109,26,16,44,134,44,0,0,248,135,3,0,34,26,0,0,2,44,0,0,104,2,2,0,82,46,34,0,85,44,46,0,2,46,0,0,108,2,2,0,106,44,34,4,85,46,44,0,2,44,0,0,112,2,2,0,106,46,34,8,85,44,46,0,2,46,0,0,116,2,2,0,106,44,34,12,85,46,44,0,2,44,0,0,120,2,2,0,106,46,34,16,85,44,46,0,2,46,0,0,128,2,2,0,2,47,0,0,100,2,2,0,82,47,47,0,27,47,47,36,135,44,10,0,47,0,0,0,85,46,44,0,2,44,0,0,124,2,2,0,2,47,0,0,100,2,2,0,82,47,47,0,41,47,47,4,135,46,10,0,47,0,0,0,85,44,46,0,1,46,0,0,85,18,46,0,116,19,7,0,116,33,7,0,1,46,0,0,85,23,46,0,2,46,0,0,100,2,2,0,82,46,46,0,82,44,23,0,56,46,46,44,216,184,1,0,82,39,23,0,2,46,0,0,128,2,2,0,82,46,46,0,27,44,39,36,25,47,39,32,97,46,44,47,82,10,19,0,76,47,10,0,145,10,47,0,2,47,0,0,124,2,2,0,82,47,47,0,82,44,23,0,41,44,44,4,101,47,44,10,82,40,7,0,82,47,18,0,82,46,8,0,3,46,46,40,5,44,47,46,3,11,40,44,76,44,11,0,145,11,44,0,2,44,0,0,124,2,2,0,82,44,44,0,82,46,23,0,41,46,46,4,3,44,44,46,113,44,4,11,82,44,23,0,41,44,44,2,94,12,9,44,76,44,12,0,145,12,44,0,2,44,0,0,124,2,2,0,82,44,44,0,82,46,23,0,41,46,46,4,3,44,44,46,113,44,8,12,82,13,8,0,76,44,13,0,145,13,44,0,2,44,0,0,124,2,2,0,82,44,44,0,82,46,23,0,41,46,46,4,3,44,44,46,113,44,12,13,2,44,0,0,124,2,2,0,82,44,44,0,82,46,23,0,41,46,46,4,3,44,44,46,112,3,44,8,145,3,3,0,82,46,7,0,76,46,46,0,145,46,46,0,63,44,3,46,145,44,44,0,75,14,44,0,82,44,33,0,3,44,44,14,85,33,44,0,2,44,0,0,108,2,2,0,82,44,44,0,82,46,33,0,49,44,44,46,192,183,1,0,82,44,18,0,25,44,44,1,85,18,44,0,82,44,7,0,41,44,44,1,82,46,23,0,41,46,46,2,94,46,9,46,3,44,44,46,85,19,44,0,116,33,19,0,82,15,7,0,76,44,15,0,145,15,44,0,2,44,0,0,124,2,2,0,82,44,44,0,82,46,23,0,41,46,46,4,101,44,46,15,82,41,7,0,82,44,18,0,82,47,8,0,3,47,47,41,5,46,44,47,3,16,41,46,76,46,16,0,145,16,46,0,2,46,0,0,124,2,2,0,82,46,46,0,82,47,23,0,41,47,47,4,3,46,46,47,113,46,4,16,119,0,2,0,116,19,33,0,2,46,0,0,128,2,2,0,82,46,46,0,82,47,23,0,27,47,47,36,3,46,46,47,1,47,0,0,109,46,4,47,2,47,0,0,128,2,2,0,82,47,47,0,82,46,23,0,27,46,46,36,3,47,47,46,1,46,0,0], eb + 102400);
  HEAPU8.set([109,47,8,46,2,46,0,0,128,2,2,0,82,46,46,0,82,47,23,0,27,47,47,36,3,46,46,47,1,47,0,0,109,46,12,47,2,47,0,0,128,2,2,0,82,47,47,0,82,46,23,0,27,46,46,36,3,47,47,46,25,29,47,16,2,47,0,0,124,2,2,0,82,47,47,0,82,46,23,0,41,46,46,4,3,6,47,46,116,25,24,0,106,47,24,4,109,25,4,47,106,46,24,8,109,25,8,46,106,47,24,12,109,25,12,47,106,46,24,16,109,25,16,46,116,26,6,0,106,47,6,4,109,26,4,47,106,46,6,8,109,26,8,46,106,47,6,12,109,26,12,47,134,47,0,0,124,162,3,0,35,25,26,0,116,29,35,0,106,46,35,4,109,29,4,46,106,47,35,8,109,29,8,47,106,46,35,12,109,29,12,46,106,47,35,16,109,29,16,47,82,47,23,0,25,47,47,1,85,23,47,0,119,0,69,255,116,26,24,0,106,46,24,4,109,26,4,46,106,47,24,8,109,26,8,47,106,46,24,12,109,26,12,46,106,47,24,16,109,26,16,47,134,47,0,0,72,138,4,0,26,0,0,0,2,47,0,0,96,2,2,0,2,44,0,0,124,2,2,0,82,44,44,0,112,46,44,12,145,46,46,0,75,46,46,0,85,47,46,0,2,46,0,0,104,2,2,0,82,46,46,0,85,36,46,0,1,47,3,0,1,44,183,62,134,46,0,0,48,143,3,0,47,44,36,0,137,37,0,0,139,0,0,0,140,5,65,0,0,0,0,0,0,5,0,0,0,6,1,0,0,7,6,0,0,8,2,0,0,9,3,0,0,10,9,0,120,7,28,0,33,11,4,0,120,10,12,0,121,11,5,0,9,60,5,8,85,4,60,0,1,61,0,0,109,4,4,61,1,57,0,0,7,56,5,8,135,61,12,0,57,0,0,0,139,56,0,0,119,0,15,0,120,11,6,0,1,57,0,0,1,56,0,0,135,61,12,0,57,0,0,0,139,56,0,0,85,4,0,0,38,60,1,0,109,4,4,60,1,57,0,0,1,56,0,0,135,60,12,0,57,0,0,0,139,56,0,0,32,12,10,0,120,8,77,0,121,12,11,0,121,4,5,0,9,60,7,8,85,4,60,0,1,61,0,0,109,4,4,61,1,57,0,0,7,56,7,8,135,61,12,0,57,0,0,0,139,56,0,0,120,5,11,0,121,4,5,0,1,61,0,0,85,4,61,0,9,60,7,10,109,4,4,60,1,57,0,0,7,56,7,10,135,60,12,0,57,0,0,0,139,56,0,0,26,13,10,1,19,60,13,10,120,60,15,0,121,4,6,0,85,4,0,0,19,61,13,7,38,62,1,0,20,61,61,62,109,4,4,61,1,57,0,0,135,61,38,0,10,0,0,0,24,61,7,61,0,56,61,0,135,61,12,0,57,0,0,0,139,56,0,0,135,61,39,0,10,0,0,0,135,60,39,0,7,0,0,0,4,14,61,60,37,60,14,30,121,60,15,0,25,15,14,1,1,60,31,0,4,16,60,14,0,33,15,0,22,60,7,16,24,61,5,15,20,60,60,61,0,32,60,0,24,60,7,15,0,31,60,0,1,30,0,0,22,60,5,16,0,29,60,0,119,0,133,0,120,4,6,0,1,57,0,0,1,56,0,0,135,60,12,0,57,0,0,0,139,56,0,0,85,4,0,0,38,61,1,0,20,61,6,61,109,4,4,61,1,57,0,0,1,56,0,0,135,61,12,0,57,0,0,0,139,56,0,0,119,0,117,0,120,12,42,0,135,61,39,0,10,0,0,0,135,60,39,0,7,0,0,0,4,25,61,60,37,60,25,31,121,60,20,0,25,26,25,1,1,60,31,0,4,27,60,25,26,60,25,31,42,60,60,31,0,28,60,0,0,33,26,0,24,60,5,26,19,60,60,28,22,61,7,27,20,60,60,61,0,32,60,0,24,60,7,26,19,60,60,28,0,31,60,0,1,30,0,0,22,60,5,27,0,29,60,0,119,0,90,0,120,4,6,0,1,57,0,0,1,56,0,0,135,60,12,0,57,0,0,0,139,56,0,0,85,4,0,0,38,61,1,0,20,61,6,61,109,4,4,61,1,57,0,0,1,56,0,0,135,61,12,0,57,0,0,0,139,56,0,0,26,17,8,1,19,61,17,8,121,61,44,0,135,61,39,0,8,0,0,0,25,61,61,33,135,60,39,0,7,0,0,0,4,19,61,60,1,60,64,0,4,20,60,19,1,60,32,0,4,21,60,19,42,60,21,31,0,22,60,0,26,23,19,32,42,60,23,31,0,24,60,0,0,33,19,0,26,60,21,1,42,60,60,31,24,61,7,23,19,60,60,61,22,61,7,21,24,62,5,19,20,61,61,62,19,61,61,24,20,60,60,61,0,32,60,0,24,60,7,19,19,60,24,60,0,31,60,0,22,60,5,20,19,60,60,22,0,30,60,0,22,60,7,20,24,61,5,23,20,60,60,61,19,60,60,22,22,61,5,21,26,62,19,33,42,62,62,31,19,61,61,62,20,60,60,61,0,29,60,0,119,0,29,0,121,4,5,0,19,60,17,5,85,4,60,0,1,61,0,0,109,4,4,61,32,61,8,1,121,61,9,0,38,61,1,0,20,61,6,61,0,57,61,0,0,56,0,0,135,61,12,0,57,0,0,0,139,56,0,0,119,0,14,0,135,18,38,0,8,0,0,0,24,61,7,18,0,57,61,0,1,61,32,0,4,61,61,18,22,61,7,61,24,60,5,18,20,61,61,60,0,56,61,0,135,61,12,0,57,0,0,0,139,56,0,0,120,33,8,0,0,53,29,0,0,52,30,0,0,51,31,0,0,50,32,0,1,49,0,0,1,48,0,0,119,0,71,0,0,34,2,0,38,61,3,0,20,61,9,61,0,35,61,0,1,61,255,255,1,60,255,255,134,36,0,0,164,123,4,0,34,35,61,60,135,37,3,0,0,43,29,0,0,42,30,0,0,41,31,0,0,40,32,0,0,39,33,0,1,38,0,0,0,58,43,0,43,60,42,31,41,61,43,1,20,60,60,61,0,43,60,0,41,60,42,1,20,60,38,60,0,42,60,0,41,60,40,1,43,61,58,31,20,60,60,61,0,44,60,0,43,60,40,31,41,61,41,1,20,60,60,61,0,45,60,0,134,60,0,0,8,120,4,0,36,37,44,45,135,46,3,0,34,61,46,0,1,62,255,255,1,63,0,0,125,60,61,62,63,0,0,0,41,60,60,1,0,59,60,0,42,60,46,31,20,60,60,59,0,47,60,0,38,60,47,1,0,38,60,0,19,60,47,34,34,62,46,0,1,61,255,255,1,64,0,0,125,63,62,61,64,0,0,0,42,63,63,31,20,63,63,59,19,63,63,35,134,40,0,0,8,120,4,0,44,45,60,63,135,41,3,0,26,39,39,1,33,63,39,0,120,63,209,255,0,53,43,0,0,52,42,0,0,51,41,0,0,50,40,0,1,49,0,0,0,48,38,0,0,54,52,0,1,55,0,0,121,4,3,0,85,4,50,0,109,4,4,51,43,63,54,31,20,60,53,55,41,60,60,1,20,63,63,60,41,60,55,1,43,64,54,31,20,60,60,64,38,60,60,0,20,63,63,60,20,63,63,49,0,57,63,0,41,63,54,1,1,60,0,0,43,60,60,31,20,63,63,60,38,63,63,254,20,63,63,48,0,56,63,0,135,63,12,0,57,0,0,0,139,56,0,0,140,8,59,0,0,0,0,0,2,52,0,0,255,0,0,0,136,53,0,0,0,29,53,0,136,53,0,0,25,53,53,63,38,53,53,192,137,53,0,0,0,30,53,0,136,53,0,0,25,53,53,64,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,228,190,1,0,1,54,64,0,135,53,0,0,54,0,0,0,25,22,30,48,25,24,30,44,25,26,30,40,25,17,30,36,25,27,30,32,25,21,30,28,25,16,30,24,25,19,30,20,25,20,30,16,25,18,30,12,25,25,30,8,25,28,30,4,0,23,30,0,85,22,0,0,85,24,1,0,85,26,2,0,85,17,3,0,85,27,4,0,85,21,5,0,85,16,6,0,85,19,7,0,82,54,27,0,1,55,128,24,1,56,160,24,125,53,54,55,56,0,0,0,85,20,53,0,82,53,20,0,82,56,16,0,41,56,56,2,3,53,53,56,116,25,53,0,1,53,0,0,121,53,6,0,82,53,17,0,26,53,53,1,82,56,27,0,4,10,53,56,119,0,2,0,82,10,27,0,82,56,22,0,82,55,24,0,5,53,55,10,3,56,56,53,85,28,56,0,82,9,24,0,1,53,0,0,121,53,5,0,1,53,0,0,4,53,53,9,0,56,53,0,119,0,2,0,0,56,9,0,85,23,56,0,82,56,25,0,120,56,10,0,82,53,19,0,82,55,28,0,82,57,26,0,82,58,21,0,5,54,57,58,135,56,2,0,53,55,54,0,137,29,0,0,139,0,0,0,1,56,0,0,85,18,56,0,82,8,25,0,82,56,21,0,82,54,18,0,56,56,56,54,36,193,1,0,1,56,1,0,1,54,6,0,138,8,56,54,44,192,1,0,68,192,1,0,108,192,1,0,152,192,1,0,228,192,1,0,252,192,1,0,119,0,59,0,82,31,18,0,82,56,19,0,82,54,28,0,90,54,54,31,95,56,31,54,119,0,53,0,82,32,18,0,82,33,28,0,82,54,19,0,91,56,33,32,82,55,23,0,4,55,32,55,91,55,33,55,4,56,56,55,95,54,32,56,119,0,43,0,82,34,18,0,82,35,28,0,82,56,19,0,91,54,35,34,82,55,23,0,4,55,34,55,91,55,35,55,42,55,55,1,4,54,54,55,95,56,34,54,119,0,32,0,82,36,28,0,82,37,18,0,91,54,36,37,1,55,0,0,82,53,23,0,4,53,37,53,91,53,36,53,1,58,0,0,134,56,0,0,176,125,3,0,55,53,58,0,19,56,56,52,4,54,54,56,19,54,54,52,0,15,54,0,82,54,19,0,82,56,18,0,95,54,56,15,119,0,13,0,82,38,18,0,82,56,19,0,82,54,28,0,90,54,54,38,95,56,38,54,119,0,7,0,82,39,18,0,82,54,19,0,82,56,28,0,90,56,56,39,95,54,39,56,119,0,1,0,82,56,18,0,25,56,56,1,85,18,56,0,119,0,180,255,1,56,1,0,1,54,6,0,138,8,56,54,84,193,1,0,176,193,1,0,12,194,1,0,124,194,1,0,20,195,1,0,116,195,1,0,137,29,0,0,139,0,0,0,119,0,171,0,116,18,21,0,82,54,26,0,82,58,21,0,5,56,54,58,82,58,18,0,56,56,56,58,164,193,1,0,82,40,18,0,82,41,28,0,82,56,19,0,91,58,41,40,82,54,21,0,4,54,40,54,91,54,41,54,4,58,58,54,95,56,40,58,82,58,18,0,25,58,58,1,85,18,58,0,119,0,238,255,137,29,0,0,139,0,0,0,119,0,1,0,116,18,21,0,82,56,26,0,82,54,21,0,5,58,56,54,82,54,18,0,56,58,58,54,0,194,1,0,82,42,18,0,82,43,28,0,82,58,19,0,91,54,43,42,82,56,23,0,4,56,42,56,91,56,43,56,4,54,54,56,95,58,42,54,82,54,18,0,25,54,54,1,85,18,54,0,119,0,238,255,137,29,0,0,139,0,0,0,119,0,1,0,116,18,21,0,82,58,26,0,82,56,21,0,5,54,58,56,82,56,18,0,56,54,54,56,112,194,1,0,82,44,18,0,82,45,28,0,82,54,19,0,91,56,45,44,82,58,21,0,4,58,44,58,91,58,45,58,82,53,23,0,4,53,44,53,91,53,45,53,3,58,58,53,42,58,58,1,4,56,56,58,95,54,44,56,82,56,18,0,25,56,56,1,85,18,56,0,119,0,233,255,137,29,0,0,139,0,0,0,119,0,1,0,116,18,21,0,82,54,26,0,82,58,21,0,5,56,54,58,82,58,18,0,56,56,56,58,8,195,1,0,82,56,28,0,82,58,18,0,91,11,56,58,82,46,28,0,82,47,18,0,82,56,18,0,82,58,23,0,4,48,56,58,82,49,21,0,4,56,47,49,91,56,46,56,91,54,46,48,4,53,48,49,91,53,46,53,134,58,0,0,176,125,3,0,56,54,53,0,19,58,58,52,4,58,11,58,19,58,58,52,0,12,58,0,82,58,19,0,82,53,18,0,95,58,53,12,82,53,18,0,25,53,53,1,85,18,53,0,119,0,223,255,137,29,0,0,139,0,0,0,119,0,1,0,116,18,21,0,82,58,26,0,82,54,21,0,5,53,58,54,82,54,18,0,56,53,53,54,104,195,1,0,82,50,18,0,82,51,28,0,82,53,19,0,91,54,51,50,82,58,21,0,4,58,50,58,91,58,51,58,42,58,58,1,4,54,54,58,95,53,50,54,82,54,18,0,25,54,54,1,85,18,54,0,119,0,237,255,137,29,0,0,139,0,0,0,119,0,1,0,116,18,21,0,82,53,26,0,82,58,21,0,5,54,53,58,82,58,18,0,56,54,54,58,240,195,1,0,82,54,28,0,82,58,18,0,91,13,54,58,82,58,28,0,82,53,18,0,82,56,21,0,4,53,53,56,91,58,58,53,1,53,0,0,1,56,0,0,134,54,0,0,176,125,3,0,58,53,56,0,19,54,54,52,4,54,13,54,19,54,54,52,0,14,54,0,82,54,19,0,82,56,18,0,95,54,56,14,82,56,18,0,25,56,56,1,85,18,56,0,119,0,227,255,137,29,0,0,139,0,0,0,119,0,84,255,139,0,0,0,140,6,49,0,0,0,0,0,1,38,0,0,136,41,0,0,0,39,41,0,136,41,0,0,25,41,41,63,38,41,41,192,137,41,0,0,0,40,41,0,136,41,0,0,25,41,41,80,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,80,196,1,0,1,42,80,0,135,41,0,0,42,0,0,0,25,23,40,64,25,22,40,60,25,24,40,56,25,34,40,52,25,26,40,48,25,31,40,44,25,30,40,40,25,29,40,36,25,25,40,32,25,27,40,28,25,35,40,24,25,33,40,20,25,36,40,16,25,21,40,12,25,32,40,8,25,28,40,4,0,37,40,0,85,23,0,0,85,22,1,0,85,24,2,0,89,34,3,0,85,26,4,0,85,31,5,0,88,6,34,0,145,6,6,0,82,42,24,0,82,43,26,0,82,44,31,0,134,41,0,0,24,167,3,0,6,42,43,44,85,30,41,0,82,44,24,0,88,43,34,0,145,43,43,0,134,41,0,0,32,188,3,0,44,43,0,0,85,29,41,0,1,41,0,0,85,25,41,0,82,41,31,0,82,43,25,0,49,41,41,43,12,197,1,0,1,38,22,0,119,0,160,0,59,41,0,0,145,41,41,0,89,36,41,0,1,41,0,0,85,27,41,0,82,41,30,0,82,43,27,0,56,41,41,43,24,198,1,0,82,41,23,0,82,43,27,0,41,43,43,3,94,41,41,43,82,43,25,0,49,41,41,43,220,197,1,0,82,41,25,0,82,43,23,0,82,44,27,0,41,44,44,3,3,43,43,44,106,43,43,4,49,41,41,43,212,197,1,0,88,9,34,0,145,9,9,0,82,44,22,0,82,42,24,0,82,45,27,0,82,46,25,0,82,47,23,0,82,48,27,0,41,48,48,3,94,47,47,48,4,46,46,47,134,43,0,0,100,201,3,0,44,42,9,45,46,0,0,0,88,41,43,0,145,41,41,0,89,21,41,0,88,10,21,0,145,10,10,0,88,43,36,0,145,43,43,0,63,41,43,10,145,41,41,0,89,36,41,0,119,0,4,0,1,38,8,0,119,0,2,0,1,38,8,0,32,41,38,8,121,41,9,0,1,38,0,0,82,41,25,0,82,43,23,0,82,46,27,0,41,46,46,3,94,43,43,46,54,41,41,43,24,198,1,0,82,41,27,0,25,41,41,1,85,27,41,0,119,0,195,255,88,41,36,0,145,41,41,0,62,43,0,0,223,67,234,191,204,204,236,63,145,43,43,0,73,41,41,43,120,41,3,0,1,38,11,0,119,0,83,0,88,41,36,0,145,41,41,0,62,43,0,0,82,253,247,158,153,153,241,63,145,43,43,0,71,41,41,43,120,41,3,0,1,38,13,0,119,0,73,0,59,43,1,0,145,43,43,0,88,46,36,0,145,46,46,0,66,41,43,46,145,41,41,0,89,33,41,0,1,41,0,0,85,27,41,0,82,41,30,0,82,46,27,0,56,41,41,46,120,199,1,0,82,41,23,0,82,46,27,0,41,46,46,3,94,41,41,46,82,46,25,0,49,41,41,46,60,199,1,0,82,41,25,0,82,46,23,0,82,43,27,0,41,43,43,3,3,46,46,43,106,46,46,4,49,41,41,46,52,199,1,0,88,11,33,0,145,11,11,0,88,12,34,0,145,12,12,0,82,41,22,0,82,46,24,0,82,43,27,0,82,45,25,0,82,42,23,0,82,44,27,0,41,44,44,3,94,42,42,44,4,45,45,42,134,18,0,0,100,201,3,0,41,46,12,43,45,0,0,0,88,43,18,0,145,43,43,0,65,45,43,11,145,45,45,0,89,18,45,0,119,0,4,0,1,38,19,0,119,0,2,0,1,38,19,0,32,45,38,19,121,45,9,0,1,38,0,0,82,45,25,0,82,43,23,0,82,46,27,0,41,46,46,3,94,43,43,46,54,45,45,43,120,199,1,0,82,45,27,0,25,45,45,1,85,27,45,0,119,0,198,255,82,45,25,0,25,45,45,1,85,25,45,0,119,0,92,255,32,45,38,11,121,45,8,0,1,43,104,75,1,46,184,68,1,41,116,4,1,42,117,75,135,45,1,0,43,46,41,42,119,0,159,0,32,45,38,13,121,45,8,0,1,42,158,75,1,41,184,68,1,46,117,4,1,43,117,75,135,45,1,0,42,41,46,43,119,0,150,0,32,45,38,22,121,45,148,0,1,45,0,0,85,27,45,0,82,45,30,0,82,43,27,0,56,45,45,43,184,201,1,0,1,45,0,0,85,35,45,0,88,13,34,0,145,13,13,0,82,46,22,0,82,41,24,0,82,42,27,0,82,44,35,0,134,43,0,0,100,201,3,0,46,41,13,42,44,0,0,0,88,45,43,0,145,45,45,0,59,43,0,0,145,43,43,0,69,20,45,43,82,14,35,0,120,20,2,0,119,0,4,0,25,43,14,1,85,35,43,0,119,0,236,255,82,43,23,0,82,45,27,0,41,45,45,3,3,16,43,45,82,45,16,0,3,45,45,14,85,16,45,0,82,45,23,0,82,43,27,0,41,43,43,3,3,17,45,43,1,43,0,0,82,45,23,0,82,44,27,0,41,44,44,3,94,45,45,44,56,43,43,45,176,200,1,0,82,43,17,0,25,43,43,1,85,17,43,0,82,43,35,0,25,43,43,1,85,35,43,0,119,0,239,255,106,43,17,4,82,45,23,0,82,44,27,0,41,44,44,3,94,45,45,44,4,43,43,45,25,43,43,1,85,32,43,0,82,45,29,0,82,44,32,0,134,43,0,0,20,83,4,0,45,44,0,0,85,28,43,0,82,44,24,0,88,45,34,0,145,45,45,0,134,43,0,0,32,188,3,0,44,45,0,0,85,37,43,0,1,43,0,0,85,25,43,0,82,43,28,0,82,45,25,0,56,43,43,45,168,201,1,0,82,43,37,0,82,45,25,0,82,44,35,0,3,45,45,44,56,43,43,45,168,201,1,0,88,15,34,0,145,15,15,0,82,45,22,0,82,44,24,0,82,42,27,0,82,41,25,0,82,46,35,0,3,41,41,46,134,43,0,0,100,201,3,0,45,44,15,42,41,0,0,0,88,7,43,0,145,7,7,0,88,8,34,0,145,8,8,0,82,41,22,0,82,42,24,0,82,44,27,0,82,45,25,0,134,43,0,0,100,201,3,0,41,42,8,44,45,0,0,0,89,43,7,0,82,43,25,0,25,43,43,1,85,25,43,0,119,0,218,255,82,43,27,0,25,43,43,1,85,27,43,0,119,0,139,255,1,43,0,0,85,25,43,0,82,43,30,0,82,45,25,0,56,43,43,45,28,202,1,0,82,43,23,0,82,45,25,0,41,45,45,3,3,43,43,45,106,43,43,4,82,45,31,0,26,45,45,1,134,19,0,0,20,83,4,0,43,45,0,0,82,45,23,0,82,43,25,0,41,43,43,3,3,45,45,43,109,45,4,19,82,45,25,0,25,45,45,1,85,25,45,0,119,0,234,255,137,39,0,0,139,0,0,0,139,0,0,0,140,2,75,0,0,0,0,0,2,71,0,0,255,0,0,0,1,68,0,0,136,72,0,0,0,69,72,0,136,72,0,0,25,72,72,63,38,72,72,192,137,72,0,0,0,70,72,0,136,72,0,0,1,73,32,4,3,72,72,73,137,72,0,0,130,72,0,0,136,73,0,0,49,72,72,73,132,202,1,0,1,73,32,4,135,72,0,0,73,0,0,0,1,72,0,4,3,15,70,72,0,58,70,0,1,72,0,0,85,15,72,0,1,73,0,0,109,15,4,73,1,72,0,0,109,15,8,72,1,73,0,0,109,15,12,73,1,72,0,0,109,15,16,72,1,73,0,0,109,15,20,73,1,72,0,0,109,15,24,72,1,73,0,0,109,15,28,73,78,2,1,0,41,73,2,24,42,73,73,24,120,73,8,0,1,25,255,255,1,29,255,255,1,43,0,0,1,49,1,0,1,52,1,0,1,68,25,0,119,0,146,0,0,5,2,0,1,44,0,0,90,73,0,44,120,73,3,0,1,57,0,0,119,0,140,0,19,73,5,71,0,22,73,0,43,73,22,5,41,73,73,2,3,14,15,73,82,73,14,0,1,72,1,0,38,74,22,31,22,72,72,74,20,73,73,72,85,14,73,0,25,44,44,1,41,73,22,2,97,58,73,44,90,5,1,44,41,73,5,24,42,73,73,24,33,73,73,0,120,73,234,255,1,73,1,0,16,18,73,44,121,18,112,0,1,10,1,0,1,26,255,255,1,32,0,0,1,36,1,0,1,50,1,0,3,73,36,26,90,6,1,73,90,7,1,10,41,73,6,24,42,73,73,24,41,72,7,24,42,72,72,24,45,73,73,72,212,203,1,0,45,73,36,50,192,203,1,0,0,27,26,0,3,33,50,32,1,37,1,0,0,51,50,0,119,0,20,0,0,27,26,0,0,33,32,0,25,37,36,1,0,51,50,0,119,0,15,0,19,73,7,71,19,72,6,71,47,73,73,72,248,203,1,0,0,27,26,0,0,33,10,0,1,37,1,0,4,51,10,26,119,0,6,0,0,27,32,0,25,33,32,1,1,37,1,0,1,51,1,0,119,0,1,0,3,10,37,33,57,73,44,10,44,204,1,0,0,26,27,0,0,32,33,0,0,36,37,0,0,50,51,0,119,0,214,255,121,18,56,0,1,11,1,0,1,30,255,255,1,34,0,0,1,38,1,0,1,54,1,0,3,73,38,30,90,8,1,73,90,9,1,11,41,73,8,24,42,73,73,24,41,72,9,24,42,72,72,24,45,73,73,72,152,204,1,0,45,73,38,54,132,204,1,0,0,31,30,0,3,35,54,34,1,39,1,0,0,55,54,0,119,0,20,0,0,31,30,0,0,35,34,0,25,39,38,1,0,55,54,0,119,0,15,0,19,73,8,71,19,72,9,71,47,73,73,72,188,204,1,0,0,31,30,0,0,35,11,0,1,39,1,0,4,55,11,30,119,0,6,0,0,31,34,0,25,35,34,1,1,39,1,0,1,55,1,0,119,0,1,0,3,11,39,35,50,73,44,11,248,204,1,0,0,25,27,0,0,29,31,0,0,43,44,0,0,49,51,0,0,52,55,0,1,68,25,0,119,0,19,0,0,30,31,0,0,34,35,0,0,38,39,0,0,54,55,0,119,0,207,255,0,25,27,0,1,29,255,255,0,43,44,0,0,49,51,0,1,52,1,0,1,68,25,0,119,0,7,0,1,25,255,255,1,29,255,255,0,43,44,0,1,49,1,0,1,52,1,0,1,68,25,0,32,73,68,25,121,73,124,0,25,73,25,1,25,72,29,1,16,19,73,72,125,53,19,52,49,0,0,0,125,28,19,29,25,0,0,0,25,12,28,1,3,73,1,53,134,72,0,0,204,73,4,0,1,73,12,0,120,72,6,0,4,60,43,53,0,47,60,0,0,56,53,0,0,63,60,0,119,0,10,0,4,72,43,28,26,64,72,1,16,73,64,28,125,72,73,28,64,0,0,0,25,13,72,1,1,47,0,0,0,56,13,0,4,63,43,13,39,72,43,63,0,48,72,0,26,61,43,1,33,65,47,0,0,23,0,0,1,45,0,0,0,66,0,0,0,59,23,0,4,72,66,59,48,72,72,43,24,206,1,0,1,72,0,0,134,16,0,0,196,192,2,0,66,72,48,0,120,16,3,0,3,67,66,48,119,0,9,0,4,72,16,59,48,72,72,43,16,206,1,0,1,57,0,0,119,0,74,0,0,67,16,0,119,0,2,0,0,67,66,0,91,21,23,61,1,72,1,0,38,73,21,31,22,72,72,73,43,73,21,5,41,73,73,2,94,73,15,73,19,72,72,73,120,72,4,0,0,40,43,0,1,46,0,0,119,0,55,0,41,72,21,2,94,72,58,72,4,62,43,72,121,62,9,0,33,72,45,0,19,72,65,72,16,73,62,56,19,72,72,73,125,40,72,63,62,0,0,0,1,46,0,0,119,0,43,0,16,17,45,12,125,20,17,12,45,0,0,0,90,3,1,20,41,72,3,24,42,72,72,24,121,72,19,0,0,4,3,0,0,41,20,0,41,72,4,24,42,72,72,24,90,73,23,41,53,72,72,73,212,206,1,0,25,24,41,1,90,4,1,24,41,72,4,24,42,72,72,24,120,72,2,0,119,0,6,0,0,41,24,0,119,0,244,255,4,40,41,28,1,46,0,0,119,0,18,0,120,17,3,0,0,57,23,0,119,0,19,0,0,42,12,0,26,42,42,1,90,72,1,42,90,73,23,42,46,72,72,73,16,207,1,0,0,40,56,0,0,46,47,0,119,0,6,0,50,72,42,45,32,207,1,0,0,57,23,0,119,0,6,0,119,0,244,255,3,23,23,40,0,45,46,0,0,66,67,0,119,0,168,255,137,69,0,0,139,57,0,0,140,2,57,0,0,0,0,0,2,53,0,0,255,0,0,0,1,51,0,0,136,54,0,0,0,52,54,0,136,54,0,0,25,54,54,32,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,128,207,1,0,1,55,32,0,135,54,0,0,55,0,0,0,25,17,52,4,0,43,52,0,25,44,52,16,85,43,1,0,25,54,0,12,134,32,0,0,64,75,4,0,54,1,0,0,25,27,0,4,82,2,27,0,32,33,2,0,121,33,4,0,1,15,0,0,1,51,23,0,119,0,106,0,26,45,2,1,19,54,45,2,32,48,54,0,121,48,4,0,19,54,45,32,0,36,54,0,119,0,6,0,48,54,32,2,232,207,1,0,0,36,32,0,119,0,2,0,9,36,32,2,82,54,0,0,41,55,36,2,94,6,54,55,120,6,4,0,0,15,36,0,1,51,23,0,119,0,87,0,82,20,6,0,120,20,4,0,0,15,36,0,1,51,23,0,119,0,82,0,25,24,1,11,25,25,1,4,0,21,20,0,106,11,21,4,46,54,11,32,108,208,1,0,121,48,4,0,19,54,11,45,0,38,54,0,119,0,6,0,48,54,11,2,84,208,1,0,0,38,11,0,119,0,2,0,9,38,11,2,46,54,38,36,108,208,1,0,0,15,36,0,1,51,23,0,119,0,62,0,25,30,21,8,102,12,30,11,41,54,12,24,42,54,54,24,34,49,54,0,19,54,12,53,0,40,54,0,121,49,4,0,106,55,21,12,0,54,55,0,119,0,2,0,0,54,40,0,0,34,54,0,78,13,24,0,41,54,13,24,42,54,54,24,34,50,54,0,121,50,4,0,82,55,25,0,0,54,55,0,119,0,3,0,19,55,13,53,0,54,55,0,45,54,34,54,76,209,1,0,121,50,4,0,82,55,1,0,0,54,55,0,119,0,2,0,0,54,1,0,0,35,54,0,121,49,8,0,82,55,30,0,134,54,0,0,48,120,4,0,55,35,34,0,120,54,20,0,0,22,21,0,119,0,23,0,120,34,3,0,0,22,21,0,119,0,20,0,0,18,40,0,0,19,30,0,0,23,35,0,78,54,19,0,78,55,23,0,53,54,54,55,76,209,1,0,26,18,18,1,120,18,3,0,0,22,21,0,119,0,9,0,25,19,19,1,25,23,23,1,119,0,246,255,82,21,21,0,120,21,182,255,0,15,36,0,1,51,23,0,119,0,1,0,32,54,51,23,121,54,104,0,2,55,0,0,212,4,2,0,134,54,0,0,152,149,3,0,17,0,32,55,43,44,0,0,25,28,0,12,82,54,28,0,25,39,54,1,77,54,39,0,145,39,54,0,77,54,2,0,145,41,54,0,112,3,0,16,145,3,3,0,65,54,3,41,145,54,54,0,71,54,54,39,20,54,33,54,121,54,38,0,41,54,2,1,35,55,2,3,26,56,2,1,19,56,56,2,33,56,56,0,20,55,55,56,38,55,55,1,20,54,54,55,0,31,54,0,66,55,39,3,145,55,55,0,135,54,18,0,55,0,0,0,145,54,54,0,75,42,54,0,16,56,31,42,125,55,56,42,31,0,0,0,134,54,0,0,76,91,3,0,0,55,0,0,82,4,27,0,26,47,4,1,19,54,47,4,120,54,5,0,0,14,4,0,19,54,47,32,0,16,54,0,119,0,11,0,48,54,32,4,64,210,1,0,0,14,4,0,0,16,32,0,119,0,6,0,0,14,4,0,9,16,32,4,119,0,3,0,0,14,2,0,0,16,15,0,82,54,0,0,41,55,16,2,94,5,54,55,120,5,30,0,25,26,0,8,82,54,17,0,116,54,26,0,116,26,17,0,82,54,0,0,41,55,16,2,97,54,55,26,82,7,17,0,82,8,7,0,120,8,3,0,0,29,17,0,119,0,22,0,106,9,8,4,26,46,14,1,19,55,46,14,120,55,4,0,19,55,9,46,0,37,55,0,119,0,6,0,48,55,9,14,192,210,1,0,0,37,9,0,119,0,2,0,9,37,9,14,82,55,0,0,41,54,37,2,97,55,54,7,0,29,17,0,119,0,5,0,82,54,17,0,116,54,5,0,116,5,17,0,0,29,17,0,82,10,29,0,82,54,28,0,25,54,54,1,85,28,54,0,1,54,0,0,85,29,54,0,0,22,10,0,137,52,0,0,25,54,22,20,139,54,0,0,140,7,58,0,0,0,0,0,1,42,0,0,136,49,0,0,0,43,49,0,136,49,0,0,25,49,49,63,38,49,49,192,137,49,0,0,0,44,49,0,136,49,0,0,1,50,208,0,3,49,49,50,137,49,0,0,130,49,0,0,136,50,0,0,49,49,49,50,100,211,1,0,1,50,208,0,135,49,0,0,50,0,0,0,1,49,196,0,3,35,44,49,1,49,192,0,3,10,44,49,1,49,188,0,3,20,44,49,1,49,184,0,3,21,44,49,1,49,180,0,3,31,44,49,1,49,176,0,3,17,44,49,1,49,172,0,3,16,44,49,1,49,168,0,3,23,44,49,1,49,164,0,3,15,44,49,1,49,160,0,3,30,44,49,1,49,156,0,3,18,44,49,1,49,152,0,3,34,44,49,25,37,44,96,25,40,44,64,25,38,44,32,0,41,44,0,1,49,148,0,3,19,44,49,1,49,144,0,3,24,44,49,1,49,140,0,3,36,44,49,1,49,136,0,3,39,44,49,1,49,132,0,3,22,44,49,1,49,128,0,3,33,44,49,25,32,44,124,85,10,0,0,85,20,1,0,85,21,2,0,85,31,3,0,85,17,4,0,85,16,5,0,85,23,6,0,82,50,17,0,32,50,50,16,1,51,2,0,1,52,1,0,125,49,50,51,52,0,0,0,85,15,49,0,82,52,31,0,82,51,15,0,5,49,52,51,85,30,49,0,82,7,10,0,82,49,23,0,120,49,20,0,82,51,20,0,82,52,21,0,82,50,31,0,82,53,10,0,82,53,53,0,82,53,53,0,82,54,10,0,82,54,54,0,106,54,54,4,82,55,17,0,82,56,16,0,134,49,0,0,0,0,0,0,7,51,52,50,53,54,55,56,85,35,49,0,82,9,35,0,137,43,0,0,139,9,0,0,82,56,7,0,82,56,56,0,82,55,10,0,82,55,55,0,106,55,55,4,82,54,30,0,1,53,0,0,134,49,0,0,212,194,3,0,56,55,54,53,85,18,49,0,1,49,0,0,85,34,49,0,1,49,7,0,82,53,34,0,49,49,49,53,244,212,1,0,1,42,16,0,119,0,230,0,1,49,192,15,82,49,49,0,85,37,49,0,1,53,196,15,82,53,53,0,109,37,4,53,1,49,200,15,82,49,49,0,109,37,8,49,1,53,204,15,82,53,53,0,109,37,12,53,1,49,208,15,82,49,49,0,109,37,16,49,1,53,212,15,82,53,53,0,109,37,20,53,1,49,216,15,82,49,49,0,109,37,24,49,1,49,224,15,82,49,49,0,85,40,49,0,1,53,228,15,82,53,53,0,109,40,4,53,1,49,232,15,82,49,49,0,109,40,8,49,1,53,236,15,82,53,53,0,109,40,12,53,1,49,240,15,82,49,49,0,109,40,16,49,1,53,244,15,82,53,53,0,109,40,20,53,1,49,248,15,82,49,49,0,109,40,24,49,1,49,0,16,82,49,49,0,85,38,49,0,1,53,4,16,82,53,53,0,109,38,4,53,1,49,8,16,82,49,49,0,109,38,8,49,1,53,12,16,82,53,53,0,109,38,12,53,1,49,16,16,82,49,49,0,109,38,16,49,1,53,20,16,82,53,53,0,109,38,20,53,1,49,24,16,82,49,49,0,109,38,24,49,1,49,32,16,82,49,49,0,85,41,49,0,1,53,36,16,82,53,53,0,109,41,4,53,1,49,40,16,82,49,49,0,109,41,8,49,1,53,44,16,82,53,53,0,109,41,12,53,1,49,48,16,82,49,49,0,109,41,16,49,1,53,52,16,82,53,53,0,109,41,20,53,1,49,56,16,82,49,49,0,109,41,24,49,82,49,34,0,41,49,49,2,0,45,49,0,82,49,34,0,41,49,49,2,94,46,38,49,82,49,10,0,82,49,49,0,82,49,49,0,94,53,37,45,4,49,49,53,3,49,49,46,26,49,49,1,7,49,49,46,85,36,49,0,82,49,34,0,41,49,49,2,0,47,49,0,82,49,34,0,41,49,49,2,94,48,41,49,82,49,10,0,82,49,49,0,106,49,49,4,94,53,40,47,4,49,49,53,3,49,49,48,26,49,49,1,7,49,49,48,85,39,49,0,82,49,36,0,33,49,49,0,82,53,39,0,33,53,53,0,19,49,49,53,121,49,106,0,82,49,10,0,82,49,49,0,106,49,49,8,82,53,36,0,5,25,49,53,82,49,17,0,5,53,25,49,25,53,53,7,42,53,53,3,25,14,53,1,82,49,39,0,5,53,14,49,85,22,53,0,82,49,10,0,82,54,20,0,82,55,21,0,82,56,31,0,82,50,36,0,82,52,39,0,82,51,17,0,82,57,16,0,134,53,0,0,0,0,0,0,49,54,55,56,50,52,51,57,120,53,3,0,1,42,7,0,119,0,82,0,1,53,0,0,85,24,53,0,82,53,39,0,82,57,24,0,56,53,53,57,72,216,1,0,1,53,0,0,85,19,53,0,82,8,24,0,82,53,36,0,82,57,19,0,56,53,53,57,60,216,1,0,82,53,34,0,41,53,53,2,94,53,41,53,5,26,8,53,82,53,34,0,41,53,53,2,94,53,40,53,3,53,26,53,85,33,53,0,82,53,19,0,82,57,34,0,41,57,57,2,94,57,38,57,5,27,53,57,82,57,34,0,41,57,57,2,94,57,37,57,3,57,27,57,85,32,57,0,82,57,33,0,82,53,10,0,82,53,53,0,82,53,53,0,5,28,57,53,82,53,18,0,82,51,30,0,5,57,28,51,3,11,53,57,82,53,32,0,82,51,30,0,5,57,53,51,3,12,11,57,82,57,24,0,82,51,36,0,5,29,57,51,82,51,10,0,106,51,51,12,82,53,19,0,3,53,29,53,82,52,30,0,5,57,53,52,3,13,51,57,82,51,30,0,135,57,2,0,12,13,51,0,82,57,19,0,25,57,57,1,85,19,57,0,119,0,203,255,25,57,8,1,85,24,57,0,119,0,194,255,82,51,10,0,106,51,51,12,135,57,7,0,51,0,0,0,82,57,20,0,82,51,22,0,3,57,57,51,85,20,57,0,82,57,21,0,82,51,22,0,4,57,57,51,85,21,57,0,82,57,34,0,25,57,57,1,85,34,57,0,119,0,22,255,32,57,42,7,121,57,10,0,82,51,18,0,135,57,7,0,51,0,0,0,1,57,0,0,85,35,57,0,82,9,35,0,137,43,0,0,139,9,0,0,119,0,11,0,32,57,42,16,121,57,9,0,82,57,10,0,82,51,18,0,109,57,12,51,1,51,1,0,85,35,51,0,82,9,35,0,137,43,0,0,139,9,0,0,1,51,0,0,139,51,0,0,140,0,10,0,0,0,0,0,1,1,0,0,135,0,40,0,1,0,0,0,1,1,0,0,1,2,0,0,135,0,41,0,1,2,0,0,1,2,0,0,1,1,0,0,135,0,42,0,2,1,0,0,1,1,0,0,135,0,43,0,1,0,0,0,41,0,0,24,1,1,0,0,1,2,0,0,135,0,44,0,1,2,0,0,1,2,0,0,1,1,0,0,135,0,45,0,2,1,0,0,1,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,135,0,46,0,1,2,3,4,1,4,0,0,1,3,0,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,47,0,4,3,2,1,5,0,0,0,1,5,0,0,1,1,0,0,135,0,48,0,5,1,0,0,1,1,0,0,1,5,0,0,135,0,49,0,1,5,0,0,1,5,0,0,135,0,50,0,5,0,0,0,41,0,0,24,1,5,0,0,1,1,0,0,135,0,51,0,5,1,0,0,1,1,0,0,135,0,52,0,1,0,0,0,1,1,0,0,1,5,0,0,135,0,53,0,1,5,0,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,54,0,5,1,2,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,55,0,2,1,5,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,56,0,5,1,2,0,1,2,0,0,1,1,0,0,1,5,0,0,135,0,57,0,2,1,5,0,1,5,0,0,1,1,0,0,1,2,0,0,135,0,58,0,5,1,2,0,1,2,0,0,135,0,59,0,2,0,0,0,1,2,0,0,1,1,0,0,135,0,60,0,2,1,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,61,0,1,2,5,0,1,5,0,0,1,2,0,0,135,0,62,0,5,2,0,0,1,2,0,0,1,5,0,0,135,0,63,0,2,5,0,0,1,5,0,0,1,2,0,0,135,0,64,0,5,2,0,0,1,2,0,0,1,5,0,0,135,0,65,0,2,5,0,0,59,5,0,0,145,5,5,0,59,2,0,0,145,2,2,0,59,1,0,0,145,1,1,0,59,3,0,0,145,3,3,0,135,0,66,0,5,2,1,3,1,3,0,0,135,0,67,0,3,0,0,0,1,3,0,0,1,1,0,0,135,0,68,0,3,1,0,0,1,1,0,0,1,3,0,0,135,0,69,0,1,3,0,0,1,3,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,70,0,3,1,2,5,1,5,0,0,1,2,0,0,1,1,0,0,1,3,0,0,135,0,71,0,5,2,1,3,1,3,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,72,0,3,1,2,5,1,5,0,0,135,0,73,0,5,0,0,0,1,5,0,0,135,0,74,0,5,0,0,0,59,5,0,0,145,5,5,0,59,2,0,0,145,2,2,0,59,1,0,0,145,1,1,0,59,3,0,0,145,3,3,0,135,0,75,0,5,2,1,3,59,3,0,0,145,3,3,0,135,0,76,0,3,0,0,0,1,3,0,0,135,0,77,0,3,0,0,0,1,3,0,0,1,1,0,0,1,2,0,0,1,5,0,0,135,0,78,0,3,1,2,5,1,5,0,0,135,0,79,0,5,0,0,0,1,5,0,0,1,2,0,0,1,1,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,7,0,0,1,8,0,0,135,0,80,0,5,2,1,3,4,6,7,8,1,8,0,0,1,7,0,0,1,6,0,0,1,4,0,0,1,3,0,0,1,1,0,0,1,2,0,0,1,5,0,0,1,9,0,0,135,0,81,0,8,7,6,4,3,1,2,5,9,0,0,0,1,9,0,0,1,5,0,0,1,2,0,0,1,1,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,7,0,0,135,0,82,0,9,5,2,1,3,4,6,7,1,7,0,0,1,6,0,0,1,4,0,0,1,3,0,0,1,1,0,0,1,2,0,0,1,5,0,0,1,9,0,0,135,0,83,0,7,6,4,3,1,2,5,9,135,0,84,0,1,9,0,0,135,0,85,0,9,0,0,0,1,9,0,0,135,0,86,0,9,0,0,0,1,9,0,0,1,5,0,0,135,0,87,0,9,5,0,0,1,5,0,0,1,9,0,0,135,0,88,0,5,9,0,0,1,9,0,0,135,0,89,0,9,0,0,0,1,9,0,0,1,5,0,0,135,0,90,0,9,5,0,0,1,5,0,0,135,0,91,0,5,0,0,0,1,5,0,0,1,9,0,0,135,0,92,0,5,9,0,0,1,9,0,0,135,0,93,0,9,0,0,0,1,9,0,0,135,0,94,0,9,0,0,0,59,9,0,0,145,9,9,0,59,5,0,0,145,5,5,0,135,0,95,0,9,5,0,0,1,5,0,0,1,9,0,0,135,0,96,0,5,9,0,0,1,9,0,0,135,0,97,0,9,0,0,0,1,9,0,0,135,0,98,0,9,0,0,0,1,9,0,0,1,5,0,0,1,2,0,0,135,0,99,0,9,5,2,0,1,2,0,0,1,5,0,0,1,9,0,0,1,1,0,0,135,0,100,0,2,5,9,1,1,1,0,0,135,0,101,0,1,0,0,0,1,1,0,0,135,0,102,0,1,0,0,0,135,0,103,0,135,0,104,0,1,1,0,0,1,9,0,0,1,5,0,0,1,2,0,0,135,0,105,0,1,9,5,2,1,2,0,0,1,5,0,0,1,9,0,0,1,1,0,0,1,3,0,0,135,0,106,0,2,5,9,1,3,0,0,0,1,3,0,0,135,0,107,0,3,0,0,0,1,3,0,0,1,1,0,0,135,0,108,0,3,1,0,0,1,1,0,0,135,0,109,0,1,0,0,0,1,1,0,0,1,3,0,0,135,0,110,0,1,3,0,0,1,3,0,0,1,1,0,0,135,0,111,0,3,1,0,0,1,1,0,0,1,3,0,0,135,0,112,0,1,3,0,0,1,3,0,0,1,1,0,0,1,9,0,0,1,5,0,0,1,2,0,0,1,4,0,0,1,6,0,0,135,0,113,0,3,1,9,5,2,4,6,0,1,6,0,0,1,4,0,0,1,2,0,0,1,5,0,0,1,9,0,0,1,1,0,0,1,3,0,0,135,0,114,0,6,4,2,5,9,1,3,0,1,3,0,0,1,1,0,0,1,9,0,0,1,5,0,0,135,0,115,0,3,1,9,5,1,5,0,0,1,9,0,0,135,0,116,0,5,9,0,0,1,9,0,0,1,5,0,0,135,0,117,0,9,5,0,0,1,5,0,0,1,9,0,0,1,1,0,0,135,0,118,0,5,9,1,0,135,0,119,0,1,1,0,0,1,9,0,0,135,0,120,0,1,9,0,0,1,9,0,0,1,1,0,0,1,5,0,0,1,3,0,0,135,0,121,0,9,1,5,3,1,3,0,0,1,5,0,0,135,0,122,0,3,5,0,0,1,5,0,0,1,3,0,0,1,1,0,0,135,0,123,0,5,3,1,0,1,1,0,0,1,3,0,0,1,5,0,0,1,9,0,0,135,0,124,0,1,3,5,9,1,9,0,0,1,5,0,0,1,3,0,0,135,0,125,0,9,5,3,0,1,3,0,0,1,5,0,0,1,9,0,0,135,0,126,0,3,5,9,0,1,9,0,0,1,5,0,0,1,3,0,0,1,1,0,0,135,0,127,0,9,5,3,1,1,1,0,0,1,3,0,0,1,5,0,0,1,9,0,0,135,0,128,0,1,3,5,9,1,9,0,0,1,5,0,0,1,3,0,0,1,1,0,0,135,0,129,0,9,5,3,1,1,1,0,0,135,0,130,0,1,0,0,0,1,1,0,0,1,3,0,0,1,5,0,0,135,0,131,0,1,3,5,0,1,5,0,0,1,3,0,0,1,1,0,0,135,0,132,0,5,3,1,0,1,1,0,0,1,3,0,0,1,5,0,0,135,0,133,0,1,3,5,0,1,5,0,0,1,3,0,0,1,1,0,0,135,0,134,0,5,3,1,0,1,1,0,0], eb + 112640);
  HEAPU8.set([1,3,0,0,135,0,135,0,1,3,0,0,1,3,0,0,1,1,0,0,1,5,0,0,135,0,136,0,3,1,5,0,1,5,0,0,1,1,0,0,1,3,0,0,135,0,137,0,5,1,3,0,1,3,0,0,1,1,0,0,1,5,0,0,135,0,138,0,3,1,5,0,1,5,0,0,1,1,0,0,135,0,139,0,5,1,0,0,1,1,0,0,135,0,140,0,1,0,0,0,41,0,0,24,1,1,0,0,135,0,141,0,1,0,0,0,41,0,0,24,1,1,0,0,135,0,142,0,1,0,0,0,41,0,0,24,1,1,0,0,135,0,143,0,1,0,0,0,41,0,0,24,1,1,0,0,135,0,144,0,1,0,0,0,41,0,0,24,1,1,0,0,135,0,145,0,1,0,0,0,41,0,0,24,1,1,0,0,135,0,146,0,1,0,0,0,41,0,0,24,59,1,0,0,145,1,1,0,135,0,147,0,1,0,0,0,1,1,0,0,135,0,148,0,1,0,0,0,1,1,0,0,1,5,0,0,135,0,149,0,1,5,0,0,59,5,0,0,145,5,5,0,59,1,0,0,145,1,1,0,135,0,150,0,5,1,0,0,1,1,0,0,1,5,0,0,1,3,0,0,1,9,0,0,1,2,0,0,1,4,0,0,1,6,0,0,135,0,151,0,1,5,3,9,2,4,6,0,135,0,152,0,1,6,0,0,1,4,0,0,1,2,0,0,1,9,0,0,135,0,153,0,6,4,2,9,59,9,0,0,145,9,9,0,1,2,0,0,135,0,154,0,9,2,0,0,1,2,0,0,1,9,0,0,1,4,0,0,1,6,0,0,135,0,155,0,2,9,4,6,1,6,0,0,1,4,0,0,1,9,0,0,1,2,0,0,1,3,0,0,135,0,156,0,6,4,9,2,3,0,0,0,1,3,0,0,1,2,0,0,1,9,0,0,1,4,0,0,135,0,157,0,3,2,9,4,1,4,0,0,1,9,0,0,1,2,0,0,135,0,158,0,4,9,2,0,1,2,0,0,1,9,0,0,1,4,0,0,1,3,0,0,135,0,159,0,2,9,4,3,1,3,0,0,135,0,160,0,3,0,0,0,1,3,0,0,1,4,0,0,135,0,161,0,3,4,0,0,1,4,0,0,1,3,0,0,1,9,0,0,135,0,162,0,4,3,9,0,1,9,0,0,1,3,0,0,1,4,0,0,1,2,0,0,135,0,163,0,9,3,4,2,1,2,0,0,1,4,0,0,1,3,0,0,1,9,0,0,1,6,0,0,1,5,0,0,1,1,0,0,1,7,0,0,1,8,0,0,135,0,164,0,2,4,3,9,6,5,1,7,8,0,0,0,1,8,0,0,1,7,0,0,59,1,0,0,145,1,1,0,135,0,165,0,8,7,1,0,1,1,0,0,1,7,0,0,1,8,0,0,135,0,166,0,1,7,8,0,1,8,0,0,1,7,0,0,1,1,0,0,135,0,167,0,8,7,1,0,1,1,0,0,1,7,0,0,1,8,0,0,135,0,168,0,1,7,8,0,1,8,0,0,1,7,0,0,1,1,0,0,1,5,0,0,1,6,0,0,1,9,0,0,1,3,0,0,1,4,0,0,1,2,0,0,135,0,169,0,8,7,1,5,6,9,3,4,2,0,0,0,1,2,0,0,59,4,0,0,145,4,4,0,135,0,170,0,2,4,0,0,1,4,0,0,1,2,0,0,1,3,0,0,135,0,171,0,4,2,3,0,1,3,0,0,1,2,0,0,135,0,172,0,3,2,0,0,1,2,0,0,1,3,0,0,1,4,0,0,135,0,173,0,2,3,4,0,1,4,0,0,59,3,0,0,145,3,3,0,59,2,0,0,145,2,2,0,135,0,174,0,4,3,2,0,1,2,0,0,1,3,0,0,1,4,0,0,135,0,175,0,2,3,4,0,1,4,0,0,1,3,0,0,1,2,0,0,135,0,176,0,4,3,2,0,1,2,0,0,1,3,0,0,1,4,0,0,135,0,177,0,2,3,4,0,1,4,0,0,59,3,0,0,145,3,3,0,59,2,0,0,145,2,2,0,59,9,0,0,145,9,9,0,135,0,178,0,4,3,2,9,1,9,0,0,1,2,0,0,1,3,0,0,135,0,179,0,9,2,3,0,1,3,0,0,1,2,0,0,1,9,0,0,1,4,0,0,135,0,180,0,3,2,9,4,1,4,0,0,1,9,0,0,1,2,0,0,135,0,181,0,4,9,2,0,1,2,0,0,59,9,0,0,145,9,9,0,59,4,0,0,145,4,4,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,135,0,182,0,2,9,4,3,6,0,0,0,1,6,0,0,1,3,0,0,1,4,0,0,135,0,183,0,6,3,4,0,1,4,0,0,1,3,0,0,1,6,0,0,1,9,0,0,1,2,0,0,135,0,184,0,4,3,6,9,2,0,0,0,1,2,0,0,1,9,0,0,1,6,0,0,135,0,185,0,2,9,6,0,1,6,0,0,1,9,0,0,1,2,0,0,1,3,0,0,135,0,186,0,6,9,2,3,1,3,0,0,1,2,0,0,1,9,0,0,1,6,0,0,135,0,187,0,3,2,9,6,1,6,0,0,1,9,0,0,1,2,0,0,1,3,0,0,135,0,188,0,6,9,2,3,1,3,0,0,135,0,189,0,3,0,0,0,1,3,0,0,135,0,190,0,3,0,0,0,1,3,0,0,59,2,0,0,145,2,2,0,135,0,191,0,3,2,0,0,1,2,0,0,1,3,0,0,135,0,192,0,2,3,0,0,1,3,0,0,59,2,0,0,145,2,2,0,59,9,0,0,145,9,9,0,135,0,193,0,3,2,9,0,1,9,0,0,1,2,0,0,135,0,194,0,9,2,0,0,1,2,0,0,59,9,0,0,145,9,9,0,59,3,0,0,145,3,3,0,59,6,0,0,145,6,6,0,135,0,195,0,2,9,3,6,1,6,0,0,1,3,0,0,135,0,196,0,6,3,0,0,1,3,0,0,59,6,0,0,145,6,6,0,59,9,0,0,145,9,9,0,59,2,0,0,145,2,2,0,59,4,0,0,145,4,4,0,135,0,197,0,3,6,9,2,4,0,0,0,1,4,0,0,1,2,0,0,135,0,198,0,4,2,0,0,1,2,0,0,1,4,0,0,1,9,0,0,1,6,0,0,1,3,0,0,1,5,0,0,135,0,199,0,2,4,9,6,3,5,0,0,1,5,0,0,1,3,0,0,1,6,0,0,1,9,0,0,135,0,200,0,5,3,6,9,139,0,0,0,140,6,54,0,0,0,0,0,136,50,0,0,0,45,50,0,136,50,0,0,25,50,50,63,38,50,50,192,137,50,0,0,0,46,50,0,136,50,0,0,1,51,176,0,3,50,50,51,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,24,230,1,0,1,51,176,0,135,50,0,0,51,0,0,0,1,50,128,0,3,43,46,50,25,7,46,120,25,35,46,104,25,20,46,88,25,42,46,68,25,38,46,64,25,28,46,60,25,37,46,56,25,31,46,52,25,40,46,48,25,39,46,44,25,36,46,40,25,29,46,36,25,22,46,32,25,21,46,28,25,30,46,24,25,34,46,8,0,6,46,0,85,38,1,0,89,28,3,0,89,37,4,0,82,51,38,0,135,50,23,0,51,0,0,0,85,31,50,0,1,50,0,0,85,40,50,0,59,50,0,0,145,50,50,0,89,39,50,0,88,8,28,0,145,8,8,0,82,51,0,0,76,51,51,0,145,51,51,0,66,50,8,51,145,50,50,0,89,36,50,0,1,50,0,0,85,29,50,0,82,50,31,0,82,51,29,0,56,50,50,51,72,234,1,0,1,50,0,0,85,22,50,0,82,51,38,0,82,52,29,0,3,51,51,52,134,50,0,0,172,38,2,0,51,22,0,0,85,21,50,0,82,14,21,0,0,44,43,0,0,47,0,0,25,48,44,36,116,44,47,0,25,44,44,4,25,47,47,4,54,50,44,48,0,231,1,0,134,50,0,0,184,222,3,0,43,14,0,0,85,30,50,0,82,50,21,0,32,50,50,63,121,50,3,0,1,50,1,0,85,22,50,0,82,50,21,0,32,50,50,10,121,50,18,0,82,49,0,0,28,50,49,2,3,23,49,50,76,50,23,0,145,23,50,0,88,51,36,0,145,51,51,0,65,50,23,51,145,50,50,0,75,24,50,0,82,50,40,0,3,50,50,24,85,40,50,0,59,50,0,0,145,50,50,0,89,39,50,0,119,0,168,0,82,50,21,0,33,50,50,32,82,51,21,0,33,51,51,9,19,50,50,51,121,50,115,0,88,9,2,0,145,9,9,0,88,50,39,0,145,50,50,0,63,15,9,50,145,15,15,0,106,50,0,32,82,51,30,0,27,51,51,36,3,50,50,51,106,25,50,4,76,50,25,0,145,25,50,0,88,52,36,0,145,52,52,0,65,51,25,52,145,51,51,0,63,50,15,51,145,50,50,0,89,34,50,0,112,10,2,4,145,10,10,0,82,50,40,0,76,50,50,0,145,50,50,0,63,16,10,50,145,16,16,0,106,50,0,32,82,51,30,0,27,51,51,36,3,50,50,51,106,26,50,8,76,50,26,0,145,26,50,0,88,53,36,0,145,53,53,0,65,52,26,53,145,52,52,0,63,51,16,52,145,51,51,0,113,34,4,51,106,51,0,28,82,50,30,0,41,50,50,4,3,51,51,50,112,11,51,8,145,11,11,0,88,52,36,0,145,52,52,0,65,50,11,52,145,50,50,0,113,34,8,50,106,50,0,28,82,51,30,0,41,51,51,4,3,50,50,51,112,12,50,12,145,12,12,0,88,52,36,0,145,52,52,0,65,51,12,52,145,51,51,0,113,34,12,51,25,41,0,8,106,51,0,28,82,50,30,0,41,50,50,4,3,19,51,50,59,50,0,0,145,50,50,0,89,6,50,0,59,51,0,0,145,51,51,0,113,6,4,51,116,42,41,0,106,50,41,4,109,42,4,50,106,51,41,8,109,42,8,51,106,50,41,12,109,42,12,50,106,51,41,16,109,42,16,51,116,20,19,0,106,50,19,4,109,20,4,50,106,51,19,8,109,20,8,51,106,50,19,12,109,20,12,50,116,35,34,0,106,51,34,4,109,35,4,51,106,50,34,8,109,35,8,50,106,51,34,12,109,35,12,51,116,7,6,0,106,50,6,4,109,7,4,50,78,50,5,0,83,43,50,0,102,51,5,1,107,43,1,51,102,50,5,2,107,43,2,50,102,51,5,3,107,43,3,51,59,50,0,0,145,50,50,0,134,51,0,0,44,74,2,0,42,20,35,7,50,43,0,0,106,51,0,32,82,50,30,0,27,50,50,36,3,51,51,50,106,51,51,12,120,51,21,0,106,51,0,28,82,50,30,0,41,50,50,4,3,51,51,50,112,13,51,8,145,13,13,0,88,51,36,0,145,51,51,0,65,32,13,51,145,32,32,0,88,51,37,0,145,51,51,0,63,17,32,51,145,17,17,0,88,50,39,0,145,50,50,0,63,51,50,17,145,51,51,0,89,39,51,0,119,0,22,0,106,51,0,32,82,50,30,0,27,50,50,36,3,51,51,50,106,27,51,12,76,51,27,0,145,27,51,0,88,51,36,0,145,51,51,0,65,33,27,51,145,33,33,0,88,51,37,0,145,51,51,0,63,18,33,51,145,18,18,0,88,50,39,0,145,50,50,0,63,51,50,18,145,51,51,0,89,39,51,0,119,0,1,0,82,51,29,0,82,50,22,0,26,50,50,1,3,51,51,50,85,29,51,0,82,51,29,0,25,51,51,1,85,29,51,0,119,0,30,255,137,45,0,0,139,0,0,0,140,2,68,0,0,0,0,0,2,62,0,0,186,128,0,0,2,63,0,0,189,128,0,0,2,64,0,0,185,128,0,0,25,48,0,4,82,2,48,0,38,65,2,248,0,34,65,0,3,26,0,34,2,65,0,0,244,2,2,0,82,3,65,0,38,65,2,3,0,35,65,0,33,65,35,1,18,66,3,0,19,65,65,66,16,66,0,26,19,65,65,66,120,65,2,0,135,65,15,0,25,51,26,4,82,9,51,0,38,65,9,1,120,65,2,0,135,65,15,0,120,35,20,0,1,65,0,1,48,65,1,65,224,234,1,0,1,54,0,0,139,54,0,0,25,65,1,4,50,65,65,34,16,235,1,0,4,65,34,1,2,66,0,0,196,4,2,0,82,66,66,0,41,66,66,1,50,65,65,66,16,235,1,0,0,54,0,0,139,54,0,0,1,54,0,0,139,54,0,0,50,65,1,34,112,235,1,0,4,58,34,1,37,65,58,15,121,65,3,0,0,54,0,0,139,54,0,0,3,27,0,1,38,65,2,1,20,65,65,1,39,65,65,2,85,48,65,0,39,66,58,3,109,27,4,66,82,66,51,0,39,66,66,1,85,51,66,0,134,66,0,0,32,247,0,0,27,58,0,0,0,54,0,0,139,54,0,0,2,66,0,0,252,2,2,0,82,66,66,0,45,66,66,26,228,235,1,0,2,66,0,0,240,2,2,0,82,66,66,0,3,25,66,34,4,60,25,1,3,29,0,1,50,66,25,1,172,235,1,0,1,54,0,0,139,54,0,0,38,66,2,1,20,66,66,1,39,66,66,2,85,48,66,0,39,65,60,1,109,29,4,65,2,65,0,0,252,2,2,0,85,65,29,0,2,65,0,0,240,2,2,0,85,65,60,0,0,54,0,0,139,54,0,0,2,65,0,0,248,2,2,0,82,65,65,0,45,65,65,26,180,236,1,0,2,65,0,0,236,2,2,0,82,65,65,0,3,33,65,34,48,65,33,1,24,236,1,0,1,54,0,0,139,54,0,0,4,61,33,1,1,65,15,0,48,65,65,61,104,236,1,0,3,30,0,1,3,31,0,33,38,65,2,1,20,65,65,1,39,65,65,2,85,48,65,0,39,66,61,1,109,30,4,66,85,31,61,0,25,52,31,4,82,66,52,0,38,66,66,254,85,52,66,0,0,56,30,0,0,57,61,0,119,0,12,0,38,66,2,1,20,66,66,33,39,66,66,2,85,48,66,0,3,66,0,33,25,53,66,4,82,66,53,0,39,66,66,1,85,53,66,0,1,56,0,0,1,57,0,0,2,66,0,0,236,2,2,0,85,66,57,0,2,66,0,0,248,2,2,0,85,66,56,0,0,54,0,0,139,54,0,0,38,66,9,2,121,66,3,0,1,54,0,0,139,54,0,0,38,66,9,248,3,32,66,34,48,66,32,1,220,236,1,0,1,54,0,0,139,54,0,0,4,59,32,1,43,66,9,3,0,55,66,0,1,66,0,1,48,66,9,66,172,237,1,0,106,4,26,8,106,5,26,12,2,66,0,0,12,3,2,0,41,65,55,1,41,65,65,2,3,36,66,65,46,65,4,36,52,237,1,0,48,65,4,3,36,237,1,0,135,65,15,0,106,65,4,12,46,65,65,26,52,237,1,0,135,65,15,0,45,65,5,4,104,237,1,0,2,65,0,0,228,2,2,0,2,66,0,0,228,2,2,0,82,66,66,0,1,67,1,0,22,67,67,55,11,67,67,0,19,66,66,67,85,65,66,0,119,0,147,0,45,66,5,36,120,237,1,0,25,46,5,8,119,0,11,0,48,66,5,3,132,237,1,0,135,66,15,0,25,45,5,8,82,66,45,0,45,66,66,26,156,237,1,0,0,46,45,0,119,0,2,0,135,66,15,0,109,4,12,5,85,46,4,0,119,0,130,0,106,6,26,24,106,7,26,12,45,66,7,26,84,238,1,0,25,43,26,16,25,37,43,4,82,10,37,0,120,10,8,0,82,11,43,0,120,11,3,0,1,21,0,0,119,0,49,0,0,20,11,0,0,24,43,0,119,0,3,0,0,20,10,0,0,24,37,0,0,18,20,0,0,22,24,0,25,38,18,20,82,12,38,0,120,12,8,0,25,39,18,16,82,13,39,0,120,13,2,0,119,0,9,0,0,19,13,0,0,23,39,0,119,0,3,0,0,19,12,0,0,23,38,0,0,18,19,0,0,22,23,0,119,0,242,255,48,66,22,3,68,238,1,0,135,66,15,0,119,0,23,0,1,66,0,0,85,22,66,0,0,21,18,0,119,0,19,0,106,8,26,8,48,66,8,3,100,238,1,0,135,66,15,0,25,42,8,12,82,66,42,0,46,66,66,26,120,238,1,0,135,66,15,0,25,47,7,8,82,66,47,0,45,66,66,26,152,238,1,0,85,42,7,0,85,47,8,0,0,21,7,0,119,0,2,0,135,66,15,0,121,6,69,0,106,14,26,28,2,66,0,0,20,4,2,0,41,65,14,2,3,40,66,65,82,65,40,0,45,65,65,26,244,238,1,0,85,40,21,0,120,21,30,0,2,65,0,0,232,2,2,0,2,66,0,0,232,2,2,0,82,66,66,0,1,67,1,0,22,67,67,14,11,67,67,0,19,66,66,67,85,65,66,0,119,0,48,0,2,66,0,0,244,2,2,0,82,66,66,0,48,66,6,66,16,239,1,0,135,66,15,0,119,0,12,0,25,41,6,16,82,65,41,0,45,65,65,26,40,239,1,0,0,66,41,0,119,0,3,0,25,65,6,20,0,66,65,0,85,66,21,0,120,21,2,0,119,0,30,0,2,66,0,0,244,2,2,0,82,15,66,0,48,66,21,15,84,239,1,0,135,66,15,0,109,21,24,6,25,44,26,16,82,16,44,0,121,16,8,0,48,66,16,15,116,239,1,0,135,66,15,0,119,0,4,0,109,21,16,16,109,16,24,21,119,0,1,0,106,17,44,4,121,17,11,0,2,66,0,0,244,2,2,0,82,66,66,0,48,66,17,66,164,239,1,0,135,66,15,0,119,0,4,0,109,21,20,17,109,17,24,21,119,0,1,0,35,66,59,16,121,66,13,0,38,66,2,1,20,66,66,32,39,66,66,2,85,48,66,0,3,66,0,32,25,49,66,4,82,66,49,0,39,66,66,1,85,49,66,0,0,54,0,0,139,54,0,0,119,0,18,0,3,28,0,1,38,66,2,1,20,66,66,1,39,66,66,2,85,48,66,0,39,65,59,3,109,28,4,65,3,65,0,32,25,50,65,4,82,65,50,0,39,65,65,1,85,50,65,0,134,65,0,0,32,247,0,0,28,59,0,0,0,54,0,0,139,54,0,0,1,65,0,0,139,65,0,0,140,1,67,0,0,0,0,0,136,62,0,0,0,48,62,0,136,62,0,0,25,62,62,63,38,62,62,192,137,62,0,0,0,49,62,0,136,62,0,0,25,62,62,16,137,62,0,0,130,62,0,0,136,63,0,0,49,62,62,63,128,240,1,0,1,63,16,0,135,62,0,0,63,0,0,0,25,35,49,8,25,43,49,4,0,31,49,0,85,35,0,0,82,50,35,0,106,63,50,80,112,64,50,56,145,64,64,0,134,62,0,0,40,69,4,0,63,64,0,0,85,43,62,0,82,51,35,0,106,64,51,84,112,63,51,60,145,63,63,0,134,62,0,0,116,140,3,0,64,63,0,0,85,31,62,0,82,62,35,0,112,19,62,56,145,19,19,0,82,52,35,0,106,62,52,80,106,63,52,4,106,64,52,20,134,27,0,0,24,167,3,0,19,62,63,64,82,64,35,0,1,63,152,0,97,64,63,27,82,63,35,0,112,1,63,60,145,1,1,0,82,53,35,0,106,63,53,84,106,64,53,8,106,62,53,24,134,28,0,0,24,167,3,0,1,63,64,62,82,62,35,0,1,64,156,0,97,62,64,28,82,64,35,0,1,62,164,0,82,63,31,0,25,63,63,1,97,64,62,63,82,54,35,0,1,63,188,0,1,62,152,0,94,62,54,62,41,62,62,3,97,54,63,62,82,63,35,0,134,62,0,0,108,70,4,0,63,0,0,0,41,62,62,2,0,36,62,0,82,62,35,0,1,63,192,0,97,62,63,36,82,55,35,0,1,63,196,0,1,62,156,0,94,62,55,62,41,62,62,3,97,55,63,62,82,63,35,0,134,62,0,0,136,71,4,0,63,0,0,0,41,62,62,2,0,37,62,0,82,62,35,0,1,63,200,0,97,62,63,37,82,56,35,0,106,62,56,4,82,64,43,0,41,64,64,1,3,62,62,64,106,64,56,64,5,63,62,64,41,63,63,2,0,38,63,0,82,63,35,0,1,64,204,0,97,63,64,38,82,57,35,0,106,63,57,20,106,62,57,64,5,64,63,62,41,64,64,2,0,39,64,0,82,64,35,0,1,62,208,0,97,64,62,39,82,58,35,0,106,62,58,20,106,64,58,64,5,40,62,64,82,62,35,0,1,63,164,0,94,62,62,63,5,64,40,62,41,64,64,2,0,41,64,0,82,64,35,0,1,62,212,0,97,64,62,41,82,59,35,0,106,64,59,20,106,63,59,64,5,62,64,63,41,62,62,2,0,42,62,0,82,62,35,0,1,63,216,0,97,62,63,42,82,63,35,0,106,63,63,80,120,63,7,0,1,62,108,78,1,64,184,68,1,65,217,8,1,66,137,78,135,63,1,0,62,64,65,66,1,63,6,0,82,66,35,0,106,66,66,80,50,63,63,66,192,242,1,0,1,66,24,69,1,65,184,68,1,64,218,8,1,62,137,78,135,63,1,0,66,65,64,62,82,63,35,0,106,63,63,84,120,63,7,0,1,62,161,78,1,64,184,68,1,65,219,8,1,66,137,78,135,63,1,0,62,64,65,66,1,63,6,0,82,66,35,0,106,66,66,84,50,63,63,66,16,243,1,0,1,66,125,69,1,65,184,68,1,64,220,8,1,62,137,78,135,63,1,0,66,65,64,62,82,62,35,0,134,63,0,0,64,90,4,0,62,0,0,0,33,45,63,0,82,2,35,0,121,45,47,0,1,63,208,0,1,62,0,0,97,2,63,62,82,60,35,0,0,3,60,0,1,62,188,0,3,34,3,62,82,4,34,0,0,5,60,0,1,62,192,0,3,33,5,62,82,6,33,0,3,20,4,6,0,7,60,0,1,62,196,0,3,47,7,62,82,8,47,0,3,21,20,8,0,9,60,0,1,62,200,0,3,46,9,62,82,10,46,0,3,22,21,10,0,11,60,0,1,62,204,0,3,29,11,62,82,12,29,0,3,23,22,12,0,13,60,0,1,62,208,0,3,32,13,62,82,14,32,0,3,24,23,14,0,15,60,0,1,62,212,0,3,44,15,62,82,16,44,0,3,25,24,16,0,17,60,0,1,62,216,0,3,30,17,62,82,18,30,0,3,26,25,18,137,48,0,0,139,26,0,0,119,0,46,0,1,62,216,0,1,63,0,0,97,2,62,63,82,61,35,0,0,3,61,0,1,63,188,0,3,34,3,63,82,4,34,0,0,5,61,0,1,63,192,0,3,33,5,63,82,6,33,0,3,20,4,6,0,7,61,0,1,63,196,0,3,47,7,63,82,8,47,0,3,21,20,8,0,9,61,0,1,63,200,0,3,46,9,63,82,10,46,0,3,22,21,10,0,11,61,0,1,63,204,0,3,29,11,63,82,12,29,0,3,23,22,12,0,13,61,0,1,63,208,0,3,32,13,63,82,14,32,0,3,24,23,14,0,15,61,0,1,63,212,0,3,44,15,63,82,16,44,0,3,25,24,16,0,17,61,0,1,63,216,0,3,30,17,63,82,18,30,0,3,26,25,18,137,48,0,0,139,26,0,0,1,63,0,0,139,63,0,0,140,2,45,0,0,0,0,0,2,34,0,0,2,32,2,0,2,35,0,0,3,32,2,0,2,36,0,0,49,128,0,0,2,37,0,0,52,128,0,0,1,30,0,0,136,38,0,0,0,31,38,0,136,38,0,0,1,39,176,0,3,38,38,39,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,0,245,1,0,1,39,176,0,135,38,0,0,39,0,0,0,25,3,31,56,25,24,31,48,25,23,31,40,25,27,31,32,25,26,31,24,25,25,31,16,25,22,31,8,0,21,31,0,1,38,164,0,3,19,31,38,1,38,156,0,3,28,31,38,1,38,152,0,3,16,31,38,25,20,31,88,25,13,31,80,25,18,31,76,25,17,31,72,25,15,31,68,25,14,31,64,1,38,160,0,3,2,31,38,85,28,0,0,85,16,1,0,2,38,0,0,208,0,2,0,82,39,28,0,85,38,39,0,2,39,0,0,212,0,2,0,82,38,16,0,85,39,38,0,134,38,0,0,184,40,4,0,20,0,0,0,2,29,0,0,216,0,2,0,0,32,20,0,25,33,29,64,116,29,32,0,25,29,29,4,25,32,32,4,54,38,29,33,156,245,1,0,1,39,2,0,135,38,201,0,39,0,0,0,135,38,202,0,120,38,13,0,1,39,4,0,1,40,5,56,134,38,0,0,48,143,3,0,39,40,21,0,1,38,0,0,83,19,38,0,78,4,19,0,38,38,4,1,0,12,38,0,137,31,0,0,139,12,0,0,2,38,0,0,24,1,2,0,2,40,0,0,208,0,2,0,82,40,40,0,85,38,40,0,2,40,0,0,28,1,2,0,2,38,0,0,212,0,2,0,82,38,38,0,85,40,38,0,135,38,203,0,1,38,0,0,121,38,7,0,2,40,0,0,4,0,2,0,1,39,0,0,135,38,204,0,40,39,0,0,119,0,6,0,2,39,0,0,4,0,2,0,1,40,1,0,135,38,204,0,39,40,0,0,1,38,0,0,121,38,7,0,2,40,0,0,3,0,2,0,1,39,1,0,135,38,204,0,40,39,0,0,119,0,6,0,2,39,0,0,3,0,2,0,1,40,0,0,135,38,204,0,39,40,0,0,1,38,0,0,121,38,7,0,2,40,0,0,5,0,2,0,1,39,0,0,135,38,204,0,40,39,0,0,119,0,6,0,2,39,0,0,5,0,2,0,1,40,1,0,135,38,204,0,39,40,0,0,1,38,0,0,121,38,6,0,2,40,0,0,13,16,2,0,1,39,4,0,135,38,204,0,40,39,0,0,134,38,0,0,200,142,4,0,32,38,38,2,121,38,8,0,1,39,2,0,135,38,204,0,34,39,0,0,1,39,1,0,135,38,204,0,35,39,0,0,119,0,45,0,134,38,0,0,200,142,4,0,32,38,38,3,121,38,19,0,1,39,3,0,135,38,204,0,34,39,0,0,1,39,3,0,135,38,204,0,35,39,0,0,2,39,0,0,8,32,2,0,2,40,0,0,1,32,3,0,135,38,204,0,39,40,0,0,2,40,0,0,6,32,2,0,1,39,0,0,135,38,204,0,40,39,0,0,119,0,23,0,134,38,0,0,200,142,4,0,32,38,38,4,121,38,19,0,1,39,2,0,135,38,204,0,34,39,0,0,1,39,0,0,135,38,204,0,35,39,0,0,2,39,0,0,1,32,2,0,2,40,0,0,2,0,3,0,135,38,204,0,39,40,0,0,2,40,0,0,11,32,2,0,2,39,0,0,1,96,3,0,135,38,204,0,40,39,0,0,1,38,0,0,121,38,137,0,2,38,0,0,32,1,2,0,2,39,0,0,24,1,2,0,82,39,39,0,28,39,39,2,2,40,0,0,208,0,2,0,82,40,40,0,28,40,40,2,4,39,39,40,85,38,39,0,2,39,0,0,36,1,2,0,2,38,0,0,28,1,2,0,82,38,38,0,28,38,38,2,2,40,0,0,212,0,2,0,82,40,40,0,28,40,40,2,4,38,38,40,85,39,38,0,2,38,0,0,32,1,2,0,82,38,38,0,34,38,38,0,121,38,5,0,2,38,0,0,32,1,2,0,1,39,0,0,85,38,39,0,2,39,0,0,36,1,2,0,82,39,39,0,34,39,39,0,121,39,5,0,2,39,0,0,36,1,2,0,1,38,0,0,85,39,38,0,1,38,0,0,85,13,38,0,135,39,205,0,135,38,206,0,39,13,0,0,85,18,38,0,1,38,0,0,85,17,38,0,82,38,13,0,82,39,17,0,56,38,38,39,0,249,1,0,2,38,0,0,208,0,2,0,82,38,38,0,82,39,18,0,82,40,17,0,27,40,40,24,94,39,39,40,49,38,38,39,240,248,1,0,2,38,0,0,212,0,2,0,82,38,38,0,82,39,18,0,82,40,17,0,27,40,40,24,3,39,39,40,106,39,39,4,49,38,38,39,240,248,1,0,1,30,29,0,119,0,5,0,82,38,17,0,25,38,38,1,85,17,38,0,119,0,228,255,32,38,30,29,121,38,16,0,2,38,0,0,24,1,2,0,82,39,18,0,82,40,17,0,27,40,40,24,94,39,39,40,85,38,39,0,2,39,0,0,28,1,2,0,82,38,18,0,82,40,17,0,27,40,40,24,3,38,38,40,106,38,38,4,85,39,38,0,2,38,0,0,28,1,2,0,82,5,38,0,2,38,0,0,24,1,2,0,82,38,38,0,85,22,38,0,109,22,4,5,1,39,4,0,1,40,31,56,134,38,0,0,48,143,3,0,39,40,22,0,2,40,0,0,24,1,2,0,82,40,40,0,2,39,0,0,28,1,2,0,82,39,39,0,134,38,0,0,24,101,2,0,40,39,0,0,2,38,0,0,24,1,2,0,82,6,38,0,2,38,0,0,28,1,2,0,82,7,38,0,2,38,0,0,204,0,2,0,82,8,38,0,2,38,0,0,196,0,2,0,135,40,205,0,1,41,0,0,135,39,207,0,6,7,8,40,41,0,0,0,85,38,39,0,119,0,34,0,2,39,0,0,196,0,2,0,2,41,0,0,208,0,2,0,82,41,41,0,2,40,0,0,212,0,2,0,82,40,40,0,2,42,0,0,204,0,2,0,82,42,42,0,1,43,0,0,1,44,0,0,135,38,207,0,41,40,42,43,44,0,0,0,85,39,38,0,2,38,0,0,196,0,2,0,82,38,38,0,121,38,13,0,2,38,0,0,40,1,2,0,2,39,0,0,208,0,2,0,82,39,39,0,85,38,39,0,2,39,0,0,44,1,2,0,2,38,0,0,212,0,2,0,82,38,38,0,85,39,38,0,2,38,0,0,196,0,2,0,82,38,38,0,120,38,14,0,135,38,208,0,1,39,4,0,1,44,69,56,134,38,0,0,48,143,3,0,39,44,25,0,1,38,0,0,83,19,38,0,78,4,19,0,38,38,4,1,0,12,38,0,137,31,0,0,139,12,0,0,1,44,3,0,1,39,102,56,134,38,0,0,48,143,3,0,44,39,26,0,2,38,0,0,44,1,2,0,82,9,38,0,2,38,0,0,40,1,2,0,82,38,38,0,85,27,38,0,109,27,4,9,1,39,3,0,1,44,142,56,134,38,0,0,48,143,3,0,39,44,27,0,2,38,0,0,212,0,2,0,82,10,38,0,2,38,0,0,208,0,2,0,82,38,38,0,85,23,38,0,109,23,4,10,1,44,3,0,1,39,163,56,134,38,0,0,48,143,3,0,44,39,23,0,2,38,0,0,52,1,2,0,82,11,38,0,2,38,0,0,48,1,2,0,82,38,38,0,85,3,38,0,109,3,4,11,1,39,3,0,1,44,184,56,134,38,0,0,48,143,3,0,39,44,3,0,2,44,0,0,196,0,2,0,82,44,44,0,1,39,1,0,135,38,209,0,44,39,0,0,2,39,0,0,196,0,2,0,82,39,39,0,1,44,3,0,135,38,210,0,39,44,0,0,2,44,0,0,196,0,2,0,82,44,44,0,1,39,3,0,135,38,211,0,44,39,0,0,2,39,0,0,196,0,2,0,82,39,39,0,1,44,3,0,135,38,212,0,39,44,0,0,2,44,0,0,196,0,2,0,82,44,44,0,1,39,1,0,135,38,213,0,44,39,0,0,2,39,0,0,196,0,2,0,82,39,39,0,1,44,4,0,135,38,214,0,39,44,0,0,2,44,0,0,196,0,2,0,82,44,44,0,1,39,2,0,135,38,215,0,44,39,0,0,2,39,0,0,196,0,2,0,82,39,39,0,1,44,5,0,135,38,216,0,39,44,0,0,2,44,0,0,196,0,2,0,82,44,44,0,1,39,2,0,135,38,217,0,44,39,0,0,2,39,0,0,196,0,2,0,82,39,39,0,135,38,218,0,39,0,0,0,1,38,0,0,121,38,9,0,1,39,1,0,135,38,219,0,39,0,0,0,1,39,3,0,1,44,209,56,134,38,0,0,48,143,3,0,39,44,24,0,2,44,0,0,208,0,2,0,82,44,44,0,2,39,0,0,212,0,2,0,82,39,39,0,134,38,0,0,44,161,1,0,44,39,0,0,2,38,0,0,40,1,2,0,82,38,38,0,85,15,38,0,2,38,0,0,44,1,2,0,82,38,38,0,85,14,38,0,82,39,15,0,82,44,14,0,134,38,0,0,44,28,4,0,39,44,0,0,1,38,245,255,83,2,38,0,1,44,245,255,107,2,1,44,1,38,245,255,107,2,2,38,1,44,255,255,107,2,3,44,78,44,2,0,83,3,44,0,102,38,2,1,107,3,1,38,102,44,2,2,107,3,2,44,102,38,2,3,107,3,3,38,134,38,0,0,60,121,4,0,3,0,0,0,1,38,1,0,83,19,38,0,78,4,19,0,38,38,4,1,0,12,38,0,137,31,0,0,139,12,0,0,140,1,36,0,0,0,0,0,136,32,0,0,0,29,32,0,136,32,0,0,25,32,32,63,38,32,32,192,137,32,0,0,0,30,32,0,136,32,0,0,1,33,160,0,3,32,32,33,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,128,253,1,0,1,33,160,0,135,32,0,0,33,0,0,0,25,13,30,80,25,26,30,72,25,25,30,48,25,24,30,40,25,23,30,32,25,28,30,24,25,27,30,16,0,22,30,0,1,32,148,0,3,14,30,32,1,32,144,0,3,15,30,32,1,32,140,0,3,18,30,32,1,32,136,0,3,16,30,32,1,32,132,0,3,17,30,32,1,32,128,0,3,21,30,32,25,20,30,124,25,12,30,104,25,11,30,100,85,14,0,0,82,32,14,0,82,32,32,0,120,32,3,0,137,29,0,0,139,0,0,0,82,32,14,0,106,32,32,4,120,32,3,0,137,29,0,0,139,0,0,0,82,32,14,0,106,32,32,8,120,32,3,0,137,29,0,0,139,0,0,0,1,32,1,0,85,15,32,0,82,32,14,0,25,32,32,4,116,18,32,0,82,32,14,0,25,32,32,8,116,16,32,0,82,33,18,0,82,34,16,0,82,35,14,0,106,35,35,16,134,32,0,0,208,109,3,0,33,34,35,0,85,17,32,0,82,35,18,0,33,35,35,1,121,35,4,0,1,35,1,0,0,32,35,0,119,0,4,0,82,35,16,0,33,35,35,1,0,32,35,0,120,32,2,0,119,0,47,0,82,32,18,0,33,32,32,1,121,32,4,0,82,32,18,0,28,32,32,2,85,18,32,0,82,32,16,0,33,32,32,1,121,32,4,0,82,32,16,0,28,32,32,2,85,16,32,0,82,32,18,0,34,32,32,1,121,32,3,0,1,32,1,0,85,18,32,0,82,32,16,0,34,32,32,1,121,32,3,0,1,32,1,0,85,16,32,0,82,1,16,0,82,2,17,0,116,22,18,0,109,22,4,1,109,22,8,2,1,35,2,0,1,34,181,83,134,32,0,0,48,143,3,0,35,34,22,0,82,32,15,0,25,32,32,1,85,15,32,0,82,32,18,0,82,34,16,0,82,35,14,0,106,35,35,16,134,10,0,0,208,109,3,0,32,34,35,0,82,35,17,0,3,35,35,10,85,17,35,0,119,0,200,255,82,3,15,0,82,35,14,0,25,35,35,12,116,27,35,0,109,27,4,3,1,34,2,0,1,32,226,83,134,35,0,0,48,143,3,0,34,32,27,0,116,28,17,0,1,32,2,0,1,34,15,84,134,35,0,0,48,143,3,0,32,34,28,0,82,35,14,0,116,13,35,0,1,34,2,0,1,32,47,84,134,35,0,0,48,143,3,0,34,32,13,0,82,35,15,0,82,32,14,0,106,32,32,12,49,35,35,32,204,255,1,0,1,32,4,0,1,34,231,84,134,35,0,0,48,143,3,0,32,34,26,0,137,29,0,0,139,0,0,0,82,34,14,0,82,34,34,0,82,32,17,0,134,35,0,0,84,33,4,0,34,32,0,0,85,21,35,0,82,35,21,0,121,35,10,0,82,35,14,0,116,35,21,0,116,23,21,0,1,32,2,0,1,34,85,84,134,35,0,0,48,143,3,0,32,34,23,0,119,0,6,0,1,34,4,0,1,32,127,84,134,35,0,0,48,143,3,0,34,32,24,0,82,35,14,0,82,4,35,0,82,31,14,0,106,32,31,4,106,34,31,8,106,33,31,16,134,35,0,0,208,109,3,0,32,34,33,0,3,35,4,35,85,20,35,0,82,35,14,0,106,35,35,4,28,35,35,2,85,18,35,0,82,35,14,0,106,35,35,8,28,35,35,2,85,16,35,0,82,33,18,0,82,34,16,0,82,32,14,0,106,32,32,16,134,35,0,0,208,109,3,0,33,34,32,0,85,17,35,0,82,5,14,0,116,13,5,0,106,32,5,4,109,13,4,32,106,35,5,8,109,13,8,35,106,32,5,12,109,13,12,32,106,35,5,16,109,13,16,35,134,35,0,0,212,13,3,0,12,13,0,0,1,35,1,0,85,11,35,0,82,35,15,0,82,32,11,0,56,35,35,32,212,1,2,0,82,6,18,0,82,7,16,0,82,8,17,0,82,9,20,0,116,25,11,0,109,25,4,6,109,25,8,7,109,25,12,8,109,25,16,9,1,32,2,0,1,34,174,84,134,35,0,0,48,143,3,0,32,34,25,0,82,34,18,0,82,32,16,0,134,35,0,0,100,206,2,0,12,34,32,0,82,32,20,0,82,34,12,0,82,33,17,0,135,35,2,0,32,34,33,0,82,35,20,0,82,33,17,0,3,35,35,33,85,20,35,0,82,35,14,0,25,19,35,12,82,35,19,0,25,35,35,1,85,19,35,0,82,35,18,0,28,35,35,2,85,18,35,0,82,35,16,0,28,35,35,2,85,16,35,0,82,35,18,0,34,35,35,1,121,35,3,0,1,35,1,0,85,18,35,0,82,35,16,0,34,35,35,1,121,35,3,0,1,35,1,0,85,16,35,0,82,33,18,0,82,34,16,0,82,32,14,0,106,32,32,16,134,35,0,0,208,109,3,0,33,34,32,0,85,17,35,0,82,35,11,0,25,35,35,1,85,11,35,0,119,0,192,255,116,13,12,0,106,32,12,4,109,13,4,32,106,35,12,8,109,13,8,35,106,32,12,12,109,13,12,32,106,35,12,16,109,13,16,35,134,35,0,0,72,138,4,0,13,0,0,0,137,29,0,0,139,0,0,0,140,0,31,0,0,0,0,0,2,21,0,0,196,127,0,0,2,22,0,0,201,127,0,0,2,23,0,0,198,127,0,0,1,15,0,0,136,24,0,0,0,16,24,0,136,24,0,0,1,25,160,1,3,24,24,25,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,100,2,2,0,1,25,160,1,135,24,0,0,25,0,0,0,1,24,88,1,3,8,16,24,1,24,216,0,3,11,16,24,1,24,24,1,3,10,16,24,1,24,152,0,3,9,16,24,1,24,148,0,3,3,16,24,1,24,144,0,3,2,16,24,25,7,16,80,25,12,16,16,25,13,16,8,25,4,16,4,0,5,16,0,0,14,10,0,2,17,0,0,72,254,1,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,184,2,2,0,0,14,9,0,2,17,0,0,140,254,1,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,220,2,2,0,1,24,1,0,85,3,24,0,1,25,0,0,1,26,2,0,1,27,1,0,125,24,25,26,27,0,0,0,85,3,24,0,1,24,0,0,85,2,24,0,82,24,3,0,82,27,2,0,56,24,24,27,160,8,2,0,82,24,3,0,32,24,24,2,121,24,21,0,82,0,2,0,0,14,11,0,0,17,10,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,68,3,2,0,0,14,8,0,0,17,9,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,100,3,2,0,134,24,0,0,8,217,2,0,0,11,8,0,1,24,0,0,2,27,0,0,0,220,1,0,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,94,27,27,26,47,24,24,27,84,8,2,0,2,27,0,0,32,255,1,0,82,27,27,0,135,24,220,0,27,0,0,0,0,14,11,0,2,17,0,0,140,254,1,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,208,3,2,0,0,14,8,0,2,17,0,0,72,254,1,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,244,3,2,0,134,24,0,0,224,62,1,0,7,11,8,0,2,24,0,0,36,255,1,0,82,24,24,0,106,1,24,24,0,14,8,0,0,17,7,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,24,14,18,48,4,2,0,134,24,0,0,148,100,3,0,12,8,0,0,1,27,1,0,1,26,0,0,135,24,221,0,1,27,26,12,2,26,0,0,36,255,1,0,82,26,26,0,106,26,26,44,59,27,1,0,59,25,1,0,59,28,1,0,59,29,1,0,135,24,222,0,26,27,25,28,29,0,0,0,2,29,0,0,36,255,1,0,82,29,29,0,106,29,29,56,1,28,0,0,135,24,223,0,29,28,0,0,1,24,0,0,85,13,24,0,2,24,0,0,214,4,2,0,78,24,24,0,38,24,24,1,121,24,16,0,2,28,0,0,40,255,1,0,82,28,28,0,38,28,28,31,2,29,0,0,0,220,1,0,2,25,0,0,24,255,1,0,82,25,25,0,27,25,25,48,3,29,29,25,106,29,29,28,135,24,224,0,28,29,0,0,119,0,106,0,2,28,0,0,146,136,0,0,2,29,0,0,0,220,1,0,2,25,0,0,24,255,1,0,82,25,25,0,27,25,25,48,3,29,29,25,106,29,29,32,135,24,225,0,28,29,0,0,2,29,0,0,36,255,1,0,82,29,29,0,82,29,29,0,1,28,3,0,1,25,6,20,1,27,0,0,1,26,0,0,1,30,0,0,135,24,226,0,29,28,25,27,26,30,0,0,2,30,0,0,36,255,1,0,82,30,30,0,82,30,30,0,135,24,227,0,30,0,0,0,2,30,0,0,146,136,0,0,2,26,0,0,0,220,1,0,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,26,26,27,25,26,26,32,106,26,26,4,135,24,225,0,30,26,0,0,2,26,0,0,36,255,1,0,82,26,26,0,106,26,26,4,1,30,2,0,1,27,6,20,1,25,0,0,1,28,0,0,1,29,0,0,135,24,226,0,26,30,27,25,28,29,0,0,2,29,0,0,36,255,1,0,82,29,29,0,106,29,29,4,135,24,227,0,29,0,0,0,2,29,0,0,146,136,0,0,2,28,0,0,0,220,1,0,2,25,0,0,24,255,1,0,82,25,25,0,27,25,25,48,3,28,28,25,25,28,28,32,106,28,28,8,135,24,225,0,29,28,0,0,2,28,0,0,36,255,1,0,82,28,28,0,106,28,28,20,1,29,4,0,1,25,1,20,1,27,1,0,1,30,0,0,1,26,0,0,135,24,226,0,28,29,25,27,30,26,0,0,2,26,0,0,36,255,1,0,82,26,26,0,106,26,26,20,135,24,227,0,26,0,0,0,2,26,0,0,147,136,0,0,2,30,0,0,0,220,1,0,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,30,30,27,25,30,30,32,106,30,30,12,135,24,225,0,26,30,0,0,2,30,0,0,192,132,0,0,135,24,228,0,30,0,0,0,1,24,0,0,85,4,24,0,2,24,0,0,20,255,1,0,82,24,24,0,82,30,4,0,56,24,24,30,8,8,2,0,1,30,225,13,2,26,0,0,16,255,1,0,82,26,26,0,82,27,4,0,41,27,27,4,3,26,26,27,106,26,26,12,135,24,229,0,30,26,0,0,2,24,0,0,16,255,1,0,82,24,24,0,82,26,4,0,41,26,26,4,94,24,24,26,32,24,24,1,121,24,3,0,1,15,13,0,119,0,28,0,2,24,0,0,16,255,1,0,82,24,24,0,82,26,4,0,41,26,26,4,94,24,24,26,32,24,24,4,121,24,3,0,1,15,13,0,119,0,18,0,1,26,4,0,2,30,0,0,16,255,1,0,82,30,30,0,82,27,4,0,41,27,27,4,3,30,30,27,106,30,30,4,28,30,30,4,27,30,30,6,1,27,3,20,82,25,13,0,41,25,25,1,29,25,25,4,27,25,25,6,135,24,230,0,26,30,27,25,32,24,15,13,121,24,13,0,1,15,0,0,2,24,0,0,16,255,1,0,82,24,24,0,82,25,4,0,41,25,25,4,3,20,24,25,82,24,20,0,82,27,13,0,106,30,20,4,135,25,231,0,24,27,30,0,2,25,0,0,16,255,1,0,82,25,25,0,82,30,4,0,41,30,30,4,3,19,25,30,82,30,13,0,106,25,19,4,106,27,19,8,3,25,25,27,3,30,30,25,85,13,30,0,82,30,4,0,25,30,30,1], eb + 122880);
  HEAPU8.set([85,4,30,0,119,0,174,255,2,30,0,0,214,4,2,0,78,30,30,0,38,30,30,1,120,30,11,0,2,25,0,0,146,136,0,0,1,27,0,0,135,30,225,0,25,27,0,0,2,27,0,0,147,136,0,0,1,25,0,0,135,30,225,0,27,25,0,0,1,25,225,13,1,27,0,0,135,30,229,0,25,27,0,0,2,30,0,0,214,4,2,0,78,30,30,0,38,30,30,1,121,30,8,0,2,27,0,0,40,255,1,0,82,27,27,0,38,27,27,31,1,25,0,0,135,30,224,0,27,25,0,0,1,27,0,0,135,30,220,0,27,0,0,0,82,30,2,0,25,30,30,1,85,2,30,0,119,0,159,254,2,30,0,0,0,220,1,0,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,1,25,0,0,97,30,27,25,2,25,0,0,0,220,1,0,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,25,25,27,1,27,0,0,109,25,4,27,2,27,0,0,0,220,1,0,2,25,0,0,24,255,1,0,82,25,25,0,27,25,25,48,3,27,27,25,1,25,0,0,109,27,8,25,1,25,36,38,59,27,255,255,145,27,27,0,89,25,27,0,2,14,0,0,72,254,1,0,0,17,10,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,27,14,18,40,9,2,0,2,14,0,0,140,254,1,0,0,17,9,0,25,18,14,64,116,14,17,0,25,14,14,4,25,17,17,4,54,27,14,18,76,9,2,0,1,27,0,0,85,5,27,0,1,27,0,1,82,25,5,0,56,27,27,25,236,9,2,0,2,27,0,0,16,255,1,0,82,27,27,0,82,25,5,0,41,25,25,4,1,30,7,0,97,27,25,30,2,30,0,0,16,255,1,0,82,30,30,0,82,25,5,0,41,25,25,4,3,30,30,25,1,25,0,0,109,30,4,25,2,25,0,0,16,255,1,0,82,25,25,0,82,30,5,0,41,30,30,4,3,25,25,30,2,30,0,0,28,255,1,0,82,30,30,0,109,25,12,30,82,30,5,0,25,30,30,1,85,5,30,0,119,0,224,255,2,30,0,0,20,255,1,0,1,25,1,0,85,30,25,0,2,25,0,0,24,255,1,0,82,25,25,0,25,6,25,1,2,25,0,0,24,255,1,0,85,25,6,0,2,25,0,0,24,255,1,0,1,27,1,0,2,24,0,0,24,255,1,0,82,24,24,0,17,27,27,24,1,24,0,0,125,30,27,24,6,0,0,0,85,25,30,0,137,16,0,0,139,0,0,0,140,5,49,0,0,0,0,0,2,42,0,0,225,13,0,0,136,43,0,0,0,41,43,0,136,43,0,0,1,44,160,0,3,43,43,44,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,144,10,2,0,1,44,160,0,135,43,0,0,44,0,0,0,25,37,41,88,25,36,41,72,25,35,41,48,25,34,41,40,25,33,41,32,25,32,41,24,25,39,41,16,25,38,41,8,0,31,41,0,1,43,148,0,3,30,41,43,1,43,144,0,3,17,41,43,1,43,140,0,3,40,41,43,1,43,136,0,3,22,41,43,1,43,132,0,3,18,41,43,1,43,128,0,3,29,41,43,25,24,41,124,25,28,41,120,25,25,41,116,25,26,41,112,25,23,41,108,25,27,41,104,25,20,41,100,25,19,41,96,25,21,41,92,85,17,0,0,85,40,1,0,85,22,2,0,85,18,3,0,85,29,4,0,1,44,0,0,135,43,229,0,42,44,0,0,1,43,0,0,85,24,43,0,2,43,0,0,218,4,2,0,78,43,43,0,38,43,43,1,120,43,22,0,82,43,18,0,32,43,43,11,82,44,18,0,32,44,44,12,20,43,43,44,82,44,18,0,32,44,44,13,20,43,43,44,82,44,18,0,32,44,44,14,20,43,43,44,121,43,10,0,1,44,4,0,1,45,23,53,134,43,0,0,48,143,3,0,44,45,31,0,116,30,24,0,82,16,30,0,137,41,0,0,139,16,0,0,2,43,0,0,219,4,2,0,78,43,43,0,38,43,43,1,40,43,43,1,82,45,18,0,32,45,45,15,19,43,43,45,121,43,10,0,1,45,4,0,1,44,67,53,134,43,0,0,48,143,3,0,45,44,38,0,116,30,24,0,82,16,30,0,137,41,0,0,139,16,0,0,2,43,0,0,220,4,2,0,78,43,43,0,38,43,43,1,120,43,16,0,82,43,18,0,32,43,43,16,82,44,18,0,32,44,44,17,20,43,43,44,121,43,10,0,1,44,4,0,1,45,112,53,134,43,0,0,48,143,3,0,44,45,39,0,116,30,24,0,82,16,30,0,137,41,0,0,139,16,0,0,2,43,0,0,221,4,2,0,78,43,43,0,38,43,43,1,120,43,16,0,82,43,18,0,32,43,43,18,82,45,18,0,32,45,45,19,20,43,43,45,121,43,10,0,1,45,4,0,1,44,157,53,134,43,0,0,48,143,3,0,45,44,32,0,116,30,24,0,82,16,30,0,137,41,0,0,139,16,0,0,2,43,0,0,222,4,2,0,78,43,43,0,38,43,43,1,120,43,16,0,82,43,18,0,32,43,43,20,82,44,18,0,32,44,44,21,20,43,43,44,121,43,10,0,1,44,4,0,1,45,202,53,134,43,0,0,48,143,3,0,44,45,33,0,116,30,24,0,82,16,30,0,137,41,0,0,139,16,0,0,1,45,245,12,1,44,1,0,135,43,232,0,45,44,0,0,1,44,1,0,135,43,233,0,44,24,0,0,82,44,24,0,135,43,229,0,42,44,0,0,116,28,40,0,116,25,22,0,1,43,0,0,85,26,43,0,116,34,17,0,1,44,2,0,1,45,247,53,134,43,0,0,48,143,3,0,44,45,34,0,1,43,0,0,85,23,43,0,82,43,29,0,82,45,23,0,56,43,43,45,116,14,2,0,82,45,28,0,82,44,25,0,82,46,18,0,134,43,0,0,208,109,3,0,45,44,46,0,85,27,43,0,82,46,18,0,134,43,0,0,208,113,2,0,46,20,19,21,82,5,28,0,82,6,25,0,82,7,27,0,82,8,26,0,116,35,23,0,109,35,4,5,109,35,8,6,109,35,12,7,109,35,16,8,1,46,2,0,1,44,35,54,134,43,0,0,48,143,3,0,46,44,35,0,82,43,20,0,33,43,43,255,121,43,28,0,82,9,23,0,82,10,20,0,82,11,28,0,82,12,25,0,82,43,18,0,34,43,43,11,121,43,12,0,1,44,0,0,82,46,19,0,82,45,21,0,82,47,17,0,82,48,26,0,3,47,47,48,135,43,234,0,42,9,10,11,12,44,46,45,47,0,0,0,119,0,10,0,1,47,0,0,82,45,27,0,82,46,17,0,82,44,26,0,3,46,46,44,135,43,235,0,42,9,10,11,12,47,45,46,119,0,1,0,82,43,28,0,28,43,43,2,85,28,43,0,82,43,25,0,28,43,43,2,85,25,43,0,82,43,26,0,82,46,27,0,3,43,43,46,85,26,43,0,82,43,28,0,34,43,43,1,121,43,3,0,1,43,1,0,85,28,43,0,82,43,25,0,34,43,43,1,121,43,3,0,1,43,1,0,85,25,43,0,82,43,23,0,25,43,43,1,85,23,43,0,119,0,174,255,2,43,0,0,216,4,2,0,78,43,43,0,38,43,43,1,121,43,10,0,1,46,2,40,1,45,1,41,135,43,236,0,42,46,45,0,1,45,3,40,1,46,1,41,135,43,236,0,42,45,46,0,119,0,11,0,1,46,2,40,2,45,0,0,47,129,0,0,135,43,236,0,42,46,45,0,1,45,3,40,2,46,0,0,47,129,0,0,135,43,236,0,42,45,46,0,1,46,0,40,1,45,0,38,135,43,236,0,42,46,45,0,1,45,1,40,1,46,0,38,135,43,236,0,42,45,46,0,1,46,0,0,135,43,229,0,42,46,0,0,1,43,0,0,82,46,24,0,48,43,43,46,68,15,2,0,82,13,40,0,82,14,22,0,82,15,29,0,116,36,24,0,109,36,4,13,109,36,8,14,109,36,12,15,1,46,3,0,1,45,88,54,134,43,0,0,48,143,3,0,46,45,36,0,119,0,6,0,1,45,4,0,1,46,191,81,134,43,0,0,48,143,3,0,45,46,37,0,116,30,24,0,82,16,30,0,137,41,0,0,139,16,0,0,140,2,25,0,0,0,0,0,136,23,0,0,0,22,23,0,136,23,0,0,1,24,144,0,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,164,15,2,0,1,24,144,0,135,23,0,0,24,0,0,0,1,23,128,0,3,13,22,23,25,11,22,112,25,6,22,96,25,9,22,80,25,7,22,64,25,8,22,48,25,10,22,32,25,12,22,16,25,17,22,8,0,18,22,0,59,23,165,0,145,23,23,0,89,6,23,0,59,24,85,0,145,24,24,0,113,6,4,24,59,23,165,0,145,23,23,0,113,6,8,23,59,24,35,0,145,24,24,0,113,6,12,24,116,11,0,0,106,23,0,4,109,11,4,23,106,24,0,8,109,11,8,24,106,23,0,12,109,11,12,23,116,13,6,0,106,24,6,4,109,13,4,24,106,23,6,8,109,13,8,23,106,24,6,12,109,13,12,24,134,24,0,0,112,199,3,0,11,13,0,0,121,24,3,0,1,4,1,0,119,0,158,0,59,24,39,1,145,24,24,0,89,9,24,0,59,23,210,0,145,23,23,0,113,9,4,23,59,24,35,0,145,24,24,0,113,9,8,24,59,23,160,0,145,23,23,0,113,9,12,23,116,11,0,0,106,24,0,4,109,11,4,24,106,23,0,8,109,11,8,23,106,24,0,12,109,11,12,24,116,13,9,0,106,23,9,4,109,13,4,23,106,24,9,8,109,13,8,24,106,23,9,12,109,13,12,23,134,23,0,0,112,199,3,0,11,13,0,0,121,23,3,0,1,4,1,0,119,0,126,0,59,23,144,1,145,23,23,0,89,7,23,0,59,24,80,1,145,24,24,0,113,7,4,24,59,23,140,0,145,23,23,0,113,7,8,23,59,24,35,0,145,24,24,0,113,7,12,24,116,11,0,0,106,23,0,4,109,11,4,23,106,24,0,8,109,11,8,24,106,23,0,12,109,11,12,23,116,13,7,0,106,24,7,4,109,13,4,24,106,23,7,8,109,13,8,23,106,24,7,12,109,13,12,24,134,24,0,0,112,199,3,0,11,13,0,0,121,24,3,0,1,4,1,0,119,0,94,0,59,24,251,1,145,24,24,0,89,8,24,0,59,23,185,0,145,23,23,0,113,8,4,23,59,24,35,0,145,24,24,0,113,8,8,24,59,23,185,0,145,23,23,0,113,8,12,23,116,11,0,0,106,24,0,4,109,11,4,24,106,23,0,8,109,11,8,23,106,24,0,12,109,11,12,24,116,13,8,0,106,23,8,4,109,13,4,23,106,24,8,8,109,13,8,24,106,23,8,12,109,13,12,23,134,23,0,0,112,199,3,0,11,13,0,0,121,23,3,0,1,4,1,0,119,0,62,0,106,16,1,4,0,2,16,0,45,23,1,2,232,17,2,0,1,4,0,0,119,0,56,0,25,20,12,4,25,21,18,4,25,19,12,8,25,14,12,12,0,3,2,0,0,15,16,0,116,10,0,0,106,24,0,4,109,10,4,24,106,23,0,8,109,10,8,23,106,24,0,12,109,10,12,24,25,5,15,8,134,24,0,0,124,117,4,0,17,5,0,0,116,12,17,0,134,24,0,0,124,117,4,0,18,5,0,0,116,20,21,0,59,24,32,0,145,24,24,0,89,19,24,0,59,24,32,0,145,24,24,0,89,14,24,0,116,11,10,0,106,23,10,4,109,11,4,23,106,24,10,8,109,11,8,24,106,23,10,12,109,11,12,23,116,13,12,0,106,24,12,4,109,13,4,24,106,23,12,8,109,13,8,23,106,24,12,12,109,13,12,24,134,24,0,0,112,199,3,0,11,13,0,0,121,24,3,0,1,4,1,0,119,0,8,0,106,15,3,4,0,3,15,0,45,24,1,3,192,18,2,0,1,4,0,0,119,0,2,0,119,0,208,255,137,22,0,0,139,4,0,0,140,8,38,0,0,0,0,0,2,31,0,0,0,0,32,0,2,32,0,0,255,15,0,0,2,33,0,0,255,0,0,0,136,34,0,0,0,30,34,0,136,34,0,0,1,35,80,1,3,34,34,35,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,32,19,2,0,1,35,80,1,135,34,0,0,35,0,0,0,1,34,68,1,3,15,30,34,1,34,64,1,3,17,30,34,1,34,60,1,3,19,30,34,1,34,56,1,3,26,30,34,1,34,52,1,3,27,30,34,1,34,48,1,3,16,30,34,1,34,44,1,3,14,30,34,1,34,40,1,3,24,30,34,1,34,36,1,3,21,30,34,1,34,32,1,3,10,30,34,1,34,28,1,3,12,30,34,1,34,24,1,3,13,30,34,1,34,20,1,3,11,30,34,1,34,16,1,3,20,30,34,25,25,30,8,25,29,30,4,0,28,30,0,1,34,72,1,3,23,30,34,85,15,0,0,85,17,1,0,85,19,2,0,85,26,3,0,85,27,4,0,85,16,5,0,85,14,6,0,85,24,7,0,1,35,33,0,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,1,36,249,0,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,1,35,4,0,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,1,36,5,0,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,82,35,14,0,19,35,35,33,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,82,36,14,0,43,36,36,8,19,36,36,33,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,1,35,0,0,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,1,36,0,0,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,1,35,44,0,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,82,36,19,0,19,36,36,33,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,82,35,19,0,43,35,35,8,19,35,35,33,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,82,36,26,0,19,36,36,33,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,82,35,26,0,43,35,35,8,19,35,35,33,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,82,36,27,0,19,36,36,33,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,82,35,27,0,43,35,35,8,19,35,35,33,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,82,36,16,0,19,36,36,33,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,82,35,16,0,43,35,35,8,19,35,35,33,82,36,15,0,134,34,0,0,192,196,3,0,35,36,0,0,1,36,128,0,82,35,24,0,82,35,35,0,3,36,36,35,26,36,36,1,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,82,35,15,0,82,36,24,0,134,34,0,0,88,177,3,0,35,36,0,0,82,34,24,0,116,21,34,0,1,34,1,0,82,36,24,0,82,36,36,0,22,34,34,36,85,10,34,0,82,36,21,0,82,35,15,0,134,34,0,0,192,196,3,0,36,35,0,0,135,34,10,0,31,0,0,0,85,12,34,0,82,35,12,0,1,36,0,0,135,34,5,0,35,36,31,0,1,34,255,255,85,13,34,0,82,34,21,0,25,34,34,1,85,11,34,0,82,34,10,0,25,34,34,1,85,20,34,0,1,36,0,0,107,25,1,36,1,36,0,0,83,25,36,0,1,34,0,0,109,25,4,34,82,36,15,0,82,35,10,0,82,37,11,0,134,34,0,0,216,214,3,0,36,25,35,37,1,34,0,0,85,29,34,0,82,34,16,0,82,37,29,0,57,34,34,37,180,23,2,0,1,34,0,0,85,28,34,0,82,34,27,0,82,37,28,0,57,34,34,37,164,23,2,0,82,34,29,0,82,37,27,0,5,22,34,37,82,37,17,0,82,34,28,0,3,34,22,34,41,34,34,2,25,34,34,3,90,37,37,34,83,23,37,0,82,37,13,0,34,37,37,0,121,37,4,0,79,37,23,0,85,13,37,0,119,0,64,0,82,37,12,0,82,34,13,0,41,34,34,9,3,37,37,34,79,34,23,0,41,34,34,1,92,37,37,34,121,37,10,0,82,37,12,0,82,34,13,0,41,34,34,9,3,37,37,34,79,34,23,0,41,34,34,1,93,37,37,34,85,13,37,0,119,0,47,0,82,34,15,0,82,35,13,0,82,36,11,0,134,37,0,0,216,214,3,0,34,25,35,36,82,37,20,0,25,18,37,1,85,20,18,0,82,37,12,0,82,36,13,0,41,36,36,9,3,37,37,36,79,36,23,0,41,36,36,1,96,37,36,18,1,36,1,0,82,37,11,0,22,36,36,37,82,37,20,0,50,36,36,37,64,23,2,0,82,36,11,0,25,36,36,1,85,11,36,0,82,36,20,0,45,36,36,32,140,23,2,0,82,37,15,0,82,35,10,0,82,34,11,0,134,36,0,0,216,214,3,0,37,25,35,34,82,34,12,0,1,35,0,0,135,36,5,0,34,35,31,0,82,36,21,0,25,36,36,1,85,11,36,0,82,36,10,0,25,36,36,1,85,20,36,0,79,36,23,0,85,13,36,0,82,36,28,0,25,36,36,1,85,28,36,0,119,0,170,255,82,36,29,0,25,36,36,1,85,29,36,0,119,0,160,255,82,35,15,0,82,34,13,0,82,37,11,0,134,36,0,0,216,214,3,0,35,25,34,37,82,37,15,0,82,34,10,0,82,35,11,0,134,36,0,0,216,214,3,0,37,25,34,35,82,35,15,0,82,34,10,0,25,34,34,1,82,37,21,0,25,37,37,1,134,36,0,0,216,214,3,0,35,25,34,37,78,36,25,0,120,36,2,0,119,0,6,0,1,37,0,0,134,36,0,0,60,186,3,0,25,37,0,0,119,0,249,255,106,36,25,4,120,36,11,0,82,8,15,0,1,37,0,0,134,36,0,0,192,196,3,0,37,8,0,0,82,9,12,0,135,36,7,0,9,0,0,0,137,30,0,0,139,0,0,0,82,37,15,0,134,36,0,0,184,48,4,0,37,25,0,0,82,8,15,0,1,37,0,0,134,36,0,0,192,196,3,0,37,8,0,0,82,9,12,0,135,36,7,0,9,0,0,0,137,30,0,0,139,0,0,0,140,3,62,0,0,0,0,0,136,58,0,0,0,55,58,0,136,58,0,0,25,58,58,112,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,196,24,2,0,1,59,112,0,135,58,0,0,59,0,0,0,25,25,55,96,25,48,55,32,25,51,55,24,25,52,55,20,25,53,55,16,25,28,55,12,25,49,55,8,25,27,55,4,0,50,55,0,89,25,2,0,0,54,48,0,25,57,54,64,1,58,0,0,85,54,58,0,25,54,54,4,54,58,54,57,244,24,2,0,88,58,1,0,145,58,58,0,89,51,58,0,112,58,1,4,145,58,58,0,89,52,58,0,112,58,1,8,145,58,58,0,89,53,58,0,88,8,51,0,145,8,8,0,88,58,51,0,145,58,58,0,65,29,8,58,145,29,29,0,88,16,52,0,145,16,16,0,88,59,52,0,145,59,59,0,65,58,16,59,145,58,58,0,63,24,29,58,145,24,24,0,88,23,53,0,145,23,23,0,88,61,53,0,145,61,61,0,65,60,23,61,145,60,60,0,63,59,24,60,145,59,59,0,135,58,237,0,59,0,0,0,145,58,58,0,89,28,58,0,88,58,28,0,145,58,58,0,59,59,1,0,145,59,59,0,70,26,58,59,88,59,28,0,145,59,59,0,59,58,0,0,145,58,58,0,70,59,59,58,19,59,26,59,121,59,29,0,59,58,1,0,145,58,58,0,88,60,28,0,145,60,60,0,66,59,58,60,145,59,59,0,89,28,59,0,88,3,28,0,145,3,3,0,88,60,51,0,145,60,60,0,65,59,60,3,145,59,59,0,89,51,59,0,88,4,28,0,145,4,4,0,88,60,52,0,145,60,60,0,65,59,60,4,145,59,59,0,89,52,59,0,88,5,28,0,145,5,5,0,88,60,53,0,145,60,60,0,65,59,60,5,145,59,59,0,89,53,59,0,88,60,25,0,145,60,60,0,135,59,19,0,60,0,0,0,145,59,59,0,89,49,59,0,88,60,25,0,145,60,60,0,135,59,20,0,60,0,0,0,145,59,59,0,89,27,59,0,59,60,1,0,145,60,60,0,88,58,27,0,145,58,58,0,64,59,60,58,145,59,59,0,89,50,59,0,88,6,51,0,145,6,6,0,88,59,51,0,145,59,59,0,65,30,6,59,145,30,30,0,88,59,50,0,145,59,59,0,65,31,30,59,145,31,31,0,88,58,27,0,145,58,58,0,63,59,31,58,145,59,59,0,89,48,59,0,88,7,52,0,145,7,7,0,88,59,51,0,145,59,59,0,65,32,7,59,145,32,32,0,88,59,50,0,145,59,59,0,65,33,32,59,145,33,33,0,88,9,53,0,145,9,9,0,88,61,49,0,145,61,61,0,65,60,9,61,145,60,60,0,63,58,33,60,145,58,58,0,113,48,16,58,88,10,53,0,145,10,10,0,88,58,51,0,145,58,58,0,65,34,10,58,145,34,34,0,88,58,50,0,145,58,58,0,65,35,34,58,145,35,35,0,88,11,52,0,145,11,11,0,88,61,49,0,145,61,61,0,65,60,11,61,145,60,60,0,64,59,35,60,145,59,59,0,113,48,32,59,59,58,0,0,145,58,58,0,113,48,48,58,88,12,51,0,145,12,12,0,88,58,52,0,145,58,58,0,65,36,12,58,145,36,36,0,88,58,50,0,145,58,58,0,65,37,36,58,145,37,37,0,88,13,53,0,145,13,13,0,88,61,49,0,145,61,61,0,65,60,13,61,145,60,60,0,64,59,37,60,145,59,59,0,113,48,4,59,88,14,52,0,145,14,14,0,88,59,52,0,145,59,59,0,65,38,14,59,145,38,38,0,88,59,50,0,145,59,59,0,65,39,38,59,145,39,39,0,88,60,27,0,145,60,60,0,63,58,39,60,145,58,58,0,113,48,20,58,88,15,53,0,145,15,15,0,88,58,52,0,145,58,58,0,65,40,15,58,145,40,40,0,88,58,50,0,145,58,58,0,65,41,40,58,145,41,41,0,88,17,51,0,145,17,17,0,88,61,49,0,145,61,61,0,65,60,17,61,145,60,60,0,63,59,41,60,145,59,59,0,113,48,36,59,59,58,0,0,145,58,58,0,113,48,52,58,88,18,51,0,145,18,18,0,88,58,53,0,145,58,58,0,65,42,18,58,145,42,42,0,88,58,50,0,145,58,58,0,65,43,42,58,145,43,43,0,88,19,52,0,145,19,19,0,88,61,49,0,145,61,61,0,65,60,19,61,145,60,60,0,63,59,43,60,145,59,59,0,113,48,8,59,88,20,52,0,145,20,20,0,88,59,53,0,145,59,59,0,65,44,20,59,145,44,44,0,88,59,50,0,145,59,59,0,65,45,44,59,145,45,45,0,88,21,51,0,145,21,21,0,88,61,49,0,145,61,61,0,65,60,21,61,145,60,60,0,64,58,45,60,145,58,58,0,113,48,24,58,88,22,53,0,145,22,22,0,88,58,53,0,145,58,58,0,65,46,22,58,145,46,46,0,88,58,50,0,145,58,58,0,65,47,46,58,145,47,47,0,88,60,27,0,145,60,60,0,63,59,47,60,145,59,59,0,113,48,40,59,59,58,0,0,145,58,58,0,113,48,56,58,59,59,0,0,145,59,59,0,113,48,12,59,59,58,0,0,145,58,58,0,113,48,28,58,59,59,0,0,145,59,59,0,113,48,44,59,59,58,1,0,145,58,58,0,113,48,60,58,0,54,0,0,0,56,48,0,25,57,54,64,116,54,56,0,25,54,54,4,25,56,56,4,54,58,54,57,92,29,2,0,137,55,0,0,139,0,0,0,140,7,39,0,0,0,0,0,1,31,0,0,136,34,0,0,0,32,34,0,136,34,0,0,25,34,34,63,38,34,34,192,137,34,0,0,0,33,34,0,136,34,0,0,25,34,34,48,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,200,29,2,0,1,35,48,0,135,34,0,0,35,0,0,0,25,18,33,40,25,26,33,36,25,22,33,32,25,23,33,28,25,21,33,24,25,14,33,20,25,13,33,16,25,20,33,12,25,30,33,8,25,19,33,4,0,24,33,0,85,18,0,0,89,26,1,0,85,22,2,0,85,23,3,0,89,21,4,0,85,14,5,0,85,13,6,0,59,34,0,0,145,34,34,0,89,30,34,0,82,34,23,0,82,35,22,0,4,27,34,35,59,35,1,0,145,35,35,0,88,34,26,0,145,34,34,0,66,15,35,34,145,15,15,0,1,37,192,24,82,38,18,0,41,38,38,3,3,37,37,38,106,37,37,4,38,37,37,7,135,36,238,0,37,15,0,0,145,36,36,0,59,37,2,0,145,37,37,0,65,35,36,37,145,35,35,0,135,34,18,0,35,0,0,0,75,34,34,0,47,34,34,27,160,30,2,0,1,35,209,76,1,37,184,68,1,36,19,4,1,38,52,77,135,34,1,0,35,37,36,38,82,34,14,0,116,34,22,0,82,34,14,0,82,38,23,0,109,34,4,38,82,38,14,0,106,38,38,4,82,34,14,0,82,34,34,0,47,38,38,34,228,30,2,0,1,34,61,76,1,36,184,68,1,37,24,4,1,35,52,77,135,38,1,0,34,36,37,35,1,38,0,0,85,20,38,0,82,38,23,0,82,35,22,0,4,38,38,35,82,35,20,0,54,38,38,35,48,32,2,0,82,37,20,0,82,36,22,0,3,35,37,36,76,35,35,0,145,35,35,0,61,36,0,0,0,0,0,63,145,36,36,0,63,38,35,36,145,38,38,0,89,24,38,0,88,7,21,0,145,7,7,0,88,38,24,0,145,38,38,0,64,28,7,38,145,28,28,0,59,38,1,0,145,38,38,0,88,36,26,0,145,36,36,0,66,16,38,36,145,16,16,0,1,36,192,24,82,38,18,0,41,38,38,3,94,36,36,38,38,36,36,7,135,12,239,0,36,28,16,0,145,12,12,0,82,36,13,0,82,38,20,0,41,38,38,2,101,36,38,12,82,38,20,0,120,38,21,0,82,36,13,0,82,35,20,0,41,35,35,2,100,38,36,35,145,38,38,0,59,36,0,0,145,36,36,0,70,38,38,36,121,38,3,0,1,31,10,0,119,0,11,0,82,38,22,0,25,25,38,1,85,22,25,0,82,38,14,0,85,38,25,0,82,38,20,0,26,38,38,1,85,20,38,0,119,0,2,0,1,31,10,0,32,38,31,10,121,38,12,0,1,31,0,0,82,38,13,0,82,36,20,0,41,36,36,2,100,8,38,36,145,8,8,0,88,36,30,0,145,36,36,0,63,38,36,8,145,38,38,0,89,30,38,0,82,38,20,0,25,38,38,1,85,20,38,0,119,0,176,255,82,36,23,0,25,38,36,1,76,38,38,0,145,38,38,0,61,36,0,0,0,0,0,63,145,36,36,0,63,10,38,36,145,10,10,0,88,36,21,0,145,36,36,0,64,29,10,36,145,29,29,0,59,36,1,0,145,36,36,0,88,38,26,0,145,38,38,0,66,17,36,38,145,17,17,0,1,36,192,24,82,35,18,0,41,35,35,3,94,36,36,35,38,36,36,7,135,38,239,0,36,29,17,0,145,38,38,0,59,36,0,0,145,36,36,0,69,38,38,36,120,38,7,0,1,36,91,77,1,35,184,68,1,37,42,4,1,34,52,77,135,38,1,0,36,35,37,34,88,38,30,0,145,38,38,0,62,34,0,0,205,204,204,204,204,204,236,63,73,38,38,34,120,38,7,0,1,34,199,77,1,37,184,68,1,35,44,4,1,36,52,77,135,38,1,0,34,37,35,36,88,38,30,0,145,38,38,0,62,36,0,0,82,253,247,158,153,153,241,63,145,36,36,0,71,38,38,36,120,38,7,0,1,36,218,77,1,35,184,68,1,37,45,4,1,34,52,77,135,38,1,0,36,35,37,34,59,34,1,0,145,34,34,0,88,37,30,0,145,37,37,0,66,38,34,37,145,38,38,0,89,19,38,0,1,38,0,0,85,20,38,0,82,38,23,0,82,37,22,0,4,38,38,37,82,37,20,0,54,38,38,37,168,33,2,0,88,9,19,0,145,9,9,0,82,38,13,0,82,37,20,0,41,37,37,2,3,11,38,37,88,38,11,0,145,38,38,0,65,37,38,9,145,37,37,0,89,11,37,0,82,37,20,0,25,37,37,1,85,20,37,0,119,0,236,255,82,37,23,0,82,38,22,0,4,37,37,38,85,20,37,0,82,37,20,0,34,37,37,0,121,37,3,0,1,31,25,0,119,0,23,0,82,38,13,0,82,34,20,0,41,34,34,2,100,37,38,34,145,37,37,0,59,38,0,0,145,38,38,0,70,37,37,38,121,37,3,0,1,31,25,0,119,0,12,0,82,37,14,0,82,38,14,0,82,38,38,0,82,34,20,0,3,38,38,34,26,38,38,1,109,37,4,38,82,38,20,0,26,38,38,1,85,20,38,0,119,0,230,255,32,38,31,25,121,38,3,0,137,32,0,0,139,0,0,0,139,0,0,0,140,2,35,0,0,0,0,0,2,28,0,0,228,62,0,0,2,29,0,0,198,78,0,0,136,30,0,0,0,26,30,0,136,30,0,0,25,30,30,63,38,30,30,192,137,30,0,0,0,27,30,0,136,30,0,0,1,31,160,0,3,30,30,31,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,152,34,2,0,1,31,160,0,135,30,0,0,31,0,0,0,25,15,27,32,25,25,27,24,25,24,27,8,0,23,27,0,1,30,156,0,3,11,27,30,1,30,136,0,3,14,27,30,1,30,132,0,3,19,27,30,1,30,128,0,3,18,27,30,25,16,27,124,25,12,27,120,25,17,27,116,25,13,27,112,25,20,27,92,25,21,27,72,25,22,27,52,85,11,1,0,1,30,0,0,85,14,30,0,1,31,0,0,109,14,4,31,1,30,0,0,109,14,8,30,1,31,0,0,109,14,12,31,1,30,0,0,109,14,16,30,82,31,11,0,1,32,188,78,134,30,0,0,52,83,3,0,31,32,0,0,121,30,55,0,1,30,0,0,85,19,30,0,1,30,0,0,85,18,30,0,1,30,0,0,85,16,30,0,82,32,11,0,134,30,0,0,248,228,3,0,32,28,0,0,85,12,30,0,82,30,12,0,121,30,170,0,82,32,12,0,1,31,0,0,134,30,0,0,192,164,3,0,32,19,18,16,31,0,0,0,85,14,30,0,82,31,12,0,134,30,0,0,172,24,4,0,31,0,0,0,82,31,19,0,109,14,4,31,82,30,18,0,109,14,8,30,1,31,1,0,109,14,12,31,82,31,16,0,32,31,31,1,121,31,4,0,1,30,1,0,109,14,16,30,119,0,147,0,82,30,16,0,32,30,30,2,121,30,4,0,1,31,2,0,109,14,16,31,119,0,141,0,82,31,16,0,32,31,31,3,121,31,4,0,1,30,4,0,109,14,16,30,119,0,135,0,82,30,16,0,32,30,30,4,121,30,132,0,1,31,7,0,109,14,16,31,119,0,129,0,82,30,11,0,1,32,193,78,134,31,0,0,52,83,3,0,30,32,0,0,121,31,59,0,1,31,0,0,85,17,31,0,82,32,11,0,134,31,0,0,248,228,3,0,32,28,0,0,85,13,31,0,82,32,13,0,25,30,14,4,25,33,14,8,1,34,0,0,134,31,0,0,52,227,3,0,32,30,33,17,34,0,0,0,85,14,31,0,82,34,13,0,134,31,0,0,172,24,4,0,34,0,0,0,1,34,1,0,109,14,12,34,82,34,17,0,32,34,34,1,121,34,4,0,1,31,8,0,109,14,16,31,119,0,95,0,82,31,17,0,32,31,31,3,121,31,4,0,1,34,9,0,109,14,16,34,119,0,89,0,82,34,17,0,32,34,34,4,121,34,4,0,1,31,10,0,109,14,16,31,119,0,83,0,116,15,11,0,1,34,4,0,134,31,0,0,48,143,3,0,34,29,15,0,116,15,14,0,106,34,14,4,109,15,4,34,106,31,14,8,109,15,8,31,106,34,14,12,109,15,12,34,106,31,14,16,109,15,16,31,134,31,0,0,72,138,4,0,15,0,0,0,119,0,65,0,82,31,11,0,1,34,234,78,134,8,0,0,52,83,3,0,31,34,0,0,82,2,11,0,121,8,14,0,134,34,0,0,128,81,1,0,20,2,0,0,116,14,20,0,106,31,20,4,109,14,4,31,106,34,20,8,109,14,8,34,106,31,20,12,109,14,12,31,106,34,20,16,109,14,16,34,119,0,45,0,1,34,239,78,134,9,0,0,52,83,3,0,2,34,0,0,82,3,11,0,121,9,14,0,134,34,0,0,160,131,2,0,21,3,0,0,116,14,21,0,106,31,21,4,109,14,4,31,106,34,21,8,109,14,8,34,106,31,21,12,109,14,12,31,106,34,21,16,109,14,16,34,119,0,26,0,1,34,244,78,134,10,0,0,52,83,3,0,3,34,0,0,82,4,11,0,121,10,14,0,134,34,0,0,80,128,2,0,22,4,0,0,116,14,22,0,106,31,22,4,109,14,4,31,106,34,22,8,109,14,8,34,106,31,22,12,109,14,12,31,106,34,22,16,109,14,16,34,119,0,7,0,85,23,4,0,1,31,4,0,134,34,0,0,48,143,3,0,31,29,23,0,119,0,1,0,82,5,11,0,82,34,14,0,121,34,23,0,106,6,14,4,106,7,14,8,85,24,5,0,109,24,4,6,109,24,8,7,1,31,3,0,1,33,250,78,134,34,0,0,48,143,3,0,31,33,24,0,116,0,14,0,106,33,14,4,109,0,4,33,106,34,14,8,109,0,8,34,106,33,14,12,109,0,12,33,106,34,14,16,109,0,16,34,137,26,0,0,139,0,0,0,119,0,18,0,85,25,5,0,1,33,4,0,1,31,33,79,134,34,0,0,48,143,3,0,33,31,25,0,116,0,14,0,106,31,14,4,109,0,4,31,106,34,14,8,109,0,8,34,106,31,14,12,109,0,12,31,106,34,14,16,109,0,16,34,137,26,0,0,139,0,0,0,139,0,0,0,140,2,23,0,0,0,0,0,2,17,0,0,128,0,0,0,2,18,0,0,224,0,0,0,2,19,0,0,240,0,0,0,1,14,0,0,136,20,0,0,0,15,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,16,20,0,136,20,0,0,25,20,20,32,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,20,39,2,0,1,21,32,0,135,20,0,0,21,0,0,0,25,12,16,16,25,13,16,12,25,3,16,8,25,4,16,4,0,5,16,0,25,6,16,25,25,7,16,24,25,9,16,23,25,8,16,22,25,10,16,21,25,11,16,20,85,13,0,0,85,3,1,0,1,20,63,0,85,4,20,0,82,20,13,0,79,20,20,0,85,5,20,0,82,20,3,0,1,21,1,0,85,20,21,0,82,21,5,0,36,21,21,127,121,21,5,0,82,21,13,0,78,21,21,0,85,4,21,0,119,0,253,0,82,21,5,0,19,21,21,18,1,20,192,0,45,21,21,20,40,40,2,0,82,21,13,0,102,21,21,1,83,6,21,0,79,21,6,0,121,21,25,0,79,21,6,0,42,21,21,6,32,21,21,2,121,21,21,0,1,21,194,0,82,20,5,0,17,21,21,20,82,20,5,0,1,22,223,0,17,20,20,22,19,21,21,20,120,21,2,0,119,0,230,0,82,21,5,0,38,21,21,31,41,21,21,6,79,20,6,0,38,20,20,63,20,21,21,20,85,4,21,0,82,21,3,0,1,20,2,0,85,21,20,0,119,0,219,0,82,20,3,0,1,21,2,0,85,20,21,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,21,5,0,19,21,21,19,45,21,21,18,144,41,2,0,82,21,13,0,102,21,21,1,83,7,21,0,1,21,0,0,83,9,21,0,79,21,7,0,121,21,73,0,79,21,7,0,42,21,21,6,32,21,21,2,121,21,69,0,82,21,13,0,102,21,21,2,83,9,21,0,79,21,9,0,121,21,57,0,79,21,9,0,42,21,21,6,32,21,21,2,121,21,53,0,82,21,5,0,45,21,21,18,188,40,2,0,1,21,160,0,79,20,7,0,49,21,21,20,184,40,2,0,79,21,7,0,1,20,191,0,49,21,21,20,184,40,2,0,1,14,19,0,119,0,2,0,1,14,19,0,32,21,14,19,121,21,30,0,82,21,5,0,1,20,237,0,45,21,21,20,244,40,2,0,79,21,7,0,54,21,21,17,60,41,2,0,1,21,159,0,79,20,7,0,54,21,21,20,60,41,2,0,82,21,5,0,54,21,21,18,116,43,2,0,82,21,5,0,38,21,21,15,41,21,21,12,79,20,7,0,38,20,20,63,41,20,20,6,20,21,21,20,79,20,9,0,38,20,20,63,20,21,21,20,85,4,21,0,82,21,3,0,1,20,3,0,85,21,20,0,119,0,143,0,82,20,3,0,1,21,2,0,85,20,21,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,21,3,0,1,20,3,0,85,21,20,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,20,3,0,1,21,2,0,85,20,21,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,21,5,0,1,20,248,0,19,21,21,20,45,21,21,19,116,43,2,0,1,21,244,0,82,20,5,0,47,21,21,20,196,41,2,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,21,13,0,102,21,21,1,83,8,21,0,1,21,0,0,83,10,21,0,1,21,0,0,83,11,21,0,79,21,8,0,121,21,93,0,79,21,8,0,42,21,21,6,32,21,21,2,121,21,89,0,82,21,13,0,102,21,21,2,83,10,21,0,79,21,10,0,121,21,77,0,79,21,10,0,42,21,21,6,32,21,21,2,121,21,73,0,82,21,13,0,102,21,21,3,83,11,21,0,79,21,11,0,121,21,61,0,79,21,11,0,42,21,21,6,32,21,21,2,121,21,57,0,82,21,5,0,45,21,21,19,116,42,2,0,1,21,144,0,79,20,8,0,49,21,21,20,112,42,2,0,79,21,8,0,1,20,191,0,49,21,21,20,112,42,2,0,1,14,40,0,119,0,2,0,1,14,40,0,32,21,14,40,121,21,34,0,82,21,5,0,1,20,244,0,45,21,21,20,172,42,2,0,79,21,8,0,54,21,21,17,4,43,2,0,1,21,143,0,79,20,8,0,54,21,21,20,4,43,2,0,82,21,5,0,54,21,21,19,116,43,2,0,82,21,5,0,38,21,21,7,41,21,21,18,79,20,8,0,38,20,20,63,41,20,20,12,20,21,21,20,79,20,10,0,38,20,20,63,41,20,20,6,20,21,21,20,79,20,11,0,38,20,20,63,20,21,21,20,85,4,21,0,82,21,3,0,1,20,4,0,85,21,20,0,119,0,29,0,82,20,3,0,1,21,2,0,85,20,21,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,21,3,0,1,20,4,0,85,21,20,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,20,3,0,1,21,3,0,85,20,21,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,82,21,3,0,1,20,2,0,85,21,20,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,2,20,0,0,255,255,16,0,82,21,4,0,47,20,20,21,144,43,2,0,1,20,63,0,85,4,20,0,116,12,4,0,82,2,12,0,137,15,0,0,139,2,0,0,140,2,41,0,0,0,0,0,136,37,0,0,0,35,37,0,136,37,0,0,25,37,37,63,38,37,37,192,137,37,0,0,0,36,37,0,136,37,0,0,25,37,37,80,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,236,43,2,0,1,38,80,0,135,37,0,0,38,0,0,0,25,2,36,48,0,33,36,0,25,26,36,44,25,30,36,40,25,22,36,36,25,27,36,32,25,25,36,28,25,23,36,24,25,32,36,4,85,26,0,0,82,37,26,0,82,37,37,0,120,37,3,0,137,35,0,0,139,0,0,0,82,37,26,0,106,37,37,4,120,37,3,0,137,35,0,0,139,0,0,0,82,37,26,0,106,37,37,8,120,37,3,0,137,35,0,0,139,0,0,0,88,37,1,0,145,37,37,0,59,38,0,0,145,38,38,0,71,37,37,38,121,37,12,0,88,13,1,0,145,13,13,0,25,34,1,8,88,38,34,0,145,38,38,0,63,37,38,13,145,37,37,0,89,34,37,0,59,37,0,0,145,37,37,0,89,1,37,0,112,37,1,4,145,37,37,0,59,38,0,0,145,38,38,0,71,37,37,38,121,37,12,0,112,3,1,4,145,3,3,0,25,24,1,12,88,38,24,0,145,38,38,0,63,37,38,3,145,37,37,0,89,24,37,0,59,38,0,0,145,38,38,0,113,1,4,38,88,4,1,0,145,4,4,0,112,38,1,8,145,38,38,0,63,14,4,38,145,14,14,0,82,37,26,0,106,38,37,4,76,38,38,0,145,38,38,0,73,38,14,38,121,38,10,0,82,38,26,0,106,18,38,4,76,38,18,0,145,18,38,0,88,39,1,0,145,39,39,0,64,37,18,39,145,37,37,0,113,1,8,37,112,5,1,4,145,5,5,0,112,37,1,12,145,37,37,0,63,15,5,37,145,15,15,0,82,38,26,0,106,37,38,8,76,37,37,0,145,37,37,0,73,37,15,37,121,37,10,0,82,37,26,0,106,19,37,8,76,37,19,0,145,19,37,0,112,39,1,4,145,39,39,0,64,38,19,39,145,38,38,0,113,1,12,38,88,6,1,0,145,6,6,0,82,37,26,0,106,38,37,4,76,38,38,0,145,38,38,0,71,38,6,38,121,38,154,0,112,7,1,4,145,7,7,0,82,37,26,0,106,38,37,8,76,38,38,0,145,38,38,0,71,38,7,38,121,38,146,0,82,8,26,0,116,2,8,0,106,37,8,4,109,2,4,37,106,38,8,8,109,2,8,38,106,37,8,12,109,2,12,37,106,38,8,16,109,2,16,38,134,38,0,0,0,125,1,0,2,0,0,0,85,30,38,0,112,38,1,8,145,38,38,0,75,20,38,0,112,39,1,12,145,39,39,0,75,39,39,0,5,37,20,39,41,37,37,2,135,38,10,0,37,0,0,0,85,22,38,0,112,38,1,4,145,38,38,0,75,38,38,0,85,27,38,0,112,9,1,4,145,9,9,0,112,37,1,12,145,37,37,0,63,38,9,37,145,38,38,0,75,38,38,0,82,37,27,0,56,38,38,37,64,47,2,0,88,38,1,0,145,38,38,0,75,38,38,0,85,25,38,0,88,10,1,0,145,10,10,0,112,37,1,8,145,37,37,0,63,38,10,37,145,38,38,0,75,38,38,0,82,37,25,0,56,38,38,37,48,47,2,0,82,38,27,0,112,37,1,4,145,37,37,0,75,37,37,0,4,31,38,37,112,37,1,8,145,37,37,0,75,37,37,0,5,28,31,37,82,37,22,0,82,38,25,0,88,39,1,0,145,39,39,0,75,39,39,0,4,38,38,39,3,38,28,38,41,38,38,2,3,16,37,38,82,38,27,0,82,37,26,0,106,37,37,4,5,29,38,37,82,37,30,0,82,38,25,0,3,38,29,38,41,38,38,2,3,17,37,38,78,38,17,0,83,16,38,0,102,37,17,1,107,16,1,37,102,38,17,2,107,16,2,38,102,37,17,3,107,16,3,37,82,37,25,0,25,37,37,1,85,25,37,0,119,0,208,255,82,37,27,0,25,37,37,1,85,27,37,0,119,0,190,255,82,38,30,0,135,37,7,0,38,0,0,0,82,37,26,0,25,37,37,16,116,23,37,0,82,11,26,0,116,2,11,0,106,38,11,4,109,2,4,38,106,37,11,8,109,2,8,37,106,38,11,12,109,2,12,38,106,37,11,16,109,2,16,37,134,37,0,0,72,138,4,0,2,0,0,0,82,12,26,0,112,37,1,8,145,37,37,0,75,21,37,0,82,38,22,0,112,39,1,12,145,39,39,0,75,39,39,0,134,37,0,0,108,22,3,0,32,38,21,39,116,12,32,0,106,39,32,4,109,12,4,39,106,37,32,8,109,12,8,37,106,39,32,12,109,12,12,39,106,37,32,16,109,12,16,37,82,39,22,0,135,37,7,0,39,0,0,0,82,39,26,0,82,38,23,0,134,37,0,0,88,176,0,0,39,38,0,0,137,35,0,0], eb + 133120);
  HEAPU8.set([139,0,0,0,1,38,4,0,1,39,72,83,134,37,0,0,48,143,3,0,38,39,33,0,137,35,0,0,139,0,0,0,140,2,47,0,0,0,0,0,2,43,0,0,255,0,0,0,25,29,0,4,120,1,13,0,82,8,0,0,1,44,0,0,85,0,44,0,121,8,6,0,106,45,0,4,41,45,45,2,134,44,0,0,64,123,4,0,8,45,0,0,1,44,0,0,85,29,44,0,119,0,183,0,2,44,0,0,255,255,255,63,48,44,44,1,172,48,2,0,1,44,8,0,135,38,240,0,44,0,0,0,1,45,42,40,134,44,0,0,220,123,4,0,38,45,0,0,1,44,180,39,85,38,44,0,1,45,88,37,1,46,6,0,135,44,241,0,38,45,46,0,41,44,1,2,134,32,0,0,116,104,4,0,44,0,0,0,82,2,0,0,85,0,32,0,121,2,6,0,106,46,0,4,41,46,46,2,134,44,0,0,64,123,4,0,2,46,0,0,85,29,1,0,1,14,0,0,82,44,0,0,41,46,14,2,1,45,0,0,97,44,46,45,25,14,14,1,53,45,14,1,228,48,2,0,25,28,0,8,82,6,28,0,121,6,142,0,106,9,6,4,26,39,1,1,19,45,39,1,32,42,45,0,121,42,4,0,19,45,9,39,0,35,45,0,119,0,6,0,48,45,9,1,60,49,2,0,0,35,9,0,119,0,2,0,9,35,9,1,82,45,0,0,41,46,35,2,97,45,46,28,82,12,6,0,121,12,124,0,0,13,12,0,0,20,35,0,0,22,6,0,106,10,13,4,121,42,4,0,19,46,10,39,0,36,46,0,119,0,6,0,48,46,10,1,132,49,2,0,0,36,10,0,119,0,2,0,9,36,10,1,45,46,36,20,156,49,2,0,0,21,20,0,0,23,13,0,119,0,100,0,82,46,0,0,41,45,36,2,3,31,46,45,82,45,31,0,120,45,5,0,85,31,22,0,0,21,36,0,0,23,13,0,119,0,91,0,82,11,13,0,120,11,3,0,0,18,13,0,119,0,76,0,25,27,13,8,25,25,27,11,25,26,13,12,0,3,11,0,0,17,13,0,0,19,13,0,25,30,3,8,78,4,25,0,41,45,4,24,42,45,45,24,34,40,45,0,19,45,4,43,0,37,45,0,121,40,4,0,82,46,26,0,0,45,46,0,119,0,2,0,0,45,37,0,0,33,45,0,102,5,30,11,41,45,5,24,42,45,45,24,34,41,45,0,121,41,4,0,106,46,3,12,0,45,46,0,119,0,3,0,19,46,5,43,0,45,46,0,46,45,33,45,84,50,2,0,0,18,19,0,119,0,43,0,121,41,4,0,82,46,30,0,0,45,46,0,119,0,2,0,0,45,30,0,0,34,45,0,121,40,10,0,82,46,27,0,134,45,0,0,48,120,4,0,46,34,33,0,121,45,3,0,0,18,19,0,119,0,29,0,82,7,17,0,119,0,20,0,120,33,3,0,0,7,3,0,119,0,17,0,0,15,37,0,0,16,27,0,0,24,34,0,78,45,16,0,78,46,24,0,46,45,45,46,196,50,2,0,0,18,19,0,119,0,15,0,26,15,15,1,120,15,3,0,0,7,3,0,119,0,4,0,25,16,16,1,25,24,24,1,119,0,244,255,82,3,7,0,120,3,3,0,0,18,7,0,119,0,4,0,0,17,7,0,0,19,7,0,119,0,188,255,116,22,18,0,82,45,0,0,41,46,36,2,94,45,45,46,116,18,45,0,82,45,0,0,41,46,36,2,94,45,45,46,85,45,13,0,0,21,20,0,0,23,22,0,82,13,23,0,120,13,2,0,119,0,4,0,0,20,21,0,0,22,23,0,119,0,137,255,139,0,0,0,140,7,60,0,0,0,0,0,136,54,0,0,0,52,54,0,136,54,0,0,25,54,54,63,38,54,54,192,137,54,0,0,0,53,54,0,136,54,0,0,25,54,54,80,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,144,51,2,0,1,55,80,0,135,54,0,0,55,0,0,0,25,33,53,68,25,32,53,64,25,35,53,60,25,48,53,56,25,49,53,52,25,40,53,48,25,47,53,44,25,41,53,40,25,51,53,36,25,46,53,32,25,36,53,28,25,37,53,24,25,38,53,20,25,39,53,16,25,43,53,12,25,44,53,8,25,45,53,4,0,42,53,0,85,33,0,0,85,32,1,0,85,35,2,0,89,48,3,0,89,49,4,0,85,40,5,0,85,47,6,0,88,7,48,0,145,7,7,0,82,55,35,0,82,56,40,0,82,57,47,0,134,54,0,0,24,167,3,0,7,55,56,57,85,51,54,0,88,57,48,0,145,57,57,0,134,54,0,0,112,103,4,0,57,0,0,0,33,50,54,0,1,54,192,24,82,57,35,0,41,57,57,3,3,54,54,57,106,26,54,4,88,27,48,0,145,27,27,0,121,50,63,0,59,54,1,0,145,54,54,0,66,34,54,27,145,34,34,0,38,54,26,7,135,29,238,0,54,34,0,0,145,29,29,0,88,57,48,0,145,57,57,0,65,54,29,57,145,54,54,0,89,46,54,0,1,54,0,0,85,41,54,0,82,54,51,0,82,57,41,0,56,54,54,57,64,53,2,0,88,8,46,0,145,8,8,0,88,9,48,0,145,9,9,0,82,57,41,0,88,56,49,0,145,56,56,0,134,54,0,0,172,156,2,0,57,8,9,56,37,38,36,0,82,10,35,0,88,11,48,0,145,11,11,0,82,12,37,0,82,13,38,0,88,14,36,0,145,14,14,0,82,54,33,0,82,56,41,0,134,30,0,0,240,81,4,0,54,56,0,0,88,15,48,0,145,15,15,0,82,57,32,0,82,55,35,0,82,58,41,0,1,59,0,0,134,54,0,0,100,201,3,0,57,55,15,58,59,0,0,0,134,56,0,0,120,29,2,0,10,11,12,13,14,30,54,0,82,56,41,0,25,56,56,1,85,41,56,0,119,0,212,255,137,52,0,0,139,0,0,0,38,56,26,7,135,31,238,0,56,27,0,0,145,31,31,0,88,54,48,0,145,54,54,0,66,56,31,54,145,56,56,0,89,39,56,0,1,56,0,0,85,41,56,0,82,56,51,0,82,54,41,0,56,56,56,54,76,54,2,0,82,16,41,0,82,54,35,0,88,59,48,0,145,59,59,0,134,56,0,0,40,69,4,0,54,59,0,0,4,56,16,56,85,42,56,0,88,17,39,0,145,17,17,0,88,18,48,0,145,18,18,0,82,59,42,0,88,54,49,0,145,54,54,0,134,56,0,0,128,158,2,0,59,17,18,54,44,45,43,0,82,19,35,0,88,20,48,0,145,20,20,0,82,21,44,0,82,22,45,0,88,23,43,0,145,23,23,0,82,56,33,0,82,54,41,0,134,28,0,0,240,81,4,0,56,54,0,0,88,24,48,0,145,24,24,0,82,59,32,0,82,58,35,0,82,55,41,0,1,57,0,0,134,56,0,0,100,201,3,0,59,58,24,55,57,0,0,0,134,54,0,0,92,107,2,0,19,20,21,22,23,28,56,0,82,54,41,0,25,54,54,1,85,41,54,0,119,0,203,255,88,25,48,0,145,25,25,0,82,56,33,0,82,57,32,0,82,55,35,0,82,58,40,0,82,59,47,0,134,54,0,0,0,196,1,0,56,57,55,25,58,59,0,0,137,52,0,0,139,0,0,0,140,6,30,0,0,0,0,0,136,26,0,0,0,25,26,0,136,26,0,0,1,27,176,0,3,26,26,27,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,188,54,2,0,1,27,176,0,135,26,0,0,27,0,0,0,1,26,172,0,3,24,25,26,1,26,152,0,3,13,25,26,1,26,132,0,3,10,25,26,25,6,25,112,25,8,25,100,25,15,25,88,25,18,25,76,25,7,25,72,25,9,25,52,25,11,25,40,25,12,25,32,25,14,25,16,25,16,25,4,0,17,25,0,134,26,0,0,44,80,4,0,8,1,0,0,134,19,0,0,84,173,1,0,0,8,0,0,116,6,19,0,106,27,19,4,109,6,4,27,106,26,19,8,109,6,8,26,106,27,19,12,109,6,12,27,106,26,19,16,109,6,16,26,134,26,0,0,44,80,4,0,15,1,0,0,134,28,0,0,84,173,1,0,0,15,0,0,106,28,28,4,28,27,28,2,76,27,27,0,145,27,27,0,64,26,3,27,145,26,26,0,75,23,26,0,134,26,0,0,44,80,4,0,18,1,0,0,134,28,0,0,84,173,1,0,0,18,0,0,106,28,28,8,28,27,28,2,76,27,27,0,145,27,27,0,64,26,4,27,145,26,26,0,75,21,26,0,1,26,255,255,85,7,26,0,116,13,6,0,106,27,6,4,109,13,4,27,106,26,6,8,109,13,8,26,106,27,6,12,109,13,12,27,106,26,6,16,109,13,16,26,78,26,7,0,83,24,26,0,102,27,7,1,107,24,1,27,102,26,7,2,107,24,2,26,102,27,7,3,107,24,3,27,134,27,0,0,192,84,3,0,13,23,21,24,134,27,0,0,204,117,4,0,18,0,0,0,134,27,0,0,204,117,4,0,15,0,0,0,134,27,0,0,204,117,4,0,8,0,0,0,134,27,0,0,44,80,4,0,11,2,0,0,134,20,0,0,84,173,1,0,0,11,0,0,116,9,20,0,106,26,20,4,109,9,4,26,106,27,20,8,109,9,8,27,106,26,20,12,109,9,12,26,106,27,20,16,109,9,16,27,134,27,0,0,44,80,4,0,14,2,0,0,134,28,0,0,84,173,1,0,0,14,0,0,106,28,28,4,28,26,28,2,76,26,26,0,145,26,26,0,64,27,3,26,145,27,27,0,89,12,27,0,134,27,0,0,44,80,4,0,16,2,0,0,134,29,0,0,84,173,1,0,0,16,0,0,106,29,29,8,28,28,29,2,76,28,28,0,145,28,28,0,64,26,4,28,145,26,26,0,113,12,4,26,62,26,0,0,31,133,235,81,184,30,9,64,65,22,5,26,145,22,22,0,1,26,255,255,85,17,26,0,116,10,9,0,106,27,9,4,109,10,4,27,106,26,9,8,109,10,8,26,106,27,9,12,109,10,12,27,106,26,9,16,109,10,16,26,116,13,12,0,106,27,12,4,109,13,4,27,78,27,17,0,83,24,27,0,102,26,17,1,107,24,1,26,102,27,17,2,107,24,2,27,102,26,17,3,107,24,3,26,59,27,1,0,145,27,27,0,134,26,0,0,8,169,2,0,10,13,22,27,24,0,0,0,134,26,0,0,204,117,4,0,16,0,0,0,134,26,0,0,204,117,4,0,14,0,0,0,134,26,0,0,204,117,4,0,11,0,0,0,137,25,0,0,139,0,0,0,140,4,64,0,0,0,0,0,136,59,0,0,0,56,59,0,136,59,0,0,25,59,59,64,137,59,0,0,130,59,0,0,136,60,0,0,49,59,59,60,172,57,2,0,1,60,64,0,135,59,0,0,60,0,0,0,25,54,56,32,25,51,56,60,25,52,56,56,25,45,56,24,25,44,56,48,25,53,56,44,25,55,56,16,25,46,56,40,25,47,56,8,0,48,56,0,85,51,0,0,85,52,1,0,0,25,45,0,85,25,2,0,109,25,4,3,82,59,51,0,32,59,59,0,82,60,52,0,32,60,60,0,20,59,59,60,121,59,16,0,0,37,54,0,1,59,0,0,85,37,59,0,1,60,0,0,109,37,4,60,0,18,54,0,0,19,18,0,82,20,19,0,25,21,18,4,0,22,21,0,82,23,22,0,135,60,12,0,23,0,0,0,137,56,0,0,139,20,0,0,82,60,51,0,2,59,0,0,128,181,0,0,91,60,60,59,43,60,60,6,38,60,60,1,120,60,43,0,82,60,51,0,2,59,0,0,128,181,0,0,91,60,60,59,43,60,60,2,38,60,60,1,33,60,60,1,121,60,7,0,1,59,208,59,1,61,246,58,1,62,0,127,1,63,250,59,135,60,1,0,59,61,62,63,116,44,51,0,82,63,51,0,106,63,63,4,109,44,4,63,0,14,45,0,82,63,51,0,25,63,63,64,82,60,14,0,106,62,14,4,82,61,52,0,134,15,0,0,204,215,0,0,63,60,62,61,44,0,0,0,135,16,3,0,0,17,54,0,85,17,15,0,109,17,4,16,0,18,54,0,0,19,18,0,82,20,19,0,25,21,18,4,0,22,21,0,82,23,22,0,135,61,12,0,23,0,0,0,137,56,0,0,139,20,0,0,0,7,45,0,106,24,7,4,35,61,24,0,32,62,24,0,82,60,7,0,1,63,255,255,18,60,60,63,19,62,62,60,20,61,61,62,121,61,25,0,0,26,54,0,82,57,51,0,82,62,51,0,82,62,62,0,38,62,62,3,82,60,52,0,82,63,45,0,106,59,57,4,135,61,13,0,62,57,60,63,59,0,0,0,85,26,61,0,1,62,0,0,109,26,4,62,0,18,54,0,0,19,18,0,82,20,19,0,25,21,18,4,0,22,21,0,82,23,22,0,135,62,12,0,23,0,0,0,137,56,0,0,139,20,0,0,116,53,52,0,0,27,55,0,1,62,0,0,85,27,62,0,1,61,0,0,109,27,4,61,0,28,55,0,106,29,28,4,0,30,45,0,106,31,30,4,48,62,29,31,196,59,2,0,1,62,1,0,0,61,62,0,119,0,11,0,45,59,29,31,224,59,2,0,82,59,28,0,82,63,30,0,16,59,59,63,0,62,59,0,119,0,3,0,1,59,0,0,0,62,59,0,0,61,62,0,120,61,2,0,119,0,82,0,0,32,45,0,0,33,55,0,82,61,32,0,106,62,32,4,82,59,33,0,106,63,33,4,134,34,0,0,8,120,4,0,61,62,59,63,135,35,3,0,0,36,47,0,85,36,34,0,109,36,4,35,0,38,47,0,82,39,38,0,106,40,38,4,0,41,48,0,85,41,39,0,109,41,4,40,0,42,48,0,106,43,42,4,1,63,0,0,16,63,63,43,32,59,43,0,1,62,255,255,82,61,42,0,16,62,62,61,19,59,59,62,20,63,63,59,0,4,63,0,0,5,48,0,1,59,255,255,125,63,4,59,39,0,0,0,85,5,63,0,1,62,0,0,125,59,4,62,40,0,0,0,109,5,4,59,82,58,51,0,82,63,51,0,82,63,63,0,38,63,63,3,82,62,53,0,82,61,48,0,106,60,58,4,135,59,13,0,63,58,62,61,60,0,0,0,85,46,59,0,82,59,46,0,120,59,2,0,119,0,29,0,82,59,46,0,82,63,51,0,25,63,63,120,106,63,63,4,5,49,59,63,82,59,51,0,25,59,59,64,106,59,59,4,134,63,0,0,192,67,4,0,59,0,0,0,5,50,49,63,82,63,53,0,3,63,63,50,85,53,63,0,0,6,55,0,82,63,6,0,106,59,6,4,82,60,46,0,1,61,0,0,134,8,0,0,164,123,4,0,63,59,60,61,135,9,3,0,0,10,55,0,85,10,8,0,109,10,4,9,119,0,155,255,0,11,55,0,106,12,11,4,0,13,54,0,116,13,11,0,109,13,4,12,0,18,54,0,0,19,18,0,82,20,19,0,25,21,18,4,0,22,21,0,82,23,22,0,135,61,12,0,23,0,0,0,137,56,0,0,139,20,0,0,140,5,27,0,0,0,0,0,136,24,0,0,0,23,24,0,136,24,0,0,1,25,144,0,3,24,24,25,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,176,61,2,0,1,25,144,0,135,24,0,0,25,0,0,0,1,24,140,0,3,15,23,24,25,9,23,112,25,5,23,92,25,7,23,80,25,12,23,68,25,16,23,56,1,24,136,0,3,6,23,24,25,8,23,36,25,10,23,24,25,11,23,12,0,13,23,0,1,24,132,0,3,14,23,24,134,24,0,0,44,80,4,0,7,1,0,0,134,17,0,0,84,173,1,0,0,7,0,0,116,5,17,0,106,25,17,4,109,5,4,25,106,24,17,8,109,5,8,24,106,25,17,12,109,5,12,25,106,24,17,16,109,5,16,24,134,24,0,0,44,80,4,0,12,1,0,0,134,26,0,0,84,173,1,0,0,12,0,0,106,26,26,4,28,25,26,2,76,25,25,0,145,25,25,0,64,24,3,25,145,24,24,0,75,22,24,0,134,24,0,0,44,80,4,0,16,1,0,0,134,26,0,0,84,173,1,0,0,16,0,0,106,26,26,8,28,25,26,2,76,25,25,0,145,25,25,0,64,24,4,25,145,24,24,0,75,19,24,0,1,24,230,255,83,6,24,0,1,25,41,0,107,6,1,25,1,24,55,0,107,6,2,24,1,25,255,255,107,6,3,25,116,9,5,0,106,24,5,4,109,9,4,24,106,25,5,8,109,9,8,25,106,24,5,12,109,9,12,24,106,25,5,16,109,9,16,25,78,25,6,0,83,15,25,0,102,24,6,1,107,15,1,24,102,25,6,2,107,15,2,25,102,24,6,3,107,15,3,24,134,24,0,0,192,84,3,0,9,22,19,15,134,24,0,0,204,117,4,0,16,0,0,0,134,24,0,0,204,117,4,0,12,0,0,0,134,24,0,0,204,117,4,0,7,0,0,0,134,24,0,0,44,80,4,0,10,2,0,0,134,18,0,0,84,173,1,0,0,10,0,0,116,8,18,0,106,25,18,4,109,8,4,25,106,24,18,8,109,8,8,24,106,25,18,12,109,8,12,25,106,24,18,16,109,8,16,24,134,24,0,0,44,80,4,0,11,2,0,0,134,26,0,0,84,173,1,0,0,11,0,0,106,26,26,4,28,25,26,2,76,25,25,0,145,25,25,0,64,24,3,25,145,24,24,0,75,20,24,0,134,24,0,0,44,80,4,0,13,2,0,0,134,26,0,0,84,173,1,0,0,13,0,0,106,26,26,8,28,25,26,2,76,25,25,0,145,25,25,0,64,24,4,25,145,24,24,0,75,21,24,0,1,24,230,255,83,14,24,0,1,25,41,0,107,14,1,25,1,24,55,0,107,14,2,24,1,25,255,255,107,14,3,25,116,9,8,0,106,24,8,4,109,9,4,24,106,25,8,8,109,9,8,25,106,24,8,12,109,9,12,24,106,25,8,16,109,9,16,25,78,25,14,0,83,15,25,0,102,24,14,1,107,15,1,24,102,25,14,2,107,15,2,25,102,24,14,3,107,15,3,24,134,24,0,0,192,84,3,0,9,20,21,15,134,24,0,0,204,117,4,0,13,0,0,0,134,24,0,0,204,117,4,0,11,0,0,0,134,24,0,0,204,117,4,0,10,0,0,0,137,23,0,0,139,0,0,0,140,5,27,0,0,0,0,0,136,24,0,0,0,23,24,0,136,24,0,0,1,25,144,0,3,24,24,25,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,160,64,2,0,1,25,144,0,135,24,0,0,25,0,0,0,1,24,140,0,3,15,23,24,25,9,23,112,25,5,23,92,25,7,23,80,25,12,23,68,25,16,23,56,1,24,136,0,3,6,23,24,25,8,23,36,25,10,23,24,25,11,23,12,0,13,23,0,1,24,132,0,3,14,23,24,134,24,0,0,44,80,4,0,7,1,0,0,134,17,0,0,84,173,1,0,0,7,0,0,116,5,17,0,106,25,17,4,109,5,4,25,106,24,17,8,109,5,8,24,106,25,17,12,109,5,12,25,106,24,17,16,109,5,16,24,134,24,0,0,44,80,4,0,12,1,0,0,134,26,0,0,84,173,1,0,0,12,0,0,106,26,26,4,28,25,26,2,76,25,25,0,145,25,25,0,64,24,3,25,145,24,24,0,75,22,24,0,134,24,0,0,44,80,4,0,16,1,0,0,134,26,0,0,84,173,1,0,0,16,0,0,106,26,26,8,28,25,26,2,76,25,25,0,145,25,25,0,64,24,4,25,145,24,24,0,75,19,24,0,1,24,0,0,83,6,24,0,1,25,228,255,107,6,1,25,1,24,48,0,107,6,2,24,1,25,255,255,107,6,3,25,116,9,5,0,106,24,5,4,109,9,4,24,106,25,5,8,109,9,8,25,106,24,5,12,109,9,12,24,106,25,5,16,109,9,16,25,78,25,6,0,83,15,25,0,102,24,6,1,107,15,1,24,102,25,6,2,107,15,2,25,102,24,6,3,107,15,3,24,134,24,0,0,192,84,3,0,9,22,19,15,134,24,0,0,204,117,4,0,16,0,0,0,134,24,0,0,204,117,4,0,12,0,0,0,134,24,0,0,204,117,4,0,7,0,0,0,134,24,0,0,44,80,4,0,10,2,0,0,134,18,0,0,84,173,1,0,0,10,0,0,116,8,18,0,106,25,18,4,109,8,4,25,106,24,18,8,109,8,8,24,106,25,18,12,109,8,12,25,106,24,18,16,109,8,16,24,134,24,0,0,44,80,4,0,11,2,0,0,134,26,0,0,84,173,1,0,0,11,0,0,106,26,26,4,28,25,26,2,76,25,25,0,145,25,25,0,64,24,3,25,145,24,24,0,75,20,24,0,134,24,0,0,44,80,4,0,13,2,0,0,134,26,0,0,84,173,1,0,0,13,0,0,106,26,26,8,28,25,26,2,76,25,25,0,145,25,25,0,64,24,4,25,145,24,24,0,75,21,24,0,1,24,0,0,83,14,24,0,1,25,228,255,107,14,1,25,1,24,48,0,107,14,2,24,1,25,255,255,107,14,3,25,116,9,8,0,106,24,8,4,109,9,4,24,106,25,8,8,109,9,8,25,106,24,8,12,109,9,12,24,106,25,8,16,109,9,16,25,78,25,14,0,83,15,25,0,102,24,14,1,107,15,1,24,102,25,14,2,107,15,2,25,102,24,14,3,107,15,3,24,134,24,0,0,192,84,3,0,9,20,21,15,134,24,0,0,204,117,4,0,13,0,0,0,134,24,0,0,204,117,4,0,11,0,0,0,134,24,0,0,204,117,4,0,10,0,0,0,137,23,0,0,139,0,0,0,140,0,24,0,0,0,0,0,2,14,0,0,0,220,1,0,2,15,0,0,0,96,0,0,2,16,0,0,0,128,0,0,136,17,0,0,0,13,17,0,136,17,0,0,25,17,17,48,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,164,67,2,0,1,18,48,0,135,17,0,0,18,0,0,0,25,12,13,8,0,11,13,0,25,4,13,36,25,6,13,32,25,7,13,28,25,8,13,24,25,10,13,20,25,9,13,16,25,5,13,12,1,17,0,0,85,4,17,0,1,17,1,0,82,18,4,0,56,17,17,18,164,70,2,0,2,17,0,0,0,128,1,0,135,0,10,0,17,0,0,0,82,17,4,0,27,17,17,48,3,17,14,17,109,17,12,0,2,17,0,0,0,0,1,0,135,1,10,0,17,0,0,0,82,17,4,0,27,17,17,48,3,17,14,17,109,17,16,1,135,2,10,0,16,0,0,0,82,17,4,0,27,17,17,48,3,17,14,17,109,17,20,2,135,3,10,0,15,0,0,0,82,17,4,0,27,17,17,48,3,17,14,17,109,17,24,3,1,17,0,0,85,6,17,0,82,17,6,0,56,17,15,17,152,68,2,0,82,17,4,0,27,17,17,48,3,17,14,17,106,17,17,12,82,18,6,0,41,18,18,2,59,19,0,0,145,19,19,0,101,17,18,19,82,19,6,0,25,19,19,1,85,6,19,0,119,0,241,255,1,19,0,0,85,7,19,0,1,19,0,64,82,18,7,0,56,19,19,18,228,68,2,0,82,19,4,0,27,19,19,48,3,19,14,19,106,19,19,16,82,18,7,0,41,18,18,2,59,17,0,0,145,17,17,0,101,19,18,17,82,17,7,0,25,17,17,1,85,7,17,0,119,0,240,255,1,17,0,0,85,8,17,0,82,17,8,0,56,17,16,17,36,69,2,0,82,17,4,0,27,17,17,48,3,17,14,17,106,17,17,20,82,18,8,0,1,19,0,0,95,17,18,19,82,19,8,0,25,19,19,1,85,8,19,0,119,0,243,255,1,19,0,0,85,10,19,0,1,19,0,0,85,9,19,0,1,19,0,48,82,18,9,0,56,19,19,18,92,70,2,0,82,19,4,0,27,19,19,48,3,19,14,19,106,19,19,24,82,18,9,0,41,18,18,1,82,17,10,0,41,17,17,2,96,19,18,17,82,17,4,0,27,17,17,48,3,17,14,17,106,17,17,24,82,18,9,0,25,18,18,1,41,18,18,1,82,19,10,0,41,19,19,2,25,19,19,1,96,17,18,19,82,19,4,0,27,19,19,48,3,19,14,19,106,19,19,24,82,18,9,0,25,18,18,2,41,18,18,1,82,17,10,0,41,17,17,2,25,17,17,2,96,19,18,17,82,17,4,0,27,17,17,48,3,17,14,17,106,17,17,24,82,18,9,0,25,18,18,3,41,18,18,1,82,19,10,0,41,19,19,2,96,17,18,19,82,19,4,0,27,19,19,48,3,19,14,19,106,19,19,24,82,18,9,0,25,18,18,4,41,18,18,1,82,17,10,0,41,17,17,2,25,17,17,2,96,19,18,17,82,17,4,0,27,17,17,48,3,17,14,17,106,17,17,24,82,18,9,0,25,18,18,5,41,18,18,1,82,19,10,0,41,19,19,2,25,19,19,3,96,17,18,19,82,19,10,0,25,19,19,1,85,10,19,0,82,19,9,0,25,19,19,6,85,9,19,0,119,0,183,255,82,19,4,0,27,19,19,48,1,18,0,0,97,14,19,18,82,18,4,0,27,18,18,48,3,18,14,18,1,19,0,0,109,18,4,19,82,19,4,0,27,19,19,48,3,19,14,19,1,18,0,0,109,19,8,18,82,18,4,0,25,18,18,1,85,4,18,0,119,0,76,255,1,19,3,0,1,17,157,47,134,18,0,0,48,143,3,0,19,17,11,0,1,18,0,0,85,5,18,0,1,18,1,0,82,17,5,0,56,18,18,17,216,73,2,0,2,18,0,0,214,4,2,0,78,18,18,0,38,18,18,1,121,18,22,0,2,17,0,0,100,0,2,0,82,17,17,0,38,17,17,63,1,19,1,0,82,20,5,0,27,20,20,48,3,20,14,20,25,20,20,28,135,18,242,0,17,19,20,0,2,17,0,0,40,255,1,0,82,17,17,0,38,17,17,31,82,20,5,0,27,20,20,48,3,20,14,20,106,20,20,28,135,18,224,0,17,20,0,0,1,17,1,0,82,20,5,0,27,20,20,48,3,20,14,20,25,20,20,32,135,18,243,0,17,20,0,0,2,20,0,0,146,136,0,0,82,17,5,0,27,17,17,48,3,17,14,17,106,17,17,32,135,18,225,0,20,17,0,0,2,17,0,0,146,136,0,0,2,20,0,0,0,128,1,0,82,19,5,0,27,19,19,48,3,19,14,19,106,19,19,12,2,21,0,0,232,136,0,0,135,18,244,0,17,20,19,21,2,21,0,0,36,255,1,0,82,21,21,0,82,21,21,0,135,18,227,0,21,0,0,0,2,21,0,0,36,255,1,0,82,21,21,0,82,21,21,0,1,19,3,0,1,20,6,20,1,17,0,0,1,22,0,0,1,23,0,0,135,18,226,0,21,19,20,17,22,23,0,0,1,23,1,0,82,22,5,0,27,22,22,48,3,22,14,22,25,22,22,32,25,22,22,4,135,18,243,0,23,22,0,0,2,22,0,0,146,136,0,0,82,23,5,0,27,23,23,48,3,23,14,23,25,23,23,32,106,23,23,4,135,18,225,0,22,23,0,0,2,23,0,0,146,136,0,0,2,22,0,0,0,0,1,0,82,17,5,0,27,17,17,48,3,17,14,17,106,17,17,16,2,20,0,0,232,136,0,0,135,18,244,0,23,22,17,20,2,20,0,0,36,255,1,0,82,20,20,0,106,20,20,4,135,18,227,0,20,0,0,0,2,20,0,0,36,255,1,0,82,20,20,0,106,20,20,4,1,17,2,0,1,22,6,20,1,23,0,0,1,19,0,0,1,21,0,0,135,18,226,0,20,17,22,23,19,21,0,0,1,21,1,0,82,19,5,0,27,19,19,48,3,19,14,19,25,19,19,32,25,19,19,8,135,18,243,0,21,19,0,0,2,19,0,0,146,136,0,0,82,21,5,0,27,21,21,48,3,21,14,21,25,21,21,32,106,21,21,8,135,18,225,0,19,21,0,0,2,21,0,0,146,136,0,0,82,19,5,0,27,19,19,48,3,19,14,19,106,19,19,20,2,23,0,0,232,136,0,0,135,18,244,0,21,16,19,23,2,23,0,0,36,255,1,0,82,23,23,0,106,23,23,20,135,18,227,0,23,0,0,0,2,23,0,0,36,255,1,0,82,23,23,0,106,23,23,20,1,19,4,0,1,21,1,20,1,22,1,0,1,17,0,0,1,20,0,0,135,18,226,0,23,19,21,22,17,20,0,0,1,20,1,0,82,17,5,0,27,17,17,48,3,17,14,17,25,17,17,32,25,17,17,12,135,18,243,0,20,17,0,0,2,17,0,0,147,136,0,0,82,20,5,0,27,20,20,48,3,20,14,20,25,20,20,32,106,20,20,12,135,18,225,0,17,20,0,0,2,20,0,0,147,136,0,0,82,17,5,0,27,17,17,48,3,17,14,17,106,17,17,24,2,22,0,0,228,136,0,0,135,18,244,0,20,15,17,22,82,18,5,0,25,18,18,1,85,5,18,0,119,0,59,255,1,22,3,0,1,17,205,47,134,18,0,0,48,143,3,0,22,17,12,0,2,18,0,0,214,4,2,0,78,18,18,0,38,18,18,1,120,18,3,0,137,13,0,0,139,0,0,0,2,17,0,0,40,255,1,0,82,17,17,0,38,17,17,31,1,22,0,0,135,18,224,0,17,22,0,0,137,13,0,0,139,0,0,0,140,6,51,0,0,0,0,0,136,46,0,0,0,44,46,0,136,46,0,0,25,46,46,63,38,46,46,192,137,46,0,0,0,45,46,0,136,46,0,0,25,46,46,16,137,46,0,0,130,46,0,0,136,47,0,0,49,46,46,47,120,74,2,0,1,47,16,0,135,46,0,0,47,0,0,0,25,39,45,8,25,41,45,4,0,38,45,0,25,37,45,12,89,39,4,0,82,46,0,0,37,46,46,0,121,46,3,0,137,44,0,0,139,0,0,0,106,46,0,4,76,46,46,0,145,46,46,0,89,41,46,0,106,46,0,8,76,46,46,0,145,46,46,0,89,38,46,0,1,46,0,0,83,37,46,0,112,46,1,8,145,46,46,0,59,47,0,0,145,47,47,0,71,46,46,47,121,46,11,0,1,46,1,0,83,37,46,0,25,42,1,8,88,47,42,0,145,47,47,0,59,48,255,255,145,48,48,0,65,46,47,48,145,46,46,0,89,42,46,0,112,46,1,12,145,46,46,0,59,48,0,0,145,48,48,0,71,46,46,48,121,46,9,0,112,19,1,12,145,19,19,0,25,43,1,4,88,48,43,0,145,48,48,0,64,46,48,19,145,46,46,0,89,43,46,0,82,48,0,0,134,46,0,0,248,252,2,0,48,0,0,0,134,46,0,0,64,74,4,0,88,20,2,0,145,20,20,0,112,48,2,4,145,48,48,0,59,47,0,0,145,47,47,0,134,46,0,0,76,113,3,0,20,48,47,0,88,47,39,0,145,47,47,0,59,48,0,0,145,48,48,0,59,49,0,0,145,49,49,0,59,50,1,0,145,50,50,0,134,46,0,0,56,238,2,0,47,48,49,50,88,46,3,0,145,46,46,0,68,40,46,0,145,40,40,0,112,49,3,4,145,49,49,0,68,50,49,0,145,50,50,0,59,49,0,0,145,49,49,0,134,46,0,0,76,113,3,0,40,50,49,0,1,49,7,0,134,46,0,0,252,233,2,0,49,0,0,0,78,49,5,0,102,50,5,1,102,48,5,2,102,47,5,3,134,46,0,0,248,157,3,0,49,50,48,47,59,47,0,0,145,47,47,0,59,48,0,0,145,48,48,0,59,50,1,0,145,50,50,0,134,46,0,0,84,113,4,0,47,48,50,0,88,6,1,0,145,6,6,0,78,46,37,0,38,46,46,1,121,46,19,0,112,46,1,8,145,46,46,0,63,21,6,46,145,21,21,0,88,46,41,0,145,46,46,0,66,29,21,46,145,29,29,0,112,7,1,4,145,7,7,0,88,48,38,0,145,48,48,0,66,50,7,48,145,50,50,0,134,46,0,0,80,13,4,0,29,50,0,0,119,0,14,0,88,46,41,0,145,46,46,0,66,30,6,46,145,30,30,0,112,8,1,4,145,8,8,0,88,48,38,0,145,48,48,0,66,50,8,48,145,50,50,0,134,46,0,0,80,13,4,0,30,50,0,0,59,50,0,0,145,50,50,0,59,48,0,0,145,48,48,0,134,46,0,0,124,92,4,0,50,48,0,0,88,9,1,0,145,9,9,0,78,46,37,0,38,46,46,1,121,46,23,0,112,46,1,8,145,46,46,0,63,22,9,46,145,22,22,0,88,46,41,0,145,46,46,0,66,31,22,46,145,31,31,0,112,10,1,4,145,10,10,0,112,46,1,12,145,46,46,0,63,23,10,46,145,23,23,0,88,50,38,0,145,50,50,0,66,48,23,50,145,48,48,0,134,46,0,0,80,13,4,0,31,48,0,0,119,0,18,0,88,46,41,0,145,46,46,0,66,32,9,46,145,32,32,0,112,11,1,4,145,11,11,0,112,46,1,12,145,46,46,0,63,24,11,46,145,24,24,0,88,50,38,0,145,50,50,0,66,48,24,50,145,48,48,0,134,46,0,0,80,13,4,0,32,48,0,0,59,48,0,0,145,48,48,0,112,50,2,12,145,50,50,0,134,46,0,0,124,92,4,0,48,50,0,0,88,12,1,0,145,12,12,0,78,46,37,0,38,46,46,1,121,46,19,0,88,46,41,0,145,46,46,0,66,33,12,46,145,33,33,0,112,13,1,4,145,13,13,0,112,46,1,12,145,46,46,0,63,25,13,46,145,25,25,0,88,48,38,0,145,48,48,0,66,50,25,48,145,50,50,0,134,46,0,0,80,13,4,0,33,50,0,0,119,0,22,0,112,46,1,8,145,46,46,0,63,26,12,46,145,26,26,0,88,46,41,0,145,46,46,0,66,34,26,46,145,34,34,0,112,14,1,4,145,14,14,0,112,46,1,12,145,46,46,0,63,27,14,46,145,27,27,0,88,48,38,0,145,48,48,0,66,50,27,48,145,50,50,0,134,46,0,0,80,13,4,0,34,50,0,0,112,15,2,8,145,15,15,0,112,50,2,12,145,50,50,0,134,46,0,0,124,92,4,0,15,50,0,0,88,16,1,0,145,16,16,0,78,46,37,0,38,46,46,1,121,46,15,0,88,46,41,0,145,46,46,0,66,35,16,46,145,35,35,0,112,17,1,4,145,17,17,0,88,48,38,0,145,48,48,0,66,50,17,48,145,50,50,0,134,46,0,0,80,13,4,0,35,50,0,0,119,0,18,0,112,46,1,8,145,46,46,0,63,28,16,46,145,28,28,0,88,46,41,0,145,46,46,0,66,36,28,46,145,36,36,0,112,18,1,4,145,18,18,0,88,48,38,0,145,48,48,0,66,50,18,48,145,50,50,0,134,46,0,0,80,13,4,0,36,50,0,0,112,50,2,8,145,50,50,0,59,48,0,0,145,48,48,0,134,46,0,0,124,92,4,0,50,48,0,0,134,46,0,0,68,142,2,0,134,46,0,0,156,22,4,0,134,46,0,0,64,131,4,0,137,44,0,0,139,0,0,0,140,23,70,0,0,0,0,0,136,57,0,0,0,55,57,0,136,57,0,0,25,57,57,63,38,57,57,192,137,57,0,0,0,56,57,0,136,57,0,0,1,58,80,1,3,57,57,58,137,57,0,0,130,57,0,0,136,58,0,0,49,57,57,58,140,79,2,0,1,58,80,1,135,57,0,0,58,0,0,0,1,57,68,1,3,47,56,57,1,57,60,1,3,37,56,57,1,57,56,1,3,40,56,57,1,57,52,1,3,38,56,57,1,57,48,1,3,39,56,57,1,57,44,1,3,42,56,57,1,57,40,1,3,45,56,57,1,57,36,1,3,43,56,57,1,57,32,1,3,44,56,57,1,57,28,1,3,48,56,57,1,57,24,1,3,50,56,57,1,57,20,1,3,49,56,57,1,57,16,1,3,51,56,57,1,57,12,1,3,52,56,57,1,57,8,1,3,29,56,57,1,57,4,1,3,28,56,57,1,57,0,1,3,34,56,57,1,57,252,0,3,53,56,57,1,57,248,0,3,35,56,57,1,57,244,0,3,54,56,57,1,57,240,0,3,31,56,57,1,57,236,0,3,32,56,57,1,57,232,0,3,30,56,57,25,36,56,12,25,46,56,8,25,41,56,4,0,33,56,0,1,57,64,1,97,56,57,0,85,37,1,0,85,40,2,0,85,38,3,0,85,39,4,0,85,42,5,0,85,45,6,0,85,43,7,0,85,44,8,0,89,48,9,0,89,50,10,0,89,49,11,0,89,51,12,0,85,52,13,0,85,29,14,0,85,28,15,0,85,34,16,0,85,53,17,0,85,35,18,0,85,54,19,0,85,31,20,0,85,32,21,0,85,30,22,0,82,58,40,0,82,59,38,0,82,60,45,0,82,61,43,0,82,62,29,0,134,57,0,0,32,148,3,0,36,58,59,60,61,62,0,0,88,24,48,0,145,24,24,0,88,25,50,0,145,25,25,0,88,26,49,0,145,26,26,0,88,27,51,0,145,27,27,0,82,62,52,0,134,57,0,0,80,146,2,0,36,24,25,26,27,62,0,0,82,62,35,0,82,61,54,0,134,57,0,0,44,187,3,0,36,62,61,0,134,57,0,0,52,240,1,0,36,0,0,0,85,41,57,0,82,61,41,0,135,57,10,0,61,0,0,0,85,33,57,0,82,57,33,0,121,57,28,0,82,61,37,0,82,62,39,0,82,60,42,0,82,59,44,0,82,58,28,0,82,63,34,0,82,64,53,0,82,65,31,0,82,66,32,0,82,67,30,0,82,68,33,0,82,69,41,0,134,57,0,0,240,20,1,0,36,61,62,60,59,58,63,64,65,66,67,68,69,0,0,0,85,46,57,0,82,69,33,0,135,57,7,0,69,0,0,0,116,47,46,0,82,23,47,0,137,55,0,0,139,23,0,0,119,0,6,0,1,57,0,0,85,47,57,0,82,23,47,0,137,55,0,0,139,23,0,0,1,57,0,0,139,57,0,0,140,3,36,0,0,0,0,0,136,31,0,0,0,29,31,0,136,31,0,0,25,31,31,63,38,31,31,192,137,31,0,0,0,30,31,0,136,31,0,0,25,31,31,96,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,28,82,2,0,1,32,96,0,135,31,0,0,32,0,0,0,25,10,30,92,25,19,30,88,25,13,30,84,25,9,30,80,25,11,30,76,25,15,30,72,25,17,30,68,25,12,30,64,25,8,30,60,25,7,30,56,25,14,30,52,25,16,30,48,25,25,30,44,25,18,30,40,25,20,30,36,25,21,30,32,25,22,30,28,25,23,30,24,25,24,30,20,25,26,30,16,25,27,30,12,25,28,30,8,25,5,30,4,0,6,30,0,85,18,0,0,85,20,1,0,85,21,2,0,82,31,18,0,32,31,31,0,82,32,20,0,32,32,32,0,20,31,31,32,82,32,21,0,32,32,32,0,20,31,31,32,121,31,6,0,1,31,254,255,85,25,31,0,82,4,25,0,137,29,0,0,139,4,0,0,82,31,18,0,25,31,31,16,116,22,31,0,116,7,22,0,85,14,23,0,85,16,24,0,82,31,14,0,120,31,7,0,1,32,54,60,1,33,246,58,1,34,222,127,1,35,83,60,135,31,1,0,32,33,34,35,82,31,16,0,120,31,7,0,1,35,109,60,1,34,246,58,1,33,223,127,1,32,83,60,135,31,1,0,35,34,33,32,116,8,7,0,82,31,14,0,82,32,8,0,2,33,0,0,255,255,255,127,19,32,32,33,85,31,32,0,116,12,7,0,82,32,16,0,82,31,12,0,2,33,0,0,0,0,0,128,19,31,31,33,85,32,31,0,82,31,18,0,25,31,31,20,116,26,31,0,116,11,26,0,85,15,27,0,85,17,28,0,82,31,15,0,120,31,7,0,1,32,54,60,1,33,246,58,1,34,222,127,1,35,83,60,135,31,1,0,32,33,34,35,82,31,17,0,120,31,7,0,1,35,109,60,1,34,246,58,1,33,223,127,1,32,83,60,135,31,1,0,35,34,33,32,116,9,11,0,82,31,15,0,82,32,9,0,2,33,0,0,255,255,255,127,19,32,32,33,85,31,32,0,116,13,11,0,82,32,17,0,82,31,13,0,2,33,0,0,0,0,0,128,19,31,31,33,85,32,31,0,82,31,28,0,82,32,24,0,45,31,31,32,8,84,2,0,82,31,18,0,106,31,31,4,82,32,27,0,4,31,31,32,85,5,31,0,119,0,5,0,82,31,23,0,82,32,27,0,4,31,31,32,85,5,31,0,82,31,20,0,116,6,31,0,82,31,5,0,82,32,6,0,48,31,31,32,52,84,2,0,116,6,5,0,82,31,20,0,116,31,6,0,116,19,18,0,82,31,19,0,120,31,7,0,1,32,130,59,1,33,246,58,1,34,211,127,1,35,87,61,135,31,1,0,32,33,34,35,82,31,19,0,82,3,31,0,82,31,19,0,25,31,31,20,116,10,31,0,82,31,21,0,82,35,10,0,2,34,0,0,255,255,255,127,19,35,35,34,3,35,3,35,85,31,35,0,82,35,18,0,103,35,35,24,43,35,35,1,38,35,35,1,121,35,8,0,82,31,21,0,82,31,31,0,1,34,0,0,82,33,20,0,82,33,33,0,135,35,5,0,31,34,33,0,1,35,0,0,85,25,35,0,82,4,25,0,137,29,0,0,139,4,0,0,140,3,36,0,0,0,0,0,136,31,0,0,0,29,31,0,136,31,0,0,25,31,31,63,38,31,31,192,137,31,0,0,0,30,31,0,136,31,0,0,25,31,31,96,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,32,85,2,0,1,32,96,0,135,31,0,0,32,0,0,0,25,10,30,92,25,19,30,88,25,13,30,84,25,9,30,80,25,11,30,76,25,15,30,72,25,17,30,68,25,12,30,64,25,8,30,60,25,7,30,56,25,14,30,52,25,16,30,48,25,25,30,44,25,18,30,40,25,20,30,36,25,21,30,32,25,26,30,28,25,27,30,24,25,28,30,20,25,22,30,16,25,23,30,12,25,24,30,8,25,5,30,4,0,6,30,0,85,18,0,0,85,20,1,0,85,21,2,0,82,31,18,0,32,31,31,0,82,32,20,0,32,32,32,0,20,31,31,32,82,32,21,0,32,32,32,0,20,31,31,32,121,31,6,0,1,31,254,255,85,25,31,0,82,4,25,0,137,29,0,0,139,4,0,0,82,31,18,0,25,31,31,20,116,26,31,0,116,7,26,0,85,14,27,0,85,16,28,0,82,31,14,0,120,31,7,0,1,32,54,60,1,33,246,58,1,34,222,127,1,35,83,60,135,31,1,0,32,33,34,35,82,31,16,0,120,31,7,0,1,35,109,60,1,34,246,58,1,33,223,127,1,32,83,60,135,31,1,0,35,34,33,32,116,8,7,0,82,31,14,0,82,32,8,0,2,33,0,0,255,255,255,127,19,32,32,33,85,31,32,0,116,12,7,0,82,32,16,0,82,31,12,0,2,33,0,0,0,0,0,128,19,31,31,33,85,32,31,0,82,31,18,0,25,31,31,16,116,22,31,0,116,11,22,0,85,15,23,0,85,17,24,0,82,31,15,0,120,31,7,0,1,32,54,60,1,33,246,58,1,34,222,127,1,35,83,60,135,31,1,0,32,33,34,35,82,31,17,0,120,31,7,0,1,35,109,60,1,34,246,58,1,33,223,127,1,32,83,60,135,31,1,0,35,34,33,32,116,9,11,0,82,31,15,0,82,32,9,0,2,33,0,0,255,255,255,127,19,32,32,33,85,31,32,0,116,13,11,0,82,32,17,0,82,31,13,0,2,33,0,0,0,0,0,128,19,31,31,33,85,32,31,0,82,31,24,0,82,32,28,0,45,31,31,32,8,87,2,0,82,31,27,0,82,32,23,0,4,31,31,32,85,5,31,0,119,0,6,0,82,31,18,0,106,31,31,4,82,32,23,0,4,31,31,32,85,5,31,0,82,31,20,0,116,6,31,0,82,31,5,0,82,32,6,0,48,31,31,32,56,87,2,0,116,6,5,0,82,31,20,0,116,31,6,0,116,19,18,0,82,31,19,0,120,31,7,0,1,32,130,59,1,33,246,58,1,34,205,127,1,35,34,60,135,31,1,0,32,33,34,35,82,31,19,0,82,3,31,0,82,31,19,0,25,31,31,16,116,10,31,0,82,31,21,0,82,35,10,0,2,34,0,0,255,255,255,127,19,35,35,34,3,35,3,35,85,31,35,0,1,35,0,0,85,25,35,0,82,4,25,0,137,29,0,0,139,4,0,0,140,1,27,0,0,0,0,0,2,21,0,0,255,0,0,0,1,18,0,0,136,22,0,0,0,19,22,0,136,22,0,0,25,22,22,63,38,22,22,192,137,22,0,0,0,20,22,0,136,22,0,0,1,23,0,10,3,22,22,23,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,4,88,2,0,1,23,0,10,135,22,0,0], eb + 143360);
  HEAPU8.set([23,0,0,0,1,22,240,9,3,15,20,22,1,22,236,9,3,3,20,22,1,22,8,2,3,17,20,22,25,12,20,32,0,5,20,0,1,22,4,2,3,11,20,22,1,22,0,2,3,13,20,22,1,22,252,1,3,10,20,22,1,22,248,1,3,9,20,22,1,22,244,1,3,8,20,22,1,22,240,1,3,14,20,22,1,22,236,1,3,16,20,22,1,22,232,1,3,4,20,22,1,22,244,9,3,7,20,22,85,3,0,0,82,23,3,0,1,24,5,0,134,22,0,0,128,225,3,0,23,24,0,0,1,24,1,1,3,22,22,24,85,10,22,0,82,24,3,0,1,23,5,0,134,22,0,0,128,225,3,0,24,23,0,0,25,22,22,1,85,9,22,0,82,23,3,0,1,24,4,0,134,22,0,0,128,225,3,0,23,24,0,0,25,22,22,4,85,8,22,0,82,22,10,0,82,24,9,0,3,22,22,24,85,14,22,0,1,22,0,0,85,5,22,0,1,24,0,0,109,5,4,24,1,22,0,0,109,5,8,22,1,24,0,0,109,5,12,24,1,22,0,0,108,5,16,22,1,24,0,0,107,5,18,24,1,24,0,0,85,11,24,0,82,24,8,0,82,22,11,0,56,24,24,22,92,89,2,0,82,22,3,0,1,23,3,0,134,24,0,0,128,225,3,0,22,23,0,0,85,16,24,0,1,24,128,19,82,23,11,0,91,24,24,23,82,23,16,0,95,5,24,23,82,23,11,0,25,23,23,1,85,11,23,0,119,0,238,255,1,24,19,0,134,23,0,0,164,96,2,0,17,5,24,0,120,23,6,0,1,23,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,1,23,0,0,85,13,23,0,82,23,14,0,82,24,13,0,49,23,23,24,164,89,2,0,1,18,25,0,119,0,90,0,82,24,3,0,134,23,0,0,184,144,3,0,24,17,0,0,85,4,23,0,82,23,4,0,34,23,23,0,1,24,19,0,82,22,4,0,17,24,24,22,20,23,23,24,121,23,3,0,1,18,9,0,119,0,76,0,82,23,4,0,34,23,23,16,121,23,9,0,82,23,4,0,19,23,23,21,0,6,23,0,82,1,13,0,25,23,1,1,85,13,23,0,95,12,1,6,119,0,226,255,1,23,0,0,83,7,23,0,82,23,4,0,32,23,23,16,121,23,17,0,82,24,3,0,1,22,2,0,134,23,0,0,128,225,3,0,24,22,0,0,25,23,23,3,85,4,23,0,82,23,13,0,120,23,3,0,1,18,14,0,119,0,49,0,82,23,13,0,26,23,23,1,90,23,12,23,83,7,23,0,119,0,24,0,82,23,4,0,32,23,23,17,121,23,9,0,82,22,3,0,1,24,3,0,134,23,0,0,128,225,3,0,22,24,0,0,25,23,23,3,85,4,23,0,119,0,13,0,82,23,4,0,33,23,23,18,121,23,3,0,1,18,19,0,119,0,28,0,82,24,3,0,1,22,7,0,134,23,0,0,128,225,3,0,24,22,0,0,25,23,23,11,85,4,23,0,82,23,14,0,82,22,13,0,4,23,23,22,82,22,4,0,47,23,23,22,216,90,2,0,1,18,22,0,119,0,13,0,82,22,13,0,3,22,12,22,79,24,7,0,19,24,24,21,82,25,4,0,135,23,5,0,22,24,25,0,82,23,13,0,82,25,4,0,3,23,23,25,85,13,23,0,119,0,162,255,32,23,18,9,121,23,10,0,1,25,37,67,134,23,0,0,40,112,4,0,25,0,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,119,0,79,0,32,23,18,14,121,23,10,0,1,25,37,67,134,23,0,0,40,112,4,0,25,0,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,119,0,68,0,32,23,18,19,121,23,8,0,1,25,53,67,1,24,1,63,1,22,26,16,1,26,61,67,135,23,1,0,25,24,22,26,119,0,59,0,32,23,18,22,121,23,10,0,1,26,37,67,134,23,0,0,40,112,4,0,26,0,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,119,0,48,0,32,23,18,25,121,23,46,0,82,23,13,0,82,26,14,0,46,23,23,26,232,91,2,0,1,26,37,67,134,23,0,0,40,112,4,0,26,0,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,82,26,3,0,25,26,26,32,82,22,10,0,134,23,0,0,164,96,2,0,26,12,22,0,120,23,6,0,1,23,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,82,22,3,0,1,26,4,8,3,22,22,26,82,26,10,0,3,26,12,26,82,24,9,0,134,23,0,0,164,96,2,0,22,26,24,0,121,23,7,0,1,23,1,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,119,0,6,0,1,23,0,0,85,15,23,0,82,2,15,0,137,19,0,0,139,2,0,0,1,23,0,0,139,23,0,0,140,1,34,0,0,0,0,0,2,27,0,0,0,1,0,0,2,28,0,0,0,18,0,0,2,29,0,0,0,19,0,0,1,22,0,0,136,30,0,0,0,23,30,0,136,30,0,0,25,30,30,63,38,30,30,192,137,30,0,0,0,24,30,0,136,30,0,0,25,30,30,32,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,220,92,2,0,1,31,32,0,135,30,0,0,31,0,0,0,25,18,24,24,25,9,24,20,25,21,24,16,25,20,24,12,25,17,24,8,25,16,24,4,0,15,24,0,25,19,24,28,85,9,0,0,82,30,9,0,25,30,30,16,116,21,30,0,82,25,9,0,25,31,25,32,134,30,0,0,184,144,3,0,25,31,0,0,85,20,30,0,82,2,20,0,82,30,20,0,47,30,30,27,172,93,2,0,34,30,2,0,121,30,3,0,1,22,4,0,119,0,156,0,82,30,9,0,106,30,30,24,82,31,21,0,50,30,30,31,136,93,2,0,82,31,9,0,82,32,21,0,1,33,1,0,134,30,0,0,84,58,3,0,31,32,33,0,120,30,3,0,1,22,7,0,119,0,142,0,82,30,9,0,25,30,30,16,116,21,30,0,82,30,20,0,1,33,255,0,19,30,30,33,0,12,30,0,82,1,21,0,25,30,1,1,85,21,30,0,83,1,12,0,119,0,217,255,45,30,2,27,188,93,2,0,1,22,11,0,119,0,126,0,82,30,20,0,1,33,1,1,4,30,30,33,85,20,30,0,1,30,128,17,82,33,20,0,41,33,33,2,3,30,30,33,116,16,30,0,82,30,20,0,41,30,30,2,94,30,28,30,121,30,11,0,82,30,9,0,82,33,20,0,41,33,33,2,94,33,28,33,134,10,0,0,128,225,3,0,30,33,0,0,82,33,16,0,3,33,33,10,85,16,33,0,82,26,9,0,1,30,4,8,3,30,26,30,134,33,0,0,184,144,3,0,26,30,0,0,85,20,33,0,82,33,20,0,34,33,33,0,121,33,3,0,1,22,15,0,119,0,91,0,1,33,128,18,82,30,20,0,41,30,30,2,3,33,33,30,116,15,33,0,82,33,20,0,41,33,33,2,94,33,29,33,121,33,11,0,82,33,9,0,82,30,20,0,41,30,30,2,94,30,29,30,134,11,0,0,128,225,3,0,33,30,0,0,82,30,15,0,3,30,30,11,85,15,30,0,82,30,21,0,82,33,9,0,106,33,33,20,4,30,30,33,82,33,15,0,47,30,30,33,184,94,2,0,1,22,19,0,119,0,63,0,82,30,9,0,106,30,30,24,82,33,21,0,82,32,16,0,3,33,33,32,48,30,30,33,4,95,2,0,82,33,9,0,82,32,21,0,82,31,16,0,134,30,0,0,84,58,3,0,33,32,31,0,120,30,3,0,1,22,22,0,119,0,47,0,82,30,9,0,25,30,30,16,116,21,30,0,82,30,21,0,1,31,0,0,82,32,15,0,4,31,31,32,3,30,30,31,85,17,30,0,82,30,15,0,32,30,30,1,121,30,18,0,82,30,17,0,78,30,30,0,83,19,30,0,82,30,16,0,120,30,2,0,119,0,116,255,78,3,19,0,82,4,21,0,25,30,4,1,85,21,30,0,83,4,3,0,82,30,16,0,26,13,30,1,85,16,13,0,33,30,13,0,120,30,247,255,119,0,105,255,82,30,16,0,120,30,2,0,119,0,102,255,82,5,17,0,25,30,5,1,85,17,30,0,78,6,5,0,82,7,21,0,25,30,7,1,85,21,30,0,83,7,6,0,82,30,16,0,26,14,30,1,85,16,14,0,33,30,14,0,120,30,244,255,119,0,88,255,32,30,22,4,121,30,10,0,1,31,118,66,134,30,0,0,40,112,4,0,31,0,0,0,85,18,30,0,82,8,18,0,137,23,0,0,139,8,0,0,119,0,49,0,32,30,22,7,121,30,7,0,1,30,0,0,85,18,30,0,82,8,18,0,137,23,0,0,139,8,0,0,119,0,41,0,32,30,22,11,121,30,10,0,82,30,9,0,82,31,21,0,109,30,16,31,1,31,1,0,85,18,31,0,82,8,18,0,137,23,0,0,139,8,0,0,119,0,30,0,32,31,22,15,121,31,10,0,1,30,118,66,134,31,0,0,40,112,4,0,30,0,0,0,85,18,31,0,82,8,18,0,137,23,0,0,139,8,0,0,119,0,19,0,32,31,22,19,121,31,10,0,1,30,135,66,134,31,0,0,40,112,4,0,30,0,0,0,85,18,31,0,82,8,18,0,137,23,0,0,139,8,0,0,119,0,8,0,32,31,22,22,121,31,6,0,1,31,0,0,85,18,31,0,82,8,18,0,137,23,0,0,139,8,0,0,1,31,0,0,139,31,0,0,140,3,34,0,0,0,0,0,2,26,0,0,0,2,0,0,2,27,0,0,0,4,0,0,2,28,0,0,100,4,0,0,1,20,0,0,136,29,0,0,0,21,29,0,136,29,0,0,25,29,29,63,38,29,29,192,137,29,0,0,0,22,29,0,136,29,0,0,1,30,192,0,3,29,29,30,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,16,97,2,0,1,30,192,0,135,29,0,0,30,0,0,0,1,29,180,0,3,14,22,29,1,29,176,0,3,18,22,29,1,29,172,0,3,16,22,29,1,29,168,0,3,13,22,29,1,29,164,0,3,9,22,29,1,29,160,0,3,11,22,29,1,29,156,0,3,7,22,29,25,12,22,80,0,17,22,0,1,29,152,0,3,15,22,29,1,29,148,0,3,6,22,29,1,29,184,0,3,8,22,29,1,29,144,0,3,10,22,29,85,18,0,0,85,16,1,0,85,13,2,0,1,29,0,0,85,11,29,0,0,19,17,0,25,23,19,68,1,29,0,0,85,19,29,0,25,19,19,4,54,29,19,23,140,97,2,0,82,30,18,0,1,31,0,0,135,29,5,0,30,31,27,0,1,29,0,0,85,9,29,0,82,29,13,0,82,31,9,0,56,29,29,31,248,97,2,0,82,29,16,0,82,31,9,0,91,29,29,31,41,29,29,2,3,4,17,29,82,29,4,0,25,29,29,1,85,4,29,0,82,29,9,0,25,29,29,1,85,9,29,0,119,0,241,255,1,29,0,0,85,17,29,0,1,29,1,0,85,9,29,0,1,29,16,0,82,31,9,0,56,29,29,31,80,98,2,0,1,29,1,0,82,31,9,0,22,29,29,31,82,31,9,0,41,31,31,2,94,31,17,31,47,29,29,31,64,98,2,0,1,20,7,0,119,0,5,0,82,29,9,0,25,29,29,1,85,9,29,0,119,0,239,255,32,29,20,7,121,29,9,0,1,31,89,67,134,29,0,0,40,112,4,0,31,0,0,0,85,14,29,0,82,3,14,0,137,21,0,0,139,3,0,0,1,29,0,0,85,7,29,0,1,29,1,0,85,9,29,0,1,29,16,0,82,31,9,0,56,29,29,31,132,99,2,0,82,29,9,0,41,29,29,2,82,31,7,0,97,12,29,31,82,31,18,0,3,31,31,27,82,29,9,0,41,29,29,1,82,30,7,0,96,31,29,30,82,30,18,0,3,30,30,28,82,29,9,0,41,29,29,1,82,31,11,0,96,30,29,31,82,31,7,0,82,29,9,0,41,29,29,2,94,29,17,29,3,31,31,29,85,7,31,0,82,31,9,0,41,31,31,2,94,31,17,31,121,31,10,0,1,31,1,0,82,29,9,0,22,31,31,29,82,29,7,0,26,29,29,1,49,31,31,29,36,99,2,0,1,20,13,0,119,0,25,0,82,31,18,0,1,29,32,4,3,31,31,29,82,29,9,0,41,29,29,2,82,30,7,0,1,32,16,0,82,33,9,0,4,32,32,33,22,30,30,32,97,31,29,30,82,30,7,0,41,30,30,1,85,7,30,0,82,30,11,0,82,29,9,0,41,29,29,2,94,29,17,29,3,30,30,29,85,11,30,0,82,30,9,0,25,30,30,1,85,9,30,0,119,0,194,255,32,30,20,13,121,30,9,0,1,29,37,67,134,30,0,0,40,112,4,0,29,0,0,0,85,14,30,0,82,3,14,0,137,21,0,0,139,3,0,0,82,30,18,0,1,29,32,4,3,30,30,29,2,29,0,0,0,0,1,0,109,30,64,29,1,29,0,0,85,9,29,0,82,29,13,0,82,30,9,0,56,29,29,30,4,101,2,0,82,29,16,0,82,30,9,0,91,29,29,30,85,15,29,0,82,29,15,0,121,29,65,0,82,24,18,0,82,29,15,0,41,29,29,1,0,25,29,0,82,29,15,0,41,29,29,2,94,29,12,29,3,30,24,27,93,30,30,25,4,29,29,30,3,30,24,28,93,30,30,25,3,29,29,30,85,6,29,0,82,29,15,0,41,29,29,9,82,30,9,0,20,29,29,30,84,8,29,0,82,29,18,0,1,30,132,4,3,29,29,30,82,30,6,0,82,31,15,0,95,29,30,31,82,31,18,0,1,30,164,5,3,31,31,30,82,30,6,0,41,30,30,1,82,29,9,0,96,31,30,29,82,29,15,0,36,29,29,9,121,29,24,0,82,30,15,0,41,30,30,2,94,30,12,30,82,31,15,0,134,29,0,0,176,64,4,0,30,31,0,0,85,10,29,0,82,29,10,0,56,29,26,29,220,100,2,0,82,29,18,0,82,31,10,0,41,31,31,1,80,30,8,0,96,29,31,30,82,30,10,0,1,31,1,0,82,29,15,0,22,31,31,29,3,30,30,31,85,10,30,0,119,0,242,255,82,30,15,0,41,30,30,2,3,5,12,30,82,30,5,0,25,30,30,1,85,5,30,0,82,30,9,0,25,30,30,1,85,9,30,0,119,0,179,255,1,30,1,0,85,14,30,0,82,3,14,0,137,21,0,0,139,3,0,0,140,2,41,0,0,0,0,0,2,34,0,0,52,128,0,0,2,35,0,0,53,128,0,0,2,36,0,0,74,128,0,0,136,37,0,0,0,31,37,0,136,37,0,0,1,38,144,0,3,37,37,38,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,108,101,2,0,1,38,144,0,135,37,0,0,38,0,0,0,25,28,31,24,25,27,31,16,0,26,31,0,25,29,31,120,25,22,31,116,25,23,31,112,25,25,31,48,25,21,31,44,25,24,31,40,1,37,128,0,97,31,37,0,109,31,124,1,2,37,0,0,208,0,2,0,82,37,37,0,2,38,0,0,24,1,2,0,82,38,38,0,49,37,37,38,124,104,2,0,2,37,0,0,212,0,2,0,82,37,37,0,2,38,0,0,28,1,2,0,82,38,38,0,49,37,37,38,124,104,2,0,2,37,0,0,24,1,2,0,82,37,37,0,2,38,0,0,208,0,2,0,82,38,38,0,49,37,37,38,116,102,2,0,2,37,0,0,28,1,2,0,82,37,37,0,2,38,0,0,212,0,2,0,82,38,38,0,49,37,37,38,116,102,2,0,2,37,0,0,40,1,2,0,2,38,0,0,208,0,2,0,82,38,38,0,85,37,38,0,2,38,0,0,44,1,2,0,2,37,0,0,212,0,2,0,82,37,37,0,85,38,37,0,2,37,0,0,48,1,2,0,1,38,0,0,85,37,38,0,2,38,0,0,52,1,2,0,1,37,0,0,85,38,37,0,137,31,0,0,139,0,0,0,2,37,0,0,212,0,2,0,82,5,37,0,2,37,0,0,24,1,2,0,82,6,37,0,2,37,0,0,28,1,2,0,82,7,37,0,2,37,0,0,208,0,2,0,82,37,37,0,85,28,37,0,109,28,4,5,109,28,8,6,109,28,12,7,1,38,3,0,1,39,39,58,134,37,0,0,48,143,3,0,38,39,28,0,2,37,0,0,24,1,2,0,82,15,37,0,76,37,15,0,145,15,37,0,2,38,0,0,28,1,2,0,82,39,38,0,76,39,39,0,145,39,39,0,66,37,15,39,145,37,37,0,89,21,37,0,2,37,0,0,208,0,2,0,82,17,37,0,76,37,17,0,145,17,37,0,2,38,0,0,212,0,2,0,82,39,38,0,76,39,39,0,145,39,39,0,66,37,17,39,145,37,37,0,89,24,37,0,88,8,21,0,145,8,8,0,88,37,24,0,145,37,37,0,72,37,8,37,121,37,40,0,2,37,0,0,40,1,2,0,2,39,0,0,208,0,2,0,82,39,39,0,85,37,39,0,2,39,0,0,208,0,2,0,82,18,39,0,76,39,18,0,145,18,39,0,2,39,0,0,44,1,2,0,88,40,21,0,145,40,40,0,66,38,18,40,145,38,38,0,134,37,0,0,140,136,4,0,38,0,0,0,75,37,37,0,85,39,37,0,2,37,0,0,48,1,2,0,1,39,0,0,85,37,39,0,2,39,0,0,52,1,2,0,2,37,0,0,44,1,2,0,82,37,37,0,2,38,0,0,212,0,2,0,82,38,38,0,4,37,37,38,85,39,37,0,137,31,0,0,139,0,0,0,119,0,39,0,2,37,0,0,212,0,2,0,82,19,37,0,76,37,19,0,145,19,37,0,2,37,0,0,40,1,2,0,88,40,21,0,145,40,40,0,65,38,19,40,145,38,38,0,134,39,0,0,140,136,4,0,38,0,0,0,75,39,39,0,85,37,39,0,2,39,0,0,44,1,2,0,2,37,0,0,212,0,2,0,82,37,37,0,85,39,37,0,2,37,0,0,48,1,2,0,2,39,0,0,40,1,2,0,82,39,39,0,2,38,0,0,208,0,2,0,82,38,38,0,4,39,39,38,85,37,39,0,2,39,0,0,52,1,2,0,1,37,0,0,85,39,37,0,137,31,0,0,139,0,0,0,2,37,0,0,212,0,2,0,82,9,37,0,2,37,0,0,24,1,2,0,82,10,37,0,2,37,0,0,28,1,2,0,82,11,37,0,2,37,0,0,208,0,2,0,82,37,37,0,85,26,37,0,109,26,4,9,109,26,8,10,109,26,12,11,1,39,4,0,1,38,152,57,134,37,0,0,48,143,3,0,39,38,26,0,2,37,0,0,24,1,2,0,82,12,37,0,76,37,12,0,145,12,37,0,2,39,0,0,208,0,2,0,82,38,39,0,76,38,38,0,145,38,38,0,66,37,12,38,145,37,37,0,89,29,37,0,2,37,0,0,28,1,2,0,82,16,37,0,76,37,16,0,145,16,37,0,2,39,0,0,212,0,2,0,82,38,39,0,76,38,38,0,145,38,38,0,66,37,16,38,145,37,37,0,89,22,37,0,88,2,29,0,145,2,2,0,88,37,22,0,145,37,37,0,72,37,2,37,121,37,38,0,2,37,0,0,40,1,2,0,2,38,0,0,24,1,2,0,82,38,38,0,85,37,38,0,2,38,0,0,212,0,2,0,82,20,38,0,76,38,20,0,145,20,38,0,2,38,0,0,44,1,2,0,88,40,29,0,145,40,40,0,65,39,20,40,145,39,39,0,134,37,0,0,140,136,4,0,39,0,0,0,75,37,37,0,85,38,37,0,2,37,0,0,48,1,2,0,1,38,0,0,85,37,38,0,2,38,0,0,52,1,2,0,2,37,0,0,28,1,2,0,82,37,37,0,2,39,0,0,44,1,2,0,82,39,39,0,4,37,37,39,85,38,37,0,119,0,37,0,2,37,0,0,208,0,2,0,82,13,37,0,76,37,13,0,145,13,37,0,2,37,0,0,40,1,2,0,88,40,22,0,145,40,40,0,65,39,13,40,145,39,39,0,134,38,0,0,140,136,4,0,39,0,0,0,75,38,38,0,85,37,38,0,2,38,0,0,44,1,2,0,2,37,0,0,28,1,2,0,82,37,37,0,85,38,37,0,2,37,0,0,48,1,2,0,2,38,0,0,24,1,2,0,82,38,38,0,2,39,0,0,40,1,2,0,82,39,39,0,4,38,38,39,85,37,38,0,2,38,0,0,52,1,2,0,1,37,0,0,85,38,37,0,2,37,0,0,40,1,2,0,82,14,37,0,76,37,14,0,145,14,37,0,2,39,0,0,208,0,2,0,82,38,39,0,76,38,38,0,145,38,38,0,66,37,14,38,145,37,37,0,89,23,37,0,88,3,23,0,145,3,3,0,88,38,23,0,145,38,38,0,59,39,1,0,145,39,39,0,134,37,0,0,152,203,3,0,25,3,38,39,2,30,0,0,216,0,2,0,0,32,25,0,25,33,30,64,116,30,32,0,25,30,30,4,25,32,32,4,54,37,30,33,220,106,2,0,2,37,0,0,40,1,2,0,2,39,0,0,24,1,2,0,82,39,39,0,85,37,39,0,2,39,0,0,44,1,2,0,2,37,0,0,28,1,2,0,82,37,37,0,85,39,37,0,2,37,0,0,44,1,2,0,82,4,37,0,2,37,0,0,40,1,2,0,82,37,37,0,85,27,37,0,109,27,4,4,1,39,4,0,1,38,230,57,134,37,0,0,48,143,3,0,39,38,27,0,137,31,0,0,139,0,0,0,140,7,35,0,0,0,0,0,1,27,0,0,136,30,0,0,0,28,30,0,136,30,0,0,25,30,30,63,38,30,30,192,137,30,0,0,0,29,30,0,136,30,0,0,25,30,30,48,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,172,107,2,0,1,31,48,0,135,30,0,0,31,0,0,0,25,16,29,36,25,23,29,32,25,20,29,28,25,21,29,24,25,19,29,20,25,15,29,16,25,14,29,12,25,17,29,8,25,22,29,4,0,26,29,0,85,16,0,0,89,23,1,0,85,20,2,0,85,21,3,0,89,19,4,0,85,15,5,0,85,14,6,0,82,30,21,0,82,31,20,0,4,24,30,31,88,11,23,0,145,11,11,0,1,33,192,24,82,34,16,0,41,34,34,3,3,33,33,34,106,33,33,4,38,33,33,7,135,32,238,0,33,11,0,0,145,32,32,0,59,33,2,0,145,33,33,0,65,30,32,33,145,30,30,0,135,31,18,0,30,0,0,0,75,31,31,0,47,31,31,24,100,108,2,0,1,30,171,75,1,33,184,68,1,32,67,4,1,34,20,76,135,31,1,0,30,33,32,34,82,31,15,0,116,31,20,0,82,31,15,0,82,34,21,0,109,31,4,34,82,34,15,0,106,34,34,4,82,31,15,0,82,31,31,0,47,34,34,31,168,108,2,0,1,31,61,76,1,32,184,68,1,33,72,4,1,30,20,76,135,34,1,0,31,32,33,30,1,34,0,0,85,17,34,0,82,34,21,0,82,30,20,0,4,34,34,30,82,30,17,0,54,34,34,30,112,109,2,0,82,33,17,0,82,32,20,0,3,30,33,32,76,30,30,0,145,30,30,0,61,32,0,0,0,0,0,63,145,32,32,0,63,34,30,32,145,34,34,0,89,22,34,0,88,7,22,0,145,7,7,0,88,32,19,0,145,32,32,0,64,34,7,32,145,34,34,0,89,26,34,0,88,8,26,0,145,8,8,0,88,9,23,0,145,9,9,0,1,34,192,24,82,32,16,0,41,32,32,3,94,34,34,32,38,34,34,7,135,13,239,0,34,8,9,0,145,13,13,0,88,34,23,0,145,34,34,0,65,18,13,34,145,18,18,0,82,34,14,0,82,32,17,0,41,32,32,2,101,34,32,18,82,32,17,0,25,32,32,1,85,17,32,0,119,0,209,255,82,34,21,0,25,32,34,1,76,32,32,0,145,32,32,0,61,34,0,0,0,0,0,63,145,34,34,0,63,12,32,34,145,12,12,0,88,34,19,0,145,34,34,0,64,25,12,34,145,25,25,0,88,10,23,0,145,10,10,0,1,32,192,24,82,30,16,0,41,30,30,3,94,32,32,30,38,32,32,7,135,34,239,0,32,25,10,0,145,34,34,0,59,32,0,0,145,32,32,0,69,34,34,32,120,34,7,0,1,32,96,76,1,30,184,68,1,33,81,4,1,31,20,76,135,34,1,0,32,30,33,31,82,34,21,0,82,31,20,0,4,34,34,31,85,17,34,0,82,34,17,0,34,34,34,0,121,34,3,0,1,27,14,0,119,0,23,0,82,31,14,0,82,33,17,0,41,33,33,2,100,34,31,33,145,34,34,0,59,31,0,0,145,31,31,0,70,34,34,31,121,34,3,0,1,27,14,0,119,0,12,0,82,34,15,0,82,31,15,0,82,31,31,0,82,33,17,0,3,31,31,33,26,31,31,1,109,34,4,31,82,31,17,0,26,31,31,1,85,17,31,0,119,0,230,255,32,31,27,14,121,31,3,0,137,28,0,0,139,0,0,0,139,0,0,0,140,7,41,0,0,0,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,80,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,188,110,2,0,1,34,80,0,135,33,0,0,34,0,0,0,25,26,32,64,25,27,32,60,25,22,32,56,25,16,32,52,25,19,32,48,25,18,32,44,25,31,32,40,25,24,32,36,25,28,32,32,25,23,32,28,25,17,32,24,25,21,32,20,25,20,32,8,25,29,32,4,0,30,32,0,85,26,0,0,85,27,1,0,85,22,2,0,85,16,3,0,85,19,4,0,85,18,5,0,85,31,6,0,1,33,1,0,82,34,26,0,82,34,34,0,22,33,33,34,26,33,33,1,82,34,31,0,47,33,33,34,104,112,2,0,82,33,31,0,1,34,1,0,82,35,26,0,82,35,35,0,22,34,34,35,4,33,33,34,85,24,33,0,82,33,24,0,120,33,3,0,137,32,0,0,139,0,0,0,82,33,27,0,82,34,26,0,25,34,34,4,82,35,24,0,91,34,34,35,4,33,33,34,85,28,33,0,82,33,22,0,82,34,26,0,1,35,4,1,3,34,34,35,82,35,24,0,91,34,34,35,4,33,33,34,85,23,33,0,82,33,16,0,82,34,26,0,1,35,4,2,3,34,34,35,82,35,24,0,91,34,34,35,4,33,33,34,85,17,33,0,82,7,28,0,82,8,23,0,82,9,17,0,82,34,28,0,34,34,34,0,121,34,5,0,1,34,0,0,4,34,34,7,0,33,34,0,119,0,2,0,0,33,7,0,82,35,23,0,34,35,35,0,121,35,5,0,1,35,0,0,4,35,35,8,0,34,35,0,119,0,2,0,0,34,8,0,3,33,33,34,82,35,17,0,34,35,35,0,121,35,5,0,1,35,0,0,4,35,35,9,0,34,35,0,119,0,2,0,0,34,9,0,3,33,33,34,85,21,33,0,82,33,18,0,82,33,33,0,82,34,21,0,49,33,33,34,80,112,2,0,137,32,0,0,139,0,0,0,82,33,19,0,116,33,24,0,82,33,18,0,116,33,21,0,137,32,0,0,139,0,0,0,116,20,27,0,82,34,22,0,109,20,4,34,82,33,16,0,109,20,8,33,82,33,26,0,1,34,4,3,3,33,33,34,82,34,31,0,91,33,33,34,41,33,33,2,3,33,20,33,116,29,33,0,82,33,26,0,1,34,3,4,3,33,33,34,82,34,31,0,91,33,33,34,85,30,33,0,82,10,26,0,82,11,27,0,82,12,22,0,82,13,16,0,82,14,19,0,82,15,18,0,82,33,31,0,41,33,33,1,0,25,33,0,82,33,29,0,82,34,30,0,47,33,33,34,92,113,2,0,134,33,0,0,132,110,2,0,10,11,12,13,14,15,25,0,82,33,18,0,82,33,33,0,82,34,30,0,82,35,29,0,4,34,34,35,49,33,33,34,28,113,2,0,137,32,0,0,139,0,0,0,82,34,26,0,82,35,27,0,82,36,22,0,82,37,16,0,82,38,19,0,82,39,18,0,82,40,31,0,41,40,40,1,25,40,40,1,134,33,0,0,132,110,2,0,34,35,36,37,38,39,40,0,137,32,0,0,139,0,0,0,119,0,29,0,25,40,25,1,134,33,0,0,132,110,2,0,10,11,12,13,14,15,40,0,82,33,18,0,82,33,33,0,82,40,29,0,82,39,30,0,4,40,40,39,49,33,33,40,148,113,2,0,137,32,0,0,139,0,0,0,82,40,26,0,82,39,27,0,82,38,22,0,82,37,16,0,82,36,19,0,82,35,18,0,82,34,31,0,41,34,34,1,134,33,0,0,132,110,2,0,40,39,38,37,36,35,34,0,137,32,0,0,139,0,0,0,139,0,0,0,140,4,16,0,0,0,0,0,2,9,0,0,8,25,0,0,2,10,0,0,7,25,0,0,2,11,0,0,1,20,0,0,136,12,0,0,0,8,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,32,114,2,0,1,13,32,0,135,12,0,0,13,0,0,0,25,4,8,16,25,6,8,12,25,5,8,8,25,7,8,4,85,4,0,0,85,6,1,0,85,5,2,0,85,7,3,0,82,12,6,0,1,13,255,255,85,12,13,0,82,13,5,0,1,12,255,255,85,13,12,0,82,12,7,0,1,13,255,255,85,12,13,0,82,13,4,0,1,14,1,0,1,15,21,0,138,13,14,15,224,114,2,0,4,115,2,0,40,115,2,0,76,115,2,0,104,115,2,0,140,115,2,0,176,115,2,0,204,115,2,0,8,116,2,0,60,116,2,0,112,116,2,0,152,116,2,0,192,116,2,0,232,116,2,0,16,117,2,0,56,117,2,0,96,117,2,0,136,117,2,0,176,117,2,0,216,117,2,0,0,118,2,0,1,12,4,0,1,15,150,54,134,14,0,0,48,143,3,0,12,15,8,0,119,0,211,0,82,12,6,0,1,14,9,25,85,12,14,0,82,14,5,0,1,12,9,25,85,14,12,0,82,12,7,0,85,12,11,0,119,0,202,0,82,12,6,0,1,14,10,25,85,12,14,0,82,14,5,0,1,12,10,25,85,14,12,0,82,12,7,0,85,12,11,0,119,0,193,0,82,12,6,0,85,12,10,0,82,12,5,0,85,12,10,0,82,12,7,0,2,14,0,0,99,131,0,0,85,12,14,0,119,0,184,0,82,14,6,0,85,14,10,0,82,14,5,0,85,14,10,0,82,14,7,0,85,14,11,0,119,0,177,0,82,14,6,0,85,14,9,0,82,14,5,0,85,14,9,0,82,14,7,0,2,12,0,0,52,128,0,0,85,14,12,0,119,0,168,0,82,12,6,0,85,12,9,0,82,12,5,0,85,12,9,0,82,12,7,0,2,14,0,0,51,128,0,0,85,12,14,0,119,0,159,0,82,14,6,0,85,14,9,0,82,14,5,0,85,14,9,0,82,14,7,0,85,14,11,0,119,0,152,0,2,14,0,0,217,4,2,0,78,14,14,0,38,14,14,1,121,14,4,0,82,14,6,0,1,12,9,25,85,14,12,0,82,12,5,0,1,14,9,25,85,12,14,0,82,14,7,0,1,12,6,20,85,14,12,0,119,0,137,0,2,12,0,0,217,4,2,0,78,12,12,0,38,12,12,1,121,12,3,0,82,12,6,0,85,12,10,0,82,12,5,0,85,12,10,0,82,12,7,0,1,14,6,20,85,12,14,0,119,0,124,0,2,14,0,0,217,4,2,0,78,14,14,0,38,14,14,1,121,14,3,0,82,14,6,0,85,14,9,0,82,14,5,0,85,14,9,0,82,14,7,0,1,12,6,20,85,14,12,0,119,0,111,0,2,12,0,0,218,4,2,0,78,12,12,0,38,12,12,1,121,12,106,0,82,12,6,0,2,14,0,0,240,131,0,0,85,12,14,0,119,0,101,0,2,14,0,0,218,4,2,0,78,14,14,0,38,14,14,1,121,14,96,0,82,14,6,0,2,12,0,0,241,131,0,0,85,14,12,0,119,0,91,0,2,12,0,0,218,4,2,0,78,12,12,0,38,12,12,1,121,12,86,0,82,12,6,0,2,14,0,0,242,131,0,0,85,12,14,0,119,0,81,0,2,14,0,0,218,4,2,0,78,14,14,0,38,14,14,1,121,14,76,0,82,14,6,0,2,12,0,0,243,131,0,0,85,14,12,0,119,0,71,0,2,12,0,0,219,4,2,0,78,12,12,0,38,12,12,1,121,12,66,0,82,12,6,0,2,14,0,0,100,141,0,0,85,12,14,0,119,0,61,0,2,14,0,0,220,4,2,0,78,14,14,0,38,14,14,1,121,14,56,0,82,14,6,0,2,12,0,0,116,146,0,0,85,14,12,0,119,0,51,0,2,12,0,0,220,4,2,0,78,12,12,0,38,12,12,1,121,12,46,0,82,12,6,0,2,14,0,0,120,146,0,0,85,12,14,0,119,0,41,0,2,14,0,0,221,4,2,0,78,14,14,0,38,14,14,1,121,14,36,0,82,14,6,0,2,12,0,0,0,140,0,0,85,14,12,0,119,0,31,0,2,12,0,0,221,4,2,0,78,12,12,0,38,12,12,1,121,12,26,0,82,12,6,0,2,14,0,0,2,140,0,0,85,12,14,0,119,0,21,0,2,14,0,0,222,4,2,0,78,14,14,0,38,14,14,1,121,14,16,0,82,14,6,0,2,12,0,0,176,147,0,0,85,14,12,0,119,0,11,0,2,12,0,0,222,4,2,0,78,12,12,0,38,12,12,1,121,12,6,0,82,12,6,0,2,14,0,0,183,147,0,0,85,12,14,0,119,0,1,0,137,8,0,0,139,0,0,0,140,3,33,0,0,0,0,0,136,28,0,0,0,26,28,0,136,28,0,0,25,28,28,63,38,28,28,192,137,28,0,0,0,27,28,0,136,28,0,0,25,28,28,80,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,124,118,2,0,1,29,80,0,135,28,0,0,29,0,0,0,25,14,27,68,25,15,27,64,25,10,27,60,25,9,27,56,25,7,27,52,25,17,27,48,25,18,27,44,25,8,27,40,25,20,27,36,25,21,27,32,25,19,27,28,25,22,27,24,25,16,27,20,25,23,27,16,25,24,27,12,25,25,27,8,25,12,27,4,0,13,27,0,85,19,0,0,85,22,1,0,85,16,2,0,82,28,19,0,120,28,6,0,1,28,254,255,85,21,28,0,82,5,21,0,137,26,0,0,139,5,0,0,82,3,16,0,116,20,19,0,82,28,20,0,120,28,7,0,1,29,130,59,1,30,246,58,1,31,211,127,1,32,87,61,135,28,1,0,29,30,31,32,82,28,20,0,82,6,28,0,82,28,20,0,25,28,28,20,116,8,28,0,82,28,8,0,2,32,0,0,255,255,255,127,19,28,28,32,3,28,6,28,46,28,3,28,88,119,2,0,1,28,254,255,85,21,28,0,82,5,21,0,137,26,0,0,139,5,0,0,82,28,19,0,25,28,28,20,116,23,28,0,116,7,23,0,85,17,24,0,85,18,25,0,82,28,17,0,120,28,7,0,1,32,54,60,1,31,246,58,1,30,222,127,1,29,83,60,135,28,1,0,32,31,30,29,82,28,18,0,120,28,7,0,1,29,109,60,1,30,246,58,1,31,223,127,1,32,83,60,135,28,1,0,29,30,31,32,116,9,7,0,82,28,17,0,82,32,9,0,2,31,0,0,255,255,255,127,19,32,32,31,85,28,32,0,116,10,7,0,82,32,18,0,82,28,10,0,2,31,0,0,0,0,0,128,19,28,28,31,85,32,28,0,82,28,24,0,82,32,22,0,3,28,28,32,85,12,28,0,82,28,19,0,106,28,28,4,82,32,12,0,48,28,28,32,32,120,2,0,1,28,254,255,85,21,28,0,82,5,21,0,137,26,0,0,139,5,0,0,116,13,25,0,82,28,12,0,82,32,19,0,106,32,32,4,45,28,28,32,84,120,2,0,1,28,0,0,85,12,28,0,82,28,13,0,2,32,0,0,0,0,0,128,21,28,28,32,85,13,28,0,82,28,19,0,25,11,28,20,82,4,12,0,116,14,13,0,85,15,4,0,82,28,15,0,82,32,14,0,20,28,28,32,85,11,28,0,1,28,0,0,85,21,28,0,82,5,21,0,137,26,0,0,139,5,0,0,140,3,33,0,0,0,0,0,136,28,0,0,0,26,28,0,136,28,0,0,25,28,28,63,38,28,28,192,137,28,0,0,0,27,28,0,136,28,0,0,25,28,28,80,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,216,120,2,0,1,29,80,0,135,28,0,0,29,0,0,0,25,14,27,68,25,15,27,64,25,10,27,60,25,9,27,56,25,7,27,52,25,17,27,48,25,18,27,44,25,8,27,40,25,20,27,36,25,24,27,32,25,19,27,28,25,25,27,24,25,16,27,20,25,21,27,16,25,22,27,12,25,23,27,8,25,12,27,4,0,13,27,0,85,19,0,0,85,25,1,0,85,16,2,0,82,28,19,0,120,28,6,0,1,28,254,255,85,24,28,0,82,5,24,0,137,26,0,0,139,5,0,0,82,3,16,0,116,20,19,0,82,28,20,0,120,28,7,0,1,29,130,59,1,30,246,58,1,31,205,127,1,32,34,60,135,28,1,0,29,30,31,32,82,28,20,0,82,6,28,0,82,28,20,0,25,28,28,16,116,8,28,0,82,28,8,0,2,32,0,0,255,255,255,127,19,28,28,32,3,28,6,28,46,28,3,28,180,121,2,0,1,28,254,255,85,24,28,0,82,5,24,0,137,26,0,0,139,5,0,0,82,28,19,0,25,28,28,16,116,21,28,0,116,7,21,0,85,17,22,0,85,18,23,0,82,28,17,0,120,28,7,0,1,32,54,60,1,31,246,58,1,30,222,127,1,29,83,60,135,28,1,0,32,31,30,29,82,28,18,0,120,28,7,0,1,29,109,60,1,30,246,58,1,31,223,127,1,32,83,60,135,28,1,0,29,30,31,32,116,9,7,0,82,28,17,0,82,32,9,0,2,31,0,0,255,255,255,127,19,32,32,31,85,28,32,0,116,10,7,0,82,32,18,0,82,28,10,0,2,31,0,0,0,0,0,128,19,28,28,31,85,32,28,0,82,28,22,0,82,32,25,0,3,28,28,32,85,12,28,0,82,28,19,0,106,28,28,4,82,32,12,0,48,28,28,32,124,122,2,0,1,28,254,255,85,24,28,0,82,5,24,0,137,26,0,0,139,5,0,0,116,13,23,0,82,28,12,0,82,32,19,0,106,32,32,4,45,28,28,32,176,122,2,0,1,28,0,0,85,12,28,0,82,28,13,0,2,32,0,0,0,0,0,128,21,28,28,32,85,13,28,0,82,28,19,0,25,11,28,16,82,4,12,0,116,14,13,0,85,15,4,0,82,28,15,0,82,32,14,0,20,28,28,32,85,11,28,0,1,28,0,0,85,24,28,0,82,5,24,0,137,26,0,0,139,5,0,0,140,3,36,0,0,0,0,0,136,33,0,0,0,28,33,0,136,33,0,0,1,34,160,0,3,33,33,34,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,36,123,2,0,1,34,160,0,135,33,0,0,34,0,0,0,25,20,28,104,25,18,28,96,25,24,28,92,25,19,28,32,25,3,28,24,25,4,28,16,25,9,28,8,0,8,28,0,85,18,0,0,85,24,1,0,109,28,88,2,82,33,18,0,32,33,33,22,121,33,4,0,1,33,1,0,85,19,33,0,119,0,12,0,82,33,18,0,32,33,33,23,121,33,4,0,1,33,0,0,85,19,33,0,119,0,6,0,82,33,18,0,32,33,33,24,121,33,3,0,1,33,2,0,85,19,33,0,82,34,24,0,82,34,34,0,109,19,4,34,82,33,24,0,106,33,33,20,109,19,8,33,25,33,19,8,82,34,24,0,25,34,34,20,106,34,34,52,109,33,4,34,25,21,19,24,82,33,24,0,25,33,33,20,106,34,33,36,76,34,34,0,145,34,34,0,89,3,34,0,82,35,24,0,25,35,35,20,106,33,35,40,76,33,33,0,145,33,33,0,113,3,4,33,116,21,3,0,106,34,3,4,109,21,4,34,25,34,19,24,25,31,34,8,25,34,19,24,25,32,34,8,0,5,31,0,82,33,24,0,25,33,33,20,25,33,33,52,106,34,33,36,76,34,34,0,145,34,34,0,89,4,34,0,82,35,24,0,25,35,35,20,25,35,35,52,106,33,35,40,76,33,33,0,145,33,33,0,113,4,4,33,116,5,4,0,106,34,4,4,109,5,4,34,1,33,95,55,135,34,245,0,33,9,8,0,134,10,0,0,232,141,4,0,76,34,10,0,145,10,34,0,86,34,9,0,145,34,34,0,66,14,10,34,145,14,14,0,25,22,19,24,88,33,22,0,145,33,33,0,65,34,33,14,145,34,34,0,89,22,34,0,134,11,0,0,180,141,4,0,76,34,11,0,145,11,34,0,86,34,8,0,145,34,34,0,66,15,11,34,145,15,15,0,25,34,19,24,25,25,34,4,88,33,25,0,145,33,33,0,65,34,33,15,145,34,34,0,89,25,34,0,134,12,0,0,232,141,4,0,76,34,12,0,145,12,34,0,86,34,9,0,145,34,34,0,66,16,12,34,145,16,16,0,0,6,31,0,88,33,6,0,145,33,33,0,65,34,33,16,145,34,34,0,89,6,34,0,134,13,0,0,180,141,4,0,76,34,13,0,145,13,34,0,86,34,8,0,145,34,34,0,66,17,13,34,145,17,17,0,25,26,32,4,88,33,26,0,145,33,33,0,65,34,33,17,145,34,34,0,89,26,34,0,25,23,19,24,2,34,0,0,48,220,1,0,82,33,23,0,85,34,33,0,2,33,0,0,52,220,1,0,106,34,23,4,85,33,34,0,0,7,31,0,2,34,0,0,56,220,1,0,82,33,7,0,85,34,33,0,2,33,0,0,60,220,1,0,106,34,7,4,85,33,34,0,0,27,20,0,0,29,19,0,25,30,27,56,116,27,29,0,25,27,27,4,25,29,29,4,54,34,27,30,156,125,2,0,134,34,0,0,164,149,1,0,20,0,0,0,137,28,0,0,1,34,1,0,139,34,0,0,140,2,33,0,0,0,0,0,2,23,0,0,168,0,0,0,2,24,0,0,176,0,0,0,1,18,0,0,136,25,0,0,0,19,25,0,136,25,0,0,25,25,25,63,38,25,25,192,137,25,0,0,0,20,25,0,136,25,0,0,25,25,25,64,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,40,126,2,0,1,26,64,0,135,25,0,0,26,0,0,0,25,16,20,52,25,7,20,48,25,10,20,44,25,4,20,40,25,3,20,36,25,17,20,32,25,5,20,28,25,11,20,24,25,8,20,20,25,6,20,16,25,12,20,12,25,15,20,8,25,9,20,4,0,13,20,0,85,16,0,0,85,7,1,0,82,25,16,0,25,25,25,28,116,10,25,0,82,25,16,0,25,25,25,64,116,4,25,0,82,25,16,0,25,25,25,68,116,3,25,0,82,25,16,0,25,25,25,76,116,17,25,0,82,25,16,0,25,25,25,96,116,5,25,0,82,25,16,0,25,25,25,20,116,11,25,0,82,25,16,0,25,25,25,16,116,8,25,0,82,25,17,0,41,25,25,1,82,26,5,0,3,25,25,26,85,6,25,0,82,25,16,0,1,26,180,0,3,25,25,26,116,12,25,0,82,25,16,0,1,26,160,0,94,25,25,26,29,25,25,4,85,15,25,0,82,25,16,0,94,25,25,24,34,25,25,0,121,25,3,0,137,19,0,0,139,0,0,0,82,25,7,0,82,26,16,0,94,26,26,23,49,25,25,26,40,127,2,0,1,18,10,0,119,0,60,0,1,25,0,0,82,26,16,0,94,26,26,23,49,25,25,26,188,127,2,0,82,25,16,0,94,25,25,23,82,26,16,0,106,26,26,24,47,25,25,26,188,127,2,0,82,26,16,0,94,26,26,23,82,27,10,0,5,25,26,27,85,9,25,0,82,27,12,0,82,26,16,0,94,26,26,24,82,28,15,0,134,25,0,0,164,18,4,0,27,26,28,0,85,13,25,0,82,28,16,0,82,26,11,0,82,27,8,0,82,29,9,0,3,27,27,29,82,29,13,0,82,30,4,0,82,31,3,0,82,32,6,0,134,25,0,0,180,235,0,0,28,26,27,29,30,31,32,0,82,2,16,0,82,25,16,0,94,25,25,23,82,32,16,0,1,31,172,0,94,32,32,31,52,25,25,32,20,128,2,0,3,14,2,23,82,25,14,0,25,25,25,1,85,14,25,0,82,25,16,0,3,21,25,24,82,22,16,0,82,25,21,0,25,25,25,1], eb + 153600);
  HEAPU8.set([1,32,164,0,94,32,22,32,8,25,25,32,85,21,25,0,119,0,191,255,32,25,18,10,121,25,3,0,137,19,0,0,139,0,0,0,1,32,255,255,97,2,24,32,82,32,16,0,1,25,0,0,97,32,23,25,82,25,16,0,1,32,172,0,1,31,0,0,97,25,32,31,137,19,0,0,139,0,0,0,140,2,24,0,0,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,18,19,0,136,19,0,0,25,19,19,96,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,160,128,2,0,1,20,96,0,135,19,0,0,20,0,0,0,25,13,18,40,25,12,18,32,25,15,18,24,25,14,18,16,25,11,18,8,0,10,18,0,25,7,18,76,25,8,18,56,25,2,18,52,25,3,18,80,25,4,18,48,25,6,18,44,85,7,1,0,1,19,0,0,85,8,19,0,1,20,0,0,109,8,4,20,1,19,0,0,109,8,8,19,1,20,0,0,109,8,12,20,1,19,0,0,109,8,16,19,82,20,7,0,1,21,228,62,134,19,0,0,248,228,3,0,20,21,0,0,85,2,19,0,82,19,2,0,120,19,18,0,116,10,7,0,1,21,4,0,1,20,64,79,134,19,0,0,48,143,3,0,21,20,10,0,116,0,8,0,106,20,8,4,109,0,4,20,106,19,8,8,109,0,8,19,106,20,8,12,109,0,12,20,106,19,8,16,109,0,16,19,137,17,0,0,139,0,0,0,1,20,16,0,1,21,1,0,82,22,2,0,134,19,0,0,220,79,3,0,3,20,21,22,103,19,3,3,33,19,19,92,121,19,3,0,1,16,7,0,119,0,111,0,103,19,3,2,1,22,161,0,46,19,19,22,164,129,2,0,1,16,7,0,119,0,105,0,103,19,3,1,1,22,171,0,46,19,19,22,188,129,2,0,1,16,7,0,119,0,99,0,79,19,3,0,33,19,19,19,121,19,3,0,1,16,7,0,119,0,94,0,25,22,3,7,103,22,22,2,41,22,22,16,25,21,3,7,103,21,21,1,41,21,21,8,20,22,22,21,103,21,3,7,20,22,22,21,109,8,4,22,25,19,3,10,103,19,19,2,41,19,19,16,25,21,3,10,103,21,21,1,41,21,21,8,20,19,19,21,103,21,3,10,20,19,19,21,109,8,8,19,25,19,8,4,116,14,19,0,1,22,2,0,1,21,148,79,134,19,0,0,48,143,3,0,22,21,14,0,25,19,8,8,116,15,19,0,1,21,2,0,1,22,169,79,134,19,0,0,48,143,3,0,21,22,15,0,103,5,3,5,103,19,3,4,85,12,19,0,109,12,4,5,1,22,2,0,1,21,191,79,134,19,0,0,48,143,3,0,22,21,12,0,1,21,1,0,109,8,12,21,1,21,128,0,103,22,3,4,103,20,3,5,5,19,22,20,6,21,21,19,85,4,21,0,82,21,4,0,32,21,21,8,82,19,4,0,32,19,19,2,20,21,21,19,120,21,8,0,116,13,7,0,1,19,4,0,1,20,216,79,134,21,0,0,48,143,3,0,19,20,13,0,119,0,30,0,106,21,8,4,106,20,8,8,5,9,21,20,82,21,4,0,5,20,9,21,28,20,20,8,85,6,20,0,82,21,6,0,135,20,10,0,21,0,0,0,85,8,20,0,82,21,8,0,82,19,6,0,1,22,1,0,82,23,2,0,134,20,0,0,220,79,3,0,21,19,22,23,82,20,4,0,32,20,20,8,121,20,4,0,1,23,20,0,109,8,16,23,119,0,6,0,82,23,4,0,32,23,23,2,121,23,3,0,1,20,21,0,109,8,16,20,32,20,16,7,121,20,7,0,116,11,7,0,1,23,4,0,1,22,99,79,134,20,0,0,48,143,3,0,23,22,11,0,82,22,2,0,134,20,0,0,172,24,4,0,22,0,0,0,116,0,8,0,106,22,8,4,109,0,4,22,106,20,8,8,109,0,8,20,106,22,8,12,109,0,12,22,106,20,8,16,109,0,16,20,137,17,0,0,139,0,0,0,140,2,22,0,0,0,0,0,1,14,0,0,136,17,0,0,0,15,17,0,136,17,0,0,25,17,17,63,38,17,17,192,137,17,0,0,0,16,17,0,136,17,0,0,1,18,144,0,3,17,17,18,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,244,131,2,0,1,18,144,0,135,17,0,0,18,0,0,0,25,11,16,32,25,13,16,24,25,12,16,16,25,10,16,8,0,9,16,0,1,17,136,0,3,3,16,17,25,5,16,116,25,6,16,112,25,7,16,48,1,17,140,0,3,8,16,17,25,4,16,40,25,2,16,36,85,3,1,0,1,17,0,0,85,5,17,0,1,18,0,0,109,5,4,18,1,17,0,0,109,5,8,17,1,18,0,0,109,5,12,18,1,17,0,0,109,5,16,17,82,18,3,0,1,19,228,62,134,17,0,0,248,228,3,0,18,19,0,0,85,6,17,0,82,17,6,0,120,17,18,0,116,9,3,0,1,19,4,0,1,18,9,80,134,17,0,0,48,143,3,0,19,18,9,0,116,0,5,0,106,18,5,4,109,0,4,18,106,17,5,8,109,0,8,17,106,18,5,12,109,0,12,18,106,17,5,16,109,0,16,17,137,15,0,0,139,0,0,0,1,18,64,0,1,19,1,0,82,20,6,0,134,17,0,0,220,79,3,0,7,18,19,20,102,17,7,1,33,17,17,75,121,17,3,0,1,14,9,0,119,0,113,0,102,17,7,2,33,17,17,84,121,17,3,0,1,14,9,0,119,0,108,0,102,17,7,3,33,17,17,88,121,17,3,0,1,14,9,0,119,0,103,0,102,17,7,4,33,17,17,32,121,17,3,0,1,14,9,0,119,0,98,0,102,17,7,5,33,17,17,49,121,17,3,0,1,14,9,0,119,0,93,0,102,17,7,6,33,17,17,49,121,17,3,0,1,14,9,0,119,0,88,0,106,20,7,36,109,5,4,20,106,17,7,40,109,5,8,17,106,20,7,56,109,5,12,20,25,20,7,36,116,12,20,0,1,17,2,0,1,19,96,80,134,20,0,0,48,143,3,0,17,19,12,0,25,20,7,40,116,13,20,0,1,19,2,0,1,17,122,80,134,20,0,0,48,143,3,0,19,17,13,0,25,20,7,28,116,11,20,0,1,17,2,0,1,19,149,80,134,20,0,0,48,143,3,0,17,19,11,0,1,20,0,0,106,19,7,60,48,20,20,19,8,134,2,0,1,20,0,0,85,4,20,0,106,20,7,60,82,19,4,0,57,20,20,19,8,134,2,0,1,19,1,0,1,17,1,0,82,18,6,0,134,20,0,0,220,79,3,0,8,19,17,18,82,20,4,0,25,20,20,1,85,4,20,0,119,0,243,255,1,18,4,0,1,17,1,0,82,19,6,0,134,20,0,0,220,79,3,0,2,18,17,19,82,19,2,0,135,20,10,0,19,0,0,0,85,5,20,0,82,19,5,0,82,17,2,0,1,18,1,0,82,21,6,0,134,20,0,0,220,79,3,0,19,17,18,21,106,20,7,28,2,21,0,0,100,141,0,0,45,20,20,21,108,134,2,0,1,21,15,0,109,5,16,21,119,0,16,0,106,21,7,28,2,20,0,0,116,146,0,0,45,21,21,20,140,134,2,0,1,20,16,0,109,5,16,20,119,0,8,0,106,20,7,28,2,21,0,0,120,146,0,0,45,20,20,21,168,134,2,0,1,21,17,0,109,5,16,21,32,21,14,9,121,21,7,0,116,10,3,0,1,20,4,0,1,18,49,80,134,21,0,0,48,143,3,0,20,18,10,0,82,18,6,0,134,21,0,0,172,24,4,0,18,0,0,0,116,0,5,0,106,18,5,4,109,0,4,18,106,21,5,8,109,0,8,21,106,18,5,12,109,0,12,18,106,21,5,16,109,0,16,21,137,15,0,0,139,0,0,0,140,1,28,0,0,0,0,0,2,20,0,0,168,0,0,0,2,21,0,0,172,0,0,0,2,22,0,0,176,0,0,0,1,15,0,0,136,23,0,0,0,16,23,0,136,23,0,0,25,23,23,63,38,23,23,192,137,23,0,0,0,17,23,0,136,23,0,0,25,23,23,32,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,108,135,2,0,1,24,32,0,135,23,0,0,24,0,0,0,25,13,17,24,25,14,17,20,25,12,17,16,25,10,17,12,25,7,17,8,25,8,17,4,0,9,17,0,85,13,0,0,82,24,13,0,112,23,24,60,145,23,23,0,89,12,23,0,59,23,1,0,145,23,23,0,88,24,12,0,145,24,24,0,66,6,23,24,145,6,6,0,1,24,192,24,82,23,13,0,106,23,23,84,41,23,23,3,3,24,24,23,106,24,24,4,38,24,24,7,135,5,238,0,24,6,0,0,145,5,5,0,88,23,12,0,145,23,23,0,65,24,5,23,145,24,24,0,89,10,24,0,82,23,13,0,134,24,0,0,64,90,4,0,23,0,0,0,120,24,7,0,1,23,177,74,1,25,184,68,1,26,21,8,1,27,218,74,135,24,1,0,23,25,26,27,1,24,0,0,85,14,24,0,82,24,13,0,106,24,24,24,82,27,14,0,49,24,24,27,64,136,2,0,1,15,19,0,119,0,100,0,59,24,0,0,145,24,24,0,89,7,24,0,1,24,0,0,85,8,24,0,1,24,0,0,85,9,24,0,88,1,10,0,145,1,1,0,88,2,12,0,145,2,2,0,82,27,14,0,82,25,13,0,112,26,25,52,145,26,26,0,134,24,0,0,172,156,2,0,27,1,2,26,8,9,7,0,82,24,13,0,1,26,164,0,94,24,24,26,82,26,9,0,82,27,8,0,4,26,26,27,25,26,26,1,47,24,24,26,184,136,2,0,1,15,6,0,119,0,70,0,1,24,0,0,82,26,13,0,94,26,26,22,49,24,24,26,84,137,2,0,82,24,8,0,82,26,13,0,94,26,26,20,56,24,24,26,84,137,2,0,82,3,13,0,82,24,13,0,94,24,24,20,82,26,13,0,94,26,26,21,52,24,24,26,52,137,2,0,3,11,3,20,82,24,11,0,25,24,24,1,85,11,24,0,82,24,13,0,3,18,24,22,82,19,13,0,82,24,18,0,25,24,24,1,1,26,164,0,94,26,19,26,8,24,24,26,85,18,24,0,119,0,231,255,1,26,255,255,97,3,22,26,82,26,13,0,1,24,0,0,97,26,20,24,82,24,13,0,1,26,0,0,97,24,21,26,82,26,13,0,94,26,26,22,34,26,26,0,121,26,6,0,82,24,13,0,82,27,8,0,134,26,0,0,232,221,3,0,24,27,0,0,82,4,13,0,82,26,9,0,82,27,13,0,94,27,27,21,56,26,26,27,172,137,2,0,82,27,13,0,94,27,27,21,25,27,27,1,134,26,0,0,232,221,3,0,4,27,0,0,119,0,244,255,82,27,14,0,134,26,0,0,228,105,0,0,4,27,0,0,82,26,14,0,25,26,26,1,85,14,26,0,119,0,151,255,32,26,15,6,121,26,8,0,1,27,246,74,1,24,184,68,1,25,30,8,1,23,218,74,135,26,1,0,27,24,25,23,119,0,5,0,32,26,15,19,121,26,3,0,137,16,0,0,139,0,0,0,139,0,0,0,140,1,28,0,0,0,0,0,136,23,0,0,0,21,23,0,136,23,0,0,25,23,23,63,38,23,23,192,137,23,0,0,0,22,23,0,136,23,0,0,25,23,23,80,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,80,138,2,0,1,24,80,0,135,23,0,0,24,0,0,0,25,8,22,68,25,5,22,64,25,6,22,60,25,10,22,56,25,12,22,52,25,7,22,48,25,4,22,44,25,3,22,40,25,9,22,36,25,11,22,32,25,17,22,28,25,13,22,24,25,14,22,20,25,15,22,16,25,16,22,12,25,18,22,8,25,19,22,4,0,20,22,0,85,13,0,0,82,23,13,0,120,23,6,0,1,23,0,0,85,17,23,0,82,2,17,0,137,21,0,0,139,2,0,0,82,23,13,0,25,23,23,16,116,14,23,0,116,3,14,0,85,9,15,0,85,11,16,0,82,23,9,0,120,23,7,0,1,24,54,60,1,25,246,58,1,26,222,127,1,27,83,60,135,23,1,0,24,25,26,27,82,23,11,0,120,23,7,0,1,27,109,60,1,26,246,58,1,25,223,127,1,24,83,60,135,23,1,0,27,26,25,24,116,4,3,0,82,23,9,0,82,24,4,0,2,25,0,0,255,255,255,127,19,24,24,25,85,23,24,0,116,7,3,0,82,24,11,0,82,23,7,0,2,25,0,0,0,0,0,128,19,23,23,25,85,24,23,0,82,23,13,0,25,23,23,20,116,18,23,0,116,6,18,0,85,10,19,0,85,12,20,0,82,23,10,0,120,23,7,0,1,24,54,60,1,25,246,58,1,26,222,127,1,27,83,60,135,23,1,0,24,25,26,27,82,23,12,0,120,23,7,0,1,27,109,60,1,26,246,58,1,25,223,127,1,24,83,60,135,23,1,0,27,26,25,24,116,5,6,0,82,23,10,0,82,24,5,0,2,25,0,0,255,255,255,127,19,24,24,25,85,23,24,0,116,8,6,0,82,24,12,0,82,23,8,0,2,25,0,0,0,0,0,128,19,23,23,25,85,24,23,0,82,1,19,0,82,23,16,0,82,24,20,0,45,23,23,24,8,140,2,0,82,23,15,0,4,23,1,23,85,17,23,0,82,2,17,0,137,21,0,0,139,2,0,0,119,0,10,0,82,23,13,0,106,23,23,4,82,24,15,0,4,23,23,24,3,23,1,23,85,17,23,0,82,2,17,0,137,21,0,0,139,2,0,0,1,23,0,0,139,23,0,0,140,3,42,0,0,0,0,0,2,38,0,0,128,128,128,128,2,39,0,0,255,254,254,254,1,37,0,0,0,3,1,0,21,40,3,0,38,40,40,3,120,40,88,0,33,32,2,0,38,40,3,3,33,40,40,0,19,40,32,40,121,40,29,0,0,8,0,0,0,19,2,0,0,26,1,0,78,4,26,0,83,8,4,0,41,40,4,24,42,40,40,24,120,40,4,0,0,11,8,0,0,24,19,0,119,0,76,0,26,12,19,1,25,13,26,1,25,17,8,1,33,30,12,0,38,40,13,3,33,40,40,0,19,40,30,40,121,40,5,0,0,8,17,0,0,19,12,0,0,26,13,0,119,0,237,255,0,7,17,0,0,18,12,0,0,25,13,0,0,31,30,0,119,0,5,0,0,7,0,0,0,18,2,0,0,25,1,0,0,31,32,0,121,31,47,0,78,40,25,0,120,40,4,0,0,11,7,0,0,24,18,0,119,0,49,0,1,40,3,0,48,40,40,18,144,141,2,0,0,21,18,0,0,34,7,0,0,36,25,0,82,5,36,0,19,40,5,38,21,40,40,38,2,41,0,0,1,1,1,1,4,41,5,41,19,40,40,41,121,40,5,0,0,20,21,0,0,33,34,0,0,35,36,0,119,0,19,0,85,34,5,0,26,29,21,4,25,14,36,4,25,15,34,4,1,40,3,0,48,40,40,29,128,141,2,0,0,21,29,0,0,34,15,0,0,36,14,0,119,0,234,255,0,20,29,0,0,33,15,0,0,35,14,0,119,0,4,0,0,20,18,0,0,33,7,0,0,35,25,0,0,9,33,0,0,22,20,0,0,27,35,0,1,37,13,0,119,0,8,0,0,11,7,0,1,24,0,0,119,0,5,0,0,9,0,0,0,22,2,0,0,27,1,0,1,37,13,0,32,40,37,13,121,40,25,0,120,22,4,0,0,11,9,0,1,24,0,0,119,0,21,0,0,10,9,0,0,23,22,0,0,28,27,0,78,6,28,0,83,10,6,0,41,40,6,24,42,40,40,24,120,40,4,0,0,11,10,0,0,24,23,0,119,0,10,0,26,23,23,1,25,16,10,1,120,23,4,0,0,11,16,0,1,24,0,0,119,0,4,0,0,10,16,0,25,28,28,1,119,0,240,255,1,41,0,0,135,40,5,0,11,41,24,0,139,11,0,0,140,0,30,0,0,0,0,0,2,24,0,0,198,127,0,0,2,25,0,0,0,220,1,0,136,26,0,0,0,7,26,0,136,26,0,0,25,26,26,32,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,140,142,2,0,1,27,32,0,135,26,0,0,27,0,0,0,25,0,7,16,25,3,7,12,25,1,7,8,25,5,7,4,0,4,7,0,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,94,26,25,26,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,27,25,27,106,27,27,8,46,26,26,27,176,144,2,0,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,8,25,26,82,26,8,0,106,27,8,8,4,26,26,27,85,0,26,0,1,26,0,0,85,3,26,0,82,26,0,0,82,27,3,0,56,26,26,27,176,144,2,0,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,9,25,26,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,26,25,26,106,10,26,20,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,26,25,26,106,26,26,8,41,26,26,2,0,11,26,0,26,27,11,4,90,27,10,27,95,10,11,27,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,12,25,27,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,27,25,27,106,13,27,20,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,27,25,27,106,27,27,8,41,27,27,2,0,14,27,0,25,27,14,1,26,26,14,3,90,26,13,26,95,13,27,26,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,15,25,26,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,26,25,26,106,16,26,20,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,26,25,26,106,26,26,8,41,26,26,2,0,17,26,0,25,26,17,2,26,27,17,2,90,27,16,27,95,16,26,27,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,18,25,27,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,27,25,27,106,19,27,20,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,27,25,27,106,27,27,8,41,27,27,2,0,20,27,0,25,27,20,3,26,26,20,1,90,26,19,26,95,19,27,26,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,26,25,26,25,2,26,8,82,26,2,0,25,26,26,1,85,2,26,0,82,26,3,0,25,26,26,1,85,3,26,0,119,0,149,255,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,94,26,25,26,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,3,27,25,27,106,27,27,4,46,26,26,27,184,145,2,0,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,21,25,26,82,26,21,0,106,27,21,4,4,26,26,27,85,1,26,0,1,26,0,0,85,5,26,0,82,26,1,0,82,27,5,0,56,26,26,27,184,145,2,0,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,22,25,26,106,26,22,16,106,27,22,4,41,27,27,1,41,27,27,2,59,28,0,0,145,28,28,0,101,26,27,28,2,28,0,0,24,255,1,0,82,28,28,0,27,28,28,48,3,23,25,28,106,28,23,16,106,27,23,4,41,27,27,1,25,27,27,1,41,27,27,2,59,26,0,0,145,26,26,0,101,28,27,26,2,26,0,0,24,255,1,0,82,26,26,0,27,26,26,48,3,26,25,26,25,6,26,4,82,26,6,0,25,26,26,1,85,6,26,0,82,26,5,0,25,26,26,1,85,5,26,0,119,0,215,255,1,26,36,38,1,29,36,38,88,28,29,0,145,28,28,0,62,29,0,0,50,236,172,223,226,54,10,63,145,29,29,0,63,27,28,29,145,27,27,0,89,26,27,0,2,27,0,0,24,255,1,0,82,27,27,0,27,27,27,48,94,27,25,27,1,26,252,31,47,27,27,26,12,146,2,0,137,7,0,0,139,0,0,0,2,27,0,0,204,254,1,0,82,27,27,0,85,4,27,0,82,27,4,0,34,27,27,0,120,27,7,0,134,27,0,0,156,22,4,0,82,27,4,0,26,27,27,1,85,4,27,0,119,0,248,255,134,27,0,0,36,127,4,0,137,7,0,0,139,0,0,0,140,6,40,0,0,0,0,0,136,38,0,0,0,36,38,0,136,38,0,0,25,38,38,63,38,38,38,192,137,38,0,0,0,37,38,0,136,38,0,0,25,38,38,32,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,156,146,2,0,1,39,32,0,135,38,0,0,39,0,0,0,25,28,37,20,25,31,37,16,25,33,37,12,25,32,37,8,25,34,37,4,0,35,37,0,85,28,0,0,89,31,1,0,89,33,2,0,89,32,3,0,89,34,4,0,85,35,5,0,88,6,31,0,145,6,6,0,82,38,28,0,113,38,32,6,88,11,33,0,145,11,11,0,82,38,28,0,113,38,36,11,88,16,32,0,145,16,16,0,82,38,28,0,113,38,40,16,88,19,34,0,145,19,19,0,82,38,28,0,113,38,44,19,82,38,35,0,121,38,24,0,82,38,35,0,88,7,38,0,145,7,7,0,82,38,28,0,113,38,56,7,82,38,35,0,112,8,38,4,145,8,8,0,82,38,28,0,113,38,60,8,82,38,35,0,112,9,38,8,145,9,9,0,82,38,28,0,113,38,48,9,82,38,35,0,112,10,38,12,145,10,10,0,82,38,28,0,113,38,52,10,137,36,0,0,139,0,0,0,119,0,79,0,82,38,28,0,106,20,38,20,76,38,20,0,145,20,38,0,82,39,28,0,106,38,39,4,76,38,38,0,145,38,38,0,66,22,20,38,145,22,22,0,88,12,32,0,145,12,12,0,88,39,31,0,145,39,39,0,64,38,12,39,145,38,38,0,66,27,22,38,145,27,27,0,82,38,28,0,113,38,56,27,82,38,28,0,106,21,38,24,76,38,21,0,145,21,38,0,82,39,28,0,106,38,39,8,76,38,38,0,145,38,38,0,66,23,21,38,145,23,23,0,88,13,34,0,145,13,13,0,88,39,33,0,145,39,39,0,64,38,13,39,145,38,38,0,66,24,23,38,145,24,24,0,82,38,28,0,113,38,60,24,88,14,31,0,145,14,14,0,82,39,28,0,106,38,39,20,76,38,38,0,145,38,38,0,65,29,14,38,145,29,29,0,88,15,32,0,145,15,15,0,88,39,31,0,145,39,39,0,64,38,15,39,145,38,38,0,66,25,29,38,145,25,25,0,82,38,28,0,113,38,48,25,88,17,33,0,145,17,17,0,82,39,28,0,106,38,39,24,76,38,38,0,145,38,38,0,65,30,17,38,145,30,30,0,88,18,34,0,145,18,18,0,88,39,33,0,145,39,39,0,64,38,18,39,145,38,38,0,66,26,30,38,145,26,26,0,82,38,28,0,113,38,52,26,137,36,0,0,139,0,0,0,139,0,0,0,140,4,34,0,0,0,0,0,2,26,0,0,255,0,0,0,136,27,0,0,0,24,27,0,136,27,0,0,25,27,27,63,38,27,27,192,137,27,0,0,0,25,27,0,136,27,0,0,25,27,27,48,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,0,149,2,0,1,28,48,0,135,27,0,0,28,0,0,0,25,18,25,40,25,9,25,36,25,20,25,32,25,21,25,28,25,6,25,24,25,10,25,20,25,11,25,16,25,16,25,12,25,17,25,8,25,22,25,4,0,23,25,0,85,9,0,0,85,20,1,0,85,21,2,0,85,6,3,0,82,27,9,0,120,27,6,0,1,27,0,0,85,18,27,0,82,4,18,0,137,24,0,0,139,4,0,0,82,28,20,0,82,29,21,0,82,30,6,0,1,31,0,0,134,27,0,0,212,194,3,0,28,29,30,31,85,17,27,0,82,27,17,0,120,27,17,0,82,31,9,0,135,27,7,0,31,0,0,0,1,31,77,63,134,27,0,0,40,112,4,0,31,0,0,0,33,19,27,0,1,31,0,0,1,30,0,0,125,27,19,31,30,0,0,0,85,18,27,0,82,4,18,0,137,24,0,0,139,4,0,0,82,5,6,0,82,27,6,0,38,27,27,1,121,27,3,0,85,16,5,0,119,0,3,0,26,27,5,1,85,16,27,0,1,27,0,0,85,10,27,0,82,30,20,0,82,31,21,0,5,27,30,31,82,31,10,0,56,27,27,31,252,151,2,0,1,27,0,0,85,11,27,0,82,27,16,0,82,31,11,0,56,27,27,31,24,151,2,0,82,27,10,0,82,31,6,0,5,12,27,31,82,32,9,0,82,33,11,0,3,33,12,33,41,33,33,2,100,28,32,33,145,28,28,0,59,32,1,0,145,32,32,0,65,29,28,32,145,29,29,0,62,32,0,0,60,98,176,191,69,23,221,63,145,32,32,0,135,30,17,0,29,32,0,0,145,30,30,0,59,32,255,0,145,32,32,0,65,27,30,32,145,27,27,0,61,32,0,0,0,0,0,63,145,32,32,0,63,31,27,32,145,31,31,0,89,22,31,0,88,31,22,0,145,31,31,0,59,32,0,0,145,32,32,0,71,31,31,32,121,31,4,0,59,31,0,0,145,31,31,0,89,22,31,0,88,31,22,0,145,31,31,0,59,32,255,0,145,32,32,0,73,31,31,32,121,31,4,0,59,31,255,0,145,31,31,0,89,22,31,0,88,31,22,0,145,31,31,0,75,31,31,0,19,31,31,26,0,7,31,0,82,31,10,0,82,32,6,0,5,13,31,32,82,32,17,0,82,31,11,0,3,31,13,31,95,32,31,7,82,31,11,0,25,31,31,1,85,11,31,0,119,0,189,255,82,31,11,0,82,32,6,0,47,31,31,32,236,151,2,0,82,31,10,0,82,32,6,0,5,14,31,32,82,30,9,0,82,29,11,0,3,29,14,29,41,29,29,2,100,27,30,29,145,27,27,0,59,30,255,0,145,30,30,0,65,31,27,30,145,31,31,0,61,30,0,0,0,0,0,63,145,30,30,0,63,32,31,30,145,32,32,0,89,23,32,0,88,32,23,0,145,32,32,0,59,30,0,0,145,30,30,0,71,32,32,30,121,32,4,0,59,32,0,0,145,32,32,0,89,23,32,0,88,32,23,0,145,32,32,0,59,30,255,0,145,30,30,0,73,32,32,30,121,32,4,0,59,32,255,0,145,32,32,0,89,23,32,0,88,32,23,0,145,32,32,0,75,32,32,0,19,32,32,26,0,8,32,0,82,32,10,0,82,30,6,0,5,15,32,30,82,30,17,0,82,32,11,0,3,32,15,32,95,30,32,8,82,32,10,0,25,32,32,1,85,10,32,0,119,0,124,255,82,30,9,0,135,32,7,0,30,0,0,0,116,18,17,0,82,4,18,0,137,24,0,0,139,4,0,0,140,1,26,0,0,0,0,0,2,20,0,0,172,0,0,0,1,16,0,0,136,21,0,0,0,17,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,18,21,0,136,21,0,0,25,21,21,48,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,112,152,2,0,1,22,48,0,135,21,0,0,22,0,0,0,25,14,18,36,25,15,18,32,25,13,18,28,25,11,18,24,25,6,18,20,25,12,18,16,25,7,18,12,25,8,18,8,25,9,18,4,0,10,18,0,85,14,0,0,82,22,14,0,112,21,22,60,145,21,21,0,89,13,21,0,82,21,14,0,25,21,21,24,116,11,21,0,88,4,13,0,145,4,4,0,1,21,192,24,82,22,14,0,106,22,22,84,41,22,22,3,3,21,21,22,106,21,21,4,38,21,21,7,135,5,238,0,21,4,0,0,145,5,5,0,88,22,13,0,145,22,22,0,66,21,5,22,145,21,21,0,89,6,21,0,82,21,14,0,1,22,148,0,3,21,21,22,116,12,21,0,82,21,14,0,106,21,21,8,82,22,12,0,3,21,21,22,85,7,21,0,82,22,14,0,134,21,0,0,64,90,4,0,22,0,0,0,121,21,7,0,1,22,78,71,1,23,184,68,1,24,122,8,1,25,120,71,135,21,1,0,22,23,24,25,1,21,0,0,82,25,12,0,4,21,21,25,85,15,21,0,82,21,7,0,82,25,15,0,49,21,21,25,116,153,2,0,1,16,16,0,119,0,73,0,88,1,6,0,145,1,1,0,88,2,13,0,145,2,2,0,82,25,15,0,82,23,14,0,112,24,23,52,145,24,24,0,134,21,0,0,128,158,2,0,25,1,2,24,9,10,8,0,82,21,14,0,1,24,164,0,94,21,21,24,82,24,10,0,82,25,9,0,4,24,24,25,25,24,24,1,47,21,21,24,208,153,2,0,1,16,6,0,119,0,50,0,1,21,0,0,82,24,10,0,49,21,21,24,132,154,2,0,82,21,9,0,82,24,11,0,47,21,21,24,132,154,2,0,82,24,14,0,82,25,9,0,134,21,0,0,200,125,2,0,24,25,0,0,82,25,14,0,82,24,15,0,134,21,0,0,32,202,3,0,25,24,0,0,82,21,14,0,1,24,176,0,94,21,21,24,34,21,21,0,121,21,6,0,82,24,14,0,82,25,9,0,134,21,0,0,108,76,3,0,24,25,0,0,82,3,14,0,82,21,10,0,82,25,14,0,94,25,25,20,56,21,21,25,116,154,2,0,82,25,14,0,94,25,25,20,25,25,25,1,134,21,0,0,108,76,3,0,3,25,0,0,119,0,244,255,82,25,15,0,134,21,0,0,180,55,1,0,3,25,0,0,82,21,15,0,25,21,21,1,85,15,21,0,119,0,179,255,32,21,16,6,121,21,8,0,1,25,150,71,1,24,184,68,1,23,131,8,1,22,120,71,135,21,1,0,25,24,23,22,119,0,10,0,32,21,16,16,121,21,8,0,82,19,14,0,106,22,19,24,134,21,0,0,200,125,2,0,19,22,0,0,137,17,0,0,139,0,0,0,139,0,0,0,140,2,29,0,0,0,0,0,2,26,0,0,255,0,0,0,25,27,0,12,134,15,0,0,64,75,4,0,27,1,0,0,106,2,0,4,120,2,3,0,1,21,0,0,119,0,103,0,26,22,2,1,19,27,22,2,32,25,27,0,121,25,4,0,19,27,22,15,0,19,27,0,119,0,6,0,48,27,15,2,60,155,2,0,0,19,15,0,119,0,2,0,9,19,15,2,82,27,0,0,41,28,19,2,94,3,27,28,120,3,3,0,1,21,0,0,119,0,85,0,82,9,3,0,120,9,3,0,1,21,0,0,119,0,81,0,25,12,1,11,25,13,1,4,0,10,9,0,106,4,10,4,45,27,4,15,100,156,2,0,25,14,10,8,102,5,14,11,41,27,5,24,42,27,27,24,34,23,27,0,19,27,5,26,0,20,27,0,121,23,4,0,106,28,10,12,0,27,28,0,119,0,2,0,0,27,20,0,0,16,27,0,78,6,12,0,41,27,6,24,42,27,27,24,34,24,27,0,121,24,4,0,82,28,13,0,0,27,28,0,119,0,3,0,19,28,6,26,0,27,28,0,45,27,16,27,96,156,2,0,121,24,4,0,82,28,1,0,0,27,28,0,119,0,2,0,0,27,1,0,0,17,27,0,121,23,8,0,82,28,14,0,134,27,0,0,48,120,4,0,28,17,16,0,120,27,34,0,0,21,10,0,119,0,36,0,120,16,3,0,0,21,10,0,119,0,33,0,0,7,20,0,0,8,14,0,0,11,17,0,78,27,8,0,78,28,11,0,53,27,27,28,152,156,2,0,26,7,7,1,120,7,3,0,0,21,10,0,119,0,22,0,25,8,8,1,25,11,11,1,119,0,246,255,119,0,14,0,121,25,4,0,19,27,4,22,0,18,27,0,119,0,6,0,48,27,4,2,132,156,2,0,0,18,4,0,119,0,2,0,9,18,4,2,46,27,18,19,152,156,2,0,1,21,0,0,119,0,5,0,82,10,10,0,120,10,182,255,1,21,0,0,119,0,1,0,139,21,0,0,140,7,35,0,0,0,0,0,136,32,0,0,0,30,32,0,136,32,0,0,25,32,32,63,38,32,32,192,137,32,0,0,0,31,32,0,136,32,0,0,25,32,32,48,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,248,156,2,0,1,33,48,0,135,32,0,0,33,0,0,0,25,23,31,44,25,24,31,40,25,29,31,36,25,28,31,32,25,19,31,28,25,20,31,24,25,18,31,20,25,25,31,16,25,26,31,12,25,27,31,8,25,21,31,4,0,22,31,0,85,23,0,0,89,24,1,0,89,29,2,0,89,28,3,0,85,19,4,0,85,20,5,0,85,18,6,0,82,33,23,0,76,33,33,0,145,33,33,0,61,34,0,0,0,0,0,63,145,34,34,0,63,32,33,34,145,32,32,0,89,25,32,0,88,7,25,0,145,7,7,0,88,34,24,0,145,34,34,0,64,32,7,34,145,32,32,0,89,26,32,0,88,9,25,0,145,9,9,0,88,34,24,0,145,34,34,0,63,32,9,34,145,32,32,0,89,27,32,0,88,10,26,0,145,10,10,0,88,32,28,0,145,32,32,0,63,12,10,32,145,12,12,0,88,34,29,0,145,34,34,0,66,32,12,34,145,32,32,0,89,21,32,0,88,11,27,0,145,11,11,0,88,32,28,0,145,32,32,0,63,13,11,32,145,13,13,0,88,34,29,0,145,34,34,0,66,32,13,34,145,32,32,0,89,22,32,0,88,8,25,0,145,8,8,0,88,32,28,0,145,32,32,0,63,14,8,32,145,14,14,0,88,32,29,0,145,32,32,0,66,17,14,32,145,17,17,0,82,32,18,0,89,32,17,0,88,34,21,0,145,34,34,0,61,33,0,0,0,0,0,63,63,34,34,33,135,32,246,0,34,0,0,0,75,16,32,0,82,32,19,0,85,32,16,0,88,34,22,0,145,34,34,0,61,33,0,0,0,0,0,63,64,34,34,33,135,32,246,0,34,0,0,0,75,15,32,0,82,32,20,0,85,32,15,0,137,30,0,0,139,0,0,0,140,7,35,0,0,0,0,0,136,32,0,0,0,30,32,0,136,32,0,0,25,32,32,63,38,32,32,192,137,32,0,0,0,31,32,0,136,32,0,0,25,32,32,48,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,204,158,2,0,1,33,48,0,135,32,0,0,33,0,0,0,25,21,31,44,25,17,31,40,25,28,31,36,25,27,31,32,25,23,31,28,25,24,31,24,25,22,31,20,25,14,31,16,25,15,31,12,25,16,31,8,25,25,31,4,0,26,31,0,85,21,0,0,89,17,1,0,89,28,2,0,89,27,3,0,85,23,4,0,85,24,5,0,85,22,6,0,82,33,21,0,76,33,33,0,145,33,33,0,61,34,0,0,0,0,0,63,145,34,34,0,63,32,33,34,145,32,32,0,89,14,32,0,88,7,14,0,145,7,7,0,88,34,17,0,145,34,34,0,64,32,7,34,145,32,32,0,89,15,32,0,88,9,14,0,145,9,9,0,88,34,17,0,145,34,34,0,63,32,9,34,145,32,32,0,89,16,32,0,88,10,15,0,145,10,10,0,88,32,28,0,145,32,32,0,65,18,10,32,145,18,18,0,88,34,27,0,145,34,34,0,64,32,18,34,145,32,32,0,89,25,32,0,88,11,16,0,145,11,11,0,88,32,28,0,145,32,32,0,65,19,11,32,145,19,19,0,88,34,27,0,145,34,34,0,64,32,19,34,145,32,32,0,89,26,32,0,88,8,14,0,145,8,8,0,88,32,28,0,145,32,32,0,65,20,8,32,145,20,20,0,88,32,27,0,145,32,32,0,64,29,20,32,145,29,29,0,82,32,22,0,89,32,29,0,88,34,25,0,145,34,34,0,61,33,0,0,0,0,0,63,63,34,34,33,135,32,246,0,34,0,0,0,75,13,32,0,82,32,23,0,85,32,13,0,88,34,26,0,145,34,34,0,61,33,0,0,0,0,0,63,64,34,34,33,135,32,246,0,34,0,0,0,75,12,32,0,82,32,24,0,85,32,12,0,137,30,0,0,139,0,0,0,140,2,20,0,0,0,0,0,2,13,0,0,0,0,128,127,2,14,0,0,255,0,0,0,2,15,0,0,255,255,255,127,1,12,0,0,127,16,0,0,89,16,1,0,127,16,0,0,82,9,16,0,19,16,9,15,0,3,16,0,48,16,13,3,160,160,2,0,1,12,3,0,119,0,219,0,127,16,0,0,89,16,0,0,127,16,0,0,82,2,16,0,19,16,2,15,0,4,16,0,48,16,13,4,200,160,2,0,1,12,3,0,119,0,209,0,2,16,0,0,0,0,128,63,45,16,9,16,236,160,2,0,134,6,0,0,208,8,3,0,0,0,0,0,145,6,6,0,119,0,200,0,43,16,2,31,0,7,16,0,43,16,9,30,38,16,16,2,20,16,16,7,0,5,16,0,120,4,23,0,38,16,5,3,1,17,0,0,1,18,4,0,138,16,17,18,44,161,2,0,52,161,2,0,56,161,2,0,76,161,2,0,119,0,14,0,58,6,0,0,119,0,182,0,119,0,254,255,62,6,0,0,80,53,221,95,251,33,9,64,145,6,6,0,119,0,176,0,62,6,0,0,80,53,221,95,251,33,9,192,145,6,6,0,119,0,171,0,19,16,9,15,0,10,16,0,47,16,10,13,196,161,2,0,1,16,0,0,1,17,1,0,138,10,16,17,132,161,2,0,119,0,83,0,119,0,1,0,32,17,7,0,121,17,7,0,62,17,0,0,80,53,221,95,251,33,249,63,145,17,17,0,58,16,17,0,119,0,6,0,62,17,0,0,80,53,221,95,251,33,249,191,145,17,17,0,58,16,17,0,58,6,16,0,119,0,146,0,2,16,0,0,0,0,128,127,1,17,1,0,138,10,16,17,220,161,2,0,119,0,61,0,119,0,1,0,19,16,5,14,0,8,16,0,45,16,4,13,100,162,2,0,38,16,8,3,1,17,0,0,1,18,4,0,138,16,17,18,20,162,2,0,40,162,2,0,60,162,2,0,80,162,2,0,119,0,47,0,62,6,0,0,80,53,221,95,251,33,233,63,145,6,6,0,119,0,121,0,62,6,0,0,80,53,221,95,251,33,233,191,145,6,6,0,119,0,116,0,62,6,0,0,222,30,132,128,124,217,2,64,145,6,6,0,119,0,111,0,62,6,0,0,222,30,132,128,124,217,2,192,145,6,6,0,119,0,106,0,38,16,8,3,1,17,0,0,1,18,4,0,138,16,17,18,136,162,2,0,148,162,2,0,164,162,2,0,184,162,2,0,119,0,18,0,59,6,0,0,145,6,6,0,119,0,94,0,61,6,0,0,0,0,0,128,145,6,6,0,119,0,90,0,62,6,0,0,80,53,221,95,251,33,9,64,145,6,6,0,119,0,85,0,62,6,0,0,80,53,221,95,251,33,9,192,145,6,6,0,119,0,80,0,13,16,4,13,2,17,0,0,0,0,0,13,3,17,3,17,16,17,17,4,20,16,16,17,121,16,16,0,32,17,7,0,121,17,7,0,62,17,0,0,80,53,221,95,251,33,249,63,145,17,17,0,58,16,17,0,119,0,6,0,62,17,0,0,80,53,221,95,251,33,249,191,145,17,17,0,58,16,17,0,58,6,16,0,119,0,58,0,34,16,9,0,2,17,0,0,0,0,0,13,3,17,4,17,16,17,17,3,19,16,16,17,121,16,4,0,59,11,0,0,145,11,11,0,119,0,10,0,66,17,0,1,145,17,17,0,135,16,9,0,17,0,0,0,145,16,16,0,134,11,0,0,208,8,3,0,16,0,0,0,145,11,11,0,38,16,5,3,1,17,0,0,1,18,3,0,138,16,17,18,192,163,2,0,200,163,2,0,212,163,2,0,62,17,0,0,193,73,171,191,165,119,119,62,145,17,17,0,63,18,11,17,145,18,18,0,62,17,0,0,80,53,221,95,251,33,9,192,145,17,17,0,63,6,18,17,145,6,6,0,119,0,19,0,58,6,11,0,119,0,17,0,68,6,11,0,145,6,6,0,119,0,14,0,62,17,0,0,80,53,221,95,251,33,9,64,145,17,17,0,62,19,0,0,193,73,171,191,165,119,119,62,145,19,19,0,63,18,11,19,145,18,18,0,64,6,17,18,145,6,6,0,119,0,1,0,32,16,12,3,121,16,3,0,63,6,0,1,145,6,6,0,145,16,6,0,139,16,0,0,140,6,26,0,0,0,0,0,136,21,0,0,0,17,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,18,21,0,136,21,0,0,25,21,21,32,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,108,164,2,0,1,22,32,0,135,21,0,0,22,0,0,0,25,12,18,28,25,9,18,24,25,15,18,20,25,16,18,16,25,8,18,12,25,10,18,8,25,13,18,4,0,11,18,0,85,9,0,0,85,15,1,0,85,16,2,0,85,8,3,0,85,10,4,0,85,13,5,0,1,21,0,0,85,11,21,0,82,21,10,0,34,21,21,0,1,22,4,0,82,23,10,0,15,22,22,23,20,21,21,22,121,21,14,0,1,22,19,64,134,21,0,0,40,112,4,0,22,0,0,0,33,14,21,0,1,22,0,0,1,23,0,0,125,21,14,22,23,0,0,0,85,12,21,0,82,7,12,0,137,17,0,0,139,7,0,0,82,23,9,0,1,22,0,0,82,24,10,0,134,21,0,0,16,73,0,0,23,22,24,0,121,21,85,0,82,21,9,0,106,21,21,16,34,21,21,8,121,21,5,0,82,21,13,0,1,24,8,0,85,21,24,0,119,0,5,0,82,24,13,0,82,21,9,0,25,21,21,16,116,24,21,0,82,21,9,0,25,21,21,12,116,11,21,0,82,21,9,0,1,24,0,0,109,21,12,24,82,24,10,0,121,24,49,0,82,24,10,0,82,21,9,0,82,21,21,0,106,21,21,12,46,24,24,21,40,166,2,0,82,6,11,0,82,24,13,0,82,24,24,0,32,24,24,8,121,24,15,0,82,24,9,0,82,19,24,0,106,21,19,12,82,22,10,0,82,23,9,0,82,23,23,0,82,23,23,0,106,25,19,4,134,24,0,0,60,142,1,0,6,21,22,23,25,0,0,0,85,11,24,0,119,0,14,0,82,24,9,0,82,20,24,0,106,25,20,12,82,23,10,0,82,22,9,0,82,22,22,0,82,22,22,0,106,21,20,4,134,24,0,0,196,134,1,0,6,25,23,22,21,0,0,0,85,11,24,0,82,24,9,0,82,24,24,0,82,21,10,0,109,24,12,21,82,21,11,0,120,21,5,0,116,12,11,0,82,7,12,0,137,17,0,0,139,7,0,0,82,21,15,0,82,24,9,0,82,24,24,0,116,21,24,0,82,24,16,0,82,21,9,0,82,21,21,0,25,21,21,4,116,24,21,0,82,21,8,0,121,21,6,0,82,21,8,0,82,24,9,0,82,24,24,0,25,24,24,8,116,21,24,0,82,21,9,0,106,21,21,12,135,24,7,0,21,0,0,0,82,24,9,0,1,21,0,0,109,24,12,21,82,24,9,0,106,24,24,8,135,21,7,0,24,0,0,0,82,21,9,0,1,24,0,0,109,21,8,24,82,21,9,0,106,21,21,4,135,24,7,0,21,0,0,0,82,24,9,0,1,21,0,0,109,24,4,21,116,12,11,0,82,7,12,0,137,17,0,0,139,7,0,0,140,6,25,0,0,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,48,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,8,167,2,0,1,20,48,0,135,19,0,0,20,0,0,0,25,10,17,36,25,11,17,32,25,13,17,28,25,15,17,24,25,8,17,20,25,14,17,16,25,12,17,12,25,9,17,8,25,6,17,4,0,7,17,0,85,10,0,0,85,11,1,0,85,13,2,0,85,15,3,0,85,8,4,0,85,14,5,0,82,20,15,0,82,21,8,0,5,19,20,21,85,12,19,0,1,19,0,0,85,9,19,0,82,19,12,0,82,21,9,0,57,19,19,21,0,169,2,0,82,19,10,0,121,19,41,0,82,19,10,0,79,19,19,0,82,21,11,0,79,21,21,0,45,19,19,21,16,168,2,0,82,19,10,0,103,19,19,1,82,21,11,0,103,21,21,1,45,19,19,21,8,168,2,0,82,19,10,0,103,19,19,2,82,21,11,0,103,21,21,2,45,19,19,21,0,168,2,0,82,19,13,0,82,21,10,0,78,21,21,0,83,19,21,0,82,21,13,0,82,19,10,0,102,19,19,1,107,21,1,19,82,19,13,0,82,21,10,0,102,21,21,2,107,19,2,21,82,21,13,0,1,19,0,0,107,21,3,19,119,0,8,0], eb + 163840);
  HEAPU8.set([1,16,8,0,119,0,6,0,1,16,8,0,119,0,4,0,1,16,8,0,119,0,2,0,1,16,8,0,32,19,16,8,121,19,41,0,1,16,0,0,2,19,0,0,64,66,15,0,85,6,19,0,1,19,1,0,85,7,19,0,82,18,11,0,82,21,14,0,82,20,11,0,79,20,20,0,103,22,18,1,103,23,18,2,1,24,1,0,134,19,0,0,132,110,2,0,21,20,22,23,7,6,24,0,82,19,13,0,82,24,14,0,25,24,24,4,82,23,7,0,90,24,24,23,83,19,24,0,82,24,13,0,82,19,14,0,1,23,4,1,3,19,19,23,82,23,7,0,90,19,19,23,107,24,1,19,82,19,13,0,82,24,14,0,1,23,4,2,3,24,24,23,82,23,7,0,90,24,24,23,107,19,2,24,82,24,13,0,82,19,7,0,107,24,3,19,82,19,10,0,121,19,4,0,82,19,10,0,25,19,19,4,85,10,19,0,82,19,13,0,25,19,19,4,85,13,19,0,82,19,11,0,25,19,19,4,85,11,19,0,82,19,9,0,25,19,19,1,85,9,19,0,119,0,153,255,137,17,0,0,139,0,0,0,140,5,23,0,0,0,0,0,136,20,0,0,0,18,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,19,20,0,136,20,0,0,1,21,128,0,3,20,20,21,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,88,169,2,0,1,21,128,0,135,20,0,0,21,0,0,0,25,17,19,112,25,11,19,104,25,9,19,88,25,15,19,72,25,16,19,48,25,12,19,44,25,13,19,40,25,14,19,24,25,8,19,8,0,10,19,0,89,12,2,0,89,13,3,0,59,20,0,0,145,20,20,0,89,14,20,0,59,21,0,0,145,21,21,0,113,14,4,21,106,20,0,4,76,20,20,0,145,20,20,0,113,14,8,20,106,21,0,8,76,21,21,0,145,21,21,0,113,14,12,21,88,21,1,0,145,21,21,0,89,8,21,0,112,20,1,4,145,20,20,0,113,8,4,20,106,6,0,4,76,20,6,0,145,6,20,0,88,22,13,0,145,22,22,0,65,21,6,22,145,21,21,0,113,8,8,21,106,7,0,8,76,21,7,0,145,7,21,0,88,22,13,0,145,22,22,0,65,20,7,22,145,20,20,0,113,8,12,20,1,20,0,0,85,10,20,0,1,21,0,0,109,10,4,21,88,5,12,0,145,5,5,0,116,16,0,0,106,20,0,4,109,16,4,20,106,21,0,8,109,16,8,21,106,20,0,12,109,16,12,20,106,21,0,16,109,16,16,21,116,15,14,0,106,20,14,4,109,15,4,20,106,21,14,8,109,15,8,21,106,20,14,12,109,15,12,20,116,9,8,0,106,21,8,4,109,9,4,21,106,20,8,8,109,9,8,20,106,21,8,12,109,9,12,21,116,11,10,0,106,20,10,4,109,11,4,20,78,20,4,0,83,17,20,0,102,21,4,1,107,17,1,21,102,20,4,2,107,17,2,20,102,21,4,3,107,17,3,21,134,21,0,0,44,74,2,0,16,15,9,11,5,17,0,0,137,18,0,0,139,0,0,0,140,1,26,0,0,0,0,0,136,21,0,0,0,19,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,20,21,0,136,21,0,0,25,21,21,64,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,28,171,2,0,1,22,64,0,135,21,0,0,22,0,0,0,25,12,20,48,25,6,20,44,25,11,20,40,25,5,20,36,25,10,20,32,25,17,20,28,25,9,20,24,25,16,20,20,25,8,20,16,25,15,20,12,25,14,20,8,25,7,20,4,0,13,20,0,85,7,0,0,82,1,7,0,82,21,7,0,120,21,11,0,1,22,1,0,1,23,108,61,1,24,254,255,134,21,0,0,12,232,3,0,1,22,23,24,85,14,21,0,82,3,14,0,137,19,0,0,139,3,0,0,85,8,1,0,82,21,8,0,25,21,21,12,116,15,21,0,82,4,7,0,82,21,15,0,120,21,11,0,1,24,1,0,1,23,174,61,1,22,55,255,134,21,0,0,12,232,3,0,4,24,23,22,85,14,21,0,82,3,14,0,137,19,0,0,139,3,0,0,85,9,4,0,82,21,9,0,25,21,21,12,116,16,21,0,82,21,16,0,32,21,21,1,121,21,12,0,82,22,7,0,1,23,2,0,1,24,227,61,1,25,253,255,134,21,0,0,12,232,3,0,22,23,24,25,85,14,21,0,82,3,14,0,137,19,0,0,139,3,0,0,1,21,255,255,85,13,21,0,82,25,7,0,25,25,25,28,134,21,0,0,84,97,4,0,25,0,0,0,116,10,7,0,82,21,10,0,25,21,21,12,116,17,21,0,82,21,17,0,33,21,21,2,121,21,7,0,1,25,31,62,1,24,246,58,1,23,224,103,1,22,66,62,135,21,1,0,25,24,23,22,116,12,7,0,1,21,4,0,85,6,21,0,82,21,12,0,82,22,6,0,109,21,12,22,82,22,7,0,82,22,22,0,1,21,128,0,94,22,22,21,121,22,11,0,82,21,7,0,82,21,21,0,1,23,128,0,94,21,21,23,38,21,21,63,82,23,7,0,135,22,247,0,21,23,0,0,85,13,22,0,119,0,3,0,1,22,0,0,85,13,22,0,82,21,7,0,82,21,21,0,134,22,0,0,48,105,4,0,21,0,0,0,33,18,22,0,82,2,7,0,121,18,8,0,85,11,2,0,1,22,1,0,85,5,22,0,82,22,11,0,82,21,5,0,109,22,12,21,119,0,8,0,1,22,228,0,3,22,2,22,134,21,0,0,236,56,4,0,22,0,0,0,1,21,0,0,85,13,21,0,82,22,7,0,25,22,22,28,134,21,0,0,212,95,4,0,22,0,0,0,116,14,13,0,82,3,14,0,137,19,0,0,139,3,0,0,140,4,23,0,0,0,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,18,19,0,136,19,0,0,25,19,19,48,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,136,173,2,0,1,20,48,0,135,19,0,0,20,0,0,0,25,15,18,44,25,5,18,40,25,13,18,36,25,12,18,28,25,7,18,24,25,14,18,20,25,11,18,16,25,16,18,12,25,10,18,8,25,8,18,4,0,9,18,0,85,5,0,0,85,13,1,0,109,18,32,2,85,12,3,0,82,20,5,0,82,20,20,0,82,20,20,0,82,21,5,0,82,21,21,0,106,21,21,4,5,19,20,21,85,14,19,0,82,19,5,0,25,19,19,12,116,10,19,0,82,21,14,0,82,20,12,0,1,22,0,0,134,19,0,0,96,226,3,0,21,20,22,0,85,11,19,0,82,19,11,0,120,19,9,0,1,22,77,63,134,19,0,0,40,112,4,0,22,0,0,0,85,15,19,0,82,4,15,0,137,17,0,0,139,4,0,0,116,16,11,0,82,19,12,0,32,6,19,3,1,19,0,0,85,7,19,0,121,6,34,0,82,19,14,0,82,22,7,0,57,19,19,22,108,175,2,0,82,19,10,0,82,22,7,0,91,19,19,22,41,19,19,2,85,8,19,0,82,19,11,0,82,22,13,0,82,20,8,0,90,22,22,20,83,19,22,0,82,22,11,0,82,19,13,0,82,20,8,0,25,20,20,1,90,19,19,20,107,22,1,19,82,19,11,0,82,22,13,0,82,20,8,0,25,20,20,2,90,22,22,20,107,19,2,22,82,22,11,0,25,22,22,3,85,11,22,0,82,22,7,0,25,22,22,1,85,7,22,0,119,0,224,255,82,22,14,0,82,19,7,0,57,22,22,19,108,175,2,0,82,22,10,0,82,19,7,0,91,22,22,19,41,22,22,2,85,9,22,0,82,22,11,0,82,19,13,0,82,20,9,0,90,19,19,20,83,22,19,0,82,19,11,0,82,22,13,0,82,20,9,0,25,20,20,1,90,22,22,20,107,19,1,22,82,22,11,0,82,19,13,0,82,20,9,0,25,20,20,2,90,19,19,20,107,22,2,19,82,19,11,0,82,22,13,0,82,20,9,0,25,20,20,3,90,22,22,20,107,19,3,22,82,22,11,0,25,22,22,4,85,11,22,0,82,22,7,0,25,22,22,1,85,7,22,0,119,0,218,255,82,19,5,0,106,19,19,12,135,22,7,0,19,0,0,0,82,22,5,0,82,19,16,0,109,22,12,19,1,19,1,0,85,15,19,0,82,4,15,0,137,17,0,0,139,4,0,0,140,4,30,0,0,0,0,0,136,24,0,0,0,22,24,0,136,24,0,0,25,24,24,63,38,24,24,192,137,24,0,0,0,23,24,0,136,24,0,0,25,24,24,48,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,232,175,2,0,1,25,48,0,135,24,0,0,25,0,0,0,25,18,23,32,25,8,23,28,25,20,23,24,25,21,23,20,25,6,23,16,25,10,23,12,25,11,23,8,25,16,23,4,0,17,23,0,85,8,0,0,85,20,1,0,85,21,2,0,85,6,3,0,82,24,8,0,120,24,6,0,1,24,0,0,85,18,24,0,82,4,18,0,137,22,0,0,139,4,0,0,82,25,20,0,82,26,21,0,82,27,6,0,1,28,4,0,1,29,0,0,134,24,0,0,32,150,3,0,25,26,27,28,29,0,0,0,85,17,24,0,82,24,17,0,120,24,17,0,82,29,8,0,135,24,7,0,29,0,0,0,1,29,77,63,134,24,0,0,40,112,4,0,29,0,0,0,33,19,24,0,1,29,0,0,1,28,0,0,125,24,19,29,28,0,0,0,85,18,24,0,82,4,18,0,137,22,0,0,139,4,0,0,82,5,6,0,82,24,6,0,38,24,24,1,121,24,3,0,85,16,5,0,119,0,3,0,26,24,5,1,85,16,24,0,1,24,0,0,85,10,24,0,82,28,20,0,82,29,21,0,5,24,28,29,82,29,10,0,56,24,24,29,156,177,2,0,1,24,0,0,85,11,24,0,82,24,16,0,82,29,11,0,56,24,24,29,140,177,2,0,82,24,10,0,82,29,6,0,5,12,24,29,82,27,8,0,82,26,11,0,3,26,12,26,91,28,27,26,76,28,28,0,145,28,28,0,59,27,255,0,145,27,27,0,66,24,28,27,145,24,24,0,62,27,0,0,64,150,79,160,153,153,1,64,145,27,27,0,135,29,17,0,24,27,0,0,59,27,1,0,145,27,27,0,65,7,29,27,145,7,7,0,82,27,10,0,82,29,6,0,5,13,27,29,82,29,17,0,82,27,11,0,3,27,13,27,41,27,27,2,101,29,27,7,82,27,11,0,25,27,27,1,85,11,27,0,119,0,218,255,82,27,10,0,25,27,27,1,85,10,27,0,119,0,206,255,82,27,16,0,82,29,6,0,47,27,27,29,48,178,2,0,1,27,0,0,85,10,27,0,82,29,20,0,82,24,21,0,5,27,29,24,82,24,10,0,56,27,27,24,48,178,2,0,82,27,10,0,82,24,6,0,5,14,27,24,82,27,8,0,82,29,16,0,3,29,14,29,91,24,27,29,76,24,24,0,145,24,24,0,59,27,255,0,145,27,27,0,66,9,24,27,145,9,9,0,82,27,10,0,82,24,6,0,5,15,27,24,82,24,17,0,82,27,16,0,3,27,15,27,41,27,27,2,101,24,27,9,82,27,10,0,25,27,27,1,85,10,27,0,119,0,226,255,82,24,8,0,135,27,7,0,24,0,0,0,116,18,17,0,82,4,18,0,137,22,0,0,139,4,0,0,140,7,31,0,0,0,0,0,136,27,0,0,0,24,27,0,136,27,0,0,1,28,128,0,3,27,27,28,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,136,178,2,0,1,28,128,0,135,27,0,0,28,0,0,0,25,13,24,40,25,16,24,32,25,7,24,24,25,22,24,16,25,14,24,8,0,11,24,0,25,15,24,64,25,17,24,56,25,21,24,52,25,12,24,48,87,13,1,0,87,16,2,0,87,7,3,0,87,22,4,0,87,14,5,0,87,11,6,0,0,23,15,0,25,26,23,64,1,27,0,0,85,23,27,0,25,23,23,4,54,27,23,26,208,178,2,0,86,28,16,0,86,29,13,0,64,27,28,29,145,27,27,0,89,17,27,0,86,29,22,0,86,28,7,0,64,27,29,28,145,27,27,0,89,21,27,0,86,28,11,0,86,29,14,0,64,27,28,29,145,27,27,0,89,12,27,0,59,29,2,0,145,29,29,0,88,28,17,0,145,28,28,0,66,27,29,28,145,27,27,0,89,15,27,0,59,28,0,0,145,28,28,0,113,15,16,28,59,27,0,0,145,27,27,0,113,15,32,27,59,28,0,0,145,28,28,0,113,15,48,28,59,27,0,0,145,27,27,0,113,15,4,27,59,29,2,0,145,29,29,0,88,30,21,0,145,30,30,0,66,28,29,30,145,28,28,0,113,15,20,28,59,27,0,0,145,27,27,0,113,15,36,27,59,28,0,0,145,28,28,0,113,15,52,28,59,27,0,0,145,27,27,0,113,15,8,27,59,28,0,0,145,28,28,0,113,15,24,28,59,30,254,255,145,30,30,0,88,29,12,0,145,29,29,0,66,27,30,29,145,27,27,0,113,15,40,27,59,28,0,0,145,28,28,0,113,15,56,28,86,10,13,0,145,10,10,0,86,27,16,0,145,27,27,0,63,28,10,27,145,28,28,0,68,20,28,0,145,20,20,0,88,29,17,0,145,29,29,0,66,27,20,29,145,27,27,0,113,15,12,27,86,8,22,0,145,8,8,0,86,28,7,0,145,28,28,0,63,27,8,28,145,27,27,0,68,18,27,0,145,18,18,0,88,29,21,0,145,29,29,0,66,28,18,29,145,28,28,0,113,15,28,28,86,9,11,0,145,9,9,0,86,27,14,0,145,27,27,0,63,28,9,27,145,28,28,0,68,19,28,0,145,19,19,0,88,29,12,0,145,29,29,0,66,27,19,29,145,27,27,0,113,15,44,27,59,28,1,0,145,28,28,0,113,15,60,28,0,23,0,0,0,25,15,0,25,26,23,64,116,23,25,0,25,23,23,4,25,25,25,4,54,28,23,26,148,180,2,0,137,24,0,0,139,0,0,0,140,6,25,0,0,0,0,0,136,21,0,0,0,18,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,19,21,0,136,21,0,0,25,21,21,48,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,252,180,2,0,1,22,48,0,135,21,0,0,22,0,0,0,25,10,19,40,25,8,19,36,25,15,19,32,25,7,19,28,25,14,19,24,25,13,19,20,25,12,19,16,25,11,19,12,25,17,19,8,25,16,19,4,0,9,19,0,85,10,0,0,85,8,1,0,85,15,2,0,85,7,3,0,85,14,4,0,85,13,5,0,82,21,13,0,121,21,4,0,82,21,13,0,1,22,0,0,85,21,22,0,82,22,10,0,32,22,22,0,82,21,8,0,32,21,21,0,20,22,22,21,82,21,15,0,32,21,21,0,20,22,22,21,121,22,3,0,137,18,0,0,139,0,0,0,82,22,7,0,120,22,3,0,1,22,1,0,85,7,22,0,116,12,10,0,82,22,7,0,26,20,22,1,82,22,12,0,3,22,22,20,11,21,20,0,19,22,22,21,85,11,22,0,82,22,11,0,82,21,12,0,4,22,22,21,85,17,22,0,1,22,0,0,85,16,22,0,82,22,17,0,82,21,8,0,50,22,22,21,8,182,2,0,82,22,8,0,82,21,17,0,4,22,22,21,82,21,15,0,7,22,22,21,85,16,22,0,82,22,16,0,82,21,7,0,26,21,21,1,11,21,21,0,19,22,22,21,85,16,22,0,82,22,14,0,121,22,20,0,1,22,0,0,85,9,22,0,82,22,15,0,82,21,9,0,57,22,22,21,92,182,2,0,82,22,11,0,82,23,16,0,82,24,9,0,5,21,23,24,3,6,22,21,82,21,14,0,82,22,9,0,41,22,22,2,97,21,22,6,82,22,9,0,25,22,22,1,85,9,22,0,119,0,240,255,82,22,13,0,120,22,3,0,137,18,0,0,139,0,0,0,82,22,13,0,116,22,16,0,137,18,0,0,139,0,0,0,140,2,20,0,0,0,0,0,136,15,0,0,0,13,15,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,14,15,0,136,15,0,0,25,15,15,112,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,200,182,2,0,1,16,112,0,135,15,0,0,16,0,0,0,0,11,14,0,25,5,14,104,25,10,14,100,25,8,14,96,25,9,14,32,25,12,14,28,25,6,14,24,25,3,14,20,25,7,14,16,25,4,14,12,85,5,1,0,1,15,0,0,85,10,15,0,82,16,5,0,1,17,30,68,134,15,0,0,248,228,3,0,16,17,0,0,85,8,15,0,82,15,8,0,120,15,10,0,116,11,5,0,1,17,4,0,1,16,232,82,134,15,0,0,48,143,3,0,17,16,11,0,82,2,10,0,137,13,0,0,139,2,0,0,1,16,17,83,1,17,12,0,135,15,248,0,9,16,17,0,1,17,0,0,109,9,12,17,1,15,0,0,109,9,16,15,1,17,1,0,109,9,20,17,1,15,0,0,109,9,24,15,1,17,0,0,109,9,28,17,1,15,0,0,109,9,32,15,106,17,0,4,109,9,36,17,106,15,0,8,109,9,40,15,1,17,0,0,109,9,44,17,1,15,0,0,109,9,48,15,1,17,1,0,109,9,52,17,106,15,0,12,109,9,56,15,1,17,0,0,109,9,60,17,106,15,0,16,25,16,9,28,25,18,9,24,25,19,9,16,134,17,0,0,208,113,2,0,15,16,18,19,106,19,9,24,109,9,32,19,106,19,9,24,32,19,19,255,121,19,8,0,1,17,4,0,1,18,29,83,25,16,14,8,134,19,0,0,48,143,3,0,17,18,16,0,119,0,58,0,1,16,64,0,1,18,1,0,82,17,8,0,134,19,0,0,4,58,4,0,9,16,18,17,85,10,19,0,25,19,0,4,116,12,19,0,25,19,0,8,116,6,19,0,1,19,0,0,85,3,19,0,1,19,0,0,85,7,19,0,106,19,0,12,82,17,7,0,56,19,19,17,232,184,2,0,82,17,12,0,82,18,6,0,106,16,0,16,134,19,0,0,208,109,3,0,17,18,16,0,85,4,19,0,1,16,4,0,1,18,1,0,82,17,8,0,134,19,0,0,4,58,4,0,4,16,18,17,85,10,19,0,82,17,0,0,82,18,3,0,3,17,17,18,82,18,4,0,1,16,1,0,82,15,8,0,134,19,0,0,4,58,4,0,17,18,16,15,85,10,19,0,82,19,12,0,28,19,19,2,85,12,19,0,82,19,6,0,28,19,19,2,85,6,19,0,82,19,3,0,82,15,4,0,3,19,19,15,85,3,19,0,82,19,7,0,25,19,19,1,85,7,19,0,119,0,215,255,82,15,8,0,134,19,0,0,172,24,4,0,15,0,0,0,82,2,10,0,137,13,0,0,139,2,0,0,140,1,25,0,0,0,0,0,136,20,0,0,0,17,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,18,20,0,136,20,0,0,25,20,20,32,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,80,185,2,0,1,21,32,0,135,20,0,0,21,0,0,0,25,15,18,16,25,6,18,12,25,10,18,20,25,12,18,8,25,13,18,4,0,11,18,0,85,6,0,0,82,20,6,0,106,20,20,8,38,20,20,7,121,20,7,0,82,19,6,0,106,21,19,8,38,21,21,7,134,20,0,0,128,225,3,0,19,21,0,0,1,20,0,0,85,11,20,0,82,4,6,0,82,20,6,0,106,20,20,8,36,20,20,0,120,20,20,0,106,20,4,12,1,21,255,0,19,20,20,21,0,9,20,0,82,5,11,0,25,20,5,1,85,11,20,0,95,10,5,9,82,20,6,0,25,8,20,12,82,20,8,0,43,20,20,8,85,8,20,0,82,20,6,0,25,14,20,8,82,20,14,0,26,20,20,8,85,14,20,0,119,0,233,255,106,20,4,8,121,20,7,0,1,21,99,67,1,22,1,63,1,23,53,16,1,24,116,67,135,20,1,0,21,22,23,24,1,20,4,0,82,24,11,0,56,20,20,24,80,186,2,0,82,20,6,0,134,7,0,0,36,43,4,0,20,0,0,0,82,1,11,0,25,20,1,1,85,11,20,0,95,10,1,7,119,0,244,255,103,20,10,1,41,20,20,8,79,24,10,0,3,20,20,24,85,12,20,0,103,20,10,3,41,20,20,8,103,24,10,2,3,20,20,24,85,13,20,0,82,20,13,0,82,24,12,0,2,23,0,0,255,255,0,0,21,24,24,23,46,20,20,24,180,186,2,0,1,24,147,67,134,20,0,0,40,112,4,0,24,0,0,0,85,15,20,0,82,3,15,0,137,17,0,0,139,3,0,0,82,20,6,0,106,20,20,4,82,24,6,0,82,24,24,0,82,23,12,0,3,24,24,23,48,20,20,24,244,186,2,0,1,24,160,67,134,20,0,0,40,112,4,0,24,0,0,0,85,15,20,0,82,3,15,0,137,17,0,0,139,3,0,0,82,20,6,0,106,20,20,24,82,24,6,0,106,24,24,16,82,23,12,0,3,24,24,23,48,20,20,24,72,187,2,0,82,24,6,0,82,23,6,0,106,23,23,16,82,22,12,0,134,20,0,0,84,58,3,0,24,23,22,0,120,20,6,0,1,20,0,0,85,15,20,0,82,3,15,0,137,17,0,0,139,3,0,0,82,22,6,0,106,22,22,16,82,23,6,0,82,23,23,0,82,24,12,0,135,20,2,0,22,23,24,0,82,2,6,0,82,20,2,0,82,24,12,0,3,20,20,24,85,2,20,0,82,20,6,0,25,16,20,16,82,20,16,0,82,24,12,0,3,20,20,24,85,16,20,0,1,20,1,0,85,15,20,0,82,3,15,0,137,17,0,0,139,3,0,0,140,3,24,0,0,0,0,0,1,16,0,0,136,20,0,0,0,17,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,18,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,244,187,2,0,1,21,16,0,135,20,0,0,21,0,0,0,25,14,18,12,25,10,18,8,25,15,18,4,0,9,18,0,85,14,0,0,85,10,1,0,85,15,2,0,82,20,10,0,103,20,20,3,120,20,53,0,82,20,15,0,1,21,1,0,1,22,4,0,138,20,21,22,72,188,2,0,80,188,2,0,104,188,2,0,112,188,2,0,137,17,0,0,139,0,0,0,119,0,17,0,1,16,13,0,119,0,15,0,82,22,14,0,59,21,1,0,145,21,21,0,113,22,4,21,1,16,13,0,119,0,9,0,1,16,11,0,119,0,7,0,82,21,14,0,59,22,1,0,145,22,22,0,113,21,12,22,1,16,11,0,119,0,1,0,32,20,16,11,121,20,16,0,82,20,14,0,59,21,0,0,145,21,21,0,113,20,8,21,82,21,14,0,59,20,0,0,145,20,20,0,113,21,4,20,82,20,14,0,59,21,0,0,145,21,21,0,89,20,21,0,137,17,0,0,139,0,0,0,119,0,9,0,32,21,16,13,121,21,7,0,82,21,14,0,59,20,0,0,145,20,20,0,89,21,20,0,137,17,0,0,139,0,0,0,59,21,1,0,82,22,10,0,103,22,22,3,1,23,136,0,4,22,22,23,134,20,0,0,148,139,4,0,21,22,0,0,145,20,20,0,89,9,20,0,82,20,10,0,79,7,20,0,82,20,15,0,36,20,20,2,121,20,19,0,82,19,10,0,103,20,19,1,3,20,7,20,103,22,19,2,3,3,20,22,76,22,3,0,145,3,22,0,88,20,9,0,145,20,20,0,65,22,3,20,145,22,22,0,59,20,3,0,145,20,20,0,66,8,22,20,145,8,8,0,82,20,14,0,89,20,8,0,119,0,29,0,76,20,7,0,145,4,20,0,88,20,9,0,145,20,20,0,65,11,4,20,145,11,11,0,82,20,14,0,89,20,11,0,82,20,10,0,103,5,20,1,76,20,5,0,145,5,20,0,88,20,9,0,145,20,20,0,65,12,5,20,145,12,12,0,82,20,14,0,113,20,4,12,82,20,10,0,103,6,20,2,76,20,6,0,145,6,20,0,88,20,9,0,145,20,20,0,65,13,6,20,145,13,13,0,82,20,14,0,113,20,8,13,82,20,15,0,32,20,20,2,121,20,5,0,82,20,14,0,59,22,1,0,145,22,22,0,113,20,4,22,82,22,15,0,33,22,22,4,121,22,3,0,137,17,0,0,139,0,0,0,82,22,14,0,59,20,1,0,145,20,20,0,113,22,12,20,137,17,0,0,139,0,0,0,140,1,20,0,0,0,0,0,2,14,0,0,255,0,0,0,136,15,0,0,0,11,15,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,12,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,124,190,2,0,1,16,32,0,135,15,0,0,16,0,0,0,25,10,12,16,25,6,12,12,25,3,12,8,25,5,12,4,0,4,12,0,25,7,12,24,25,1,12,23,25,8,12,22,25,2,12,21,25,9,12,20,85,10,0,0,82,15,10,0,116,6,15,0,82,16,6,0,82,16,16,0,82,17,6,0,106,17,17,4,5,15,16,17,85,5,15,0,82,15,10,0,25,15,15,12,116,4,15,0,82,15,6,0,106,15,15,12,32,15,15,3,121,15,26,0,1,15,0,0,85,3,15,0,82,15,5,0,82,17,3,0,57,15,15,17,64,191,2,0,82,15,4,0,78,15,15,0,83,7,15,0,82,15,4,0,82,17,4,0,102,17,17,2,83,15,17,0,82,17,4,0,78,15,7,0,107,17,2,15,82,15,4,0,25,15,15,3,85,4,15,0,82,15,3,0,25,15,15,1,85,3,15,0,119,0,236,255,137,11,0,0,139,0,0,0,82,15,6,0,106,15,15,12,33,15,15,4,121,15,7,0,1,17,104,65,1,16,1,63,1,18,159,18,1,19,122,65,135,15,1,0,17,16,18,19,1,15,0,0,85,3,15,0,1,15,0,0,120,15,24,0,82,15,5,0,82,19,3,0,57,15,15,19,212,191,2,0,82,15,4,0,78,15,15,0,83,9,15,0,82,15,4,0,82,19,4,0,102,19,19,2,83,15,19,0,82,19,4,0,78,15,9,0,107,19,2,15,82,15,4,0,25,15,15,4,85,4,15,0,82,15,3,0,25,15,15,1,85,3,15,0,119,0,236,255,137,11,0,0,139,0,0,0,82,15,5,0,82,19,3,0,57,15,15,19,188,192,2,0,82,15,4,0,102,15,15,3,83,1,15,0,82,15,4,0,78,15,15,0,83,8,15,0,78,15,1,0,121,15,31,0,79,15,1,0,28,15,15,2,83,2,15,0,82,15,4,0,82,19,4,0,103,19,19,2,5,19,19,14,79,18,2,0,3,19,19,18,79,18,1,0,6,19,19,18,83,15,19,0,82,19,4,0,25,13,19,1,79,19,13,0,5,19,19,14,79,15,2,0,3,19,19,15,79,15,1,0,6,19,19,15,83,13,19,0,82,19,4,0,79,15,8,0,5,15,15,14,79,18,2,0,3,15,15,18,79,18,1,0,6,15,15,18,107,19,2,15,119,0,8,0,82,15,4,0,82,19,4,0,102,19,19,2,83,15,19,0,82,19,4,0,78,15,8,0,107,19,2,15,82,15,4,0,25,15,15,4,85,4,15,0,82,15,3,0,25,15,15,1,85,3,15,0,119,0,201,255,137,11,0,0,139,0,0,0,140,3,36,0,0,0,0,0,2,31,0,0,128,128,128,128,2,32,0,0,255,254,254,254,2,33,0,0,255,0,0,0,1,30,0,0,19,34,1,33,0,7,34,0,33,26,2,0,38,34,0,3,33,34,34,0,19,34,26,34,121,34,29,0,19,34,1,33,0,4,34,0,0,14,2,0,0,21,0,0,78,34,21,0,41,35,4,24,42,35,35,24,45,34,34,35,56,193,2,0,0,13,14,0,0,20,21,0,1,30,6,0,119,0,20,0,25,9,21,1,26,8,14,1,33,24,8,0,38,34,9,3,33,34,34,0,19,34,24,34,121,34,4,0,0,14,8,0,0,21,9,0,119,0,238,255,0,12,8,0,0,19,9,0,0,25,24,0,1,30,5,0,119,0,5,0,0,12,2,0,0,19,0,0,0,25,26,0,1,30,5,0,32,34,30,5,121,34,7,0,121,25,5,0,0,13,12,0,0,20,19,0,1,30,6,0,119,0,2,0,1,30,16,0,32,34,30,6,121,34,71,0,19,34,1,33,0,5,34,0,78,34,20,0,41,35,5,24,42,35,35,24,45,34,34,35,220,193,2,0,120,13,3,0,1,30,16,0,119,0,61,0,0,6,20,0,119,0,59,0,2,34,0,0,1,1,1,1,5,11,7,34,1,34,3,0,48,34,34,13,96,194,2,0,0,17,13,0,0,28,20,0,82,34,28,0,21,34,34,11,0,29,34,0,19,34,29,31,21,34,34,31,2,35,0,0,1,1,1,1,4,35,29,35,19,34,34,35,121,34,4,0,0,3,28,0,0,16,17,0,119,0,16,0,25,10,28,4,26,23,17,4,1,34,3,0,48,34,34,23,80,194,2,0,0,17,23,0,0,28,10,0,119,0,236,255,0,15,23,0,0,27,10,0,1,30,11,0,119,0,4,0,0,15,13,0,0,27,20,0,1,30,11,0,32,34,30,11,121,34,6,0,120,15,3,0,1,30,16,0,119,0,18,0,0,3,27,0,0,16,15,0,0,18,16,0,0,22,3,0,78,34,22,0,41,35,5,24,42,35,35,24,45,34,34,35,172,194,2,0,0,6,22,0,119,0,7,0,26,18,18,1,120,18,3,0,1,30,16,0,119,0,3,0,25,22,22,1,119,0,244,255,32,34,30,16,121,34,2,0,1,6,0,0,139,6,0,0,140,7,31,0,0,0,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,64,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,12,195,2,0,1,22,64,0,135,21,0,0,22,0,0,0,25,13,20,44,25,14,20,40,25,19,20,36,25,10,20,32,25,7,20,28,25,8,20,48,25,16,20,24,25,11,20,20,25,9,20,16,25,15,20,12,25,12,20,8,25,18,20,4,0,17,20,0,85,13,0,0,85,14,1,0,85,19,2,0,85,10,3,0,85,7,4,0,38,21,5,1,83,8,21,0,85,16,6,0,82,21,16,0,116,21,7,0,82,22,19,0,82,23,10,0,5,21,22,23,41,21,21,2,85,11,21,0,82,23,11,0,135,21,10,0,23,0,0,0,85,9,21,0,82,23,9,0,82,22,14,0,82,24,11,0,135,21,2,0,23,22,24,0,82,24,19,0,82,22,10,0,5,21,24,22,85,15,21,0,82,21,13,0,121,21,8,0,82,22,13,0,82,24,9,0,82,23,15,0,134,21,0,0,184,62,3,0,22,24,23,0,85,15,21,0,1,21,1,0,82,23,7,0,22,21,21,23,85,12,21,0,82,21,12,0,28,21,21,2,85,18,21,0,82,21,18,0,28,21,21,2,85,17,21,0,82,23,9,0,82,24,15,0,1,22,1,0,82,25,12,0,82,26,18,0,82,27,17,0,1,28,1,0,78,29,8,0,38,29,29,1,82,30,16,0,134,21,0,0,192,1,1,0,23,24,22,25,26,27,28,29,30,0,0,0,82,30,9,0,135,21,7,0,30,0,0,0,82,21,16,0,1,30,3,4,3,21,21,30,1,30,1,0,82,29,7,0,26,29,29,1,22,30,30,29,1,29,0,0,95,21,30,29,82,29,16,0,1,30,4,3,3,29,29,30,1,30,1,0,82,21,7,0,26,21,21,1,22,30,30,21,1,21,0,0,95,29,30,21,82,21,16,0,1,30,4,2,1,29,0,0,95,21,30,29,82,29,16,0,1,30,4,1,1,21,0,0,95,29,30,21,82,21,16,0,1,30,0,0,107,21,4,30,137,20,0,0,139,0,0,0,140,3,30,0,0,0,0,0,136,25,0,0,0,23,25,0,136,25,0,0,25,25,25,63,38,25,25,192,137,25,0,0,0,24,25,0,136,25,0,0,25,25,25,48,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,12,197,2,0,1,26,48,0,135,25,0,0,26,0,0,0,25,14,24,44,25,11,24,40,25,17,24,36,25,13,24,32,25,10,24,28,25,16,24,24,25,21,24,20,25,15,24,16,25,18,24,12,25,19,24,8,25,22,24,4,0,20,24,0,85,15,0,0,85,18,1,0,85,19,2,0,82,25,15,0,120,25,6,0,1,25,254,255,85,21,25,0,82,6,21,0,137,23,0,0,139,6,0,0,82,25,18,0,82,4,25,0,116,16,15,0,82,25,16,0,120,25,8,0,1,26,130,59,1,27,246,58,2,28,0,0,140,129,0,0,1,29,16,60,135,25,1,0,26,27,28,29,82,25,16,0,106,7,25,32,82,25,16,0,25,25,25,28,116,13,25,0,85,10,7,0,82,25,13,0,134,8,0,0,192,67,4,0,25,0,0,0,82,28,10,0,5,29,8,28,5,25,4,29,85,22,25,0,82,29,15,0,82,28,19,0,134,25,0,0,208,81,2,0,29,22,28,0,85,20,25,0,82,25,20,0,121,25,5,0,116,21,20,0,82,6,21,0,137,23,0,0,139,6,0,0,82,3,22,0,116,17,15,0,82,25,17,0,120,25,8,0,1,28,130,59,1,29,246,58,2,27,0,0,140,129,0,0,1,26,16,60,135,25,1,0,28,29,27,26,82,25,17,0,106,5,25,32,82,25,17,0,25,25,25,28,116,14,25,0,85,11,5,0,82,25,14,0,134,9,0,0,192,67,4,0,25,0,0,0,82,26,11,0,5,25,9,26,7,12,3,25,82,25,18,0,85,25,12,0,1,25,0,0,85,21,25,0,82,6,21,0,137,23,0,0,139,6,0,0,140,4,37,0,0,0,0,0,2,33,0,0,255,0,0,0,2,34,0,0,255,255,0,0,37,35,1,20,121,35,183,0,1,35,9,0,1,36,10,0,138,1,35,36,208,198,2,0,8,199,2,0,84,199,2,0,152,199,2,0,224,199,2,0,60,200,2,0,132,200,2,0,224,200,2,0,40,201,2,0,96,201,2,0,119,0,169,0,82,35,2,0,1,36,4,0,26,36,36,1,3,35,35,36,1,36,4,0,26,36,36,1,11,36,36,0,19,35,35,36,0,17,35,0,82,22,17,0,25,35,17,4,85,2,35,0,85,0,22,0,119,0,155,0,82,35,2,0,1,36,4,0,26,36,36,1,3,35,35,36,1,36,4,0,26,36,36,1,11,36,36,0,19,35,35,36,0,6,35,0,82,7,6,0,25,35,6,4,85,2,35,0,0,8,0,0,85,8,7,0,34,36,7,0,41,36,36,31,42,36,36,31,109,8,4,36,119,0,136,0,82,36,2,0,1,35,4,0,26,35,35,1,3,36,36,35,1,35,4,0,26,35,35,1,11,35,35,0,19,36,36,35,0,9,36,0,82,10,9,0,25,36,9,4,85,2,36,0,0,11,0,0,85,11,10,0,1,35,0,0,109,11,4,35,119,0,119,0,82,35,2,0,1,36,8,0,26,36,36,1,3,35,35,36,1,36,8,0,26,36,36,1,11,36,36,0,19,35,35,36,0,12,35,0,0,13,12,0,82,14,13,0,106,15,13,4,25,35,12,8,85,2,35,0,0,16,0,0,85,16,14,0,109,16,4,15,119,0,101,0,82,35,2,0,1,36,4,0,26,36,36,1,3,35,35,36,1,36,4,0,26,36,36,1,11,36,36,0,19,35,35,36,0,18,35,0,82,19,18,0,25,35,18,4,85,2,35,0,19,35,19,34,41,35,35,16,42,35,35,16,0,20,35,0,0,21,0,0,85,21,20,0,34,36,20,0,41,36,36,31,42,36,36,31,109,21,4,36,119,0,78,0,82,36,2,0,1,35,4,0,26,35,35,1,3,36,36,35,1,35,4,0,26,35,35,1,11,35,35,0,19,36,36,35,0,23,36,0,82,24,23,0,25,36,23,4,85,2,36,0,0,25,0,0,19,36,24,34,85,25,36,0,1,35,0,0,109,25,4,35,119,0,60,0,82,35,2,0,1,36,4,0,26,36,36,1,3,35,35,36,1,36,4,0,26,36,36,1,11,36,36,0,19,35,35,36,0,26,35,0,82,27,26,0,25,35,26,4,85,2,35,0,19,35,27,33,41,35,35,24,42,35,35,24,0,28,35,0,0,29,0,0,85,29,28,0,34,36,28,0,41,36,36,31,42,36,36,31,109,29,4,36,119,0,37,0,82,36,2,0,1,35,4,0,26,35,35,1,3,36,36,35,1,35,4,0,26,35,35,1,11,35,35,0,19,36,36,35,0,30,36,0,82,31,30,0,25,36,30,4,85,2,36,0,0,32,0,0,19,36,31,33,85,32,36,0,1,35,0,0,109,32,4,35,119,0,19,0,82,35,2,0,1,36,8,0,26,36,36,1,3,35,35,36,1,36,8,0,26,36,36,1,11,36,36,0,19,35,35,36,0,4,35,0,86,5,4,0,25,35,4,8,85,2,35,0,87,0,5,0,119,0,5,0,38,36,3,63,135,35,242,0,36,0,2,0,119,0,1,0,139,0,0,0,140,3,29,0,0,0,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,48,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,172,201,2,0,1,25,48,0,135,24,0,0,25,0,0,0,25,14,23,44,25,11,23,40,25,17,23,36,25,13,23,32,25,10,23,28,25,16,23,24,25,21,23,20,25,15,23,16,25,18,23,12,25,19,23,8,25,22,23,4,0,20,23,0,85,15,0,0,85,18,1,0,85,19,2,0,82,24,15,0,32,24,24,0,82,25,18,0,32,25,25,0,20,24,24,25,121,24,6,0,1,24,254,255,85,21,24,0,82,5,21,0,137,23,0,0,139,5,0,0,82,24,18,0,82,6,24,0,116,16,15,0,82,24,16,0,120,24,8,0,1,25,130,59,1,26,246,58,2,27,0,0,140,129,0,0,1,28,16,60,135,24,1,0,25,26,27,28,82,24,16,0,106,7,24,32,82,24,16,0,25,24,24,28,116,13,24,0,85,10,7,0,82,24,13,0,134,8,0,0,192,67,4,0,24,0,0,0,82,27,10,0,5,28,8,27,5,24,6,28,85,22,24,0,82,28,15,0,82,27,19,0,134,24,0,0,212,84,2,0,28,22,27,0,85,20,24,0,82,24,20,0,121,24,5,0,116,21,20,0,82,5,21,0,137,23,0,0,139,5,0,0,82,3,22,0,116,17,15,0,82,24,17,0,120,24,8,0,1,27,130,59,1,28,246,58,2,26,0,0,140,129,0,0,1,25,16,60,135,24,1,0,27,28,26,25,82,24,17,0,106,4,24,32,82,24,17,0,25,24,24,28,116,14,24,0,85,11,4,0,82,24,14,0,134,9,0,0,192,67,4,0,24,0,0,0,82,25,11,0,5,24,9,25,7,12,3,24,82,24,18,0,85,24,12,0,1,24,0,0,85,21,24,0,82,5,21,0,137,23,0,0,139,5,0,0,140,5,26,0,0,0,0,0,136,22,0,0,0,21,22,0,136,22,0,0,1,23,80,2,3,22,22,23,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,100,203,2,0,1,23,80,2,135,22,0,0,23,0,0,0,1,22,56,2,3,18,21,22,1,22,48,2,3,16,21,22,1,22,40,2,3,15,21,22,1,22,32,2,3,14,21,22,1,22,16,2,3,19,21,22,1,22,8,2,3,17,21,22,1,22,0,2,3,13,21,22,1,22,76,2,3,20,21,22,1,22,72,2,3,10,21,22,1,22,64,2,3,7,21,22,1,22,60,2,3,11,21,22,0,12,21,0,85,20,0,0,85,10,1,0,1,22,68,2,97,21,22,2,85,7,3,0,85,11,4,0,82,22,10,0,1,23,0,1,13,22,22,23,82,23,7,0,32,23,23,1,19,22,22,23,121,22,7,0,82,23,20,0,1,24,1,0,135,22,249,0,23,24,0,0,137,21,0,0,139,0,0,0,82,22,10,0,1,24,45,1,13,22,22,24,82,24,7,0,32,24,24,1,19,22,22,24,120,22,8,0,2,22,0,0,128,220,1,0,82,24,10,0,82,23,7,0,95,22,24,23,137,21,0,0,139,0,0,0,82,23,11,0,33,23,23,2,121,23,21,0,2,23,0,0,72,1,2,0,82,23,23,0,85,18,23,0,1,22,109,57,134,24,0,0,40,39,4,0,22,18,0,0,134,23,0,0,232,104,3,0,24,0,0,0,2,23,0,0,72,1,2,0,2,24,0,0,72,1,2,0,82,24,24,0,25,24,24,1,85,23,24,0,137,21,0,0,139,0,0,0,2,24,0,0,234,4,2,0,78,24,24,0,38,24,24,1,121,24,43,0,134,24,0,0,184,63,4,0,2,24,0,0,234,4,2,0,1,23,0,0,83,24,23,0,2,23,0,0,72,1,2,0,82,23,23,0,26,23,23,1,85,13,23,0,1,23,232,56,134,9,0,0,40,39,4,0,23,13,0,0,2,23,0,0,72,1,2,0,82,23,23,0,26,23,23,1,85,17,23,0,1,23,232,56,134,8,0,0,40,39,4,0,23,17,0,0,85,19,9,0,109,19,4,8,1,22,250,56,134,24,0,0,40,39,4,0,22,19,0,0,135,23,250,0,24,0,0,0,1,24,3,0,1,22,29,57,1,25,24,2,3,25,21,25,134,23,0,0,48,143,3,0,24,22,25,0,137,21,0,0,139,0,0,0,119,0,66,0,2,23,0,0,234,4,2,0,1,25,1,0,83,23,25,0,2,25,0,0,76,1,2,0,1,23,0,0,85,25,23,0,1,25,0,0,1,22,0,2,135,23,5,0,12,25,22,0,2,23,0,0,72,1,2,0,82,23,23,0,85,14,23,0,1,25,56,57,134,22,0,0,40,39,4,0,25,14,0,0,135,23,24,0,12,22,0,0,2,23,0,0,208,0,2,0,82,5,23,0,2,23,0,0,212,0,2,0,82,6,23,0,134,25,0,0,244,140,4,0,145,25,25,0,59,24,10,0,145,24,24,0,65,22,25,24,145,22,22,0,75,22,22,0,1,24,8,0,1,25,0,0,134,23,0,0,116,33,3,0,12,5,6,22,24,25,0,0,2,23,0,0,72,1,2,0,2,25,0,0,72,1,2,0,82,25,25,0,25,25,25,1,85,23,25,0,2,25,0,0,72,1,2,0,82,25,25,0,85,15,25,0,1,23,232,56,134,25,0,0,40,39,4,0,23,15,0,0,85,16,25,0,1,23,3,0,1,24,76,57,134,25,0,0,48,143,3,0,23,24,16,0,137,21,0,0,139,0,0,0,139,0,0,0,140,3,27,0,0,0,0,0,136,17,0,0,0,14,17,0,136,17,0,0,25,17,17,63,38,17,17,192,137,17,0,0,0,15,17,0,136,17,0,0,25,17,17,64,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,176,206,2,0,1,18,64,0,135,17,0,0,18,0,0,0,25,3,15,44,25,8,15,40,25,10,15,36,25,9,15,32,25,12,15,28,25,11,15,24,25,7,15,20,0,13,15,0,85,8,0,0,85,10,1,0,85,9,2,0,82,17,8,0,82,17,17,0,120,17,3,0,137,14,0,0,139,0,0,0,82,17,8,0,106,17,17,4,120,17,3,0,137,14,0,0,139,0,0,0,82,17,8,0,106,17,17,8,120,17,3,0,137,14,0,0,139,0,0,0,82,6,8,0,116,3,6,0,106,18,6,4,109,3,4,18,106,17,6,8,109,3,8,17,106,18,6,12,109,3,12,18,106,17,6,16,109,3,16,17,134,17,0,0,0,125,1,0,3,0,0,0,85,12,17,0,82,19,10,0,82,20,9,0,5,18,19,20,41,18,18,2,135,17,10,0,18,0,0,0,85,11,17,0,82,16,8,0,82,18,12,0,106,20,16,4,106,19,16,8,1,21,0,0,82,22,11,0,82,23,10,0,82,24,9,0,1,25,0,0,1,26,4,0,134,17,0,0,44,39,3,0,18,20,19,21,22,23,24,25,26,0,0,0,82,17,8,0,25,17,17,16,116,7,17,0,82,4,8,0,116,3,4,0,106,26,4,4,109,3,4,26,106,17,4,8,109,3,8,17,106,26,4,12,109,3,12,26,106,17,4,16,109,3,16,17,134,17,0,0,72,138,4,0,3,0,0,0,82,5,8,0,82,26,11,0,82,25,10,0,82,24,9,0,134,17,0,0,108,22,3,0], eb + 174080);
  HEAPU8.set([13,26,25,24,116,5,13,0,106,24,13,4,109,5,4,24,106,17,13,8,109,5,8,17,106,24,13,12,109,5,12,24,106,17,13,16,109,5,16,17,82,24,8,0,82,25,7,0,134,17,0,0,88,176,0,0,24,25,0,0,82,25,11,0,135,17,7,0,25,0,0,0,82,25,12,0,135,17,7,0,25,0,0,0,137,14,0,0,139,0,0,0,140,0,15,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,148,208,2,0,1,9,32,0,135,8,0,0,9,0,0,0,25,2,7,20,25,3,7,8,25,0,7,16,25,1,7,12,0,6,7,0,134,8,0,0,36,127,4,0,2,8,0,0,234,4,2,0,78,8,8,0,38,8,8,1,121,8,102,0,2,8,0,0,76,1,2,0,2,9,0,0,76,1,2,0,82,9,9,0,25,9,9,1,85,8,9,0,2,9,0,0,76,1,2,0,82,9,9,0,30,9,9,10,120,9,28,0,2,8,0,0,208,0,2,0,82,8,8,0,2,10,0,0,212,0,2,0,82,10,10,0,134,9,0,0,248,60,3,0,8,10,0,0,85,3,9,0,82,10,3,0,2,8,0,0,208,0,2,0,82,8,8,0,2,11,0,0,212,0,2,0,82,11,11,0,1,12,10,0,1,13,8,0,1,14,0,0,134,9,0,0,232,52,3,0,10,8,11,12,13,14,0,0,82,14,3,0,135,9,7,0,14,0,0,0,2,9,0,0,76,1,2,0,82,9,9,0,28,9,9,15,30,9,9,2,32,9,9,1,121,9,54,0,2,9,0,0,212,0,2,0,82,9,9,0,26,4,9,20,1,9,230,255,83,0,9,0,1,14,41,0,107,0,1,14,1,9,55,0,107,0,2,9,1,14,255,255,107,0,3,14,78,14,0,0,83,2,14,0,102,9,0,1,107,2,1,9,102,14,0,2,107,2,2,14,102,9,0,3,107,2,3,9,1,14,30,0,59,13,10,0,145,13,13,0,134,9,0,0,216,124,3,0,14,4,13,2,2,9,0,0,212,0,2,0,82,9,9,0,26,5,9,25,1,9,190,255,83,1,9,0,1,13,33,0,107,1,1,13,1,9,55,0,107,1,2,9,1,13,255,255,107,1,3,13,78,13,1,0,83,2,13,0,102,9,1,1,107,2,1,9,102,13,1,2,107,2,2,13,102,9,1,3,107,2,3,9,1,13,170,58,1,14,50,0,1,12,10,0,134,9,0,0,248,244,2,0,13,14,5,12,2,0,0,0,134,9,0,0,36,127,4,0,134,9,0,0,128,140,4,0,134,9,0,0,132,246,2,0,2,9,0,0,56,253,1,0,134,12,0,0,88,142,4,0,87,9,12,0,2,12,0,0,72,253,1,0,2,9,0,0,56,253,1,0,86,9,9,0,2,14,0,0,40,253,1,0,86,14,14,0,64,9,9,14,87,12,9,0,2,9,0,0,40,253,1,0,2,12,0,0,56,253,1,0,86,12,12,0,87,9,12,0,2,12,0,0,48,253,1,0,2,9,0,0,64,253,1,0,86,9,9,0,2,14,0,0,72,253,1,0,86,14,14,0,63,9,9,14,87,12,9,0,2,9,0,0,48,253,1,0,86,9,9,0,2,12,0,0,80,253,1,0,86,12,12,0,71,9,9,12,120,9,3,0,137,7,0,0,139,0,0,0,2,13,0,0,80,253,1,0,86,13,13,0,2,11,0,0,48,253,1,0,86,11,11,0,64,14,13,11,145,14,14,0,59,11,232,3,145,11,11,0,65,12,14,11,145,12,12,0,134,9,0,0,16,36,4,0,12,0,0,0,2,9,0,0,56,253,1,0,134,12,0,0,88,142,4,0,87,9,12,0,2,12,0,0,56,253,1,0,86,12,12,0,2,9,0,0,40,253,1,0,86,9,9,0,64,12,12,9,87,6,12,0,2,12,0,0,40,253,1,0,2,9,0,0,56,253,1,0,86,9,9,0,87,12,9,0,2,9,0,0,48,253,1,0,2,12,0,0,48,253,1,0,86,12,12,0,86,11,6,0,63,12,12,11,87,9,12,0,137,7,0,0,139,0,0,0,140,4,32,0,0,0,0,0,136,27,0,0,0,25,27,0,136,27,0,0,25,27,27,63,38,27,27,192,137,27,0,0,0,26,27,0,136,27,0,0,25,27,27,32,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,8,212,2,0,1,28,32,0,135,27,0,0,28,0,0,0,25,22,26,20,0,24,26,0,89,22,2,0,134,27,0,0,236,41,3,0,24,0,0,0,82,28,24,0,134,27,0,0,248,252,2,0,28,0,0,0,134,27,0,0,64,74,4,0,88,4,0,0,145,4,4,0,112,28,0,4,145,28,28,0,59,29,0,0,145,29,29,0,134,27,0,0,76,113,3,0,4,28,29,0,88,29,22,0,145,29,29,0,59,28,0,0,145,28,28,0,59,30,0,0,145,30,30,0,59,31,1,0,145,31,31,0,134,27,0,0,56,238,2,0,29,28,30,31,88,27,1,0,145,27,27,0,68,23,27,0,145,23,23,0,112,30,1,4,145,30,30,0,68,31,30,0,145,31,31,0,59,30,0,0,145,30,30,0,134,27,0,0,76,113,3,0,23,31,30,0,1,30,7,0,134,27,0,0,252,233,2,0,30,0,0,0,59,30,0,0,145,30,30,0,59,31,0,0,145,31,31,0,59,28,1,0,145,28,28,0,134,27,0,0,84,113,4,0,30,31,28,0,78,28,3,0,102,31,3,1,102,30,3,2,102,29,3,3,134,27,0,0,248,157,3,0,28,31,30,29,2,27,0,0,60,2,2,0,88,5,27,0,145,5,5,0,2,29,0,0,80,2,2,0,82,27,29,0,76,27,27,0,145,27,27,0,66,18,5,27,145,18,18,0,2,27,0,0,64,2,2,0,88,6,27,0,145,6,6,0,2,31,0,0,84,2,2,0,82,30,31,0,76,30,30,0,145,30,30,0,66,29,6,30,145,29,29,0,134,27,0,0,80,13,4,0,18,29,0,0,59,29,0,0,145,29,29,0,59,30,0,0,145,30,30,0,134,27,0,0,124,92,4,0,29,30,0,0,2,27,0,0,60,2,2,0,88,7,27,0,145,7,7,0,2,30,0,0,80,2,2,0,82,27,30,0,76,27,27,0,145,27,27,0,66,21,7,27,145,21,21,0,2,27,0,0,64,2,2,0,88,8,27,0,145,8,8,0,2,30,0,0,72,2,2,0,88,27,30,0,145,27,27,0,63,14,8,27,145,14,14,0,2,31,0,0,84,2,2,0,82,29,31,0,76,29,29,0,145,29,29,0,66,30,14,29,145,30,30,0,134,27,0,0,80,13,4,0,21,30,0,0,59,30,0,0,145,30,30,0,112,29,0,12,145,29,29,0,134,27,0,0,124,92,4,0,30,29,0,0,2,27,0,0,60,2,2,0,88,9,27,0,145,9,9,0,2,29,0,0,68,2,2,0,88,27,29,0,145,27,27,0,63,15,9,27,145,15,15,0,2,29,0,0,80,2,2,0,82,27,29,0,76,27,27,0,145,27,27,0,66,19,15,27,145,19,19,0,2,27,0,0,64,2,2,0,88,10,27,0,145,10,10,0,2,29,0,0,72,2,2,0,88,27,29,0,145,27,27,0,63,16,10,27,145,16,16,0,2,31,0,0,84,2,2,0,82,30,31,0,76,30,30,0,145,30,30,0,66,29,16,30,145,29,29,0,134,27,0,0,80,13,4,0,19,29,0,0,112,11,0,8,145,11,11,0,112,29,0,12,145,29,29,0,134,27,0,0,124,92,4,0,11,29,0,0,2,27,0,0,60,2,2,0,88,12,27,0,145,12,12,0,2,29,0,0,68,2,2,0,88,27,29,0,145,27,27,0,63,17,12,27,145,17,17,0,2,29,0,0,80,2,2,0,82,27,29,0,76,27,27,0,145,27,27,0,66,20,17,27,145,20,20,0,2,27,0,0,64,2,2,0,88,13,27,0,145,13,13,0,2,31,0,0,84,2,2,0,82,30,31,0,76,30,30,0,145,30,30,0,66,29,13,30,145,29,29,0,134,27,0,0,80,13,4,0,20,29,0,0,112,29,0,8,145,29,29,0,59,30,0,0,145,30,30,0,134,27,0,0,124,92,4,0,29,30,0,0,134,27,0,0,68,142,2,0,134,27,0,0,156,22,4,0,134,27,0,0,64,131,4,0,137,25,0,0,139,0,0,0,140,4,18,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,96,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,196,215,2,0,1,16,96,0,135,15,0,0,16,0,0,0,25,13,14,80,25,5,14,60,25,4,14,40,25,7,14,28,25,8,14,16,25,9,14,4,0,6,14,0,134,15,0,0,44,80,4,0,7,1,0,0,134,10,0,0,84,173,1,0,0,7,0,0,116,4,10,0,106,16,10,4,109,4,4,16,106,15,10,8,109,4,8,15,106,16,10,12,109,4,12,16,106,15,10,16,109,4,16,15,134,15,0,0,44,80,4,0,8,1,0,0,134,17,0,0,84,173,1,0,0,8,0,0,106,17,17,4,28,16,17,2,76,16,16,0,145,16,16,0,64,15,2,16,145,15,15,0,75,12,15,0,134,15,0,0,44,80,4,0,9,1,0,0,134,17,0,0,84,173,1,0,0,9,0,0,106,17,17,8,28,16,17,2,76,16,16,0,145,16,16,0,64,15,3,16,145,15,15,0,75,11,15,0,1,15,255,255,85,6,15,0,116,5,4,0,106,16,4,4,109,5,4,16,106,15,4,8,109,5,8,15,106,16,4,12,109,5,12,16,106,15,4,16,109,5,16,15,78,15,6,0,83,13,15,0,102,16,6,1,107,13,1,16,102,15,6,2,107,13,2,15,102,16,6,3,107,13,3,16,134,16,0,0,192,84,3,0,5,12,11,13,134,16,0,0,204,117,4,0,9,0,0,0,134,16,0,0,204,117,4,0,8,0,0,0,134,16,0,0,204,117,4,0,7,0,0,0,137,14,0,0,139,0,0,0,140,3,19,0,0,0,0,0,136,15,0,0,0,12,15,0,136,15,0,0,1,16,80,1,3,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,68,217,2,0,1,16,80,1,135,15,0,0,16,0,0,0,1,15,8,1,3,8,12,15,1,15,128,0,3,9,12,15,1,15,0,1,3,5,12,15,1,15,192,0,3,7,12,15,25,6,12,64,0,10,12,0,85,5,0,0,0,11,7,0,0,13,1,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,124,217,2,0,0,11,6,0,0,13,2,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,156,217,2,0,82,16,5,0,2,17,0,0,44,255,1,0,82,17,17,0,5,15,16,17,28,4,15,2,1,17,0,0,2,16,0,0,44,255,1,0,82,16,16,0,28,16,16,2,2,18,0,0,48,255,1,0,82,18,18,0,134,15,0,0,140,57,4,0,4,17,16,18,2,15,0,0,188,255,1,0,82,18,5,0,41,18,18,6,3,3,15,18,0,11,9,0,0,13,2,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,18,11,14,20,218,2,0,0,11,8,0,0,13,3,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,18,11,14,52,218,2,0,134,18,0,0,224,62,1,0,10,9,8,0,0,11,6,0,0,13,10,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,18,11,14,96,218,2,0,0,11,7,0,2,18,0,0,60,255,1,0,82,15,5,0,41,15,15,6,3,13,18,15,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,144,218,2,0,0,11,8,0,0,13,6,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,176,218,2,0,134,15,0,0,4,118,4,0,8,0,0,0,0,11,8,0,0,13,7,0,25,14,11,64,116,11,13,0,25,11,11,4,25,13,13,4,54,15,11,14,220,218,2,0,134,15,0,0,156,117,4,0,8,0,0,0,137,12,0,0,139,0,0,0,140,4,23,0,0,0,0,0,136,19,0,0,0,16,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,17,19,0,136,19,0,0,25,19,19,64,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,80,219,2,0,1,20,64,0,135,19,0,0,20,0,0,0,0,10,17,0,82,4,0,0,26,19,4,8,82,19,19,0,3,6,0,19,26,19,4,4,82,5,19,0,85,10,2,0,109,10,4,0,109,10,8,1,109,10,12,3,25,8,10,16,25,9,10,20,25,12,10,24,25,14,10,28,25,13,10,32,25,11,10,40,0,15,8,0,25,18,15,36,1,19,0,0,85,15,19,0,25,15,15,4,54,19,15,18,156,219,2,0,1,20,0,0,108,8,36,20,1,19,0,0,107,8,38,19,1,20,0,0,134,19,0,0,220,114,4,0,5,2,20,0,121,19,17,0,1,20,1,0,109,10,48,20,82,19,5,0,106,19,19,20,38,19,19,3,1,21,1,0,1,22,0,0,135,20,251,0,19,5,10,6,6,21,22,0,82,20,12,0,32,20,20,1,1,19,0,0,125,7,20,6,19,0,0,0,119,0,49,0,82,20,5,0,106,20,20,24,38,20,20,7,1,22,1,0,1,21,0,0,135,19,14,0,20,5,10,6,22,21,0,0,106,19,10,36,1,20,0,0,1,21,2,0,138,19,20,21,84,220,2,0,148,220,2,0,1,7,0,0,119,0,33,0,82,21,11,0,32,21,21,1,82,22,14,0,32,22,22,1,19,21,21,22,82,22,13,0,32,22,22,1,19,21,21,22,121,21,4,0,82,21,9,0,0,20,21,0,119,0,3,0,1,21,0,0,0,20,21,0,0,7,20,0,119,0,17,0,119,0,1,0,82,19,12,0,33,19,19,1,121,19,12,0,82,19,11,0,32,19,19,0,82,20,14,0,32,20,20,1,19,19,19,20,82,20,13,0,32,20,20,1,19,19,19,20,120,19,3,0,1,7,0,0,119,0,2,0,82,7,8,0,137,16,0,0,139,7,0,0,140,2,22,0,0,0,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,48,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,20,221,2,0,1,19,48,0,135,18,0,0,19,0,0,0,25,14,17,16,25,13,17,8,0,12,17,0,25,11,17,44,25,5,17,40,25,8,17,36,25,10,17,32,25,7,17,28,25,6,17,24,25,9,17,20,85,11,0,0,85,5,1,0,1,18,0,0,85,8,18,0,1,18,0,0,85,10,18,0,135,18,252,0,85,8,18,0,82,19,8,0,82,20,11,0,135,18,253,0,19,20,0,0,82,20,8,0,82,19,5,0,135,18,253,0,20,19,0,0,82,19,8,0,1,20,0,0,1,21,198,51,135,18,254,0,19,20,21,0,82,21,8,0,1,20,1,0,1,19,213,51,135,18,254,0,21,20,19,0,82,19,8,0,1,20,2,0,1,21,56,52,135,18,254,0,19,20,21,0,82,21,8,0,1,20,3,0,1,19,228,51,135,18,254,0,21,20,19,0,82,19,8,0,1,20,4,0,1,21,69,52,135,18,254,0,19,20,21,0,82,21,8,0,1,20,5,0,1,19,83,52,135,18,254,0,21,20,19,0,82,19,8,0,135,18,255,0,19,0,0,0,82,19,8,0,2,20,0,0,130,139,0,0,135,18,0,1,19,20,10,0,82,2,8,0,82,18,10,0,120,18,57,0,85,12,2,0,1,20,4,0,1,19,99,52,134,18,0,0,48,143,3,0,20,19,12,0,1,18,0,0,85,7,18,0,82,19,8,0,2,20,0,0,132,139,0,0,135,18,0,1,19,20,7,0,82,3,7,0,135,18,36,0,85,9,18,0,0,16,3,0,136,18,0,0,0,15,18,0,136,18,0,0,27,20,16,1,25,20,20,15,38,20,20,240,3,18,18,20,137,18,0,0,130,18,0,0,136,20,0,0,49,18,18,20,168,222,2,0,27,20,16,1,25,20,20,15,38,20,20,240,135,18,0,0,20,0,0,0,82,20,8,0,82,19,7,0,135,18,1,1,20,19,6,15,85,13,15,0,1,19,3,0,1,20,145,52,134,18,0,0,48,143,3,0,19,20,13,0,82,20,8,0,135,18,2,1,20,0,0,0,1,18,0,0,85,8,18,0,82,20,9,0,135,18,37,0,20,0,0,0,82,4,8,0,137,17,0,0,139,4,0,0,119,0,10,0,85,14,2,0,1,20,3,0,1,19,148,52,134,18,0,0,48,143,3,0,20,19,14,0,82,4,8,0,137,17,0,0,139,4,0,0,1,18,0,0,139,18,0,0,140,3,26,0,0,0,0,0,136,23,0,0,0,17,23,0,136,23,0,0,1,24,128,0,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,104,223,2,0,1,24,128,0,135,23,0,0,24,0,0,0,25,8,17,56,25,11,17,40,0,9,17,0,25,13,17,36,25,14,17,32,25,15,17,28,25,10,17,16,25,7,17,4,89,13,0,0,89,14,1,0,89,15,2,0,88,23,13,0,145,23,23,0,89,10,23,0,88,24,14,0,145,24,24,0,113,10,4,24,88,23,15,0,145,23,23,0,113,10,8,23,2,23,0,0,213,4,2,0,78,23,23,0,38,23,23,1,121,23,23,0,116,11,10,0,106,24,10,4,109,11,4,24,106,23,10,8,109,11,8,23,0,16,8,0,2,18,0,0,208,254,1,0,25,19,16,64,116,16,18,0,25,16,16,4,25,18,18,4,54,23,16,19,240,223,2,0,134,23,0,0,248,27,3,0,7,11,8,0,116,10,7,0,106,24,7,4,109,10,4,24,106,23,7,8,109,10,8,23,2,23,0,0,0,220,1,0,2,24,0,0,24,255,1,0,82,24,24,0,27,24,24,48,94,23,23,24,1,24,0,32,47,23,23,24,100,225,2,0,88,5,10,0,145,5,5,0,2,23,0,0,0,220,1,0,2,24,0,0,24,255,1,0,82,24,24,0,27,24,24,48,3,20,23,24,106,24,20,12,82,23,20,0,27,23,23,3,41,23,23,2,101,24,23,5,112,3,10,4,145,3,3,0,2,23,0,0,0,220,1,0,2,24,0,0,24,255,1,0,82,24,24,0,27,24,24,48,3,21,23,24,106,24,21,12,82,23,21,0,27,23,23,3,25,23,23,1,41,23,23,2,101,24,23,3,112,4,10,8,145,4,4,0,2,23,0,0,0,220,1,0,2,24,0,0,24,255,1,0,82,24,24,0,27,24,24,48,3,22,23,24,106,24,22,12,82,23,22,0,27,23,23,3,25,23,23,2,41,23,23,2,101,24,23,4,2,23,0,0,0,220,1,0,2,24,0,0,24,255,1,0,82,24,24,0,27,24,24,48,3,6,23,24,82,24,6,0,25,24,24,1,85,6,24,0,2,24,0,0,16,255,1,0,82,24,24,0,2,23,0,0,20,255,1,0,82,23,23,0,26,23,23,1,41,23,23,4,3,24,24,23,25,12,24,4,82,24,12,0,25,24,24,1,85,12,24,0,137,17,0,0,139,0,0,0,119,0,8,0,1,23,5,0,1,25,253,41,134,24,0,0,48,143,3,0,23,25,9,0,137,17,0,0,139,0,0,0,139,0,0,0,140,0,17,0,0,0,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,188,225,2,0,1,15,32,0,135,14,0,0,15,0,0,0,25,12,13,16,25,0,13,12,25,3,13,8,25,1,13,4,0,2,13,0,134,4,0,0,232,141,4,0,134,5,0,0,180,141,4,0,1,14,0,0,83,0,14,0,1,15,0,0,107,0,1,15,1,14,0,0,107,0,2,14,1,15,255,255,107,0,3,15,78,15,0,0,83,12,15,0,102,14,0,1,107,12,1,14,102,15,0,2,107,12,2,15,102,14,0,3,107,12,3,14,1,15,0,0,1,16,0,0,134,14,0,0,236,59,3,0,15,16,4,5,12,0,0,0,134,16,0,0,232,141,4,0,76,16,16,0,145,16,16,0,59,15,62,254,145,15,15,0,63,14,16,15,145,14,14,0,75,9,14,0,134,15,0,0,180,141,4,0,76,15,15,0,145,15,15,0,59,16,162,254,145,16,16,0,63,14,15,16,145,14,14,0,75,11,14,0,1,14,255,255,85,3,14,0,78,14,3,0,83,12,14,0,102,16,3,1,107,12,1,16,102,14,3,2,107,12,2,14,102,16,3,3,107,12,3,16,1,14,122,41,1,15,20,0,134,16,0,0,248,244,2,0,14,9,11,15,12,0,0,0,134,15,0,0,232,141,4,0,76,15,15,0,145,15,15,0,59,14,62,254,145,14,14,0,63,16,15,14,145,16,16,0,75,6,16,0,134,14,0,0,180,141,4,0,76,14,14,0,145,14,14,0,59,15,212,254,145,15,15,0,63,16,14,15,145,16,16,0,75,7,16,0,1,16,255,255,85,1,16,0,78,16,1,0,83,12,16,0,102,15,1,1,107,12,1,15,102,16,1,2,107,12,2,16,102,15,1,3,107,12,3,15,1,16,128,41,1,14,20,0,134,15,0,0,248,244,2,0,16,6,7,14,12,0,0,0,134,14,0,0,232,141,4,0,76,14,14,0,145,14,14,0,59,16,229,252,145,16,16,0,63,15,14,16,145,15,15,0,75,8,15,0,134,16,0,0,180,141,4,0,76,16,16,0,145,16,16,0,59,14,236,255,145,14,14,0,63,15,16,14,145,15,15,0,75,10,15,0,1,15,255,255,85,2,15,0,78,15,2,0,83,12,15,0,102,14,2,1,107,12,1,14,102,15,2,2,107,12,2,15,102,14,2,3,107,12,3,14,1,15,134,41,1,16,10,0,134,14,0,0,248,244,2,0,15,8,10,16,12,0,0,0,137,13,0,0,139,0,0,0,140,2,23,0,0,0,0,0,136,17,0,0,0,15,17,0,136,17,0,0,25,17,17,63,38,17,17,192,137,17,0,0,0,16,17,0,136,17,0,0,25,17,17,48,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,36,228,2,0,1,18,48,0,135,17,0,0,18,0,0,0,25,9,16,28,25,14,16,8,0,13,16,0,25,8,16,24,25,12,16,20,25,10,16,16,25,11,16,12,85,8,1,0,1,17,0,0,85,12,17,0,116,9,0,0,106,18,0,4,109,9,4,18,106,17,0,8,109,9,8,17,106,18,0,12,109,9,12,18,106,17,0,16,109,9,16,17,134,17,0,0,0,125,1,0,9,0,0,0,85,10,17,0,82,17,8,0,1,18,188,78,134,5,0,0,52,83,3,0,17,18,0,0,82,2,8,0,121,5,13,0,106,17,0,4,106,19,0,8,1,20,4,0,82,21,10,0,106,22,0,4,41,22,22,2,134,18,0,0,56,70,3,0,2,17,19,20,21,22,0,0,85,12,18,0,119,0,49,0,1,18,239,78,134,7,0,0,52,83,3,0,2,18,0,0,82,3,8,0,121,7,15,0,116,9,0,0,106,22,0,4,109,9,4,22,106,18,0,8,109,9,8,18,106,22,0,12,109,9,12,22,106,18,0,16,109,9,16,18,134,18,0,0,124,182,2,0,9,3,0,0,85,12,18,0,119,0,29,0,1,22,166,82,134,18,0,0,52,83,3,0,3,22,0,0,121,18,24,0,82,22,8,0,1,21,30,68,134,18,0,0,248,228,3,0,22,21,0,0,85,11,18,0,82,4,0,0,106,18,0,4,106,21,0,8,106,22,0,16,134,6,0,0,208,109,3,0,18,21,22,0,1,21,1,0,82,18,11,0,134,22,0,0,4,58,4,0,4,6,21,18,85,12,22,0,82,18,11,0,134,22,0,0,172,24,4,0,18,0,0,0,82,18,10,0,135,22,7,0,18,0,0,0,82,22,12,0,121,22,10,0,116,13,8,0,1,18,3,0,1,21,171,82,134,22,0,0,48,143,3,0,18,21,13,0,137,15,0,0,139,0,0,0,119,0,8,0,1,21,4,0,1,18,203,82,134,22,0,0,48,143,3,0,21,18,14,0,137,15,0,0,139,0,0,0,139,0,0,0,140,1,23,0,0,0,0,0,127,10,0,0,89,10,0,0,127,10,0,0,82,1,10,0,2,10,0,0,255,255,255,127,19,10,1,10,0,3,10,0,2,10,0,0,255,255,127,63,48,10,10,3,136,230,2,0,2,10,0,0,0,0,128,63,45,10,3,10,104,230,2,0,34,11,1,0,121,11,7,0,62,11,0,0,252,222,166,63,251,33,9,64,145,11,11,0,58,10,11,0,119,0,4,0,59,11,0,0,145,11,11,0,58,10,11,0,58,9,10,0,145,10,9,0,139,10,0,0,119,0,9,0,59,10,0,0,145,10,10,0,64,11,0,0,145,11,11,0,66,9,10,11,145,9,9,0,145,11,9,0,139,11,0,0,2,11,0,0,0,0,0,63,48,11,3,11,152,231,2,0,2,11,0,0,1,0,128,50,48,11,3,11,192,230,2,0,62,9,0,0,252,222,166,63,251,33,249,63,145,9,9,0,145,11,9,0,139,11,0,0,65,6,0,0,145,6,6,0,62,11,0,0,252,222,166,63,251,33,249,63,145,11,11,0,62,13,0,0,105,182,47,0,45,68,116,62,145,13,13,0,62,20,0,0,122,198,19,64,119,226,165,191,145,20,20,0,62,22,0,0,224,255,229,95,109,186,129,63,145,22,22,0,65,21,6,22,145,21,21,0,64,19,20,21,145,19,19,0,65,18,6,19,145,18,18,0,62,19,0,0,37,239,15,160,78,85,197,63,145,19,19,0,63,17,18,19,145,17,17,0,65,16,6,17,145,16,16,0,59,19,1,0,145,19,19,0,62,21,0,0,44,67,13,192,181,156,230,63,145,21,21,0,65,18,6,21,145,18,18,0,64,17,19,18,145,17,17,0,66,15,16,17,145,15,15,0,65,14,15,0,145,14,14,0,64,12,13,14,145,12,12,0,64,10,0,12,145,10,10,0,64,9,11,10,145,9,9,0,145,10,9,0,139,10,0,0,34,10,1,0,121,10,71,0,59,11,1,0,145,11,11,0,63,10,0,11,145,10,10,0,61,11,0,0,0,0,0,63,145,11,11,0,65,7,10,11,145,7,7,0,145,11,7,0,135,4,237,0,11,0,0,0,145,4,4,0,62,10,0,0,252,222,166,63,251,33,249,63,145,10,10,0,62,21,0,0,122,198,19,64,119,226,165,191,145,21,21,0,62,22,0,0,224,255,229,95,109,186,129,63,145,22,22,0,65,20,7,22,145,20,20,0,64,19,21,20,145,19,19,0,65,18,7,19,145,18,18,0,62,19,0,0,37,239,15,160,78,85,197,63,145,19,19,0,63,16,18,19,145,16,16,0,65,17,7,16,145,17,17,0,59,19,1,0,145,19,19,0,62,20,0,0,44,67,13,192,181,156,230,63,145,20,20,0,65,18,7,20,145,18,18,0,64,16,19,18,145,16,16,0,66,15,17,16,145,15,15,0,65,13,15,4,145,13,13,0,62,15,0,0,105,182,47,0,45,68,116,190,145,15,15,0,63,14,13,15,145,14,14,0,63,12,4,14,145,12,12,0,64,11,10,12,145,11,11,0,59,12,2,0,145,12,12,0,65,9,11,12,145,9,9,0,145,12,9,0,139,12,0,0,119,0,79,0,59,11,1,0,145,11,11,0,64,12,11,0,145,12,12,0,61,11,0,0,0,0,0,63,145,11,11,0,65,8,12,11,145,8,8,0,145,11,8,0,135,5,237,0,11,0,0,0,145,5,5,0,127,11,0,0,127,12,0,0,89,12,5,0,127,12,0,0,82,12,12,0,1,10,0,240,19,12,12,10,85,11,12,0,127,12,0,0,88,2,12,0,145,2,2,0,62,18,0,0,122,198,19,64,119,226,165,191,145,18,18,0,62,20,0,0,224,255,229,95,109,186,129,63,145,20,20,0,65,19,8,20,145,19,19,0,64,17,18,19,145,17,17,0,65,16,8,17,145,16,16,0,62,17,0,0,37,239,15,160,78,85,197,63,145,17,17,0,63,13,16,17,145,13,13,0,65,15,8,13,145,15,15,0,59,17,1,0,145,17,17,0,62,19,0,0,44,67,13,192,181,156,230,63,145,19,19,0,65,16,8,19,145,16,16,0,64,13,17,16,145,13,13,0,66,14,15,13,145,14,14,0,65,10,14,5,145,10,10,0,65,15,2,2,145,15,15,0,64,13,8,15,145,13,13,0,63,15,5,2,145,15,15,0,66,14,13,15,145,14,14,0,63,11,10,14,145,11,11,0,63,12,11,2,145,12,12,0,59,11,2,0,145,11,11,0,65,9,12,11,145,9,9,0,145,11,9,0,139,11,0,0,59,11,0,0,145,11,11,0,139,11,0,0,140,1,16,0,0,0,0,0,2,10,0,0,197,127,0,0,2,11,0,0,196,127,0,0,2,12,0,0,198,127,0,0,136,13,0,0,0,9,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,76,234,2,0,1,14,16,0,135,13,0,0,14,0,0,0,0,7,9,0,85,7,0,0,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,94,13,13,14,82,14,7,0,45,13,13,14,140,234,2,0,137,9,0,0,139,0,0,0,1,13,0,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,4,47,13,13,14,136,237,2,0,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,3,2,13,14,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,94,14,14,13,32,14,14,1,121,14,29,0,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,106,1,14,4,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,106,15,2,4,34,15,15,4,121,15,3,0,0,13,1,0,119,0,3,0,30,15,1,4,0,13,15,0,109,14,8,13,119,0,44,0,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,3,3,13,14,82,14,2,0,33,14,14,4,121,14,4,0,1,13,0,0,109,3,8,13,119,0,29,0,106,13,3,4,34,13,13,4,121,13,3,0,1,6,1,0,119,0,14,0,1,13,4,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,4,30,14,14,4,4,6,13,14,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,109,14,8,6,2,13,0,0,16,255,1,0,82,13,13,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,13,13,15,106,13,13,8,134,14,0,0,176,84,4,0,13,0,0,0,121,14,4,0,134,14,0,0,36,127,4,0,119,0,71,0,2,14,0,0,0,220,1,0,2,13,0,0,24,255,1,0,82,13,13,0,27,13,13,48,3,4,14,13,82,13,4,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,8,3,13,13,14,85,4,13,0,2,13,0,0,0,220,1,0,2,14,0,0,24,255,1,0,82,14,14,0,27,14,14,48,3,13,13,14,25,5,13,8,82,13,5,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,8,3,13,13,14,85,5,13,0,2,13,0,0,0,220,1,0,2,14,0,0,24,255,1,0,82,14,14,0,27,14,14,48,3,13,13,14,25,8,13,4,82,13,8,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,8,3,13,13,14,85,8,13,0,2,13,0,0,20,255,1,0,2,14,0,0,20,255,1,0,82,14,14,0,25,14,14,1,85,13,14,0,119,0,1,0,1,14,0,1,2,13,0,0,20,255,1,0,82,13,13,0,49,14,14,13,168,237,2,0,134,14,0,0,36,127,4,0,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,82,15,7,0,97,14,13,15,2,15,0,0,16,255,1,0,82,15,15,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,15,15,13,1,13,0,0,109,15,4,13,2,13,0,0,16,255,1,0,82,13,13,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,13,13,15,2,15,0,0,28,255,1,0,82,15,15,0,109,13,12,15,137,9,0,0,139,0,0,0,140,4,25,0,0,0,0,0,136,23,0,0,0,19,23,0,136,23,0,0,1,24,112,1,3,23,23,24,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,116,238,2,0,1,24,112,1,135,23,0,0,24,0,0,0,1,23,40,1,3,4,19,23,1,23,232,0,3,11,19,23,1,23,228,0,3,8,19,23,1,23,224,0,3,15,19,23,1,23,220,0,3,16,19,23,1,23,216,0,3,17,19,23,1,23,152,0,3,10,19,23,1,23,140,0,3,9,19,23,1,23,128,0,3,7,19,23,25,13,19,64,0,14,19,0,89,8,0,0,89,15,1,0,89,16,2,0,89,17,3,0,134,23,0,0,184,40,4,0,10,0,0,0,88,23,15,0,145,23,23,0,89,9,23,0,88,24,16,0,145,24,24,0,113,9,4,24,88,23,17,0,145,23,23,0,113,9,8,23,116,4,9,0,106,24,9,4,109,4,4,24,106,23,9,8,109,4,8,23,134,23,0,0,228,118,3,0,7,4,0,0,88,23,8,0,145,23,23,0,62,24,0,0,20,25,67,160,70,223,145,63,145,24,24,0,65,12,23,24,145,12,12,0,116,4,7,0,106,23,7,4,109,4,4,23,106,24,7,8,109,4,8,24,134,24,0,0,140,24,2,0,13,4,12,0,0,18,10,0,0,20,13,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,112,239,2,0,2,24,0,0,136,254,1,0,82,22,24,0,0,5,22,0,0,6,22,0,0,18,11,0,0,20,10,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,164,239,2,0,0,18,4,0,0,20,6,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,196,239,2,0,134,24,0,0,224,62,1,0,14,11,4,0,0,18,5,0,0,20,14,0,25,21,18,64,116,18,20,0,25,18,18,4,25,20,20,4,54,24,18,21,240,239,2,0,137,19,0,0,139,0,0,0,140,1,15,0,0,0,0,0,136,12,0,0,0,8,12,0,136,12,0,0,1,13,16,1,3,12,12,13,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,72,240,2,0,1,13,16,1,135,12,0,0,13,0,0,0,1,12,200,0,3,4,8,12,1,12,136,0,3,1,8,12,1,12,128,0,3,5,8,12,25,3,8,64,0,6,8,0,85,5,0,0,82,13,5,0,88,12,13,0,145,12,12,0,89,3,12,0,82,14,5,0,112,13,14,16,145,13,13,0,113,3,4,13,82,14,5,0,112,12,14,32,145,12,12,0,113,3,8,12,82,14,5,0,112,13,14,48,145,13,13,0,113,3,12,13,82,14,5,0,112,12,14,4,145,12,12,0,113,3,16,12,82,14,5,0,112,13,14,20,145,13,13,0,113,3,20,13,82,14,5,0,112,12,14,36,145,12,12,0,113,3,24,12,82,14,5,0,112,13,14,52,145,13,13,0,113,3,28,13,82,14,5,0,112,12,14,8,145,12,12,0,113,3,32,12,82,14,5,0,112,13,14,24,145,13,13,0,113,3,36,13,82,14,5,0,112,12,14,40,145,12,12,0,113,3,40,12,82,14,5,0,112,13,14,56,145,13,13,0,113,3,44,13,82,14,5,0,112,12,14,12,145,12,12,0,113,3,48,12,82,14,5,0,112,13,14,28,145,13,13,0,113,3,52,13,82,14,5,0,112,12,14,44,145,12,12,0,113,3,56,12,82,14,5,0,112,13,14,60,145,13,13,0,113,3,60,13,2,13,0,0,136,254,1,0,82,11,13,0,0,2,11,0,0,7,1,0,0,9,11,0,25,10,7,64,116,7,9,0,25,7,7,4,25,9,9,4,54,13,7,10,136,241,2,0,0,7,4,0,0,9,3,0,25,10,7,64,116,7,9,0,25,7,7,4,25,9,9,4,54,13,7,10,168,241,2,0,134,13,0,0,224,62,1,0,6,1,4,0,0,7,2,0,0,9,6,0,25,10,7,64,116,7,9,0,25,7,7,4,25,9,9,4,54,13,7,10,212,241,2,0,137,8,0,0,139,0,0,0,140,4,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,96,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,60,242,2,0,1,14,96,0,135,13,0,0,14,0,0,0,25,10,12,88,25,7,12,80,25,5,12,64,25,8,12,48,25,9,12,24,25,4,12,8,0,6,12,0,88,13,2,0,145,13,13,0,89,4,13,0,112,14,2,4,145,14,14,0,113,4,4,14,112,15,1,8,145,15,15,0,135,13,9,0,15,0,0,0,145,13,13,0,113,4,8,13,112,15,1,12,145,15,15,0,135,14,9,0,15,0,0,0,145,14,14,0,113,4,12,14,1,14,0,0,85,6,14,0,1,13,0,0,109,6,4,13,116,9,0,0,106,14,0,4,109,9,4,14,106,13,0,8,109,9,8,13,106,14,0,12,109,9,12,14,106,13,0,16,109,9,16,13,116,8,1,0,106,14,1,4,109,8,4,14,106,13,1,8,109,8,8,13,106,14,1,12,109,8,12,14,116,5,4,0,106,13,4,4,109,5,4,13,106,14,4,8,109,5,8,14,106,13,4,12,109,5,12,13,116,7,6,0,106,14,6,4,109,7,4,14,78,14,3,0,83,10,14,0,102,13,3,1,107,10,1,13,102,14,3,2,107,10,2,14,102,13,3,3,107,10,3,13,59,14,0,0,145,14,14,0,134,13,0,0,44,74,2,0,9,8,5,7,14,10,0,0,137,11,0,0,139,0,0,0,140,6,20,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,144,243,2,0,1,14,32,0,135,13,0,0,14,0,0,0,25,11,12,20,25,10,12,16,25,9,12,12,25,8,12,8,25,6,12,4,0,7,12,0,85,11,0,0,85,10,1,0,85,9,2,0,85,8,3,0,85,6,4,0,89,7,5,0,82,13,8,0,1,14,1,0,1,19,5,0,138,13,14,19,240,243,2,0,36,244,2,0,88,244,2,0,140,244,2,0,192,244,2,0,137,12,0,0,139,0,0,0,119,0,66,0,82,15,11,0,82,16,10,0,82,17,9,0,82,18,6,0,88,19,7,0,145,19,19,0,134,14,0,0,20,173,3,0,15,16,17,18,19,0,0,0,137,12,0,0,139,0,0,0,119,0,1,0,82,19,11,0,82,18,10,0,82,17,9,0,82,16,6,0,88,15,7,0,145,15,15,0,134,14,0,0,204,171,3,0,19,18,17,16,15,0,0,0,137,12,0,0,139,0,0,0,119,0,1,0,82,15,11,0,82,16,10,0,82,17,9,0,82,18,6,0,88,19,7,0,145,19,19,0,134,14,0,0,40,171,3,0,15,16,17,18,19,0,0,0,137,12,0,0,139,0,0,0,119,0,1,0,82,19,11,0,82,18,10,0,82,17,9,0,82,16,6,0,88,15,7,0,145,15,15,0,134,14,0,0,132,170,3,0,19,18,17,16,15,0,0,0,137,12,0,0,139,0,0,0,119,0,1,0,82,15,11,0,82,16,10,0,82,17,9,0,82,18,6,0,88,19,7,0,145,19,19,0,134,14,0,0,112,172,3,0,15,16,17,18,19,0,0,0,137,12,0,0,139,0,0,0,119,0,189,255,139,0,0,0,140,5,27,0,0,0,0,0,136,25,0,0,0,21,25,0,136,25,0,0,25,25,25,63,38,25,25,192,137,25,0,0,0,22,25,0,136,25,0,0,1,26,160,0,3,25,25,26,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,72,245,2,0,1,26,160,0,135,25,0,0,26,0,0,0,1,25,152,0,3,8,22,25,1,25,144,0,3,16,22,25,25,7,22,108,25,18,22,104,25,13,22,100,25,14,22,96,25,12,22,92,25,19,22,56,25,15,22,48,25,11,22,40,25,17,22,36,0,6,22,0,85,18,0,0,85,13,1,0,85,14,2,0,85,12,3,0,134,25,0,0,180,115,4,0,19,0,0,0,106,25,19,8,120,25,3,0,137,21,0,0,139,0,0,0,82,25,13,0,76,25,25,0,145,25,25,0,89,15,25,0,82,26,14,0,76,26,26,0,145,26,26,0,113,15,4,26,1,26,10,0,85,11,26,0,82,26,12,0,82,25,11,0,47,26,26,25,232,245,2,0,116,12,11,0,82,26,12,0,82,25,11,0,6,26,26,25,85,17,26,0,134,26,0,0,180,115,4,0,6,0,0,0,82,5,18,0,82,9,12,0,76,26,9,0,145,9,26,0,82,10,17,0,76,26,10,0,145,10,26,0,0,20,7,0,0,23,6,0,25,24,20,36,116,20,23,0,25,20,20,4,25,23,23,4,54,26,20,24,44,246,2,0,116,16,15,0,106,25,15,4,109,16,4,25,78,25,4,0,83,8,25,0,102,26,4,1,107,8,1,26,102,25,4,2,107,8,2,25,102,26,4,3,107,8,3,26,134,26,0,0,200,229,1,0,7,5,16,9,10,8,0,0,137,21,0,0,139,0,0,0,140,0,21,0,0,0,0,0,2,15,0,0,16,4,0,0,2,16,0,0,128,222,1,0,136,17,0,0,0,13,17,0,136,17,0,0,1,18,208,5,3,17,17,18,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,208,246,2,0,1,18,208,5,135,17,0,0,18,0,0,0,1,17,204,5,3,5,13,17,1,17,200,5,3,7,13,17,1,17,196,5,3,11,13,17,1,17,192,5,3,6,13,17,1,17,188,5,3,10,13,17,0,4,13,0,1,17,184,5,3,12,13,17,1,17,180,5,3,8,13,17,1,17,176,5,3,3,13,17,1,17,172,5,3,9,13,17,1,17,168,5,3,2,13,17,134,17,0,0,76,85,4,0,2,17,0,0,68,1,2,0,1,18,0,0,85,17,18,0,2,17,0,0,196,0,2,0,82,17,17,0,1,19,160,5,3,19,13,19,1,20,152,5,3,20,13,20,135,18,3,1,17,19,20,0,1,18,0,0,85,5,18,0,1,18,0,2,82,20,5,0,56,18,18,20,136,247,2,0,82,18,5,0,25,18,18,1,85,5,18,0,119,0,249,255,1,18,0,0,85,7,18,0,1,18,3,0,82,20,7,0,56,18,18,20,204,247,2,0,82,14,7,0,2,18,0,0,231,4,2,0,2,20,0,0,228,4,2,0,90,20,20,14,95,18,14,20,82,20,7,0,25,20,20,1,85,7,20,0,119,0,242,255,2,20,0,0,64,1,2,0,1,18,0,0,85,20,18,0,1,18,0,0,85,11,18,0,135,18,4,1,120,18,3,0,135,18,5,1,85,11,18,0,1,18,0,0,85,6,18,0,82,20,6,0], eb + 184320);
  HEAPU8.set([82,19,11,0,47,20,20,19,28,248,2,0,82,20,6,0,34,20,20,4,0,18,20,0,119,0,3,0,1,20,0,0,0,18,20,0,120,18,2,0,119,0,83,0,1,18,0,0,85,10,18,0,82,0,6,0,1,18,32,0,82,20,10,0,56,18,18,20,88,248,2,0,82,18,10,0,25,18,18,1,85,10,18,0,119,0,248,255,135,18,6,1,0,4,0,0,85,12,18,0,82,18,12,0,120,18,63,0,1,18,0,0,85,8,18,0,82,20,8,0,106,19,4,12,47,20,20,19,148,248,2,0,82,20,8,0,34,20,20,32,0,18,20,0,119,0,3,0,1,20,0,0,0,18,20,0,120,18,2,0,119,0,26,0,82,20,8,0,134,18,0,0,84,163,3,0,20,0,0,0,85,3,18,0,82,18,6,0,41,18,18,5,3,18,16,18,82,20,3,0,3,1,18,20,3,20,4,15,82,18,8,0,41,18,18,2,94,20,20,18,32,20,20,1,121,20,4,0,1,20,1,0,83,1,20,0,119,0,3,0,1,20,0,0,83,1,20,0,82,20,8,0,25,20,20,1,85,8,20,0,119,0,220,255,1,20,0,0,85,9,20,0,82,18,9,0,106,19,4,8,47,18,18,19,48,249,2,0,82,18,9,0,34,18,18,8,0,20,18,0,119,0,3,0,1,18,0,0,0,20,18,0,120,20,2,0,119,0,10,0,82,18,9,0,134,20,0,0,72,38,4,0,18,0,0,0,85,2,20,0,82,20,9,0,25,20,20,1,85,9,20,0,119,0,236,255,82,20,6,0,25,20,20,1,85,6,20,0,119,0,163,255,137,13,0,0,139,0,0,0,140,1,19,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,180,249,2,0,1,16,32,0,135,15,0,0,16,0,0,0,25,13,14,8,0,12,14,0,25,11,14,24,25,10,14,20,25,9,14,16,25,8,14,12,1,15,0,0,85,11,15,0,1,16,0,0,109,11,4,16,1,17,32,0,1,18,4,0,134,15,0,0,136,80,4,0,17,18,0,0,109,11,4,15,1,15,0,0,85,10,15,0,1,15,32,0,82,16,10,0,56,15,15,16,48,250,2,0,106,15,11,4,82,16,10,0,41,16,16,2,1,18,255,255,97,15,16,18,82,18,10,0,25,18,18,1,85,10,18,0,119,0,244,255,1,18,250,47,85,9,18,0,1,18,221,49,85,8,18,0,2,18,0,0,112,0,2,0,82,15,9,0,2,17,0,0,49,139,0,0,134,16,0,0,32,49,3,0,15,17,0,0,85,18,16,0,2,16,0,0,116,0,2,0,82,17,8,0,2,15,0,0,48,139,0,0,134,18,0,0,32,49,3,0,17,15,0,0,85,16,18,0,2,16,0,0,112,0,2,0,82,16,16,0,2,15,0,0,116,0,2,0,82,15,15,0,134,18,0,0,220,220,2,0,16,15,0,0,85,11,18,0,82,1,11,0,1,18,0,0,82,15,11,0,48,18,18,15,132,251,2,0,85,12,1,0,1,15,3,0,1,16,150,51,134,18,0,0,48,143,3,0,15,16,12,0,82,18,11,0,1,16,198,51,135,7,7,1,18,16,0,0,106,16,11,4,85,16,7,0,82,16,11,0,1,18,213,51,135,2,7,1,16,18,0,0,106,18,11,4,109,18,4,2,82,18,11,0,1,16,228,51,135,3,7,1,18,16,0,0,106,16,11,4,109,16,20,3,82,16,11,0,1,18,240,51,135,4,8,1,16,18,0,0,106,18,11,4,109,18,24,4,82,18,11,0,1,16,244,51,135,5,8,1,18,16,0,0,106,16,11,4,109,16,44,5,82,16,11,0,1,18,255,51,135,6,8,1,16,18,0,0,106,18,11,4,109,18,56,6,116,0,11,0,106,16,11,4,109,0,4,16,137,14,0,0,139,0,0,0,119,0,12,0,85,13,1,0,1,18,4,0,1,15,8,52,134,16,0,0,48,143,3,0,18,15,13,0,116,0,11,0,106,15,11,4,109,0,4,15,137,14,0,0,139,0,0,0,139,0,0,0,140,5,16,0,0,0,0,0,106,14,1,8,134,13,0,0,220,114,4,0,0,14,4,0,121,13,6,0,1,14,0,0,134,13,0,0,196,81,4,0,14,1,2,3,119,0,69,0,82,14,1,0,134,13,0,0,220,114,4,0,0,14,4,0,120,13,9,0,106,5,0,8,82,14,5,0,106,14,14,24,38,14,14,7,135,13,14,0,14,5,1,2,3,4,0,0,119,0,56,0,106,13,1,16,46,13,13,2,228,252,2,0,25,7,1,20,82,13,7,0,46,13,13,2,228,252,2,0,109,1,32,3,25,10,1,44,82,13,10,0,33,13,13,4,121,13,26,0,25,9,1,52,1,13,0,0,83,9,13,0,25,8,1,53,1,13,0,0,83,8,13,0,106,6,0,8,82,14,6,0,106,14,14,20,38,14,14,3,1,15,1,0,135,13,251,0,14,6,1,2,2,15,4,0,78,13,8,0,120,13,4,0,1,13,4,0,85,10,13,0,119,0,7,0,78,13,9,0,32,12,13,0,1,13,3,0,85,10,13,0,121,12,20,0,119,0,1,0,85,7,2,0,25,11,1,40,82,13,11,0,25,13,13,1,85,11,13,0,106,13,1,36,33,13,13,1,120,13,11,0,106,13,1,24,33,13,13,2,120,13,8,0,1,14,1,0,107,1,54,14,119,0,5,0,32,14,3,1,121,14,3,0,1,13,1,0,109,1,32,13,139,0,0,0,140,1,16,0,0,0,0,0,2,10,0,0,197,127,0,0,2,11,0,0,196,127,0,0,2,12,0,0,198,127,0,0,136,13,0,0,0,9,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,72,253,2,0,1,14,16,0,135,13,0,0,14,0,0,0,0,7,9,0,85,7,0,0,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,3,13,13,14,106,13,13,12,82,14,7,0,45,13,13,14,140,253,2,0,137,9,0,0,139,0,0,0,1,13,0,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,4,47,13,13,14,136,0,3,0,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,3,2,13,14,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,94,14,14,13,32,14,14,1,121,14,29,0,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,106,1,14,4,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,106,15,2,4,34,15,15,4,121,15,3,0,0,13,1,0,119,0,3,0,30,15,1,4,0,13,15,0,109,14,8,13,119,0,44,0,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,3,3,13,14,82,14,2,0,33,14,14,4,121,14,4,0,1,13,0,0,109,3,8,13,119,0,29,0,106,13,3,4,34,13,13,4,121,13,3,0,1,6,1,0,119,0,14,0,1,13,4,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,4,30,14,14,4,4,6,13,14,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,109,14,8,6,2,13,0,0,16,255,1,0,82,13,13,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,13,13,15,106,13,13,8,134,14,0,0,176,84,4,0,13,0,0,0,121,14,4,0,134,14,0,0,36,127,4,0,119,0,71,0,2,14,0,0,0,220,1,0,2,13,0,0,24,255,1,0,82,13,13,0,27,13,13,48,3,4,14,13,82,13,4,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,8,3,13,13,14,85,4,13,0,2,13,0,0,0,220,1,0,2,14,0,0,24,255,1,0,82,14,14,0,27,14,14,48,3,13,13,14,25,5,13,8,82,13,5,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,8,3,13,13,14,85,5,13,0,2,13,0,0,0,220,1,0,2,14,0,0,24,255,1,0,82,14,14,0,27,14,14,48,3,13,13,14,25,8,13,4,82,13,8,0,2,14,0,0,16,255,1,0,82,14,14,0,2,15,0,0,20,255,1,0,82,15,15,0,26,15,15,1,41,15,15,4,3,14,14,15,106,14,14,8,3,13,13,14,85,8,13,0,2,13,0,0,20,255,1,0,2,14,0,0,20,255,1,0,82,14,14,0,25,14,14,1,85,13,14,0,119,0,1,0,1,14,0,1,2,13,0,0,20,255,1,0,82,13,13,0,49,14,14,13,168,0,3,0,134,14,0,0,36,127,4,0,2,14,0,0,16,255,1,0,82,14,14,0,2,13,0,0,20,255,1,0,82,13,13,0,26,13,13,1,41,13,13,4,3,14,14,13,82,13,7,0,109,14,12,13,2,13,0,0,16,255,1,0,82,13,13,0,2,14,0,0,20,255,1,0,82,14,14,0,26,14,14,1,41,14,14,4,3,13,13,14,1,14,0,0,109,13,4,14,137,9,0,0,139,0,0,0,140,1,25,0,0,0,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,48,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,64,1,3,0,1,21,48,0,135,20,0,0,21,0,0,0,25,11,19,32,25,16,19,24,25,12,19,16,0,9,19,0,25,10,19,8,82,21,0,0,134,20,0,0,136,135,4,0,21,0,0,0,121,20,4,0,1,21,1,0,107,0,44,21,119,0,91,0,82,20,0,0,134,21,0,0,92,117,4,0,11,20,0,0,88,4,11,0,145,4,4,0,25,15,0,8,88,20,15,0,145,20,20,0,64,21,4,20,145,21,21,0,89,12,21,0,25,17,12,4,82,20,0,0,134,21,0,0,92,117,4,0,16,20,0,0,112,6,16,4,145,6,6,0,25,18,0,12,88,20,18,0,145,20,20,0,64,21,6,20,145,21,21,0,89,17,21,0,134,21,0,0,104,76,4,0,11,0,12,0,88,7,12,0,145,7,7,0,112,8,0,4,145,8,8,0,65,13,7,8,145,13,13,0,88,20,15,0,145,20,20,0,63,21,20,13,145,21,21,0,89,15,21,0,88,21,17,0,145,21,21,0,65,14,8,21,145,14,14,0,88,20,18,0,145,20,20,0,63,21,20,14,145,21,21,0,89,18,21,0,0,1,15,0,106,2,1,4,0,3,9,0,116,3,1,0,109,3,4,2,82,20,0,0,134,21,0,0,92,117,4,0,10,20,0,0,116,16,9,0,106,20,9,4,109,16,4,20,116,11,10,0,106,21,10,4,109,11,4,21,59,20,15,0,145,20,20,0,59,22,15,0,145,22,22,0,134,21,0,0,236,94,3,0,16,20,11,22,121,21,20,0,106,5,0,36,120,5,7,0,82,22,0,0,106,20,0,16,134,21,0,0,84,120,4,0,22,20,0,0,119,0,10,0,82,20,5,0,82,20,20,0,38,20,20,31,82,22,0,0,106,23,0,40,106,24,0,16,135,21,4,0,20,5,22,23,24,0,0,0,1,20,1,0,107,0,44,20,137,19,0,0,139,0,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,96,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,48,3,3,0,1,10,96,0,135,9,0,0,10,0,0,0,25,4,8,68,25,2,8,64,25,5,8,44,25,3,8,24,25,6,8,4,85,2,1,0,1,9,0,0,85,5,9,0,1,10,0,0,109,5,4,10,1,9,0,0,109,5,8,9,1,10,0,0,109,5,12,10,1,9,0,0,109,5,16,9,82,10,2,0,134,9,0,0,56,34,2,0,3,10,0,0,82,9,3,0,121,9,46,0,116,4,3,0,106,10,3,4,109,4,4,10,106,9,3,8,109,4,8,9,106,10,3,12,109,4,12,10,106,9,3,16,109,4,16,9,134,9,0,0,248,135,3,0,6,4,0,0,116,5,6,0,106,10,6,4,109,5,4,10,106,9,6,8,109,5,8,9,106,10,6,12,109,5,12,10,106,9,6,16,109,5,16,9,116,4,3,0,106,10,3,4,109,4,4,10,106,9,3,8,109,4,8,9,106,10,3,12,109,4,12,10,106,9,3,16,109,4,16,9,134,9,0,0,72,138,4,0,4,0,0,0,116,0,5,0,106,10,5,4,109,0,4,10,106,9,5,8,109,0,8,9,106,10,5,12,109,0,12,10,106,9,5,16,109,0,16,9,137,7,0,0,139,0,0,0,119,0,17,0,1,10,4,0,1,11,191,81,134,9,0,0,48,143,3,0,10,11,8,0,116,0,5,0,106,11,5,4,109,0,4,11,106,9,5,8,109,0,8,9,106,11,5,12,109,0,12,11,106,9,5,16,109,0,16,9,137,7,0,0,139,0,0,0,139,0,0,0,140,2,18,0,0,0,0,0,2,11,0,0,32,1,0,0,2,12,0,0,4,8,0,0,2,13,0,0,64,16,0,0,1,8,0,0,136,14,0,0,0,9,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,10,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,232,4,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,6,10,16,25,3,10,12,25,5,10,8,25,4,10,4,0,7,10,0,85,3,0,0,85,5,1,0,82,14,5,0,121,14,11,0,82,15,3,0,134,14,0,0,0,176,3,0,15,0,0,0,121,14,3,0,1,8,4,0,119,0,5,0,1,14,0,0,85,6,14,0,119,0,2,0,1,8,4,0,32,14,8,4,121,14,108,0,82,14,3,0,1,15,0,0,109,14,8,15,82,15,3,0,1,14,0,0,109,15,12,14,82,15,3,0,1,16,1,0,134,14,0,0,128,225,3,0,15,16,0,0,85,4,14,0,82,16,3,0,1,15,2,0,134,14,0,0,128,225,3,0,16,15,0,0,85,7,14,0,82,14,7,0,120,14,8,0,82,15,3,0,134,14,0,0,4,185,2,0,15,0,0,0,120,14,42,0,1,8,7,0,119,0,46,0,82,14,7,0,32,14,14,3,121,14,3,0,1,8,9,0,119,0,41,0,82,2,3,0,82,14,7,0,32,14,14,1,121,14,18,0,25,15,2,32,134,14,0,0,164,96,2,0,15,13,11,0,120,14,3,0,1,8,12,0,119,0,30,0,82,15,3,0,3,15,15,12,1,16,96,17,1,17,32,0,134,14,0,0,164,96,2,0,15,16,17,0,120,14,9,0,1,8,14,0,119,0,20,0,134,14,0,0,168,87,2,0,2,0,0,0,120,14,3,0,1,8,16,0,119,0,14,0,82,17,3,0,134,14,0,0,116,92,2,0,17,0,0,0,120,14,3,0,1,8,18,0,119,0,7,0,82,14,4,0,33,14,14,0,40,14,14,1,120,14,193,255,1,8,20,0,119,0,1,0,32,14,8,7,121,14,4,0,1,14,0,0,85,6,14,0,119,0,31,0,32,14,8,9,121,14,4,0,1,14,0,0,85,6,14,0,119,0,26,0,32,14,8,12,121,14,4,0,1,14,0,0,85,6,14,0,119,0,21,0,32,14,8,14,121,14,4,0,1,14,0,0,85,6,14,0,119,0,16,0,32,14,8,16,121,14,4,0,1,14,0,0,85,6,14,0,119,0,11,0,32,14,8,18,121,14,4,0,1,14,0,0,85,6,14,0,119,0,6,0,32,14,8,20,121,14,4,0,1,14,1,0,85,6,14,0,119,0,1,0,137,9,0,0,82,14,6,0,139,14,0,0,140,4,24,0,0,0,0,0,2,19,0,0,0,8,0,0,136,20,0,0,0,16,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,17,20,0,136,20,0,0,1,21,48,8,3,20,20,21,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,80,7,3,0,1,21,48,8,135,20,0,0,21,0,0,0,1,20,40,8,3,10,17,20,1,20,36,8,3,15,17,20,1,20,32,8,3,9,17,20,1,20,28,8,3,7,17,20,1,20,24,8,3,11,17,20,1,20,20,8,3,8,17,20,0,14,17,0,1,20,16,8,3,4,17,20,1,20,12,8,3,12,17,20,1,20,8,8,3,13,17,20,1,20,4,8,3,6,17,20,3,5,17,19,85,10,0,0,85,15,1,0,85,9,2,0,85,7,3,0,82,21,15,0,82,22,7,0,5,20,21,22,85,8,20,0,116,4,10,0,1,20,0,0,85,11,20,0,82,20,9,0,42,20,20,1,82,22,11,0,56,20,20,22,200,8,3,0,82,20,4,0,82,21,11,0,82,23,8,0,5,22,21,23,3,20,20,22,85,12,20,0,82,20,4,0,82,23,9,0,82,21,11,0,4,23,23,21,26,23,23,1,82,21,8,0,5,22,23,21,3,20,20,22,85,13,20,0,116,6,8,0,82,20,6,0,120,20,2,0,119,0,34,0,82,18,6,0,48,22,18,19,72,8,3,0,0,20,18,0,119,0,2,0,0,20,19,0,85,5,20,0,82,22,12,0,82,21,5,0,135,20,2,0,14,22,21,0,82,21,12,0,82,22,13,0,82,23,5,0,135,20,2,0,21,22,23,0,82,23,13,0,82,22,5,0,135,20,2,0,23,14,22,0,82,20,12,0,82,22,5,0,3,20,20,22,85,12,20,0,82,20,13,0,82,22,5,0,3,20,20,22,85,13,20,0,82,20,6,0,82,22,5,0,4,20,20,22,85,6,20,0,119,0,221,255,82,20,11,0,25,20,20,1,85,11,20,0,119,0,196,255,137,16,0,0,139,0,0,0,140,1,22,0,0,0,0,0,127,17,0,0,89,17,0,0,127,17,0,0,82,1,17,0,43,17,1,31,0,13,17,0,2,17,0,0,255,255,255,127,19,17,1,17,0,3,17,0,2,17,0,0,255,255,127,76,48,17,17,3,100,9,3,0,32,18,13,0,121,18,7,0,62,18,0,0,252,222,166,63,251,33,249,63,145,18,18,0,58,17,18,0,119,0,6,0,62,18,0,0,252,222,166,63,251,33,249,191,145,18,18,0,58,17,18,0,58,5,17,0,2,18,0,0,0,0,128,127,16,18,18,3,126,17,18,0,5,0,0,0,145,17,17,0,139,17,0,0,2,17,0,0,0,0,224,62,48,17,3,17,160,9,3,0,2,17,0,0,0,0,128,57,48,17,3,17,148,9,3,0,58,12,0,0,145,17,12,0,139,17,0,0,119,0,72,0,1,6,255,255,58,16,0,0,119,0,69,0,145,17,0,0,135,4,9,0,17,0,0,0,145,4,4,0,2,17,0,0,0,0,152,63,48,17,3,17,64,10,3,0,2,17,0,0,0,0,48,63,48,17,3,17,16,10,3,0,1,6,0,0,59,19,2,0,145,19,19,0,65,18,4,19,145,18,18,0,59,19,255,255,145,19,19,0,63,17,18,19,145,17,17,0,59,18,2,0,145,18,18,0,63,19,4,18,145,19,19,0,66,16,17,19,145,16,16,0,119,0,41,0,1,6,1,0,59,17,255,255,145,17,17,0,63,19,4,17,145,19,19,0,59,18,1,0,145,18,18,0,63,17,4,18,145,17,17,0,66,16,19,17,145,16,16,0,119,0,29,0,2,17,0,0,0,0,28,64,48,17,3,17,152,10,3,0,1,6,2,0,61,19,0,0,0,0,192,191,145,19,19,0,63,17,4,19,145,17,17,0,61,20,0,0,0,0,192,63,145,20,20,0,65,18,4,20,145,18,18,0,59,20,1,0,145,20,20,0,63,19,18,20,145,19,19,0,66,16,17,19,145,16,16,0,119,0,7,0,1,6,3,0,59,19,255,255,145,19,19,0,66,16,19,4,145,16,16,0,119,0,1,0,65,7,16,16,145,7,7,0,65,8,7,7,145,8,8,0,62,21,0,0,48,15,216,159,132,149,175,63,145,21,21,0,65,18,8,21,145,18,18,0,62,21,0,0,96,42,231,159,161,62,194,63,145,21,21,0,63,20,18,21,145,20,20,0,65,17,8,20,145,17,17,0,62,20,0,0,159,176,92,32,85,85,213,63,145,20,20,0,63,19,17,20,145,19,19,0,65,9,7,19,145,9,9,0,62,20,0,0,154,171,96,0,83,153,201,191,145,20,20,0,62,21,0,0,153,156,0,225,72,66,187,63,145,21,21,0,65,17,8,21,145,17,17,0,64,19,20,17,145,19,19,0,65,10,8,19,145,10,10,0,34,19,6,0,121,19,10,0,63,17,10,9,145,17,17,0,65,19,16,17,145,19,19,0,64,12,16,19,145,12,12,0,145,19,12,0,139,19,0,0,119,0,26,0,1,19,128,33,41,17,6,2,100,2,19,17,145,2,2,0,63,19,10,9,145,19,19,0,65,11,16,19,145,11,11,0,1,21,144,33,41,18,6,2,100,20,21,18,145,20,20,0,64,17,11,20,145,17,17,0,64,19,17,16,145,19,19,0,64,14,2,19,145,14,14,0,68,15,14,0,145,15,15,0,32,19,13,0,126,12,19,14,15,0,0,0,145,19,12,0,139,19,0,0,59,19,0,0,145,19,19,0,139,19,0,0,140,3,18,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,36,12,3,0,1,16,32,0,135,15,0,0,16,0,0,0,25,9,14,8,25,10,14,4,0,11,14,0,25,12,14,19,25,7,14,18,25,5,14,17,25,3,14,16,25,13,14,15,25,8,14,14,25,6,14,13,25,4,14,12,85,9,0,0,85,10,1,0,85,11,2,0,82,15,9,0,82,16,10,0,41,16,16,2,90,15,15,16,83,12,15,0,82,15,9,0,82,16,10,0,41,16,16,2,25,16,16,1,90,15,15,16,83,7,15,0,82,15,9,0,82,16,10,0,41,16,16,2,25,16,16,2,90,15,15,16,83,5,15,0,82,15,9,0,82,16,10,0,41,16,16,2,25,16,16,3,90,15,15,16,83,3,15,0,82,15,9,0,82,16,11,0,41,16,16,2,90,15,15,16,83,13,15,0,82,15,9,0,82,16,11,0,41,16,16,2,25,16,16,1,90,15,15,16,83,8,15,0,82,15,9,0,82,16,11,0,41,16,16,2,25,16,16,2,90,15,15,16,83,6,15,0,82,15,9,0,82,16,10,0,41,16,16,2,25,16,16,3,90,15,15,16,83,4,15,0,82,15,9,0,82,16,10,0,41,16,16,2,78,17,13,0,95,15,16,17,82,17,9,0,82,16,10,0,41,16,16,2,25,16,16,1,78,15,8,0,95,17,16,15,82,15,9,0,82,16,10,0,41,16,16,2,25,16,16,2,78,17,6,0,95,15,16,17,82,17,9,0,82,16,10,0,41,16,16,2,25,16,16,3,78,15,4,0,95,17,16,15,82,15,9,0,82,16,11,0,41,16,16,2,78,17,12,0,95,15,16,17,82,17,9,0,82,16,11,0,41,16,16,2,25,16,16,1,78,15,7,0,95,17,16,15,82,15,9,0,82,16,11,0,41,16,16,2,25,16,16,2,78,17,5,0,95,15,16,17,82,17,9,0,82,16,11,0,41,16,16,2,25,16,16,3,78,15,3,0,95,17,16,15,137,14,0,0,139,0,0,0,140,2,14,0,0,0,0,0,136,10,0,0,0,8,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,9,10,0,136,10,0,0,25,10,10,48,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,32,14,3,0,1,11,48,0,135,10,0,0,11,0,0,0,25,5,9,16,25,7,9,12,25,3,9,8,25,6,9,4,0,4,9,0,1,10,0,0,85,5,10,0,1,11,0,0,109,5,4,11,1,10,0,0,109,5,8,10,1,11,0,0,109,5,12,11,1,10,0,0,109,5,16,10,25,10,1,4,116,7,10,0,25,10,1,8,116,3,10,0,1,10,0,0,85,6,10,0,1,10,0,0,85,4,10,0,106,10,1,12,82,11,4,0,56,10,10,11,0,15,3,0,82,10,7,0,82,11,3,0,106,12,1,16,134,2,0,0,208,109,3,0,10,11,12,0,82,12,6,0,3,12,12,2,85,6,12,0,82,12,7,0,28,12,12,2,85,7,12,0,82,12,3,0,28,12,12,2,85,3,12,0,82,12,7,0,34,12,12,1,121,12,3,0,1,12,1,0,85,7,12,0,82,12,3,0,34,12,12,1,121,12,3,0,1,12,1,0,85,3,12,0,82,12,4,0,25,12,12,1,85,4,12,0,119,0,224,255,82,11,6,0,135,12,10,0,11,0,0,0,85,5,12,0,82,12,5,0,120,12,12,0,116,0,5,0,106,11,5,4,109,0,4,11,106,12,5,8,109,0,8,12,106,11,5,12,109,0,12,11,106,12,5,16,109,0,16,12,137,8,0,0,139,0,0,0,82,11,5,0,82,10,1,0,82,13,6,0,135,12,2,0,11,10,13,0,106,13,1,4,109,5,4,13,106,12,1,8,109,5,8,12,106,13,1,12,109,5,12,13,106,12,1,16,109,5,16,12,116,0,5,0,106,13,5,4,109,0,4,13,106,12,5,8,109,0,8,12,106,13,5,12,109,0,12,13,106,12,5,16,109,0,16,12,137,8,0,0,139,0,0,0,140,2,31,0,0,0,0,0,2,27,0,0,128,128,128,128,2,28,0,0,255,254,254,254,1,26,0,0,0,2,1,0,21,29,2,0,38,29,29,3,120,29,59,0,38,29,2,3,120,29,4,0,0,8,0,0,0,18,1,0,119,0,20,0,0,9,0,0,0,19,1,0,78,4,19,0,83,9,4,0,41,29,4,24,42,29,29,24,120,29,3,0,0,17,9,0,119,0,48,0,25,12,19,1,25,16,9,1,38,29,12,3,120,29,4,0,0,8,16,0,0,18,12,0,119,0,4,0,0,9,16,0,0,19,12,0,119,0,240,255,82,5,18,0,19,29,5,27,21,29,29,27,2,30,0,0,1,1,1,1,4,30,5,30,19,29,29,30,120,29,21,0,0,6,5,0,0,23,8,0,0,25,18,0,25,13,25,4,25,14,23,4,85,23,6,0,82,6,13,0,19,29,6,27,21,29,29,27,2,30,0,0,1,1,1,1,4,30,6,30,19,29,29,30,121,29,4,0,0,22,14,0,0,24,13,0,119,0,6,0,0,23,14,0,0,25,13,0,119,0,240,255,0,22,8,0,0,24,18,0,0,10,22,0,0,20,24,0,1,26,10,0,119,0,4,0,0,10,0,0,0,20,1,0,1,26,10,0,32,29,26,10,121,29,21,0,78,7,20,0,83,10,7,0,41,29,7,24,42,29,29,24,120,29,3,0,0,17,10,0,119,0,14,0,0,11,10,0,0,21,20,0,25,21,21,1,25,15,11,1,78,3,21,0,83,15,3,0,41,29,3,24,42,29,29,24,120,29,3,0,0,17,15,0,119,0,3,0,0,11,15,0,119,0,246,255,139,17,0,0,140,1,36,0,0,0,0,0,1,32,0,0,25,30,0,112,0,2,30,0,82,4,2,0,106,16,2,4,32,33,4,0,32,34,16,0,19,33,33,34,121,33,3,0,1,32,3,0,119,0,17,0,25,23,0,120,106,3,23,4,15,33,3,16,45,35,3,16,120,17,3,0,82,35,23,0,16,35,35,4,0,34,35,0,119,0,3,0,1,35,0,0,0,34,35,0,20,33,33,34,121,33,3,0,1,32,3,0,119,0,2,0,1,32,4,0,32,33,32,3,121,33,80,0,134,26,0,0,196,100,4,0,0,0,0,0,34,33,26,0,121,33,3,0,1,32,4,0,119,0,73,0,0,5,30,0,82,6,5,0,106,7,5,4,106,1,0,8,32,33,6,0,32,34,7,0,19,33,33,34,121,33,4,0,0,22,1,0,1,32,9,0,119,0,28,0,106,8,0,4,4,31,1,8,34,33,31,0,41,33,33,31,42,33,33,31,0,9,33,0,25,10,0,120,82,33,10,0,106,34,10,4,134,11,0,0,8,120,4,0,6,7,33,34,135,12,3,0,0,13,1,0,15,34,9,12,13,33,12,9,16,35,31,11,19,33,33,35,20,34,34,33,121,34,4,0,0,22,13,0,1,32,9,0,119,0,5,0,26,33,11,1,3,33,8,33,109,0,104,33,0,14,13,0,32,33,32,9,121,33,3,0,109,0,104,1,0,14,22,0,25,28,0,4,120,14,3,0,82,21,28,0,119,0,19,0,82,15,28,0,25,33,14,1,4,24,33,15,25,29,0,120,0,17,29,0,82,33,17,0,106,34,17,4,34,35,24,0,41,35,35,31,42,35,35,31,134,18,0,0,164,123,4,0,33,34,24,35,135,19,3,0,0,20,29,0,85,20,18,0,109,20,4,19,0,21,15,0,26,25,21,1,79,35,25,0,45,35,26,35,208,18,3,0,0,27,26,0,119,0,3,0,83,25,26,0,0,27,26,0,32,35,32,4,121,35,4,0,1,34,0,0,109,0,104,34,1,27,255,255,139,27,0,0,140,7,30,0,0,0,0,0,136,23,0,0,0,21,23,0,136,23,0,0,25,23,23,63,38,23,23,192,137,23,0,0,0,22,23,0,136,23,0,0,25,23,23,48,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,60,19,3,0,1,24,48,0,135,23,0,0,24,0,0,0,25,14,22,32,25,16,22,28,25,19,22,24,25,20,22,20,25,10,22,16,25,13,22,12,25,15,22,8,0,12,22,0,85,16,0,0,85,19,1,0,85,20,2,0,85,10,3,0,85,13,4,0,85,15,5,0,109,22,4,6,82,7,15,0,1,23,0,0,85,7,23,0,1,24,0,0,109,7,4,24,1,23,0,0,109,7,8,23,82,23,15,0,1,24,8,0,85,23,24,0,82,24,15,0,1,23,0,0,109,24,8,23,82,23,15,0,1,24,0,0,109,23,4,24,82,23,16,0,134,24,0,0,100,99,4,0,23,0,0,0,33,17,24,0,82,9,16,0,121,17,14,0,82,23,19,0,82,25,20,0,82,26,10,0,82,27,13,0,82,28,15,0,134,24,0,0,208,209,3,0,9,23,25,26,27,28,0,0,85,14,24,0,82,8,14,0,137,21,0,0,139,8,0,0,134,24,0,0,8,55,4,0,9,0,0,0,120,24,14,0,1,28,86,63,134,24,0,0,40,112,4,0,28,0,0,0,33,18,24,0,1,28,0,0,1,27,0,0,125,24,18,28,27,0,0,0,85,14,24,0,82,8,14,0,137,21,0,0,139,8,0,0,82,27,16,0,82,28,19,0,82,26,20,0,82,25,10,0,82,23,13,0,82,29,15,0,134,24,0,0,32,71,1,0,27,28,26,25,23,29,0,0,85,12,24,0,82,24,13,0,121,24,3,0,82,11,13,0,119,0,3,0,82,24,10,0,82,11,24,0,82,29,12,0,82,23,19,0,82,23,23,0,82,25,20,0,82,25,25,0,134,24,0,0,172,148,2,0,29,23,25,11,85,14,24,0,82,8,14,0,137,21,0,0,139,8,0,0,140,5,21,0,0,0,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,48,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,248,20,3,0,1,18,48,0,135,17,0,0,18,0,0,0,25,9,16,32,25,10,16,28,25,13,16,24,25,7,16,20,25,11,16,16,25,12,16,12,25,15,16,8,25,14,16,36,25,8,16,4,0,6,16,0,85,9,0,0,85,10,1,0,85,13,2,0,85,7,3,0,85,11,4,0,82,17,9,0,82,18,11,0,41,18,18,2,82,19,7,0,3,18,18,19,91,17,17,18,85,12,17,0,82,18,9,0,82,19,11,0,82,20,13,0,26,20,20,1,134,17,0,0,236,11,3,0,18,19,20,0,116,15,10,0,1,17,0,0,83,14,17,0,116,8,10,0,82,5,9,0,82,17,13,0,26,17,17,1,82,20,8,0,56,17,17,20,72,22,3,0,82,17,8,0,41,17,17,2,82,20,7,0,3,17,17,20,91,17,5,17,85,6,17,0,82,17,6,0,82,20,12,0,47,17,17,20,228,21,3,0,82,20,9,0,82,19,8,0,82,18,15,0,134,17,0,0,236,11,3,0,20,19,18,0,82,17,15,0,25,17,17,1,85,15,17,0,119,0,22,0,82,17,6,0,82,18,12,0,45,17,17,18,56,22,3,0,78,17,14,0,38,17,17,1,121,17,10,0,82,18,9,0,82,19,8,0,82,20,15,0,134,17,0,0,236,11,3,0,18,19,20,0,82,17,15,0,25,17,17,1,85,15,17,0,78,17,14,0,38,17,17,1,40,17,17,1,38,17,17,1,83,14,17,0,82,17,8,0,25,17,17,1,85,8,17,0,119,0,206,255,82,20,15,0,82,19,13,0,26,19,19,1,134,17,0,0,236,11,3,0,5,20,19,0,137,16,0,0,82,17,15,0,139,17,0,0,140,4,16,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,48,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,184,22,3,0,1,13,48,0,135,12,0,0,13,0,0,0,25,8,11,36,25,9,11,32,25,4,11,28,25,6,11,8,25,7,11,4,0,5,11,0,85,8,1,0,85,9,2,0,85,4,3,0,1,12,0,0,85,6,12,0,1,13,0,0,109,6,4,13,1,12,0,0,109,6,8,12,1,13,0,0,109,6,12,13,1,12,0,0,109,6,16,12,1,12,0,0,85,6,12,0,82,13,9,0,109,6,4,13,82,12,4,0,109,6,8,12,1,13,1,0,109,6,12,13,1,12,7,0,109,6,16,12,1,12,0,0,85,7,12,0,106,14,6,4,106,15,6,8,5,13,14,15,41,13,13,2,135,12,10,0,13,0,0,0,85,6,12,0,1,12,0,0,85,5,12,0,106,13,6,4,106,15,6,8,5,12,13,15,41,12,12,2,82,15,5,0,56,12,12,15,24,24,3,0,82,12,6,0,82,15,5,0,82,13,8,0,82,14,7,0,41,14,14,2,90,13,13,14,95,12,15,13,82,13,6,0,82,15,5,0,25,15,15,1,82,12,8,0,82,14,7,0,41,14,14,2,3,12,12,14,102,12,12,1,95,13,15,12,82,12,6,0,82,15,5,0,25,15,15,2,82,13,8,0,82,14,7,0,41,14,14,2,3,13,13,14,102,13,13,2,95,12,15,13,82,13,6,0,82,15,5,0,25,15,15,3,82,12,8,0,82,14,7,0,41,14,14,2,3,12,12,14,102,12,12,3,95,13,15,12,82,12,7,0,25,12,12,1,85,7,12,0,82,12,5,0,25,12,12,4,85,5,12,0,119,0,209,255,116,0,6,0,106,15,6,4,109,0,4,15,106,12,6,8,109,0,8,12,106,15,6,12,109,0,12,15,106,12,6,16,109,0,16,12,137,10,0,0,139,0,0,0,140,5,31,0,0,0,0,0,136,27,0,0,0,24,27,0,136,27,0,0,25,27,27,63,38,27,27,192,137,27,0,0,0,25,27,0,136,27,0,0,1,28,224,0,3,27,27,28,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,148,24,3,0,1,28,224,0,135,27,0,0,28,0,0,0,1,27,208,0,3,9,25,27,1,27,160,0,3,16,25,27,25,15,25,80,0,14,25,0,0,23,16,0,25,26,23,40,1,27,0,0,85,23,27,0,25,23,23,4,54,27,23,26,180,24,3,0,116,9,2,0,1,28,0,0,134,27,0,0,72,117,0,0,28,1,9,15,16,3,4,0,34,27,27,0,121,27,3,0,1,18,255,255,119,0,78,0,1,27,255,255,106,28,0,76,47,27,27,28,16,25,3,0,134,13,0,0,32,142,4,0,0,0,0,0,119,0,2,0,1,13,0,0,82,5,0,0,38,27,5,32,0,8,27,0,102,27,0,74,34,27,27,1,121,27,3,0,38,27,5,223,85,0,27,0,25,11,0,48,82,27,11,0,120,27,42,0,25,10,0,44,82,6,10,0,85,10,14,0,25,20,0,28,85,20,14,0,25,22,0,20,85,22,14,0,1,27,80,0,85,11,27,0,25,21,0,16,25,27,14,80,85,21,27,0,134,12,0,0,72,117,0,0,0,1,9,15,16,3,4,0,120,6,3,0,0,17,12,0,119,0,27,0,106,28,0,36,38,28,28,15,1,29,0,0,1,30,0,0,135,27,9,1,28,0,29,30,82,27,22,0,32,27,27,0,1,28,255,255,125,19,27,28,12,0,0,0,85,10,6,0,1,28,0,0,85,11,28,0,1,28,0,0,85,21,28,0,1,28,0,0,85,20,28,0,1,28,0,0,85,22,28,0,0,17,19,0,119,0,5,0,134,17,0,0,72,117,0,0,0,1,9,15,16,3,4,0,82,7,0,0,20,28,7,8,85,0,28,0,121,13,4,0,134,28,0,0,20,142,4,0,0,0,0,0,38,28,7,32,32,28,28,0,1,27,255,255,125,18,28,17,27,0,0,0,137,24,0,0,139,18,0,0,140,3,23,0,0,0,0,0,136,18,0,0,0,12,18,0,136,18,0,0,25,18,18,63,38,18,18,192,137,18,0,0,0,13,18,0,136,18,0,0,25,18,18,32,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,120,26,3,0,1,19,32,0,135,18,0,0,19,0,0,0,25,10,13,24,25,11,13,20,25,5,13,16,25,8,13,12,25,4,13,8,25,9,13,4,0,6,13,0,85,11,0,0,85,5,1,0,85,8,2,0,82,18,11,0,106,18,18,16,121,18,47,0,82,14,11,0,1,18,172,0,94,18,14,18,1,19,168,0,94,19,14,19,4,18,18,19,85,4,18,0,82,18,4,0,82,19,8,0,47,18,18,19,100,27,3,0,82,19,5,0,82,20,11,0,1,21,168,0,94,20,20,21,82,21,4,0,135,18,2,0,19,20,21,0,82,15,11,0,82,16,4,0,106,21,15,16,38,21,21,15,106,20,15,28,82,19,5,0,3,19,19,16,82,22,8,0,4,22,22,16,135,18,9,1,21,20,19,22,85,6,18,0,82,18,6,0,82,21,8,0,82,22,4,0,4,21,21,22,13,18,18,21,38,18,18,1,85,9,18,0,82,17,11,0,1,18,168,0,1,21,172,0,94,21,17,21,97,17,18,21,116,10,9,0,82,3,10,0,137,12,0,0,139,3,0,0,82,21,11,0,1,18,168,0,94,21,21,18,82,18,8,0,3,21,21,18,82,18,11,0,1,22,172,0,94,18,18,22,50,21,21,18,220,27,3,0,82,18,5,0,82,22,11,0,1,19,168,0,94,22,22,19,82,19,8,0,135,21,2,0,18,22,19,0,82,21,11,0,1,19,168,0,3,7,21,19,82,19,7,0,82,21,8,0,3,19,19,21,85,7,19,0,1,19,1,0,85,10,19,0,82,3,10,0,137,12,0,0,139,3,0,0,119,0,6,0,1,19,0,0,85,10,19,0,82,3,10,0,137,12,0,0,139,3,0,0,1,19,0,0,139,19,0,0,140,3,30,0,0,0,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,32,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,48,28,3,0,1,27,32,0,135,26,0,0,27,0,0,0,25,21,25,12,25,22,25,8,25,23,25,4,0,24,25,0,1,26,0,0,85,21,26,0,1,27,0,0,109,21,4,27,1,26,0,0,109,21,8,26,88,26,1,0,145,26,26,0,89,22,26,0,112,26,1,4,145,26,26,0,89,23,26,0,112,26,1,8,145,26,26,0,89,24,26,0,88,9,2,0,145,9,9,0,88,26,22,0,145,26,26,0,65,18,9,26,145,18,18,0,112,10,2,4,145,10,10,0,88,27,23,0,145,27,27,0,65,26,10,27,145,26,26,0,63,12,18,26,145,12,12,0,112,11,2,8,145,11,11,0,88,27,24,0,145,27,27,0,65,26,11,27,145,26,26,0,63,17,12,26,145,17,17,0,112,27,2,12,145,27,27,0,63,26,17,27,145,26,26,0,89,21,26,0,112,3,2,16,145,3,3,0,88,26,22,0,145,26,26,0,65,20,3,26,145,20,20,0,112,4,2,20,145,4,4,0,88,27,23,0,145,27,27,0,65,26,4,27,145,26,26,0,63,13,20,26,145,13,13,0,112,5,2,24,145,5,5,0,88,27,24,0,145,27,27,0,65,26,5,27,145,26,26,0,63,14,13,26,145,14,14,0,112,28,2,28,145,28,28,0,63,27,14,28,145,27,27,0,113,21,4,27,112,6,2,32,145,6,6,0,88,27,22,0,145,27,27,0,65,19,6,27,145,19,19,0,112,7,2,36,145,7,7,0,88,26,23,0,145,26,26,0,65,27,7,26,145,27,27,0,63,15,19,27,145,15,15,0,112,8,2,40,145,8,8,0,88,26,24,0,145,26,26,0,65,27,8,26,145,27,27,0,63,16,15,27,145,16,16,0,112,28,2,44,145,28,28,0,63,26,16,28,145,26,26,0,113,21,8,26,116,0,21,0,106,27,21,4,109,0,4,27,106,26,21,8,109,0,8,26,137,25,0,0,139,0,0,0,140,3,20,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,40,30,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,11,13,20,25,6,13,16,25,10,13,12,25,8,13,8,25,9,13,4,0,7,13,0,85,6,0,0,85,10,1,0,85,8,2,0,82,14,6,0,1,15,1,0,1,19,4,0,138,14,15,19,136,30,3,0,200,30,3,0,88,31,3,0,176,31,3,0,1,16,45,74,1,17,184,68,1,18,226,3,1,19,72,74,135,15,1,0,16,17,18,19,119,0,78,0,82,15,10,0,34,15,15,0,121,15,4,0,1,15,0,0,85,11,15,0,119,0,72,0,82,15,8,0,82,16,10,0,49,15,15,16,192,30,3,0,82,15,8,0,26,15,15,1,85,11,15,0,119,0,64,0,116,11,10,0,119,0,62,0,82,4,10,0,82,5,8,0,82,15,10,0,34,15,15,0,121,15,12,0,47,15,4,5,248,30,3,0,1,15,0,0,82,16,10,0,4,15,15,16,85,11,15,0,119,0,50,0,82,15,8,0,26,15,15,1,85,11,15,0,119,0,46,0,47,15,4,5,24,31,3,0,116,11,10,0,119,0,42,0,82,15,8,0,41,15,15,1,85,9,15,0,82,15,9,0,82,16,10,0,49,15,15,16,64,31,3,0,1,15,0,0,85,11,15,0,119,0,32,0,82,15,9,0,82,16,10,0,4,15,15,16,26,15,15,1,85,11,15,0,119,0,26,0,82,3,10,0,1,15,0,0,82,16,10,0,49,15,15,16,124,31,3,0,82,15,8,0,8,15,3,15,85,11,15,0,119,0,17,0,1,15,0,0,4,15,15,3,82,16,8,0,8,15,15,16,85,7,15,0,82,15,7,0,121,15,5,0,82,15,8,0,82,16,7,0,4,15,15,16,85,7,15,0,116,11,7,0,119,0,4,0,1,15,0,0,85,11,15,0,119,0,1,0,137,12,0,0,82,14,11,0,139,14,0,0,140,4,21,0,0,0,0,0,136,17,0,0,0,13,17,0,136,17,0,0,25,17,17,63,38,17,17,192,137,17,0,0,0,14,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0], eb + 194560);
  HEAPU8.set([49,17,17,18,20,32,3,0,1,18,32,0,135,17,0,0,18,0,0,0,25,9,14,28,25,7,14,24,25,11,14,20,25,5,14,16,25,6,14,12,25,10,14,8,25,8,14,4,0,12,14,0,85,9,0,0,85,7,1,0,85,11,2,0,89,5,3,0,82,17,9,0,32,17,17,0,82,18,7,0,32,18,18,0,20,17,17,18,121,17,3,0,137,13,0,0,139,0,0,0,116,10,9,0,116,8,7,0,1,17,0,0,85,6,17,0,82,17,11,0,82,18,6,0,57,17,17,18,108,33,3,0,82,15,8,0,82,17,6,0,27,16,17,3,25,17,16,0,91,17,15,17,41,17,17,8,25,18,16,1,91,18,15,18,41,18,18,16,20,17,17,18,25,18,16,2,91,18,15,18,41,18,18,24,20,17,17,18,85,12,17,0,82,4,12,0,76,17,4,0,145,4,17,0,88,18,5,0,145,18,18,0,65,17,4,18,145,17,17,0,75,17,17,0,85,12,17,0,82,17,10,0,82,18,6,0,27,18,18,3,25,18,18,0,82,19,12,0,2,20,0,0,0,255,0,0,19,19,19,20,43,19,19,8,95,17,18,19,82,19,10,0,82,18,6,0,27,18,18,3,25,18,18,1,82,17,12,0,2,20,0,0,0,0,255,0,19,17,17,20,43,17,17,16,95,19,18,17,82,17,10,0,82,18,6,0,27,18,18,3,25,18,18,2,82,19,12,0,2,20,0,0,0,0,0,255,19,19,19,20,43,19,19,24,95,17,18,19,82,19,6,0,25,19,19,1,85,6,19,0,119,0,195,255,137,13,0,0,139,0,0,0,140,6,20,0,0,0,0,0,2,14,0,0,50,128,0,0,136,15,0,0,0,13,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,180,33,3,0,1,16,32,0,135,15,0,0,16,0,0,0,25,11,13,21,25,9,13,16,25,12,13,12,25,10,13,8,25,8,13,4,85,9,0,0,85,12,1,0,85,10,2,0,85,8,3,0,85,13,4,0,38,16,5,1,107,13,20,16,2,16,0,0,200,0,2,0,82,17,9,0,1,18,30,68,134,15,0,0,248,228,3,0,17,18,0,0,85,16,15,0,2,15,0,0,200,0,2,0,82,15,15,0,120,15,8,0,1,15,0,0,83,11,15,0,78,6,11,0,38,15,6,1,0,7,15,0,137,13,0,0,139,7,0,0,2,15,0,0,68,254,1,0,82,17,12,0,82,19,10,0,5,18,17,19,41,18,18,2,135,16,10,0,18,0,0,0,85,15,16,0,1,15,45,55,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,100,126,4,0,15,18,0,0,82,18,12,0,1,15,255,0,19,18,18,15,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,82,15,12,0,43,15,15,8,1,18,255,0,19,15,15,18,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,82,18,10,0,1,15,255,0,19,18,18,15,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,82,15,10,0,43,15,15,8,1,18,255,0,19,15,15,18,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,240,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,0,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,0,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,0,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,0,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,0,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,0,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,0,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,0,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,82,16,8,0,121,16,64,0,1,15,33,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,255,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,11,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,52,55,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,100,126,4,0,18,15,0,0,1,15,3,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,1,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,0,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,18,0,0,2,15,0,0,200,0,2,0,82,15,15,0,134,16,0,0,192,196,3,0,18,15,0,0,1,15,0,0,2,18,0,0,200,0,2,0,82,18,18,0,134,16,0,0,192,196,3,0,15,18,0,0,1,16,1,0,83,11,16,0,78,6,11,0,38,16,6,1,0,7,16,0,137,13,0,0,139,7,0,0,140,4,32,0,0,0,0,0,136,27,0,0,0,26,27,0,136,27,0,0,25,27,27,48,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,92,37,3,0,1,28,48,0,135,27,0,0,28,0,0,0,25,24,26,36,25,23,26,32,25,20,26,24,25,25,26,16,25,22,26,8,0,21,26,0,85,24,0,0,85,23,1,0,0,7,20,0,85,7,2,0,109,7,4,3,82,27,24,0,77,27,27,0,82,28,23,0,77,28,28,0,66,27,27,28,87,25,27,0,0,19,20,0,82,27,19,0,77,27,27,0,61,28,0,0,0,0,128,79,106,29,19,4,76,29,29,0,65,28,28,29,63,27,27,28,86,28,25,0,65,27,27,28,87,22,27,0,86,4,22,0,135,28,9,0,4,0,0,0,59,29,1,0,74,28,28,29,121,28,29,0,59,29,0,0,73,29,4,29,121,29,14,0,61,31,0,0,0,0,128,79,66,31,4,31,135,30,246,0,31,0,0,0,62,31,0,0,0,0,224,255,255,255,239,65,135,29,10,1,30,31,0,0,75,29,29,0,0,28,29,0,119,0,11,0,75,31,4,0,77,31,31,0,64,31,4,31,61,30,0,0,0,0,128,79,66,31,31,30,135,29,18,0,31,0,0,0,75,29,29,0,0,28,29,0,0,27,28,0,119,0,3,0,1,28,0,0,0,27,28,0,0,5,27,0,0,6,21,0,75,27,4,0,85,6,27,0,109,6,4,5,0,8,21,0,86,27,22,0,82,28,8,0,77,28,28,0,61,29,0,0,0,0,128,79,106,31,8,4,76,31,31,0,65,29,29,31,63,28,28,29,64,27,27,28,59,28,0,0,73,27,27,28,120,27,11,0,0,13,21,0,0,14,13,0,82,15,14,0,25,16,13,4,0,17,16,0,82,18,17,0,135,27,12,0,18,0,0,0,137,26,0,0,139,15,0,0,0,9,21,0,82,27,9,0,106,28,9,4,1,29,1,0,1,31,0,0,134,10,0,0,164,123,4,0,27,28,29,31,135,11,3,0,0,12,21,0,85,12,10,0,109,12,4,11,0,13,21,0,0,14,13,0,82,15,14,0,25,16,13,4,0,17,16,0,82,18,17,0,135,31,12,0,18,0,0,0,137,26,0,0,139,15,0,0,140,9,44,0,0,0,0,0,136,21,0,0,0,19,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,20,21,0,136,21,0,0,25,21,21,48,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,120,39,3,0,1,22,48,0,135,21,0,0,22,0,0,0,25,11,20,32,25,13,20,28,25,10,20,24,25,12,20,20,25,16,20,16,25,18,20,12,25,15,20,8,25,17,20,4,0,14,20,0,85,11,0,0,85,13,1,0,85,10,2,0,85,12,3,0,85,16,4,0,85,18,5,0,85,15,6,0,85,17,7,0,85,14,8,0,1,21,0,0,82,22,11,0,82,23,13,0,82,24,10,0,82,25,12,0,82,26,16,0,82,27,18,0,82,28,15,0,82,29,17,0,59,30,0,0,145,30,30,0,59,31,0,0,145,31,31,0,59,32,1,0,145,32,32,0,59,33,1,0,145,33,33,0,1,34,0,0,82,35,14,0,1,36,255,255,1,37,0,0,1,38,0,0,1,39,0,0,1,40,0,0,1,41,1,0,1,42,1,0,1,43,0,0,134,9,0,0,60,79,2,0,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,0,137,19,0,0,139,9,0,0,140,5,30,0,0,0,0,0,136,24,0,0,0,22,24,0,136,24,0,0,25,24,24,63,38,24,24,192,137,24,0,0,0,23,24,0,136,24,0,0,25,24,24,48,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,160,40,3,0,1,25,48,0,135,24,0,0,25,0,0,0,25,16,23,40,25,17,23,36,25,20,23,32,25,21,23,28,25,11,23,24,25,15,23,20,25,13,23,16,0,14,23,0,85,17,0,0,85,20,1,0,85,21,2,0,85,11,3,0,85,15,4,0,82,25,17,0,134,24,0,0,8,55,4,0,25,0,0,0,33,18,24,0,82,5,17,0,82,6,20,0,82,8,21,0,82,9,11,0,82,10,15,0,121,18,22,0,25,25,23,4,134,24,0,0,32,71,1,0,5,6,8,9,10,25,0,0,85,14,24,0,82,24,14,0,121,24,10,0,82,25,14,0,82,26,20,0,82,27,21,0,82,28,11,0,82,29,15,0,134,24,0,0,168,178,3,0,25,26,27,28,29,0,0,0,116,16,14,0,82,7,16,0,137,22,0,0,139,7,0,0,134,24,0,0,136,47,3,0,5,6,8,9,10,0,0,0,85,13,24,0,82,24,13,0,120,24,14,0,1,29,86,63,134,24,0,0,40,112,4,0,29,0,0,0,33,19,24,0,1,29,0,0,1,28,0,0,125,24,19,29,28,0,0,0,85,16,24,0,82,7,16,0,137,22,0,0,139,7,0,0,82,24,15,0,121,24,3,0,82,12,15,0,119,0,3,0,82,24,11,0,82,12,24,0,82,28,13,0,82,29,20,0,82,29,29,0,82,27,21,0,82,27,27,0,134,24,0,0,156,175,2,0,28,29,27,12,85,16,24,0,82,7,16,0,137,22,0,0,139,7,0,0,140,1,13,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,112,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,56,42,3,0,1,10,112,0,135,9,0,0,10,0,0,0,25,5,8,72,25,3,8,56,25,6,8,16,0,1,8,0,2,9,0,0,76,2,2,0,82,9,9,0,121,9,23,0,2,9,0,0,76,2,2,0,82,9,9,0,85,0,9,0,2,10,0,0,80,2,2,0,82,10,10,0,109,0,4,10,2,9,0,0,84,2,2,0,82,9,9,0,109,0,8,9,2,10,0,0,88,2,2,0,82,10,10,0,109,0,12,10,2,9,0,0,92,2,2,0,82,9,9,0,109,0,16,9,137,7,0,0,139,0,0,0,134,9,0,0,180,115,4,0,5,0,0,0,25,4,5,8,2,9,0,0,76,2,2,0,82,10,4,0,85,9,10,0,2,10,0,0,80,2,2,0,106,9,4,4,85,10,9,0,2,9,0,0,84,2,2,0,106,10,4,8,85,9,10,0,2,10,0,0,88,2,2,0,106,9,4,12,85,10,9,0,2,9,0,0,92,2,2,0,106,10,4,16,85,9,10,0,134,10,0,0,180,115,4,0,6,0,0,0,106,10,6,28,1,9,240,5,3,2,10,9,116,3,2,0,106,10,2,4,109,3,4,10,106,9,2,8,109,3,8,9,106,10,2,12,109,3,12,10,88,9,3,0,145,9,9,0,59,11,1,0,145,11,11,0,63,10,9,11,145,10,10,0,89,1,10,0,112,9,3,4,145,9,9,0,59,12,1,0,145,12,12,0,63,11,9,12,145,11,11,0,113,1,4,11,112,12,3,8,145,12,12,0,59,9,2,0,145,9,9,0,64,10,12,9,145,10,10,0,113,1,8,10,112,9,3,12,145,9,9,0,59,12,2,0,145,12,12,0,64,11,9,12,145,11,11,0,113,1,12,11,2,11,0,0,60,2,2,0,82,10,1,0,85,11,10,0,2,10,0,0,64,2,2,0,106,11,1,4,85,10,11,0,2,11,0,0,68,2,2,0,106,10,1,8,85,11,10,0,2,10,0,0,72,2,2,0,106,11,1,12,85,10,11,0,2,11,0,0,76,2,2,0,82,11,11,0,85,0,11,0,2,10,0,0,80,2,2,0,82,10,10,0,109,0,4,10,2,11,0,0,84,2,2,0,82,11,11,0,109,0,8,11,2,10,0,0,88,2,2,0,82,10,10,0,109,0,12,10,2,11,0,0,92,2,2,0,82,11,11,0,109,0,16,11,137,7,0,0,139,0,0,0,140,8,24,0,0,0,0,0,136,21,0,0,0,19,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,152,44,3,0,1,22,16,0,135,21,0,0,22,0,0,0,0,16,20,0,1,21,238,255,4,21,21,1,48,21,21,2,184,44,3,0,134,21,0,0,244,134,4,0,0,0,0,0,102,21,0,11,34,21,21,0,121,21,3,0,82,13,0,0,119,0,2,0,0,13,0,0,2,21,0,0,231,255,255,127,48,21,1,21,32,45,3,0,3,9,2,1,41,21,1,1,0,15,21,0,16,21,9,15,125,8,21,15,9,0,0,0,35,22,8,11,121,22,4,0,1,22,11,0,0,21,22,0,119,0,4,0,25,22,8,16,38,22,22,240,0,21,22,0,0,14,21,0,119,0,2,0,1,14,239,255,134,12,0,0,116,104,4,0,14,0,0,0,121,4,4,0,134,21,0,0,96,122,4,0,12,13,4,0,121,6,5,0,3,22,12,4,134,21,0,0,96,122,4,0,22,7,6,0,4,17,3,5,4,18,17,4,121,18,8,0,3,22,12,4,3,22,22,6,3,23,13,4,3,23,23,5,134,21,0,0,96,122,4,0,22,23,18,0,25,10,1,1,33,21,10,11,121,21,4,0,134,21,0,0,64,123,4,0,13,10,0,0,85,0,12,0,2,23,0,0,0,0,0,128,20,23,14,23,109,0,8,23,3,11,17,6,109,0,4,11,1,23,0,0,83,16,23,0,3,21,12,11,134,23,0,0,240,127,4,0,21,16,0,0,137,19,0,0,139,0,0,0,140,3,28,0,0,0,0,0,1,22,0,0,136,25,0,0,0,23,25,0,136,25,0,0,25,25,25,63,38,25,25,192,137,25,0,0,0,24,25,0,136,25,0,0,25,25,25,32,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,32,46,3,0,1,26,32,0,135,25,0,0,26,0,0,0,0,15,24,0,25,16,24,16,25,20,0,28,82,3,20,0,85,15,3,0,25,21,0,20,82,25,21,0,4,19,25,3,109,15,4,19,109,15,8,1,109,15,12,2,25,10,0,60,0,11,15,0,1,14,2,0,3,17,19,2,82,27,10,0,135,26,11,1,27,11,14,16,134,25,0,0,0,121,4,0,26,0,0,0,120,25,3,0,82,4,16,0,119,0,4,0,1,25,255,255,85,16,25,0,1,4,255,255,45,25,17,4,156,46,3,0,1,22,6,0,119,0,30,0,34,25,4,0,121,25,3,0,1,22,8,0,119,0,26,0,106,7,11,4,16,8,7,4,121,8,4,0,25,26,11,8,0,25,26,0,119,0,2,0,0,25,11,0,0,12,25,0,1,26,0,0,125,25,8,7,26,0,0,0,4,9,4,25,82,25,12,0,3,25,25,9,85,12,25,0,25,13,12,4,82,25,13,0,4,25,25,9,85,13,25,0,0,11,12,0,41,25,8,31,42,25,25,31,3,14,14,25,4,17,17,4,119,0,212,255,32,25,22,6,121,25,10,0,106,5,0,44,106,26,0,48,3,26,5,26,109,0,16,26,0,6,5,0,85,20,6,0,85,21,6,0,0,18,2,0,119,0,18,0,32,26,22,8,121,26,16,0,1,25,0,0,109,0,16,25,1,25,0,0,85,20,25,0,1,25,0,0,85,21,25,0,82,25,0,0,39,25,25,32,85,0,25,0,32,25,14,2,121,25,3,0,1,18,0,0,119,0,3,0,106,25,11,4,4,18,2,25,137,23,0,0,139,18,0,0,140,5,26,0,0,0,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,18,19,0,136,19,0,0,25,19,19,48,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,212,47,3,0,1,20,48,0,135,19,0,0,20,0,0,0,25,12,18,40,25,14,18,36,25,15,18,32,25,16,18,28,25,7,18,24,25,10,18,20,25,13,18,8,25,11,18,4,0,6,18,0,85,14,0,0,85,15,1,0,85,16,2,0,85,7,3,0,85,10,4,0,82,20,14,0,82,21,15,0,82,22,16,0,82,23,7,0,82,24,10,0,1,25,8,0,134,19,0,0,240,18,3,0,20,21,22,23,24,13,25,0,85,11,19,0,82,19,11,0,120,19,6,0,1,19,0,0,85,12,19,0,82,5,12,0,137,17,0,0,139,5,0,0,82,19,13,0,33,19,19,8,121,19,27,0,82,19,13,0,33,19,19,16,121,19,7,0,1,25,231,62,1,24,1,63,1,23,105,4,1,22,45,63,135,19,1,0,25,24,23,22,82,19,10,0,120,19,4,0,82,19,7,0,82,8,19,0,119,0,2,0,82,8,10,0,82,22,11,0,82,23,15,0,82,23,23,0,82,24,16,0,82,24,24,0,134,19,0,0,212,102,3,0,22,23,24,8,85,11,19,0,1,19,8,0,85,13,19,0,1,19,0,0,121,19,17,0,82,19,10,0,121,19,3,0,82,9,10,0,119,0,3,0,82,19,7,0,82,9,19,0,85,6,9,0,82,24,11,0,82,23,15,0,82,23,23,0,82,22,16,0,82,22,22,0,82,25,6,0,134,19,0,0,248,6,3,0,24,23,22,25,116,12,11,0,82,5,12,0,137,17,0,0,139,5,0,0,140,2,22,0,0,0,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,48,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,88,49,3,0,1,19,48,0,135,18,0,0,19,0,0,0,25,14,17,16,25,13,17,8,0,12,17,0,25,9,17,44,25,11,17,40,25,8,17,36,25,10,17,32,25,6,17,28,25,5,17,24,25,7,17,20,85,9,0,0,85,11,1,0,82,19,11,0,135,18,12,1,19,0,0,0,85,8,18,0,82,19,8,0,1,20,1,0,1,21,0,0,135,18,13,1,19,20,9,21,1,18,0,0,85,10,18,0,82,21,8,0,135,18,14,1,21,0,0,0,82,21,8,0,2,20,0,0,129,139,0,0,135,18,15,1,21,20,10,0,82,3,8,0,82,18,10,0,33,18,18,1,121,18,52,0,85,12,3,0,1,20,4,0,1,21,196,52,134,18,0,0,48,143,3,0,20,21,12,0,1,18,0,0,85,6,18,0,82,21,8,0,2,20,0,0,132,139,0,0,135,18,15,1,21,20,6,0,82,4,6,0,135,18,36,0,85,7,18,0,0,16,4,0,136,18,0,0,0,15,18,0,136,18,0,0,27,20,16,1,25,20,20,15,38,20,20,240,3,18,18,20,137,18,0,0,130,18,0,0,136,20,0,0,49,18,18,20,108,50,3,0,27,20,16,1,25,20,20,15,38,20,20,240,135,18,0,0,20,0,0,0,82,20,8,0,82,21,6,0,135,18,16,1,20,21,5,15,85,13,15,0,1,21,3,0,1,20,145,52,134,18,0,0,48,143,3,0,21,20,13,0,82,20,7,0,135,18,37,0,20,0,0,0,82,2,8,0,137,17,0,0,139,2,0,0,119,0,10,0,85,14,3,0,1,20,3,0,1,21,237,52,134,18,0,0,48,143,3,0,20,21,14,0,82,2,8,0,137,17,0,0,139,2,0,0,1,18,0,0,139,18,0,0,140,2,20,0,0,0,0,0,136,16,0,0,0,14,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,15,16,0,136,16,0,0,25,16,16,48,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,40,51,3,0,1,17,48,0,135,16,0,0,17,0,0,0,25,12,15,24,25,11,15,8,0,10,15,0,25,13,15,40,1,17,121,85,78,18,1,0,134,16,0,0,176,124,4,0,17,18,0,0,120,16,7,0,134,16,0,0,120,142,4,0,1,18,28,0,85,16,18,0,1,8,0,0,119,0,95,0,1,18,152,4,135,6,10,0,18,0,0,0,120,6,3,0,1,8,0,0,119,0,89,0,1,16,0,0,1,17,144,0,135,18,5,0,6,16,17,0,1,17,43,0,134,18,0,0,176,124,4,0,1,17,0,0,32,9,18,0,78,2,1,0,121,9,9,0,41,17,2,24,42,17,17,24,32,17,17,114,1,16,8,0,1,19,4,0,125,18,17,16,19,0,0,0,85,6,18,0,41,18,2,24,42,18,18,24,32,18,18,97,121,18,26,0,85,10,0,0,1,19,3,0,109,10,4,19,1,19,221,0,135,5,17,1,19,10,0,0,1,19,0,4,19,19,5,19,120,19,10,0,85,11,0,0,1,18,4,0,109,11,4,18,1,19,0,4,20,19,5,19,109,11,8,19,1,18,221,0,135,19,17,1,18,11,0,0,82,19,6,0,1,18,128,0,20,19,19,18,0,7,19,0,85,6,7,0,0,4,7,0,119,0,2,0,82,4,6,0,109,6,60,0,1,18,152,0,3,18,6,18,109,6,44,18,1,19,0,4,109,6,48,19,25,3,6,75,1,19,255,255,83,3,19,0,38,19,4,8,120,19,11,0,85,12,0,0,1,18,19,84,109,12,4,18,109,12,8,13,1,19,54,0,135,18,18,1,19,12,0,0,120,18,3,0,1,18,10,0,83,3,18,0,1,19,10,0,109,6,32,19,1,18,2,0,109,6,36,18,1,19,1,0,109,6,40,19,1,18,20,0,109,6,12,18,2,18,0,0,144,2,2,0,82,18,18,0,120,18,3,0,1,19,255,255,109,6,76,19,134,19,0,0,0,119,4,0,6,0,0,0,0,8,6,0,137,14,0,0,139,8,0,0,140,6,32,0,0,0,0,0,136,24,0,0,0,22,24,0,136,24,0,0,1,25,32,5,3,24,24,25,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,36,53,3,0,1,25,32,5,135,24,0,0,25,0,0,0,1,24,29,5,3,20,22,24,1,24,24,5,3,17,22,24,1,24,20,5,3,21,22,24,1,24,16,5,3,16,22,24,1,24,12,5,3,14,22,24,1,24,8,5,3,13,22,24,1,24,28,5,3,15,22,24,1,24,4,5,3,18,22,24,0,19,22,0,85,17,0,0,85,21,1,0,85,16,2,0,85,14,3,0,85,13,4,0,38,24,5,1,83,15,24,0,2,24,0,0,200,0,2,0,82,24,24,0,120,24,8,0,1,24,0,0,83,20,24,0,78,6,20,0,38,24,6,1,0,12,24,0,137,22,0,0,139,12,0,0,2,24,0,0,68,254,1,0,82,24,24,0,85,18,24,0,78,24,15,0,38,24,24,1,0,23,24,0,121,23,4,0,1,26,0,0,0,25,26,0,119,0,3,0,82,26,18,0,0,25,26,0,82,26,17,0,82,27,21,0,82,28,16,0,82,29,13,0,134,24,0,0,212,194,2,0,25,26,27,28,29,23,19,0,82,7,18,0,82,8,17,0,2,24,0,0,68,254,1,0,82,9,24,0,82,10,21,0,82,11,16,0,78,24,15,0,38,24,24,1,121,24,6,0,134,24,0,0,140,11,1,0,7,8,9,10,11,19,0,0,119,0,5,0,134,24,0,0,204,166,2,0,7,8,9,10,11,19,0,0,2,29,0,0,200,0,2,0,82,29,29,0,2,28,0,0,68,254,1,0,82,28,28,0,1,27,0,0,1,26,0,0,82,25,21,0,82,30,16,0,82,31,14,0,134,24,0,0,204,18,2,0,29,28,27,26,25,30,31,19,1,24,1,0,83,20,24,0,78,6,20,0,38,24,6,1,0,12,24,0,137,22,0,0,139,12,0,0,140,3,18,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,244,54,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,24,25,9,12,20,25,5,12,16,25,8,12,12,25,4,12,8,25,7,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,5,2,0,82,13,10,0,116,8,13,0,82,14,8,0,82,14,14,0,82,15,8,0,106,15,15,4,5,13,14,15,85,7,13,0,82,13,10,0,25,13,13,12,116,6,13,0,82,13,5,0,32,13,13,2,82,15,5,0,32,15,15,4,20,13,13,15,120,13,7,0,1,15,138,65,1,14,1,63,1,16,78,18,1,17,190,65,135,13,1,0,15,14,16,17,82,13,5,0,32,3,13,2,1,13,0,0,85,4,13,0,121,3,27,0,82,13,7,0,82,17,4,0,57,13,13,17,232,55,3,0,82,13,6,0,82,16,6,0,81,16,16,0,82,14,9,0,81,14,14,0,13,16,16,14,1,14,0,0,2,15,0,0,255,255,0,0,125,17,16,14,15,0,0,0,108,13,2,17,82,17,6,0,25,17,17,4,85,6,17,0,82,17,4,0,25,17,17,1,85,4,17,0,119,0,234,255,137,11,0,0,1,17,1,0,139,17,0,0,82,17,7,0,82,13,4,0,57,17,17,13,116,56,3,0,82,17,6,0,81,17,17,0,82,13,9,0,81,13,13,0,45,17,17,13,88,56,3,0,82,17,6,0,105,17,17,2,82,13,9,0,105,13,13,2,45,17,17,13,88,56,3,0,82,17,6,0,105,17,17,4,82,13,9,0,105,13,13,4,45,17,17,13,88,56,3,0,82,17,6,0,1,13,0,0,108,17,6,13,82,13,6,0,25,13,13,8,85,6,13,0,82,13,4,0,25,13,13,1,85,4,13,0,119,0,225,255,137,11,0,0,1,13,1,0,139,13,0,0,140,3,18,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,204,56,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,24,25,9,12,20,25,5,12,16,25,8,12,12,25,4,12,8,25,7,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,5,2,0,82,13,10,0,116,8,13,0,82,14,8,0,82,14,14,0,82,15,8,0,106,15,15,4,5,13,14,15,85,7,13,0,82,13,10,0,25,13,13,12,116,6,13,0,82,13,5,0,32,13,13,2,82,15,5,0,32,15,15,4,20,13,13,15,120,13,7,0,1,15,138,65,1,14,1,63,1,16,53,18,1,17,163,65,135,13,1,0,15,14,16,17,82,13,5,0,32,3,13,2,1,13,0,0,85,4,13,0,121,3,26,0,82,13,7,0,82,17,4,0,57,13,13,17,188,57,3,0,82,13,6,0,82,16,6,0,79,16,16,0,82,14,9,0,79,14,14,0,13,16,16,14,1,14,0,0,1,15,255,0,125,17,16,14,15,0,0,0,107,13,1,17,82,17,6,0,25,17,17,2,85,6,17,0,82,17,4,0,25,17,17,1,85,4,17,0,119,0,235,255,137,11,0,0,1,17,1,0,139,17,0,0,82,17,7,0,82,13,4,0,57,17,17,13,72,58,3,0,82,17,6,0,79,17,17,0,82,13,9,0,79,13,13,0,45,17,17,13,44,58,3,0,82,17,6,0,103,17,17,1,82,13,9,0,103,13,13,1,45,17,17,13,44,58,3,0,82,17,6,0,103,17,17,2,82,13,9,0,103,13,13,2,45,17,17,13,44,58,3,0,82,17,6,0,1,13,0,0,107,17,3,13,82,13,6,0,25,13,13,4,85,6,13,0,82,13,4,0,25,13,13,1,85,4,13,0,119,0,225,255,137,11,0,0,1,13,1,0,139,13,0,0,140,3,19,0,0,0,0,0,136,16,0,0,0,12,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,13,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,160,58,3,0,1,17,32,0,135,16,0,0,17,0,0,0,25,8,13,28,25,10,13,24,25,11,13,20,25,6,13,16,25,7,13,12,25,4,13,8,25,5,13,4,85,10,0,0,85,11,1,0,85,6,2,0,82,16,10,0,82,17,11,0,109,16,16,17,82,17,10,0,106,17,17,28,120,17,9,0,1,16,144,66,134,17,0,0,40,112,4,0,16,0,0,0,85,8,17,0,82,3,8,0,137,12,0,0,139,3,0,0,82,14,10,0,106,17,14,16,106,16,14,20,4,17,17,16,85,4,17,0,82,15,10,0,106,17,15,24,106,16,15,20,4,9,17,16,85,13,9,0,85,5,9,0,82,16,4,0,82,17,6,0,3,16,16,17,82,17,5,0,56,16,16,17,84,59,3,0,82,16,5,0,41,16,16,1,85,5,16,0,119,0,247,255,82,17,10,0,106,17,17,20,82,18,5,0,134,16,0,0,84,33,4,0,17,18,0,0,85,7,16,0,82,16,7,0,120,16,10,0,1,18,77,63,134,16,0,0,40,112,4,0,18,0,0,0,85,8,16,0,82,3,8,0,137,12,0,0,139,3,0,0,119,0,19,0,82,16,10,0,82,18,7,0,109,16,20,18,82,18,10,0,82,16,7,0,82,17,4,0,3,16,16,17,109,18,16,16,82,16,10,0,82,18,7,0,82,17,5,0,3,18,18,17,109,16,24,18,1,18,1,0,85,8,18,0,82,3,8,0,137,12,0,0,139,3,0,0,1,18,0,0,139,18,0,0,140,5,18,0,0,0,0,0,136,16,0,0,0,14,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,15,16,0,136,16,0,0,25,16,16,64,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,56,60,3,0,1,17,64,0,135,16,0,0,17,0,0,0,25,9,15,48,25,8,15,40,25,6,15,32,25,11,15,28,25,12,15,24,25,13,15,20,25,10,15,16,25,5,15,8,0,7,15,0,85,11,0,0,85,12,1,0,85,13,2,0,85,10,3,0,82,16,11,0,76,16,16,0,145,16,16,0,89,5,16,0,82,17,12,0,76,17,17,0,145,17,17,0,113,5,4,17,82,17,13,0,76,17,17,0,145,17,17,0,89,7,17,0,82,16,10,0,76,16,16,0,145,16,16,0,113,7,4,16,116,6,5,0,106,17,5,4,109,6,4,17,116,8,7,0,106,16,7,4,109,8,4,16,78,16,4,0,83,9,16,0,102,17,4,1,107,9,1,17,102,16,4,2,107,9,2,16,102,17,4,3,107,9,3,17,134,17,0,0,168,66,3,0,6,8,9,0,137,14,0,0,139,0,0,0,140,2,21,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,48,61,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,8,11,20,25,2,11,16,25,7,11,12,25,3,11,8,25,10,11,4,0,9,11,0,85,8,0,0,85,2,1,0,82,15,8,0,82,16,2,0,5,14,15,16,41,14,14,2,1,16,1,0,134,13,0,0,136,80,4,0,14,16,0,0,85,7,13,0,1,16,0,0,1,14,0,0,82,15,8,0,82,17,2,0,1,18,8,25,1,19,1,20,82,20,7,0,135,13,19,1,16,14,15,17,18,19,20,0,82,19,8,0,82,18,2,0,5,20,19,18,41,20,20,2,135,13,10,0,20,0,0,0,85,3,13,0,82,13,2,0,26,13,13,1,85,10,13,0,82,13,10,0,34,13,13,0,120,13,53,0,1,13,0,0,85,9,13,0,82,13,8,0,41,13,13,2,82,20,9,0,56,13,13,20,144,62,3,0,82,20,10,0,82,18,8,0,5,13,20,18,41,13,13,2,0,4,13,0,82,18,2,0,26,18,18,1,82,20,10,0,4,18,18,20,82,20,8,0,5,13,18,20,41,13,13,2,0,5,13,0,82,12,9,0,82,13,3,0,3,20,5,12,82,18,7,0,3,19,4,12,90,18,18,19,95,13,20,18,82,18,9,0,25,18,18,1,30,18,18,4,120,18,14,0,82,20,2,0,26,20,20,1,82,13,10,0,4,20,20,13,82,13,8,0,5,18,20,13,41,18,18,2,0,6,18,0,82,18,3,0,82,13,9,0,3,13,6,13,1,20,255,255,95,18,13,20,82,20,9,0,25,20,20,1,85,9,20,0,119,0,211,255,82,20,10,0,26,20,20,1,85,10,20,0,119,0,202,255,82,13,7,0,135,20,7,0,13,0,0,0,137,11,0,0,82,20,3,0,139,20,0,0,140,3,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,244,62,3,0,1,12,32,0,135,11,0,0,12,0,0,0,25,5,10,20,25,3,10,16,25,7,10,12,25,6,10,8,25,8,10,4,0,4,10,0,85,5,0,0,85,3,1,0,85,7,2,0,1,11,0,0,85,6,11,0,116,8,3,0,1,11,0,0,85,4,11,0,82,11,7,0,82,12,4,0,56,11,11,12,20,64,3,0,82,11,5,0,79,11,11,0,82,12,3,0,79,12,12,0,46,11,11,12,92,63,3,0,1,9,6,0,119,0,16,0,82,11,5,0,103,11,11,1,82,12,3,0,103,12,12,1,46,11,11,12,124,63,3,0,1,9,6,0,119,0,8,0,82,11,5,0,103,11,11,2,82,12,3,0,103,12,12,2,46,11,11,12,152,63,3,0,1,9,6,0,32,11,9,6,121,11,20,0,1,9,0,0,82,11,8,0,82,12,3,0,78,12,12,0,83,11,12,0,82,12,8,0,82,11,3,0,102,11,11,1,107,12,1,11,82,11,8,0,82,12,3,0,102,12,12,2,107,11,2,12,82,12,6,0,25,12,12,1,85,6,12,0,82,12,8,0,25,12,12,4,85,8,12,0,82,12,5,0,25,12,12,4,85,5,12,0,82,12,3,0,25,12,12,4,85,3,12,0,82,12,4,0,25,12,12,1,85,4,12,0,119,0,199,255,137,10,0,0,82,12,6,0,139,12,0,0,140,5,16,0,0,0,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,64,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,88,64,3,0,1,15,64,0,135,14,0,0,15,0,0,0,25,12,13,56,25,7,13,48,25,10,13,28,25,5,13,16,25,6,13,8,0,8,13,0,134,14,0,0,44,80,4,0,5,1,0,0,134,9,0,0,84,173,1,0,0,5,0,0,89,6,2,0,113,6,4,3,62,14,0,0,31,133,235,81,184,30,9,64,65,11,4,14,145,11,11,0,1,14,255,255,85,8,14,0,116,10,9,0,106,15,9,4,109,10,4,15,106,14,9,8,109,10,8,14,106,15,9,12,109,10,12,15,106,14,9,16,109,10,16,14,116,7,6,0,106,15,6,4,109,7,4,15,78,15,8,0,83,12,15,0,102,14,8,1,107,12,1,14,102,15,8,2,107,12,2,15,102,14,8,3,107,12,3,14,59,15,1,0,145,15,15,0,134,14,0,0,8,169,2,0,10,7,11,15,12,0,0,0,134,14,0,0,204,117,4,0,5,0,0,0,137,13,0,0,139,0,0,0,140,4,22,0,0,0,0,0,136,19,0,0,0,15,19,0,136,19,0,0,1,20,144,0,3,19,19,20,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,100,65,3,0,1,20,144,0,135,19,0,0,20,0,0,0,25,9,15,80,25,5,15,72,25,4,15,68,25,8,15,8,0,12,15,0,109,15,76,0,85,5,1,0,85,4,2,0,109,15,64,3,82,18,5,0,2,19,0,0,231,4,2,0,2,20,0,0,228,4,2,0,90,20,20,18,95,19,18,20,2,20,0,0,228,4,2,0,82,19,5,0,82,21,4,0,95,20,19,21,1,19,0,0,134,21,0,0,192,20,4,0,19,0,0,0,121,21,4,0,1,21,1,0,85,8,21,0,119,0,8,0,1,19,0,0,134,21,0,0,44,73,4,0,19,0,0,0,121,21,3,0,1,21,0,0,85,8,21,0,1,19,0,0,109,8,8,19,1,21,1,0,109,8,4,21,25,10,8,24,134,21,0,0,120,78,4,0,12,0,0,0,116,10,12,0,106,19,12,4,109,10,4,19,134,6,0,0,232,141,4,0,76,19,6,0,145,6,19,0,25,11,8,24,88,21,11,0,145,21,21,0,66,19,21,6,145,19,19,0,89,11,19,0,134,7,0,0,180,141,4,0,76,19,7,0,145,7,19,0,25,19,8,24,25,13,19,4,88,21,13,0,145,21,21,0,66,19,21,7,145,19,19,0,89,13,19,0,0,14,9,0,0,16,8,0,25,17,14,56,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,128,66,3,0,134,19,0,0,164,149,1,0,9,0,0,0,137,15,0,0,139,0,0,0,140,3,13,0,0,0,0,0,136,10,0,0,0,8,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,9,10,0,136,10,0,0,25,10,10,64,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,244,66,3,0,1,11,64,0,135,10,0,0,11,0,0,0,25,7,9,48,25,6,9,40,25,4,9,24,25,3,9,8,0,5,9,0,88,10,0,0,145,10,10,0,89,3,10,0,112,11,0,4,145,11,11,0,113,3,4,11,88,10,1,0,145,10,10,0,113,3,8,10,112,11,1,4,145,11,11,0,113,3,12,11,59,11,0,0,145,11,11,0,89,5,11,0,59,10,0,0,145,10,10,0,113,5,4,10,116,4,3,0,106,11,3,4,109,4,4,11,106,10,3,8,109,4,8,10,106,11,3,12,109,4,12,11,116,6,5,0,106,10,5,4,109,6,4,10,78,10,2,0,83,7,10,0,102,11,2,1,107,7,1,11,102,10,2,2,107,7,2,10,102,11,2,3,107,7,3,11,59,10,0,0,145,10,10,0,134,11,0,0,188,211,2,0,4,6,10,7,137,8,0,0,139,0,0,0,140,6,29,0,0,0,0,0,136,22,0,0,0,18,22,0,136,22,0,0,1,23,48,1,3,22,22,23,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,240,67,3,0,1,23,48,1,135,22,0,0,23,0,0,0,1,22,240,0,3,11,18,22,1,22,176,0,3,6,18,22,25,9,18,40,25,12,18,32,25,8,18,24,25,14,18,16,25,16,18,8,0,15,18,0,25,10,18,112,25,13,18,48,87,9,0,0,87,12,1,0,87,8,2,0,87,14,3,0,87,16,4,0,87,15,5,0,86,23,9,0,86,24,12,0,86,25,8,0,86,26,14,0,86,27,16,0,86,28,15,0,134,22,0,0,76,178,2,0,10,23,24,25,26,27,28,0,2,22,0,0,136,254,1,0,82,21,22,0,0,7,21,0,0,17,6,0,0,19,21,0,25,20,17,64,116,17,19,0,25,17,17,4,25,19,19,4,54,22,17,20,124,68,3,0,0,17,11,0,0,19,10,0,25,20,17,64,116,17,19,0,25,17,17,4,25,19,19,4,54,22,17,20,156,68,3,0,134,22,0,0,224,62,1,0,13,6,11,0,0,17,7,0,0,19,13,0,25,20,17,64,116,17,19,0,25,17,17,4,25,19,19,4,54,22,17,20,200,68,3,0,137,18,0,0,139,0,0,0,140,5,21,0,0,0,0,0,136,16,0,0,0,14,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,15,16,0,136,16,0,0,1,17,16,16,3,16,16,17,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,52,69,3,0,1,17,16,16,135,16,0,0,17,0,0,0,1,16,4,16,3,13,15,16,1,16,0,16,3,7,15,16,1,16,252,15,3,9,15,16,1,16,248,15,3,8,15,16,1,16,244,15,3,10,15,16,1,16,240,15,3,12,15,16,25,6,15,8,0,11,15,0,85,7,0,0,85,9,1,0,85,8,2,0,85,10,3,0,85,12,4,0,82,17,8,0,134,16,0,0,184,110,4,0,17,0,0,0,85,11,16,0,82,16,11,0,120,16,6,0,1,16,0,0,85,13,16,0,82,5,13,0,137,14,0,0,139,5,0,0,116,6,7,0,82,17,7,0,82,18,9,0,3,17,17,18,109,6,4,17,82,16,11,0,82,18,8,0,1,19,1,0,82,20,12,0,134,17,0,0,104,181,3,0,6,16,18,19,20,0,0,0,120,17,9,0,106,20,6,20,135,17,7,0,20,0,0,0,1,17,0,0,85,13,17,0,82,5,13,0,137,14,0,0,139,5,0,0,82,17,10,0,121,17,6,0,82,17,10,0,106,20,6,16,106,19,6,20,4,20,20,19,85,17,20,0,25,20,6,20,116,13,20,0,82,5,13,0,137,14,0,0,139,5,0,0,140,6,26,0,0,0,0,0,136,20,0,0,0,18,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,19,20,0,136,20,0,0,25,20,20,48,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,132,70,3,0,1,21,48,0,135,20,0,0,21,0,0,0,25,14,19,36,25,11,19,32,25,16,19,28,25,17,19,24,25,8,19,20,25,9,19,16,25,15,19,12,25,10,19,8,25,12,19,4,0,13,19,0,85,11,0,0,85,16,1,0,85,17,2,0,85,8,3,0,85,9,4,0,85,15,5,0,82,21,9,0,82,22,15,0,82,23,16,0,82,24,17,0,82,25,8,0,134,20,0,0,176,110,1,0,21,22,23,24,25,12,0,0,85,13,20,0,82,20,13,0,120,20,6,0,1,20,0,0,85,14,20,0,82,6,14,0,137,18,0,0,139,6,0,0,82,25,11,0,1,24,30,68,134,20,0,0,216,76,4,0,25,24,0,0,85,10,20,0,82,7,13,0,82,20,10,0,121,20,20,0,1,24,1,0,82,25,12,0,82,23,10,0,134,20,0,0,4,58,4,0,7,24,25,23,82,23,10,0,134,20,0,0,172,24,4,0,23,0,0,0,82,23,13,0,135,20,7,0,23,0,0,0,1,20,1,0,85,14,20,0,82,6,14,0,137,18,0,0,139,6,0,0,119,0,8,0,135,20,7,0,7,0,0,0,1,20,0,0,85,14,20,0,82,6,14,0,137,18,0,0,139,6,0,0,1,20,0,0,139,20,0,0,140,2,20,0,0,0,0,0,136,15,0,0,0,13,15,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,14,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,232,71,3,0,1,16,32,0,135,15,0,0,16,0,0,0,25,8,14,20,25,12,14,16,25,9,14,12,25,6,14,8,25,11,14,4,0,7,14,0], eb + 204800);
  HEAPU8.set([89,12,0,0,89,9,1,0,88,16,9,0,145,16,16,0,59,17,2,0,145,17,17,0,66,15,16,17,145,15,15,0,89,6,15,0,88,17,6,0,145,17,17,0,61,16,0,0,0,0,0,63,145,16,16,0,63,15,17,16,145,15,15,0,89,11,15,0,88,15,9,0,145,15,15,0,59,16,1,0,145,16,16,0,72,15,15,16,120,15,7,0,1,16,117,74,1,17,184,68,1,18,250,2,1,19,153,74,135,15,1,0,16,17,18,19,88,19,12,0,145,19,19,0,135,15,9,0,19,0,0,0,145,15,15,0,89,12,15,0,88,4,12,0,145,4,4,0,88,15,11,0,145,15,15,0,74,15,4,15,121,15,9,0,59,15,0,0,145,15,15,0,89,8,15,0,88,3,8,0,145,3,3,0,137,13,0,0,145,15,3,0,139,15,0,0,61,19,0,0,0,0,0,63,145,19,19,0,88,18,6,0,145,18,18,0,64,15,19,18,145,15,15,0,89,7,15,0,88,5,12,0,145,5,5,0,88,15,7,0,145,15,15,0,72,15,5,15,121,15,10,0,59,15,1,0,145,15,15,0,89,8,15,0,88,3,8,0,145,3,3,0,137,13,0,0,145,15,3,0,139,15,0,0,119,0,17,0,88,2,11,0,145,2,2,0,88,15,12,0,145,15,15,0,64,10,2,15,145,10,10,0,88,18,9,0,145,18,18,0,66,15,10,18,145,15,15,0,89,8,15,0,88,3,8,0,145,3,3,0,137,13,0,0,145,15,3,0,139,15,0,0,59,15,0,0,145,15,15,0,139,15,0,0,140,3,20,0,0,0,0,0,136,18,0,0,0,15,18,0,136,18,0,0,1,19,144,0,3,18,18,19,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,168,73,3,0,1,19,144,0,135,18,0,0,19,0,0,0,25,7,15,88,25,11,15,8,0,12,15,0,25,6,15,24,25,3,15,16,109,15,80,0,87,11,1,0,87,12,2,0,1,18,2,0,85,6,18,0,1,19,0,0,109,6,8,19,1,18,1,0,109,6,4,18,25,8,6,24,86,18,11,0,145,18,18,0,89,3,18,0,86,19,12,0,145,19,19,0,113,3,4,19,116,8,3,0,106,18,3,4,109,8,4,18,25,9,6,24,2,18,0,0,48,220,1,0,82,19,9,0,85,18,19,0,2,19,0,0,52,220,1,0,106,18,9,4,85,19,18,0,134,5,0,0,232,141,4,0,76,18,5,0,145,5,18,0,25,10,6,24,88,19,10,0,145,19,19,0,66,18,19,5,145,18,18,0,89,10,18,0,134,4,0,0,180,141,4,0,76,18,4,0,145,4,18,0,25,18,6,24,25,13,18,4,88,19,13,0,145,19,19,0,66,18,19,4,145,18,18,0,89,13,18,0,0,14,7,0,0,16,6,0,25,17,14,56,116,14,16,0,25,14,14,4,25,16,16,4,54,18,14,17,140,74,3,0,134,18,0,0,164,149,1,0,7,0,0,0,137,15,0,0,139,0,0,0,140,2,21,0,0,0,0,0,136,16,0,0,0,12,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,13,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,0,75,3,0,1,17,32,0,135,16,0,0,17,0,0,0,25,9,13,20,25,4,13,16,25,11,13,12,25,5,13,8,25,10,13,4,0,7,13,0,85,4,0,0,85,11,1,0,82,17,4,0,106,17,17,12,1,18,16,0,134,16,0,0,176,64,4,0,17,18,0,0,85,7,16,0,1,16,10,0,85,10,16,0,82,3,10,0,82,16,7,0,82,18,11,0,1,17,32,4,3,18,18,17,82,17,10,0,41,17,17,2,94,18,18,17,54,16,16,18,120,75,3,0,25,16,3,1,85,10,16,0,119,0,244,255,32,16,3,16,121,16,6,0,1,16,255,255,85,9,16,0,82,2,9,0,137,12,0,0,139,2,0,0,82,14,11,0,82,16,10,0,41,16,16,1,0,15,16,0,82,16,7,0,1,18,16,0,82,17,10,0,4,18,18,17,23,16,16,18,1,18,0,4,3,18,14,18,93,18,18,15,4,16,16,18,1,18,100,4,3,18,14,18,93,18,18,15,3,16,16,18,85,5,16,0,82,16,11,0,1,18,132,4,3,16,16,18,82,18,5,0,91,16,16,18,82,18,10,0,46,16,16,18,20,76,3,0,1,18,164,66,1,17,1,63,1,19,152,15,1,20,180,66,135,16,1,0,18,17,19,20,82,16,4,0,25,6,16,12,82,16,6,0,82,20,10,0,24,16,16,20,85,6,16,0,82,16,4,0,25,8,16,8,82,16,8,0,82,20,10,0,4,16,16,20,85,8,16,0,82,16,11,0,1,20,164,5,3,16,16,20,82,20,5,0,41,20,20,1,93,16,16,20,85,9,16,0,82,2,9,0,137,12,0,0,139,2,0,0,140,2,18,0,0,0,0,0,2,11,0,0,176,0,0,0,2,12,0,0,168,0,0,0,136,13,0,0,0,7,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,8,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,200,76,3,0,1,14,16,0,135,13,0,0,14,0,0,0,25,6,8,12,25,2,8,8,25,5,8,4,0,3,8,0,85,6,0,0,85,2,1,0,82,13,6,0,1,14,172,0,82,15,2,0,97,13,14,15,82,15,6,0,3,4,15,11,82,15,6,0,94,15,15,11,34,15,15,0,121,15,9,0,1,15,0,0,85,4,15,0,1,15,0,0,85,5,15,0,82,15,6,0,82,14,2,0,97,15,12,14,119,0,23,0,82,10,6,0,82,14,4,0,1,15,172,0,94,15,10,15,94,13,10,12,4,15,15,13,3,14,14,15,1,15,164,0,94,15,10,15,8,14,14,15,85,5,14,0,82,14,5,0,82,15,6,0,94,15,15,11,53,14,14,15,128,77,3,0,1,15,12,72,1,13,184,68,1,16,151,5,1,17,69,72,135,14,1,0,15,13,16,17,82,9,6,0,1,17,180,0,94,17,9,17,82,16,5,0,1,13,160,0,94,13,9,13,29,13,13,4,134,14,0,0,164,18,4,0,17,16,13,0,85,3,14,0,82,13,3,0,1,16,0,0,82,17,6,0,1,15,160,0,94,17,17,15,135,14,5,0,13,16,17,0,137,7,0,0,82,14,3,0,139,14,0,0,140,7,22,0,0,0,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,12,78,3,0,1,21,16,0,135,20,0,0,21,0,0,0,25,18,19,8,0,15,19,0,1,20,56,0,134,16,0,0,116,104,4,0,20,0,0,0,1,20,0,0,85,16,20,0,82,7,1,0,86,17,2,0,145,17,17,0,0,11,3,0,106,12,11,4,0,13,15,0,116,13,11,0,109,13,4,12,82,8,4,0,82,9,5,0,116,18,15,0,106,21,15,4,109,18,4,21,25,20,16,8,134,21,0,0,208,197,3,0,20,7,17,18,8,9,6,0,109,16,4,0,82,10,0,0,85,16,10,0,109,10,4,16,85,0,16,0,25,14,0,8,82,21,14,0,25,21,21,1,85,14,21,0,137,19,0,0,139,0,0,0,140,5,19,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,216,78,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,6,11,20,25,7,11,16,25,10,11,12,25,5,11,8,25,8,11,4,0,9,11,0,85,6,0,0,85,7,1,0,85,10,2,0,85,5,3,0,85,8,4,0,82,13,10,0,26,13,13,1,82,14,7,0,49,13,13,14,32,79,3,0,137,11,0,0,139,0,0,0,82,12,7,0,82,13,10,0,4,13,13,12,28,13,13,2,3,13,12,13,85,9,13,0,82,14,6,0,82,15,7,0,82,16,10,0,82,17,5,0,82,18,9,0,134,13,0,0,192,20,3,0,14,15,16,17,18,0,0,0,85,9,13,0,82,13,8,0,82,18,9,0,47,13,13,18,148,79,3,0,82,18,6,0,82,17,7,0,82,16,9,0,82,15,5,0,82,14,8,0,134,13,0,0,160,78,3,0,18,17,16,15,14,0,0,0,82,13,8,0,82,14,9,0,49,13,13,14,172,79,3,0,137,11,0,0,139,0,0,0,82,14,6,0,82,15,9,0,25,15,15,1,82,16,10,0,82,17,5,0,82,18,8,0,134,13,0,0,160,78,3,0,14,15,16,17,18,0,0,0,137,11,0,0,139,0,0,0,140,4,24,0,0,0,0,0,1,21,0,0,5,13,2,1,32,22,1,0,1,23,0,0,125,17,22,23,2,0,0,0,1,23,255,255,106,22,3,76,47,23,23,22,28,80,3,0,134,6,0,0,32,142,4,0,3,0,0,0,119,0,2,0,1,6,0,0,25,12,3,74,78,7,12,0,1,23,255,0,3,23,7,23,20,23,23,7,83,12,23,0,25,16,3,4,82,4,16,0,106,23,3,8,4,18,23,4,1,23,0,0,47,23,23,18,128,80,3,0,16,23,18,13,125,19,23,18,13,0,0,0,135,23,2,0,0,4,19,0,82,23,16,0,3,23,23,19,85,16,23,0,3,8,0,19,4,10,13,19,119,0,3,0,0,8,0,0,0,10,13,0,120,10,3,0,1,21,13,0,119,0,28,0,25,14,3,32,0,9,8,0,0,11,10,0,134,23,0,0,16,40,4,0,3,0,0,0,120,23,15,0,82,23,14,0,38,23,23,15,135,5,9,1,23,3,9,11,25,23,5,1,35,23,23,2,120,23,8,0,4,20,11,5,120,20,3,0,1,21,13,0,119,0,10,0,3,9,9,5,0,11,20,0,119,0,239,255,121,6,4,0,134,23,0,0,20,142,4,0,3,0,0,0,4,23,13,11,7,15,23,1,32,23,21,13,121,23,8,0,120,6,3,0,0,15,17,0,119,0,5,0,134,23,0,0,20,142,4,0,3,0,0,0,0,15,17,0,139,15,0,0,140,3,21,0,0,0,0,0,2,18,0,0,149,233,209,91,1,17,0,0,1,19,3,0,48,19,19,2,208,81,3,0,26,3,2,4,38,19,3,252,0,4,19,0,25,19,4,4,3,16,1,19,0,6,1,0,0,8,2,0,0,13,2,0,79,19,6,0,103,20,6,1,41,20,20,8,20,19,19,20,103,20,6,2,41,20,20,16,20,19,19,20,103,20,6,3,41,20,20,24,20,19,19,20,5,14,19,18,43,20,14,24,21,20,20,14,5,19,20,18,5,20,8,18,21,19,19,20,0,8,19,0,26,13,13,4,37,19,13,3,120,19,3,0,25,6,6,4,119,0,235,255,0,5,16,0,0,7,8,0,4,12,3,4,119,0,4,0,0,5,1,0,0,7,2,0,0,12,2,0,1,19,1,0,1,20,3,0,138,12,19,20,252,81,3,0,8,82,3,0,20,82,3,0,0,11,7,0,119,0,13,0,0,10,7,0,1,17,8,0,119,0,10,0,0,9,7,0,1,17,7,0,119,0,7,0,103,19,5,2,41,19,19,16,21,19,19,7,0,9,19,0,1,17,7,0,119,0,1,0,32,19,17,7,121,19,6,0,103,19,5,1,41,19,19,8,21,19,19,9,0,10,19,0,1,17,8,0,32,19,17,8,121,19,4,0,79,19,5,0,21,19,10,19,5,11,19,18,43,19,11,13,21,19,19,11,5,15,19,18,43,19,15,15,21,19,19,15,139,19,0,0,140,6,19,0,0,0,0,0,136,16,0,0,0,14,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,15,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,192,82,3,0,1,17,32,0,135,16,0,0,17,0,0,0,25,9,15,24,25,10,15,20,25,6,15,16,25,8,15,12,25,13,15,8,25,12,15,4,0,11,15,0,85,9,0,0,85,10,1,0,85,6,2,0,85,8,3,0,85,13,4,0,85,12,5,0,82,16,6,0,82,17,9,0,82,18,8,0,4,17,17,18,3,16,16,17,82,17,13,0,8,16,16,17,85,11,16,0,82,16,10,0,82,17,11,0,82,18,12,0,134,7,0,0,164,18,4,0,16,17,18,0,137,14,0,0,139,7,0,0,140,2,18,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,48,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,112,83,3,0,1,15,48,0,135,14,0,0,15,0,0,0,25,8,13,36,25,4,13,32,25,10,13,40,25,6,13,28,25,5,13,24,25,3,13,20,0,7,13,0,25,9,13,16,85,8,0,0,85,4,1,0,1,14,0,0,83,10,14,0,82,15,8,0,134,14,0,0,20,48,4,0,15,0,0,0,85,6,14,0,82,14,6,0,120,14,6,0,78,2,10,0,38,14,2,1,0,11,14,0,137,13,0,0,139,11,0,0,1,14,0,0,85,5,14,0,82,15,4,0,1,16,59,0,134,14,0,0,60,116,3,0,15,16,5,0,85,3,14,0,1,14,0,0,85,7,14,0,1,16,0,0,109,7,4,16,1,14,0,0,109,7,8,14,1,16,0,0,109,7,12,16,82,15,6,0,134,14,0,0,188,16,4,0,15,0,0,0,135,16,24,0,7,14,0,0,1,16,0,0,85,9,16,0,82,16,5,0,82,14,9,0,49,16,16,14,72,84,3,0,1,12,7,0,119,0,17,0,82,15,3,0,82,17,9,0,41,17,17,2,94,15,15,17,25,15,15,1,134,14,0,0,188,16,4,0,15,0,0,0,134,16,0,0,96,60,4,0,7,14,0,0,120,16,5,0,82,16,9,0,25,16,16,1,85,9,16,0,119,0,235,255,32,16,12,7,121,16,6,0,78,2,10,0,38,16,2,1,0,11,16,0,137,13,0,0,139,11,0,0,1,16,1,0,83,10,16,0,78,2,10,0,38,16,2,1,0,11,16,0,137,13,0,0,139,11,0,0,140,4,15,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,64,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,12,85,3,0,1,13,64,0,135,12,0,0,13,0,0,0,25,9,11,48,25,5,11,40,25,8,11,16,25,6,11,12,25,7,11,8,0,4,11,0,85,6,1,0,85,7,2,0,82,12,6,0,76,12,12,0,145,12,12,0,89,4,12,0,82,13,7,0,76,13,13,0,145,13,13,0,113,4,4,13,116,8,0,0,106,12,0,4,109,8,4,12,106,13,0,8,109,8,8,13,106,12,0,12,109,8,12,12,106,13,0,16,109,8,16,13,116,5,4,0,106,12,4,4,109,5,4,12,78,12,3,0,83,9,12,0,102,13,3,1,107,9,1,13,102,12,3,2,107,9,2,12,102,13,3,3,107,9,3,13,59,12,0,0,145,12,12,0,59,14,1,0,145,14,14,0,134,13,0,0,8,169,2,0,8,5,12,14,9,0,0,0,137,10,0,0,139,0,0,0,140,0,18,0,0,0,0,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,14,15,0,136,15,0,0,25,15,15,48,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,8,86,3,0,1,16,48,0,135,15,0,0,16,0,0,0,25,11,14,32,25,13,14,24,25,12,14,16,0,10,14,0,25,9,14,36,134,6,0,0,0,142,4,0,121,6,62,0,82,0,6,0,121,0,60,0,25,1,0,48,134,15,0,0,124,136,4,0,1,0,0,0,120,15,7,0,1,15,5,86,85,13,15,0,1,16,211,85,134,15,0,0,244,108,4,0,16,13,0,0,134,3,0,0,96,134,4,0,1,0,0,0,2,15,0,0,1,43,43,67,13,15,3,15,135,16,3,0,2,17,0,0,71,78,76,67,13,16,16,17,19,15,15,16,121,15,3,0,106,8,0,44,119,0,2,0,25,8,0,80,85,9,8,0,82,4,0,0,106,5,4,4,1,16,8,37,82,16,16,0,106,16,16,16,38,16,16,15,1,17,8,37,135,15,9,1,16,17,4,9,121,15,16,0,82,2,9,0,82,15,2,0,106,15,15,8,38,15,15,63,135,7,247,0,15,2,0,0,1,15,5,86,85,10,15,0,109,10,4,5,109,10,8,7,1,16,125,85,134,15,0,0,244,108,4,0,16,10,0,0,119,0,8,0,1,15,5,86,85,12,15,0,109,12,4,5,1,16,170,85,134,15,0,0,244,108,4,0,16,12,0,0,1,16,249,85,134,15,0,0,244,108,4,0,16,11,0,0,139,0,0,0,140,3,18,0,0,0,0,0,136,14,0,0,0,11,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,12,14,0,136,14,0,0,25,14,14,64,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,124,87,3,0,1,15,64,0,135,14,0,0,15,0,0,0,0,5,12,0,1,15,0,0,134,14,0,0,220,114,4,0,0,1,15,0,121,14,3,0,1,9,1,0,119,0,51,0,120,1,3,0,1,9,0,0,119,0,48,0,1,14,32,37,1,15,16,37,1,16,0,0,134,3,0,0,4,219,2,0,1,14,15,16,120,3,3,0,1,9,0,0,119,0,39,0,85,5,3,0,1,15,0,0,109,5,4,15,109,5,8,0,1,16,255,255,109,5,12,16,25,4,5,16,25,7,5,24,25,6,5,48,0,10,4,0,25,13,10,36,1,16,0,0,85,10,16,0,25,10,10,4,54,16,10,13,248,87,3,0,1,15,0,0,108,4,36,15,1,16,0,0,107,4,38,16,1,16,1,0,85,6,16,0,82,15,3,0,106,15,15,28,38,15,15,31,82,14,2,0,1,17,1,0,135,16,4,0,15,3,5,14,17,0,0,0,82,16,7,0,32,16,16,1,121,16,4,0,116,2,4,0,1,8,1,0,119,0,2,0,1,8,0,0,0,9,8,0,137,11,0,0,139,9,0,0,140,3,23,0,0,0,0,0,136,18,0,0,0,16,18,0,136,18,0,0,25,18,18,63,38,18,18,192,137,18,0,0,0,17,18,0,136,18,0,0,25,18,18,32,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,184,88,3,0,1,19,32,0,135,18,0,0,19,0,0,0,25,9,17,24,25,8,17,20,25,13,17,16,25,14,17,12,25,12,17,8,25,15,17,4,0,11,17,0,85,12,0,0,85,15,1,0,85,11,2,0,82,18,12,0,120,18,6,0,1,18,254,255,85,14,18,0,82,4,14,0,137,16,0,0,139,4,0,0,82,3,12,0,82,5,15,0,116,13,12,0,82,18,13,0,120,18,8,0,1,19,130,59,1,20,246,58,2,21,0,0,140,129,0,0,1,22,16,60,135,18,1,0,19,20,21,22,82,18,13,0,106,6,18,32,82,18,13,0,25,18,18,28,116,9,18,0,85,8,6,0,82,18,9,0,134,7,0,0,192,67,4,0,18,0,0,0,82,22,8,0,5,18,7,22,5,10,5,18,82,22,11,0,134,18,0,0,48,118,2,0,3,10,22,0,85,14,18,0,82,4,14,0,137,16,0,0,139,4,0,0,140,1,10,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,204,89,3,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,8,25,1,5,4,0,2,5,0,85,2,0,0,82,7,2,0,134,6,0,0,64,14,4,0,7,0,0,0,120,6,3,0,137,4,0,0,139,0,0,0,82,7,2,0,134,6,0,0,236,26,4,0,7,0,0,0,121,6,5,0,82,7,2,0,134,6,0,0,208,170,2,0,7,0,0,0,116,3,2,0,1,6,0,0,85,1,6,0,82,6,3,0,82,7,1,0,109,6,12,7,82,6,2,0,82,6,6,0,134,7,0,0,48,105,4,0,6,0,0,0,120,7,12,0,82,6,2,0,25,6,6,60,134,7,0,0,76,56,4,0,6,0,0,0,82,6,2,0,1,8,56,1,3,6,6,8,134,7,0,0,8,98,4,0,6,0,0,0,82,6,2,0,82,6,6,0,106,6,6,120,38,6,6,31,82,8,2,0,135,7,224,0,6,8,0,0,82,6,2,0,1,8,228,0,3,6,6,8,134,7,0,0,212,96,4,0,6,0,0,0,82,6,2,0,1,8,144,0,3,6,6,8,134,7,0,0,212,96,4,0,6,0,0,0,82,6,2,0,25,6,6,60,134,7,0,0,212,96,4,0,6,0,0,0,82,6,2,0,25,6,6,28,134,7,0,0,84,96,4,0,6,0,0,0,82,7,2,0,1,6,68,1,91,7,7,6,43,7,7,3,38,7,7,1,121,7,11,0,82,6,2,0,82,6,6,0,134,7,0,0,108,217,3,0,6,0,0,0,82,6,2,0,82,6,6,0,134,7,0,0,160,113,4,0,6,0,0,0,82,6,2,0,1,8,0,0,2,9,0,0,192,112,1,0,135,7,5,0,6,8,9,0,137,4,0,0,139,0,0,0,140,2,13,0,0,0,0,0,32,9,1,1,121,9,3,0,1,4,2,0,119,0,9,0,26,9,1,1,19,9,9,1,120,9,3,0,0,4,1,0,119,0,4,0,134,4,0,0,180,41,0,0,1,0,0,0,106,3,0,4,48,9,3,4,160,91,3,0,134,9,0,0,32,48,2,0,0,4,0,0,119,0,44,0,48,9,4,3,76,92,3,0,106,6,0,12,77,9,6,0,145,6,9,0,112,11,0,16,145,11,11,0,66,10,6,11,145,10,10,0,135,9,18,0,10,0,0,0,145,9,9,0,75,7,9,0,1,9,2,0,16,9,9,3,26,10,3,1,19,10,10,3,32,10,10,0,19,9,9,10,121,9,13,0,1,9,1,0,1,10,32,0,26,12,7,1,135,11,39,0,12,0,0,0,4,10,10,11,22,9,9,10,0,8,9,0,35,9,7,2,125,5,9,7,8,0,0,0,119,0,4,0,134,5,0,0,180,41,0,0,7,0,0,0,16,9,4,5,125,2,9,5,4,0,0,0,48,9,2,3,76,92,3,0,134,9,0,0,32,48,2,0,0,2,0,0,139,0,0,0,140,5,23,0,0,0,0,0,136,20,0,0,0,18,20,0,136,20,0,0,25,20,20,63,38,20,20,192,137,20,0,0,0,19,20,0,136,20,0,0,25,20,20,32,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,156,92,3,0,1,21,32,0,135,20,0,0,21,0,0,0,25,6,19,16,25,8,19,12,25,9,19,8,25,10,19,4,0,7,19,0,85,6,0,0,85,8,1,0,85,9,2,0,85,10,3,0,85,7,4,0,82,21,6,0,82,22,8,0,134,20,0,0,8,42,4,0,21,22,0,0,120,20,6,0,1,5,0,0,38,20,5,1,0,11,20,0,137,18,0,0,139,11,0,0,82,20,6,0,82,22,8,0,5,12,20,22,82,20,9,0,134,22,0,0,8,42,4,0,12,20,0,0,120,22,6,0,1,5,0,0,38,22,5,1,0,11,22,0,137,18,0,0,139,11,0,0,82,22,6,0,82,20,8,0,5,14,22,20,82,20,9,0,5,15,14,20,82,22,10,0,134,20,0,0,8,42,4,0,15,22,0,0,120,20,6,0,1,5,0,0,38,20,5,1,0,11,20,0,137,18,0,0,139,11,0,0,82,20,6,0,82,22,8,0,5,16,20,22,82,22,9,0,5,17,16,22,82,22,10,0,5,13,17,22,82,20,7,0,134,22,0,0,248,45,4,0,13,20,0,0,33,5,22,0,38,22,5,1,0,11,22,0,137,18,0,0,139,11,0,0,140,1,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,220,93,3,0,1,21,16,0,135,20,0,0,21,0,0,0,25,12,19,8,0,13,19,0,25,9,0,76,82,2,9,0,106,10,2,4,0,3,10,0,45,20,2,3,8,94,3,0,0,1,2,0,1,18,9,0,119,0,51,0,25,15,0,16,25,16,13,4,25,17,0,20,0,4,3,0,0,11,10,0,25,8,11,8,82,21,8,0,134,20,0,0,92,117,4,0,12,21,0,0,88,6,12,0,145,6,6,0,88,21,15,0,145,21,21,0,64,20,6,21,145,20,20,0,59,21,144,1,145,21,21,0,71,20,20,21,121,20,22,0,82,21,8,0,134,20,0,0,92,117,4,0,13,21,0,0,88,7,16,0,145,7,7,0,88,21,17,0,145,21,21,0,64,20,7,21,145,20,20,0,59,21,144,1,145,21,21,0,71,20,20,21,121,20,8,0,82,21,8,0,134,20,0,0,136,135,4,0,21,0,0,0,120,20,3,0,0,14,8,0,119,0,10,0,106,11,4,4,82,5,9,0,0,4,11,0,45,20,5,4,204,94,3,0,0,1,5,0,1,18,9,0,119,0,2,0,119,0,212,255,32,20,18,9,121,20,3,0,82,20,1,0,25,14,20,8,137,19,0,0,82,20,14,0,139,20,0,0,140,4,25,0,0,0,0,0,136,21,0,0,0,19,21,0,136,21,0,0,25,21,21,63,38,21,21,192,137,21,0,0,0,20,21,0,136,21,0,0,25,21,21,32,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,56,95,3,0,1,22,32,0,135,21,0,0,22,0,0,0,25,16,20,16,25,17,20,12,25,11,20,20,25,13,20,8,25,14,20,4,0,12,20,0,89,16,1,0,89,17,3,0,1,21,0,0,83,11,21,0,88,4,2,0,145,4,4,0,88,22,0,0,145,22,22,0,64,21,4,22,145,21,21,0,89,13,21,0,112,7,2,4,145,7,7,0,112,22,0,4,145,22,22,0,64,21,7,22,145,21,21,0,89,14,21,0,88,8,13,0,145,8,8,0,88,21,13,0,145,21,21,0,65,15,8,21,145,15,15,0,88,9,14,0,145,9,9,0,88,24,14,0,145,24,24,0,65,23,9,24,145,23,23,0,63,22,15,23,145,22,22,0,135,21,237,0,22,0,0,0,145,21,21,0,89,12,21,0,88,10,12,0,145,10,10,0,88,5,16,0,145,5,5,0,88,22,17,0,145,22,22,0,63,21,5,22,145,21,21,0,72,21,10,21,120,21,6,0,78,6,11,0,38,21,6,1,0,18,21,0,137,19,0,0,139,18,0,0,1,21,1,0,83,11,21,0,78,6,11,0,38,21,6,1,0,18,21,0,137,19,0,0,139,18,0,0,140,3,17,0,0,0,0,0,136,15,0,0,0,13,15,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,132,96,3,0,1,16,16,0,135,15,0,0,16,0,0,0,0,12,14,0,25,6,1,11,78,3,6,0,41,15,3,24,42,15,15,24,34,15,15,0,121,15,3,0,106,10,1,4,119,0,4,0,1,15,255,0,19,15,3,15,0,10,15,0,0,4,3,0,0,7,10,0,41,15,4,24,42,15,15,24,34,15,15,0,121,15,3,0,82,11,1,0,119,0,2,0,0,11,1,0,85,12,2,0,25,15,7,1,1,16,45,99,134,9,0,0,200,104,4,0,11,15,16,12,1,16,255,255,47,16,16,9,16,97,3,0,48,16,7,9,12,97,3,0,0,8,9,0,119,0,5,0,119,0,11,0,41,16,7,1,39,16,16,1,0,8,16,0,1,15,0,0,134,16,0,0,212,190,3,0,1,8,15,0,78,4,6,0,0,7,8,0,119,0,226,255,1,15,0,0,134,16,0,0,212,190,3,0,1,9,15,0,116,0,1,0,106,15,1,4,109,0,4,15,106,16,1,8,109,0,8,16,1,5,0,0,32,16,5,3,120,16,6,0,41,16,5,2,1,15,0,0,97,1,16,15,25,5,5,1,119,0,250,255,137,13,0,0,139,0,0,0,140,2,25,0,0,0,0,0,2,19,0,0,128,128,128,128,2,20,0,0,255,254,254,254,2,21,0,0,255,0,0,0,19,22,1,21,0,8,22,0,120,8,5,0,135,22,23,0,0,0,0,0,3,12,0,22,119,0,92,0,38,22,0,3,120,22,3,0,0,13,0,0,119,0,28,0,19,22,1,21,0,2,22,0,0,14,0,0,78,3,14,0,41,23,3,24,42,23,23,24,32,23,23,0,121,23,4,0,1,23,1,0,0,22,23,0,119,0,7,0,41,23,3,24,42,23,23,24,41,24,2,24,42,24,24,24,13,23,23,24,0,22,23,0,121,22,3,0,0,12,14,0,119,0,68,0,25,9,14,1,38,22,9,3,120,22,3,0,0,13,9,0,119,0,3,0,0,14,9,0,119,0,233,255,2,22,0,0,1,1,1,1,5,11,8,22,82,4,13,0,19,22,4,19,21,22,22,19,2,23,0,0,1,1,1,1,4,23,4,23,19,22,22,23,120,22,27,0,0,5,4,0,0,17,13,0,21,22,5,11,0,18,22,0,19,22,18,19,21,22,22,19,2,23,0,0,1,1,1,1,4,23,18,23,19,22,22,23,121,22,3,0,0,16,17,0,119,0,15,0,25,10,17,4,82,5,10,0,19,22,5,19,21,22,22,19,2,23,0,0,1,1,1,1,4,23,5,23,19,22,22,23,121,22,3,0,0,16,10,0,119,0,4,0,0,17,10,0,119,0,233,255,0,16,13,0,19,22,1,21,0,6,22,0,0,15,16,0,78,7,15,0,41,23,7,24,42,23,23,24,32,23,23,0,121,23,4,0,1,23,1,0,0,22,23,0,119,0,7,0,41,23,7,24,42,23,23,24,41,24,6,24,42,24,24,24,13,23,23,24,0,22,23,0,121,22,3,0,0,12,15,0,119,0,3,0,25,15,15,1,119,0,238,255,139,12,0,0,140,3,19,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,124,99,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,5,13,16,25,8,13,12,25,9,13,8,25,10,13,4,0,11,13,0,85,5,0,0,85,8,1,0,85,9,2,0,82,14,5,0,82,14,14,0,121,14,9,0,82,14,5,0,82,14,14,0,26,14,14,8,82,14,14,0,41,14,14,1,82,15,8,0,3,6,14,15,119,0,3,0,82,15,8,0,25,6,15,1,85,10,6,0,82,15,5,0,82,15,15,0,121,15,5,0,82,15,5,0,82,15,15,0,26,7,15,8,119,0,2,0,1,7,0,0,82,16,9,0,82,17,10,0,5,14,16,17,25,14,14,8,134,15,0,0,84,33,4,0,7,14,0,0,85,11,15,0,82,15,11,0,120,15,7,0,1,14,78,68,1,17,236,67,1,16,25,3,1,18,80,68,135,15,1,0,14,17,16,18,82,15,11,0,120,15,5,0,82,3,5,0,82,4,3,0,137,12,0,0,139,4,0,0,82,15,5,0,82,15,15,0,120,15,4,0,82,15,11,0,1,18,0,0,109,15,4,18,82,18,5,0,82,15,11,0,25,15,15,8,85,18,15,0,82,15,5,0,82,15,15,0,26,15,15,8,116,15,10,0,82,3,5,0,82,4,3,0,137,12,0,0,139,4,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,64,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,204,100,3,0,1,8,64,0,135,7,0,0,8,0,0,0,0,2,4,0,0,3,2,0,25,6,3,64,1,7,0,0,85,3,7,0,25,3,3,4,54,7,3,6,216,100,3,0,88,7,1,0,145,7,7,0,89,2,7,0,112,8,1,16,145,8,8,0,113,2,4,8,112,7,1,32,145,7,7,0,113,2,8,7,112,8,1,48,145,8,8,0,113,2,12,8,112,7,1,4,145,7,7,0,113,2,16,7,112,8,1,20,145,8,8,0,113,2,20,8,112,7,1,36,145,7,7,0,113,2,24,7,112,8,1,52,145,8,8,0,113,2,28,8,112,7,1,8,145,7,7,0,113,2,32,7,112,8,1,24,145,8,8,0,113,2,36,8,112,7,1,40,145,7,7,0,113,2,40,7,112,8,1,56,145,8,8,0,113,2,44,8,112,7,1,12,145,7,7,0,113,2,48,7,112,8,1,28,145,8,8,0,113,2,52,8,112,7,1,44,145,7,7,0,113,2,56,7,112,8,1,60,145,8,8,0,113,2,60,8,0,3,0,0,0,5,2,0,25,6,3,64,116,3,5,0,25,3,3,4,25,5,5,4,54,8,3,6,184,101,3,0,137,4,0,0,139,0,0,0,140,3,22,0,0,0,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,12,102,3,0,1,18,32,0,135,17,0,0,18,0,0,0,25,9,16,24,25,8,16,20,25,13,16,16,25,14,16,12,25,12,16,8,25,15,16,4,0,11,16,0,85,12,0,0,85,15,1,0,85,11,2,0,82,17,12,0,120,17,6,0,1,17,254,255,85,14,17,0,82,4,14,0,137,16,0,0,139,4,0,0,82,3,12,0,82,5,15,0,116,13,12,0,82,17,13,0,120,17,8,0,1,18,130,59,1,19,246,58,2,20,0,0,140,129,0,0,1,21,16,60,135,17,1,0,18,19,20,21,82,17,13,0,106,6,17,32,82,17,13,0,25,17,17,28,116,9,17,0,85,8,6,0,82,17,9,0,134,7,0,0,192,67,4,0,17,0,0,0,82,21,8,0,5,17,7,21,5,10,5,17,82,21,11,0,134,17,0,0,140,120,2,0,3,10,21,0,85,14,17,0,82,4,14,0,137,16,0,0,139,4,0,0,140,4,21,0,0,0,0,0,136,18,0,0,0,16,18,0,136,18,0,0,25,18,18,63,38,18,18,192,137,18,0,0,0,17,18,0,136,18,0,0,25,18,18,32,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,32,103,3,0,1,19,32,0,135,18,0,0,19,0,0,0,25,13,17,28,25,11,17,24,25,15,17,20,25,7,17,16,25,6,17,12,25,8,17,8,25,9,17,4,0,12,17,0,85,11,0,0,85,15,1,0,85,7,2,0,85,6,3,0,82,18,15,0,82,19,7,0,5,10,18,19,82,18,6,0,5,19,10,18,85,9,19,0,82,18,9,0,134,19,0,0,184,110,4,0,18,0,0,0,85,12,19,0,82,19,12,0,120,19,14,0,1,18,77,63,134,19,0,0,40,112,4,0,18,0,0,0,33,14,19,0,1,18,0,0,1,20,0,0,125,19,14,18,20,0,0,0,85,13,19,0,82,4,13,0,137,16,0,0,139,4,0,0,1,19,0,0,85,8,19,0,82,5,11,0,82,19,9,0,82,20,8,0,56,19,19,20,0,104,3,0,82,19,12,0,82,20,8,0,82,18,8,0,41,18,18,1,93,18,5,18,42,18,18,8,95,19,20,18,82,18,8,0,25,18,18,1,85,8,18,0,119,0,241,255,135,18,7,0,5,0,0,0,116,13,12,0,82,4,13,0,137,16,0,0,139,4,0,0,140,7,19,0,0,0,0,0,25,11,0,4,1,17,0,0,85,11,17,0,1,18,0,0,109,11,4,18,1,17,0,0,109,11,8,17,0,7,3,0,106,8,7,4,25,9,0,16,116,9,7,0,109,9,4,8,25,13,0,24,25,14,0,36,25,12,0,48,25,10,0,64,0,15,13,0,25,16,15,40,1,17,0,0,85,15,17,0,25,15,15,4,54,17,15,16,104,104,3,0,1,17,60,0,85,10,17,0,134,18,0,0,28,125,4,0,109,0,68,18,109,0,76,6,134,17,0,0,160,93,3,0,0,0,0,0,109,0,80,17,85,0,1,0,134,17,0,0,152,91,4,0,11,2,0,0,134,17,0,0,152,91,4,0,13,4,0,0,134,17,0,0,152,91,4,0,14,5,0,0,1,18,209,41,134,17,0,0,164,116,4,0,12,18,0,0,1,18,20,0,109,0,72,18,139,0,0,0,140,1,14,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,1,12,64,2,3,11,11,12,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,36,105,3,0,1,12,64,2,135,11,0,0,12,0,0,0,1,11,40,2,3,5,10,11,1,11,8,2,3,9,10,11,1,11,0,2,3,8,10,11,1,11,36,2,3,3,10,11,1,11,32,2,3,6,10,11,1,11,12,2,3,4,10,11,0,7,10,0,85,3,0,0,2,12,0,0,40,1,2,0,82,12,12,0,2,13,0,0,44,1,2,0,82,13,13,0,134,11,0,0,248,60,3,0,12,13,0,0,85,6,11,0,116,4,6,0,2,13,0,0,40,1,2,0,82,13,13,0,109,4,4,13,2,11,0,0,44,1,2,0,82,11,11,0,109,4,8,11,1,13,1,0,109,4,12,13,1,11,7,0,109,4,16,11,1,13,0,0,1,12,0,2,135,11,5,0,7,13,12,0,82,12,3,0,135,11,24,0,7,12,0,0,116,5,4,0,106,12,4,4,109,5,4,12,106,11,4,8,109,5,8,11,106,12,4,12,109,5,12,12,106,11,4,16,109,5,16,11,134,11,0,0,216,227,2,0,5,7,0,0,82,12,6,0,135,11,7,0,12,0,0,0,134,1,0,0,140,25,4,0,7,0,0,0,134,2,0,0,140,25,4,0,7,0,0,0,85,8,1,0,109,8,4,2,1,13,250,56,134,12,0,0,40,39,4,0,13,8,0,0,135,11,250,0,12,0,0,0,85,9,7,0,1,12,3,0,1,13,128,57,134,11,0,0,48,143,3,0,12,13,9,0,137,10,0,0,139,0,0,0,140,2,22,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,180,106,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,8,11,8,25,9,11,4,89,9,0,0,89,11,1,0,88,13,9,0,145,13,13,0,135,12,9,0,13,0,0,0,145,12,12,0,89,9,12,0,88,12,9,0,145,12,12,0,59,13,1,0,145,13,13,0,71,6,12,13,88,2,9,0,145,2,2,0,121,6,31,0,88,13,9,0,145,13,13,0,65,7,2,13,145,7,7,0,88,17,9,0,145,17,17,0,59,18,21,0,145,18,18,0,65,16,17,18,145,16,16,0,59,18,36,0,145,18,18,0,64,15,16,18,145,15,15,0,65,14,7,15,145,14,14,0,59,15,16,0,145,15,15,0,63,12,14,15,145,12,12,0,59,15,18,0,145,15,15,0,66,13,12,15,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,59,13,2,0,145,13,13,0,71,13,2,13,121,13,38,0,88,3,9,0,145,3,3,0,88,4,9,0,145,4,4,0,59,17,36,0,145,17,17,0,88,20,9,0,145,20,20,0,59,21,7,0,145,21,21,0,65,19,20,21,145,19,19,0,64,16,17,19,145,16,16,0,65,18,4,16,145,18,18,0,59,16,196,255,145,16,16,0,63,14,18,16,145,14,14,0,65,12,3,14,145,12,12,0,59,14,32,0,145,14,14,0,63,15,12,14,145,15,15,0,59,14,18,0,145,14,14,0,66,13,15,14,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,119,0,9,0,59,13,0,0,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,59,13,0,0,145,13,13,0,139,13,0,0,140,2,22,0,0,0,0,0,2,18,0,0,255,0,0,0,1,15,0,0,136,19,0,0,0,16,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,17,19,0,136,19,0,0,25,19,19,32,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,156,108,3,0,1,20,32,0,135,19,0,0,20,0,0,0,0,8,17,0,78,2,1,0,41,19,2,24,42,19,19,24,120,19,3,0,1,15,3,0,119,0,61,0,102,19,1,1,120,19,3,0,1,15,3,0,119,0,57,0,1,20,0,0,1,21,32,0,135,19,5,0,8,20,21,0,78,3,1,0,41,19,3,24,42,19,19,24,121,19,20,0,0,4,3,0,0,9,1,0,19,19,4,18,0,11,19,0,43,19,11,5,41,19,19,2,3,7,8,19,82,19,7,0,1,21,1,0,38,20,11,31,22,21,21,20,20,19,19,21,85,7,19,0,25,9,9,1,78,4,9,0,41,19,4,24,42,19,19,24,33,19,19,0,120,19,240,255,78,5,0,0,41,19,5,24,42,19,19,24,120,19,3,0,0,13,0,0,119,0,24,0,0,6,5,0,0,14,0,0,19,19,6,18,0,10,19,0,43,19,10,5,41,19,19,2,94,19,8,19,1,21,1,0,38,20,10,31,22,21,21,20,19,19,19,21,121,19,3,0,0,13,14,0,119,0,10,0,25,12,14,1,78,6,12,0,41,19,6,24,42,19,19,24,120,19,3,0,0,13,12,0,119,0,3,0,0,14,12,0,119,0,236,255,32,19,15,3,121,19,6,0,41,19,2,24,42,19,19,24,134,13,0,0,132,97,3,0,0,19,0,0,137,16,0,0,4,19,13,0,139,19,0,0,140,3,14,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,28,110,3,0,1,12,32,0,135,11,0,0,12,0,0,0,25,8,10,16,25,6,10,12,25,5,10,8,25,4,10,4,0,3,10,0,85,8,0,0,85,6,1,0,85,5,2,0,1,11,0,0,85,4,11,0,1,11,0,0,85,3,11,0,82,11,5,0,1,12,1,0,1,13,21,0,138,11,12,13,180,110,3,0,192,110,3,0,204,110,3,0,208,110,3,0,220,110,3,0,224,110,3,0,228,110,3,0,240,110,3,0,252,110,3,0,8,111,3,0,20,111,3,0,32,111,3,0,36,111,3,0,48,111,3,0,52,111,3,0,56,111,3,0,60,111,3,0,64,111,3,0,68,111,3,0,72,111,3,0,76,111,3,0,119,0,42,0,1,12,8,0,85,3,12,0,119,0,39,0,1,12,16,0,85,3,12,0,119,0,36,0,119,0,253,255,1,12,24,0,85,3,12,0,119,0,32,0,119,0,249,255,119,0,248,255,1,12,32,0,85,3,12,0,119,0,27,0,1,12,32,0,85,3,12,0,119,0,24,0,1,12,96,0,85,3,12,0,119,0,21,0,1,12,128,0,85,3,12,0,119,0,18,0,1,12,4,0,85,3,12,0,119,0,15,0,119,0,253,255,1,12,8,0,85,3,12,0,119,0,11,0,119,0,253,255,119,0,248,255,119,0,247,255,119,0,250,255,119,0,245,255,119,0,244,255,119,0,247,255,1,12,2,0,85,3,12,0,119,0,1,0,82,11,8,0,82,12,6,0,5,7,11,12,82,11,3,0,5,12,7,11,28,12,12,8,85,4,12,0,137,9,0,0,82,12,4,0,139,12,0,0,140,2,20,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,204,111,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,8,11,8,25,9,11,4,89,9,0,0,89,11,1,0,88,13,9,0,145,13,13,0,135,12,9,0,13,0,0,0,145,12,12,0,89,9,12,0,88,12,9,0,145,12,12,0,59,13,1,0], eb + 215040);
  HEAPU8.set([145,13,13,0,71,6,12,13,88,2,9,0,145,2,2,0,121,6,31,0,88,13,9,0,145,13,13,0,65,7,2,13,145,7,7,0,88,17,9,0,145,17,17,0,59,18,3,0,145,18,18,0,65,16,17,18,145,16,16,0,59,18,6,0,145,18,18,0,64,15,16,18,145,15,15,0,65,14,7,15,145,14,14,0,59,15,4,0,145,15,15,0,63,12,14,15,145,12,12,0,59,15,6,0,145,15,15,0,66,13,12,15,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,59,13,2,0,145,13,13,0,71,13,2,13,121,13,34,0,88,3,9,0,145,3,3,0,88,4,9,0,145,4,4,0,59,17,6,0,145,17,17,0,88,19,9,0,145,19,19,0,64,16,17,19,145,16,16,0,65,18,4,16,145,18,18,0,59,16,244,255,145,16,16,0,63,14,18,16,145,14,14,0,65,12,3,14,145,12,12,0,59,14,8,0,145,14,14,0,63,15,12,14,145,15,15,0,59,14,6,0,145,14,14,0,66,13,15,14,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,119,0,9,0,59,13,0,0,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,59,13,0,0,145,13,13,0,139,13,0,0,140,3,21,0,0,0,0,0,136,19,0,0,0,15,19,0,136,19,0,0,1,20,16,1,3,19,19,20,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,136,113,3,0,1,20,16,1,135,19,0,0,20,0,0,0,1,19,208,0,3,3,15,19,1,19,144,0,3,9,15,19,1,19,136,0,3,11,15,19,1,19,132,0,3,12,15,19,1,19,128,0,3,13,15,19,25,8,15,64,0,10,15,0,89,11,0,0,89,12,1,0,89,13,2,0,88,4,11,0,145,4,4,0,88,5,12,0,145,5,5,0,88,20,13,0,145,20,20,0,134,19,0,0,32,120,3,0,8,4,5,20,2,19,0,0,136,254,1,0,82,18,19,0,0,6,18,0,0,7,18,0,0,14,9,0,0,16,8,0,25,17,14,64,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,8,114,3,0,0,14,3,0,0,16,7,0,25,17,14,64,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,40,114,3,0,134,19,0,0,224,62,1,0,10,9,3,0,0,14,6,0,0,16,10,0,25,17,14,64,116,14,16,0,25,14,14,4,25,16,16,4,54,19,14,17,84,114,3,0,137,15,0,0,139,0,0,0,140,2,21,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,188,114,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,8,11,8,25,9,11,4,89,9,0,0,89,11,1,0,88,13,9,0,145,13,13,0,135,12,9,0,13,0,0,0,145,12,12,0,89,9,12,0,88,12,9,0,145,12,12,0,59,13,1,0,145,13,13,0,71,6,12,13,88,2,9,0,145,2,2,0,121,6,29,0,88,13,9,0,145,13,13,0,65,7,2,13,145,7,7,0,59,12,1,0,145,12,12,0,61,16,0,0,0,0,32,64,145,16,16,0,88,18,9,0,145,18,18,0,61,19,0,0,0,0,192,63,145,19,19,0,65,17,18,19,145,17,17,0,64,15,16,17,145,15,15,0,65,14,7,15,145,14,14,0,64,13,12,14,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,59,13,2,0,145,13,13,0,71,13,2,13,121,13,36,0,88,3,9,0,145,3,3,0,88,4,9,0,145,4,4,0,59,14,2,0,145,14,14,0,88,18,9,0,145,18,18,0,61,20,0,0,0,0,0,63,145,20,20,0,65,19,18,20,145,19,19,0,61,20,0,0,0,0,32,64,145,20,20,0,64,16,19,20,145,16,16,0,65,17,4,16,145,17,17,0,59,16,4,0,145,16,16,0,63,15,17,16,145,15,15,0,65,12,3,15,145,12,12,0,64,13,14,12,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,119,0,9,0,59,13,0,0,145,13,13,0,89,8,13,0,88,5,8,0,145,5,5,0,137,10,0,0,145,13,5,0,139,13,0,0,59,13,0,0,145,13,13,0,139,13,0,0,140,3,16,0,0,0,0,0,2,11,0,0,0,239,1,0,2,12,0,0,0,4,0,0,2,13,0,0,0,243,1,0,136,14,0,0,0,8,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,9,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,160,116,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,7,9,12,25,5,9,16,25,3,9,8,25,4,9,4,0,6,9,0,85,7,0,0,83,5,1,0,85,3,2,0,1,15,0,0,135,14,5,0,11,15,12,0,85,13,11,0,1,14,0,0,85,4,14,0,82,14,7,0,121,14,41,0,1,14,1,0,85,4,14,0,1,14,0,0,85,6,14,0,82,14,6,0,56,14,12,14,128,117,3,0,82,10,6,0,82,15,7,0,90,15,15,10,95,11,10,15,82,15,6,0,90,15,11,15,120,15,2,0,119,0,26,0,82,15,6,0,90,15,11,15,78,14,5,0,45,15,15,14,112,117,3,0,82,15,6,0,1,14,0,0,95,11,15,14,82,14,4,0,41,14,14,2,82,15,6,0,3,15,11,15,25,15,15,1,97,13,14,15,82,15,4,0,25,15,15,1,85,4,15,0,82,15,4,0,1,14,128,0,52,15,15,14,128,117,3,0,82,15,6,0,25,15,15,1,85,6,15,0,119,0,221,255,82,15,3,0,116,15,4,0,137,8,0,0,139,13,0,0,140,3,23,0,0,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,18,19,0,136,19,0,0,25,19,19,32,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,224,117,3,0,1,20,32,0,135,19,0,0,20,0,0,0,0,11,18,0,25,13,18,16,85,11,1,0,25,12,11,4,25,10,0,48,82,5,10,0,33,19,5,0,38,19,19,1,4,19,2,19,85,12,19,0,25,9,0,44,82,20,9,0,109,11,8,20,109,11,12,5,106,21,0,60,1,22,2,0,135,19,20,1,21,11,22,13,134,20,0,0,0,121,4,0,19,0,0,0,120,20,30,0,82,4,13,0,34,20,4,1,121,20,4,0,0,6,4,0,1,16,4,0,119,0,28,0,82,7,12,0,48,20,7,4,164,118,3,0,82,8,9,0,25,15,0,4,85,15,8,0,0,3,8,0,4,19,4,7,3,19,3,19,109,0,8,19,82,19,10,0,120,19,3,0,0,14,2,0,119,0,14,0,25,19,3,1,85,15,19,0,26,19,2,1,78,20,3,0,95,1,19,20,0,14,2,0,119,0,7,0,0,14,4,0,119,0,5,0,1,20,255,255,85,13,20,0,1,6,255,255,1,16,4,0,32,20,16,4,121,20,7,0,38,20,6,48,40,20,20,16,82,19,0,0,20,20,20,19,85,0,20,0,0,14,6,0,137,17,0,0,139,14,0,0,140,2,15,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,28,119,3,0,1,13,32,0,135,12,0,0,13,0,0,0,25,8,11,20,25,7,11,8,25,6,11,4,0,5,11,0,116,7,1,0,106,13,1,4,109,7,4,13,106,12,1,8,109,7,8,12,116,8,1,0,106,13,1,4,109,8,4,13,106,12,1,8,109,8,8,12,134,12,0,0,60,52,4,0,8,0,0,0,145,12,12,0,89,6,12,0,88,12,6,0,145,12,12,0,59,13,0,0,145,13,13,0,69,12,12,13,121,12,4,0,59,12,1,0,145,12,12,0,89,6,12,0,59,13,1,0,145,13,13,0,88,14,6,0,145,14,14,0,66,12,13,14,145,12,12,0,89,5,12,0,88,2,5,0,145,2,2,0,88,14,7,0,145,14,14,0,65,12,14,2,145,12,12,0,89,7,12,0,88,3,5,0,145,3,3,0,25,9,7,4,88,14,9,0,145,14,14,0,65,12,14,3,145,12,12,0,89,9,12,0,88,4,5,0,145,4,4,0,25,10,7,8,88,14,10,0,145,14,14,0,65,12,14,4,145,12,12,0,89,10,12,0,116,0,7,0,106,14,7,4,109,0,4,14,106,12,7,8,109,0,8,12,137,11,0,0,139,0,0,0,140,4,14,0,0,0,0,0,136,12,0,0,0,9,12,0,136,12,0,0,25,12,12,80,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,88,120,3,0,1,13,80,0,135,12,0,0,13,0,0,0,25,5,9,72,25,6,9,68,25,7,9,64,0,4,9,0,89,5,1,0,89,6,2,0,89,7,3,0,59,12,1,0,145,12,12,0,89,4,12,0,59,13,0,0,145,13,13,0,113,4,4,13,59,12,0,0,145,12,12,0,113,4,8,12,88,13,5,0,145,13,13,0,113,4,12,13,59,12,0,0,145,12,12,0,113,4,16,12,59,13,1,0,145,13,13,0,113,4,20,13,59,12,0,0,145,12,12,0,113,4,24,12,88,13,6,0,145,13,13,0,113,4,28,13,59,12,0,0,145,12,12,0,113,4,32,12,59,13,0,0,145,13,13,0,113,4,36,13,59,12,1,0,145,12,12,0,113,4,40,12,88,13,7,0,145,13,13,0,113,4,44,13,59,12,0,0,145,12,12,0,113,4,48,12,59,13,0,0,145,13,13,0,113,4,52,13,59,12,0,0,145,12,12,0,113,4,56,12,59,13,1,0,145,13,13,0,113,4,60,13,0,8,0,0,0,10,4,0,25,11,8,64,116,8,10,0,25,8,8,4,25,10,10,4,54,13,8,11,64,121,3,0,137,9,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,17,0,0,25,15,2,16,82,3,15,0,120,3,10,0,134,18,0,0,168,82,4,0,2,0,0,0,120,18,4,0,82,5,15,0,1,17,5,0,119,0,5,0,1,12,0,0,119,0,3,0,0,5,3,0,1,17,5,0,32,18,17,5,121,18,53,0,25,16,2,20,82,4,16,0,0,6,4,0,4,18,5,4,48,18,18,1,212,121,3,0,106,18,2,36,38,18,18,15,135,12,9,1,18,2,0,1,119,0,42,0,102,18,2,75,34,18,18,0,32,19,1,0,20,18,18,19,121,18,6,0,0,7,6,0,1,10,0,0,0,11,1,0,0,13,0,0,119,0,26,0,0,9,1,0,26,14,9,1,90,18,0,14,32,18,18,10,120,18,9,0,120,14,6,0,0,7,6,0,1,10,0,0,0,11,1,0,0,13,0,0,119,0,15,0,0,9,14,0,119,0,245,255,106,18,2,36,38,18,18,15,135,8,9,1,18,2,0,9,48,18,8,9,80,122,3,0,0,12,8,0,119,0,11,0,82,7,16,0,0,10,9,0,4,11,1,9,3,13,0,9,135,18,2,0,7,13,11,0,82,18,16,0,3,18,18,11,85,16,18,0,3,12,10,11,139,12,0,0,140,1,17,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,48,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,180,122,3,0,1,16,48,0,135,15,0,0,16,0,0,0,25,9,14,32,25,10,14,24,25,6,14,12,0,7,14,0,25,5,0,80,82,16,5,0,134,15,0,0,92,117,4,0,9,16,0,0,112,1,9,4,145,1,1,0,25,13,0,20,88,15,13,0,145,15,15,0,64,11,1,15,145,11,11,0,82,16,5,0,134,15,0,0,92,117,4,0,10,16,0,0,88,2,10,0,145,2,2,0,25,12,0,16,88,16,12,0,145,16,16,0,64,15,2,16,145,15,15,0,134,8,0,0,36,35,4,0,11,15,0,0,145,8,8,0,106,3,0,68,25,16,0,24,134,15,0,0,44,80,4,0,6,16,0,0,25,16,0,36,134,15,0,0,44,80,4,0,7,16,0,0,88,4,12,0,145,4,4,0,88,16,13,0,145,16,16,0,134,15,0,0,128,54,2,0,3,6,7,4,16,8,0,0,134,15,0,0,204,117,4,0,7,0,0,0,134,15,0,0,204,117,4,0,6,0,0,0,137,14,0,0,139,0,0,0,140,3,17,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,224,123,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,11,13,28,25,4,13,24,25,5,13,20,25,6,13,16,25,7,13,12,25,8,13,8,25,9,13,4,0,10,13,0,85,4,0,0,85,5,1,0,85,6,2,0,82,14,4,0,82,15,5,0,3,14,14,15,82,15,6,0,4,14,14,15,85,7,14,0,82,15,7,0,82,16,4,0,4,15,15,16,135,14,21,0,15,0,0,0,85,8,14,0,82,15,7,0,82,16,5,0,4,15,15,16,135,14,21,0,15,0,0,0,85,9,14,0,82,15,7,0,82,16,6,0,4,15,15,16,135,14,21,0,15,0,0,0,85,10,14,0,82,14,8,0,82,15,9,0,49,14,14,15,156,124,3,0,82,14,8,0,82,15,10,0,49,14,14,15,156,124,3,0,116,11,4,0,82,3,11,0,137,12,0,0,139,3,0,0,82,14,9,0,82,15,10,0,49,14,14,15,192,124,3,0,116,11,5,0,82,3,11,0,137,12,0,0,139,3,0,0,119,0,5,0,116,11,6,0,82,3,11,0,137,12,0,0,139,3,0,0,1,14,0,0,139,14,0,0,140,4,15,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,48,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,36,125,3,0,1,14,48,0,135,13,0,0,14,0,0,0,25,9,12,32,25,5,12,24,25,7,12,16,25,8,12,12,25,10,12,8,0,4,12,0,85,7,0,0,85,8,1,0,89,10,2,0,82,13,7,0,76,13,13,0,145,13,13,0,89,4,13,0,82,14,8,0,76,14,14,0,145,14,14,0,113,4,4,14,88,6,10,0,145,6,6,0,116,5,4,0,106,13,4,4,109,5,4,13,78,13,3,0,83,9,13,0,102,14,3,1,107,9,1,14,102,13,3,2,107,9,2,13,102,14,3,3,107,9,3,14,134,14,0,0,184,216,3,0,5,6,9,0,137,11,0,0,139,0,0,0,140,3,17,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,252,125,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,11,13,28,25,4,13,24,25,5,13,20,25,6,13,16,25,7,13,12,25,8,13,8,25,9,13,4,0,10,13,0,85,4,0,0,85,5,1,0,85,6,2,0,82,14,4,0,82,15,5,0,3,14,14,15,82,15,6,0,4,14,14,15,85,7,14,0,82,15,7,0,82,16,4,0,4,15,15,16,135,14,21,0,15,0,0,0,85,8,14,0,82,15,7,0,82,16,5,0,4,15,15,16,135,14,21,0,15,0,0,0,85,9,14,0,82,15,7,0,82,16,6,0,4,15,15,16,135,14,21,0,15,0,0,0,85,10,14,0,82,14,8,0,82,15,9,0,49,14,14,15,188,126,3,0,82,14,8,0,82,15,10,0,49,14,14,15,188,126,3,0,82,14,4,0,83,11,14,0,78,3,11,0,137,12,0,0,139,3,0,0,82,14,9,0,82,15,10,0,49,14,14,15,228,126,3,0,82,14,5,0,83,11,14,0,78,3,11,0,137,12,0,0,139,3,0,0,119,0,6,0,82,14,6,0,83,11,14,0,78,3,11,0,137,12,0,0,139,3,0,0,1,14,0,0,139,14,0,0,140,3,20,0,0,0,0,0,1,13,0,0,136,17,0,0,0,14,17,0,136,17,0,0,25,17,17,63,38,17,17,192,137,17,0,0,0,15,17,0,136,17,0,0,25,17,17,16,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,80,127,3,0,1,18,16,0,135,17,0,0,18,0,0,0,25,12,15,8,25,9,15,4,0,10,15,0,85,12,0,0,85,9,1,0,85,10,2,0,82,6,12,0,82,17,10,0,82,17,17,0,34,17,17,8,120,17,44,0,120,6,3,0,1,13,5,0,119,0,11,0,82,17,12,0,26,17,17,8,82,17,17,0,82,18,12,0,26,18,18,8,106,18,18,4,25,18,18,1,49,17,17,18,176,127,3,0,1,13,5,0,32,17,13,5,121,17,7,0,1,13,0,0,1,18,1,0,1,19,1,0,134,17,0,0,48,99,3,0,12,18,19,0,82,17,9,0,82,17,17,0,1,19,255,0,19,17,17,19,0,11,17,0,82,16,12,0,0,7,16,0,26,17,16,8,25,8,17,4,82,3,8,0,25,17,3,1,85,8,17,0,95,7,3,11,82,4,9,0,82,17,4,0,43,17,17,8,85,4,17,0,82,5,10,0,82,17,5,0,26,17,17,8,85,5,17,0,119,0,209,255,137,14,0,0,139,6,0,0,140,7,18,0,0,0,0,0,1,15,239,255,4,15,15,1,48,15,15,2,84,128,3,0,134,15,0,0,244,134,4,0,0,0,0,0,102,15,0,11,34,15,15,0,121,15,3,0,82,11,0,0,119,0,2,0,0,11,0,0,2,15,0,0,231,255,255,127,48,15,1,15,188,128,3,0,3,8,2,1,41,15,1,1,0,13,15,0,16,15,8,13,125,7,15,13,8,0,0,0,35,16,7,11,121,16,4,0,1,16,11,0,0,15,16,0,119,0,4,0,25,16,7,16,38,16,16,240,0,15,16,0,0,12,15,0,119,0,2,0,1,12,239,255,134,10,0,0,116,104,4,0,12,0,0,0,121,4,4,0,134,15,0,0,96,122,4,0,10,11,4,0,4,15,3,5,4,14,15,4,121,14,8,0,3,16,10,4,3,16,16,6,3,17,11,4,3,17,17,5,134,15,0,0,96,122,4,0,16,17,14,0,25,9,1,1,33,15,9,11,121,15,4,0,134,15,0,0,64,123,4,0,11,9,0,0,85,0,10,0,2,17,0,0,0,0,0,128,20,17,12,17,109,0,8,17,139,0,0,0,140,3,14,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,108,129,3,0,1,9,16,0,135,8,0,0,9,0,0,0,0,5,7,0,25,6,7,12,25,3,7,8,25,4,7,4,85,6,0,0,85,3,1,0,85,4,2,0,1,8,87,55,85,5,8,0,1,9,3,0,1,10,64,55,134,8,0,0,48,143,3,0,9,10,5,0,2,8,0,0,204,0,2,0,82,10,4,0,85,8,10,0,2,10,0,0,227,4,2,0,82,9,6,0,82,11,3,0,134,8,0,0,160,244,1,0,9,11,0,0,38,8,8,1,83,10,8,0,2,8,0,0,227,4,2,0,78,8,8,0,38,8,8,1,120,8,3,0,137,7,0,0,139,0,0,0,134,8,0,0,4,139,4,0,134,8,0,0,220,177,1,0,1,10,0,0,1,11,0,0,1,9,1,0,1,12,5,0,1,13,2,0,135,8,21,1,10,11,9,12,13,0,0,0,1,13,95,55,1,12,0,0,1,9,1,0,1,11,6,0,1,10,2,0,135,8,22,1,13,12,9,11,10,0,0,0,1,10,95,55,1,11,0,0,1,9,1,0,1,12,7,0,1,13,2,0,135,8,23,1,10,11,9,12,13,0,0,0,1,13,95,55,1,12,0,0,1,9,1,0,1,11,8,0,1,10,2,0,135,8,24,1,13,12,9,11,10,0,0,0,1,10,95,55,1,11,0,0,1,9,1,0,1,12,8,0,1,13,2,0,135,8,25,1,10,11,9,12,13,0,0,0,1,13,95,55,1,12,0,0,1,9,1,0,1,11,8,0,1,10,2,0,135,8,26,1,13,12,9,11,10,0,0,0,1,10,95,55,1,11,0,0,1,9,1,0,1,12,8,0,1,13,2,0,135,8,27,1,10,11,9,12,13,0,0,0,1,13,0,0,1,12,1,0,1,9,9,0,1,11,2,0,135,8,28,1,13,12,9,11,1,11,0,0,1,9,1,0,1,12,9,0,1,13,2,0,135,8,29,1,11,9,12,13,137,7,0,0,139,0,0,0,140,4,15,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,104,131,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,9,12,16,25,8,12,12,25,10,12,8,25,6,12,4,0,7,12,0,85,9,0,0,85,8,1,0,85,10,2,0,89,6,3,0,82,13,9,0,32,13,13,0,82,14,8,0,32,14,14,0,20,13,13,14,121,13,3,0,137,11,0,0,139,0,0,0,1,13,0,0,85,7,13,0,82,13,10,0,82,14,7,0,57,13,13,14,20,132,3,0,82,13,8,0,82,14,7,0,91,4,13,14,76,13,4,0,145,4,13,0,88,14,6,0,145,14,14,0,65,13,4,14,145,13,13,0,75,13,13,0,1,14,255,0,19,13,13,14,0,5,13,0,82,13,9,0,82,14,7,0,95,13,14,5,82,14,7,0,25,14,14,1,85,7,14,0,119,0,233,255,137,11,0,0,139,0,0,0,140,4,15,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,104,132,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,9,12,16,25,8,12,12,25,10,12,8,25,6,12,4,0,7,12,0,85,9,0,0,85,8,1,0,85,10,2,0,89,6,3,0,82,13,9,0,32,13,13,0,82,14,8,0,32,14,14,0,20,13,13,14,121,13,3,0,137,11,0,0,139,0,0,0,1,13,0,0,85,7,13,0,82,13,10,0,82,14,7,0,57,13,13,14,16,133,3,0,82,13,8,0,82,14,7,0,41,14,14,1,92,4,13,14,76,13,4,0,145,4,13,0,88,14,6,0,145,14,14,0,65,13,4,14,145,13,13,0,75,5,13,0,82,13,9,0,82,14,7,0,41,14,14,1,96,13,14,5,82,14,7,0,25,14,14,1,85,7,14,0,119,0,234,255,137,11,0,0,139,0,0,0,140,4,15,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,100,133,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,9,12,16,25,8,12,12,25,10,12,8,25,6,12,4,0,7,12,0,85,9,0,0,85,8,1,0,85,10,2,0,89,6,3,0,82,13,9,0,32,13,13,0,82,14,8,0,32,14,14,0,20,13,13,14,121,13,3,0,137,11,0,0,139,0,0,0,1,13,0,0,85,7,13,0,82,13,10,0,82,14,7,0,57,13,13,14,12,134,3,0,82,13,8,0,82,14,7,0,41,14,14,2,94,4,13,14,76,13,4,0,145,4,13,0,88,14,6,0,145,14,14,0,65,13,4,14,145,13,13,0,75,5,13,0,82,13,9,0,82,14,7,0,41,14,14,2,97,13,14,5,82,14,7,0,25,14,14,1,85,7,14,0,119,0,234,255,137,11,0,0,139,0,0,0,140,5,13,0,0,0,0,0,1,12,1,0,107,1,53,12,106,12,1,4,45,12,12,3,248,134,3,0,1,11,1,0,107,1,52,11,25,8,1,16,82,5,8,0,120,5,18,0,85,8,2,0,109,1,24,4,1,12,1,0,109,1,36,12,32,11,4,1,121,11,5,0,106,11,1,48,32,11,11,1,0,12,11,0,119,0,3,0,1,11,0,0,0,12,11,0,120,12,2,0,119,0,32,0,1,11,1,0,107,1,54,11,119,0,29,0,46,11,5,2,172,134,3,0,25,9,1,36,82,11,9,0,25,11,11,1,85,9,11,0,1,12,1,0,107,1,54,12,119,0,20,0,25,10,1,24,82,6,10,0,32,12,6,2,121,12,4,0,85,10,4,0,0,7,4,0,119,0,2,0,0,7,6,0,32,11,7,1,121,11,5,0,106,11,1,48,32,11,11,1,0,12,11,0,119,0,3,0,1,11,0,0,0,12,11,0,121,12,3,0,1,11,1,0,107,1,54,11,139,0,0,0,140,2,11,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,52,135,3,0,1,8,16,0,135,7,0,0,8,0,0,0,0,4,6,0,25,5,6,8,25,3,0,76,82,7,3,0,106,7,7,8,121,7,42,0,25,2,0,80,82,8,2,0,134,7,0,0,136,135,4,0,8,0,0,0,120,7,14,0,62,7,0,0,123,20,174,71,225,122,132,63,87,4,7,0,25,7,0,48,85,5,7,0,25,8,0,16,25,9,0,72,82,10,3,0,134,7,0,0,212,77,3,0,1,2,4,8,5,9,10,0,82,10,2,0,134,7,0,0,136,135,4,0,10,0,0,0,121,7,18,0,134,7,0,0,160,93,3,0,0,0,0,0,85,2,7,0,62,7,0,0,123,20,174,71,225,122,132,63,87,4,7,0,25,7,0,48,85,5,7,0,25,10,0,16,25,9,0,72,82,8,3,0,134,7,0,0,212,77,3,0,1,2,4,10,5,9,8,0,137,6,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,4,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,32,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,72,136,3,0,1,8,32,0,135,7,0,0,8,0,0,0,0,3,6,0,25,2,6,4,1,7,0,0,85,2,7,0,1,8,0,0,109,2,4,8,1,7,0,0,109,2,8,7,1,8,0,0,109,2,12,8,1,7,0,0,109,2,16,7,82,7,1,0,121,7,20,0,106,7,1,4,121,7,16,0,106,7,1,8,121,7,12,0,82,8,1,0,106,9,1,4,106,10,1,8,106,11,1,16,106,12,1,12,134,7,0,0,76,10,2,0,8,9,10,11,12,0,0,0,85,2,7,0,119,0,6,0,1,4,5,0,119,0,4,0,1,4,5,0,119,0,2,0,1,4,5,0,32,7,4,5,121,7,6,0,1,12,4,0,1,11,220,81,134,7,0,0,48,143,3,0,12,11,3,0,106,11,1,4,109,2,4,11,106,7,1,8,109,2,8,7,106,11,1,12,109,2,12,11,106,7,1,16,109,2,16,7,116,0,2,0,106,11,2,4,109,0,4,11,106,7,2,8,109,0,8,7,106,11,2,12,109,0,12,11,106,7,2,16,109,0,16,7,137,5,0,0,139,0,0,0,140,3,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,132,137,3,0,1,14,16,0,135,13,0,0,14,0,0,0,0,10,12,0,121,1,56,0,25,5,0,11,78,3,5,0,41,13,3,24,42,13,13,24,34,13,13,0,121,13,8,0,106,7,0,4,106,13,0,8,2,14,0,0,255,255,255,127,19,13,13,14,26,9,13,1,119,0,5,0,1,13,255,0,19,13,3,13,0,7,13,0,1,9,10,0,4,13,9,7,48,13,13,1,4,138,3,0,3,14,7,1,4,14,14,9,1,15,0,0,1,16,0,0,134,13,0,0,48,128,3,0,0,9,14,7,7,15,16,0,78,4,5,0,119,0,2,0,0,4,3,0,41,13,4,24,42,13,13,24,34,13,13,0,121,13,3,0,82,8,0,0,119,0,2,0,0,8,0,0,3,16,8,7,134,13,0,0,140,119,4,0,16,1,2,0,3,6,7,1,78,13,5,0,34,13,13,0,121,13,3,0,109,0,4,6,119,0,2,0,83,5,6,0,1,13,0,0,83,10,13,0,3,16,8,6,134,13,0,0,240,127,4,0,16,10,0,0,137,11,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,17,0,0,16,17,17,1,32,18,1,0,1,19,255,255,16,19,19,0,19,18,18,19,20,17,17,18,121,17,38,0,0,5,0,0,0,6,1,0,0,9,2,0,0,14,5,0,1,17,10,0,1,18,0,0,134,5,0,0,68,126,4,0,5,6,17,18,0,15,6,0,135,6,3,0,1,18,10,0,1,17,0,0,134,3,0,0,100,82,4,0,5,6,18,17,135,17,3,0,134,4,0,0,8,120,4,0,14,15,3,17,135,17,3,0,26,9,9,1,1,17,255,0,19,17,4,17,39,17,17,48,83,9,17,0,1,17,9,0,16,17,17,15,32,18,15,9,1,19,255,255,16,19,19,14,19,18,18,19,20,17,17,18,120,17,226,255,0,8,9,0,0,12,5,0,119,0,3,0,0,8,2,0,0,12,0,0,120,12,3,0,0,10,8,0,119,0,16,0,0,11,8,0,0,13,12,0,0,16,13,0,29,13,13,10,26,7,11,1,27,17,13,10,4,17,16,17,39,17,17,48,83,7,17,0,35,17,16,10,121,17,3,0,0,10,7,0,119,0,3,0,0,11,7,0,119,0,244,255,139,10,0,0,140,4,15,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,204,139,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,9,12,16,25,8,12,12,25,10,12,8,25,5,12,4,0,6,12,0,85,9,0,0,85,8,1,0,85,10,2,0,89,5,3,0,82,13,9,0,32,13,13,0,82,14,8,0,32,14,14,0,20,13,13,14,121,13,3,0,137,11,0,0,139,0,0,0,1,13,0,0,85,6,13,0,82,13,10,0,82,14,6,0,57,13,13,14,108,140,3,0,82,13,8,0,82,14,6,0,41,14,14,2,100,4,13,14,145,4,4,0,88,13,5,0,145,13,13,0,65,7,4,13,145,7,7,0,82,13,9,0,82,14,6,0,41,14,14,2,101,13,14,7,82,14,6,0,25,14,14,1,85,6,14,0,119,0,236,255,137,11,0,0,139,0,0,0,140,2,18,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,192,140,3,0,1,14,16,0,135,13,0,0,14,0,0,0,25,8,12,8,25,6,12,4,0,9,12,0,85,6,0,0,89,9,1,0,82,13,6,0,120,13,7,0,1,14,238,77,1,15,184,68,1,16,116,3,1,17,250,77,135,13,1,0,14,15,16,17,1,13,6,0,82,17,6,0,50,13,13,17,28,141,3,0,1,17,24,78,1,16,184,68,1,15,117,3,1,14,250,77,135,13,1,0,17,16,15,14,88,14,9,0,145,14,14,0,134,13,0,0,112,103,4,0,14,0,0,0,33,10,13,0,1,13,192,24,82,14,6,0,41,14,14,3,3,13,13,14,106,2,13,4,88,3,9,0,145,3,3,0,121,10,21,0,59,13,1,0,145,13,13,0,66,5,13,3,145,5,5,0,38,16,2,7,135,15,238,0,16,5,0,0,145,15,15,0,59,16,2,0,145,16,16,0,65,14,15,16,145,14,14,0,135,13,18,0,14,0,0,0,75,13,13,0,85,8,13,0,82,4,8,0,137,11,0,0,139,4,0,0,119,0,20,0,38,14,2,7,135,13,238,0,14,3,0,0,145,13,13,0,59,14,2,0,145,14,14,0,65,7,13,14,145,7,7,0,88,16,9,0,145,16,16,0,66,13,7,16,145,13,13,0,135,14,18,0,13,0,0,0,75,14,14,0,85,8,14,0,82,4,8,0,137,11,0,0,139,4,0,0,1,14,0,0,139,14,0,0,140,4,22,0,0,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,63,38,19,19,192,137,19,0,0,0,18,19,0,136,19,0,0,1,20,160,0,3,19,19,20,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,76,142,3,0,1,20,160,0,135,19,0,0,20,0,0,0,1,19,144,0,3,6,18,19,0,8,18,0,1,20,120,36,1,21,144,0,135,19,2,0,8,20,21,0,2,19,0,0,254,255,255,127,26,21,1,1,48,19,19,21,168,142,3,0,120,1,5,0,1,9,1,0,0,11,6,0,1,16,4,0,119,0,10,0,134,19,0,0,120,142,4,0,1,21,61,0,85,19,21,0,1,10,255,255,119,0,4,0,0,9,1,0,0,11,0,0,1,16,4,0,32,21,16,4,121,21,28,0,1,21,254,255,4,13,21,11,16,21,13,9,125,12,21,13,9,0,0,0,109,8,48,12,25,15,8,20,85,15,11,0,109,8,44,11,3,5,11,12,25,14,8,16,85,14,5,0,109,8,28,5,134,7,0,0,128,130,4,0,8,2,3,0,120,12,3,0,0,10,7,0,119,0,9,0,82,4,15,0,82,21,14,0,13,21,4,21,41,21,21,31,42,21,21,31,1,19,0,0,95,4,21,19,0,10,7,0,137,17,0,0,139,10,0,0,140,3,14,0,0,0,0,0,136,11,0,0,0,8,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,9,11,0,136,11,0,0,1,12,160,0,3,11,11,12,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,128,143,3,0,1,12,160,0,135,11,0,0,12,0,0,0,1,11,148,0,3,5,9,11,1,11,144,0,3,6,9,11,1,11,128,0,3,3,9,11,0,4,9,0,85,5,0,0,85,6,1,0,82,11,5,0,34,11,11,3,121,11,3,0,137,8,0,0,139,0,0,0,85,3,2,0,0,7,4,0,1,11,128,0,3,10,7,11,1,11,0,0,85,7,11,0,25,7,7,4,54,11,7,10,200,143,3,0,82,11,5,0,1,12,1,0,1,13,6,0,138,11,12,13,8,144,3,0,24,144,3,0,40,144,3,0,56,144,3,0,72,144,3,0,88,144,3,0,119,0,25,0,1,13,7,85,135,12,24,0,4,13,0,0,119,0,21,0,1,13,15,85,135,12,24,0,4,13,0,0,119,0,17,0,1,13,23,85,135,12,24,0,4,13,0,0,119,0,13,0,1,13,30,85,135,12,24,0,4,13,0,0,119,0,9,0,1,13,40,85,135,12,24,0,4,13,0,0,119,0,5,0,1,13,48,85,135,12,24,0,4,13,0,0,119,0,1,0,82,12,6,0,135,11,30,1,4,12,0,0,1,12,56,85,135,11,30,1,4,12,0,0,134,11,0,0,64,134,4,0,4,3,0,0,1,11,5,0,82,12,5,0,49,11,11,12,172,144,3,0,1,12,1,0,135,11,31,1,12,0,0,0,119,0,3,0,137,8,0,0,139,0,0,0,139,0,0,0,140,2,15,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,4,145,3,0,1,13,32,0,135,12,0,0,13,0,0,0,25,7,11,16,25,3,11,12,25,9,11,8,25,4,11,4,0,8,11,0,85,3,0,0,85,9,1,0,82,12,3,0,106,12,12,8,34,12,12,16,121,12,5,0,82,13,3,0,134,12,0,0,152,207,3,0,13,0,0,0,82,12,9,0,82,13,3,0,106,13,13,12,1,14,255,1,19,13,13,14,41,13,13,1,93,12,12,13,85,4,12,0,82,12,4,0,121,12,24,0,82,12,4,0,42,12,12,9,85,8,12,0,82,12,3,0,25,5,12,12,82,12,5,0,82,13,8,0,24,12,12,13,85,5,12,0,82,12,3,0,25,6,12,8,82,12,6,0,82,13,8,0,4,12,12,13,85,6,12,0,82,12,4,0,1,13,255,1,19,12,12,13,85,7,12,0,82,2,7,0,137,10,0,0,139,2,0,0,119,0,10,0,82,13,3,0,82,14,9,0,134,12,0,0,180,74,3,0,13,14,0,0,85,7,12,0,82,2,7,0,137,10,0,0,139,2,0,0,1,12,0,0,139,12,0,0,140,3,15,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,60,146,3,0,1,13,16,0,135,12,0,0,13,0,0,0,0,8,11,0,25,4,0,11,78,3,4,0,41,12,3,24,42,12,12,24,34,9,12,0,121,9,7,0,106,12,0,8,2,13,0,0,255,255,255,127,19,12,12,13,26,5,12,1,119,0,2,0,1,5,10,0,48,12,5,2,176,146,3,0,121,9,3,0,106,7,0,4,119,0,4,0,1,12,255,0,19,12,3,12,0,7,12,0,4,13,2,5,1,14,0,0,134,12,0,0,76,44,3,0,0,5,13,7,14,7,2,1,119,0,21,0,121,9,3,0,82,6,0,0,119,0,2,0,0,6,0,0,134,12,0,0,72,122,4,0,6,1,2,0,1,12,0,0,83,8,12,0,3,14,6,2,134,12,0,0,240,127,4,0,14,8,0,0,78,12,4,0,34,12,12,0,121,12,3,0,109,0,4,2,119,0,3,0,83,4,2,0,119,0,1,0,137,10,0,0,139,0,0,0,140,3,16,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,48,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,64,147,3,0,1,14,48,0,135,13,0,0,14,0,0,0,25,9,11,32,25,10,11,16,0,8,11,0,25,7,11,40,109,11,44,0,85,7,1,0,109,11,36,2,82,12,7,0,1,13,8,1,94,3,12,13,1,13,12,1,94,4,12,13,1,13,16,1,94,5,12,13,1,13,20,1,94,6,12,13,82,13,7,0,82,13,13,0,121,13,19,0,85,8,3,0,109,8,4,4,109,8,8,5,109,8,12,6,1,14,3,0,1,15,110,55,134,13,0,0,48,143,3,0,14,15,8,0,1,15,3,0,1,14,246,55,134,13,0,0,48,143,3,0,15,14,9,0,137,11,0,0,1,13,0,0,139,13,0,0,119,0,18,0,85,10,3,0,109,10,4,4,109,10,8,5,109,10,12,6,1,14,3,0,1,15,179,55,134,13,0,0,48,143,3,0,14,15,10,0,1,15,3,0,1,14,246,55,134,13,0,0,48,143,3,0,15,14,9,0,137,11,0,0,1,13,0,0,139,13,0,0,1,13,0,0,139,13,0,0,140,6,16,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,108,148,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,7,13,20,25,9,13,16,25,8,13,12,25,11,13,8,25,10,13,4,0,6,13,0,85,7,0,0,85,9,1,0,85,8,2,0,85,11,3,0,85,10,4,0,85,6,5,0,82,14,7,0,82,15,9,0,109,14,4,15,82,15,7,0,82,14,8,0,109,15,8,14,82,14,7,0,82,15,11,0,109,14,20,15,82,15,7,0,82,14,10,0,109,15,24,14,82,14,7,0,82,15,6,0,109,14,64,15,137,12,0,0,139,0,0,0,140,5,9,0,0,0,0,0,106,8,1,8,134,7,0,0,220,114,4,0,0,8,4,0,121,7,6,0,1,8,0,0,134,7,0,0,196,81,4,0,8,1,2,3,119,0,34,0,82,8,1,0,134,7,0,0,220,114,4,0,0,8,4,0,121,7,29,0,106,7,1,16,46,7,7,2,132,149,3,0,25,5,1,20,82,7,5,0,46,7,7,2,132,149,3,0,109,1,32,3,85,5,2,0,25,6,1,40,82,7,6,0,25,7,7,1,85,6,7,0,106,7,1,36,32,7,7,1,121,7,6,0,106,7,1,24,32,7,7,2,121,7,3,0,1,8,1,0,107,1,54,8,1,7,4,0,109,1,44,7,119,0,5,0,32,7,3,1,121,7,3,0,1,8,1,0,109,1,32,8,139,0,0,0,140,6,12,0,0,0,0,0,1,9,40,0,134,7,0,0,116,104,4,0,9,0,0,0,85,0,7,0,25,10,1,8,109,0,4,10,25,6,0,8,1,10,0,0,83,6,10,0,25,9,7,8,82,11,4,0,134,10,0,0,44,80,4,0,9,11,0,0,25,8,7,20,1,10,0,0,85,8,10,0,1,11,0,0,109,8,4,11,1,10,0,0,109,8,8,10,1,11,0,0,109,8,12,11,1,10,0,0,109,8,16,10,1,10,1,0,83,6,10,0,109,7,4,2,1,10,0,0,85,7,10,0,139,0,0,0,140,5,23,0,0,0,0,0,136,17,0,0,0,15,17,0,136,17,0,0,25,17,17,63,38,17,17,192,137,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,108,150,3,0,1,18,32,0,135,17,0,0,18,0,0,0,25,14,16,20,25,6,16,16,25,8,16,12,25,9,16,8,25,10,16,4,0,7,16,0,85,6,0,0,85,8,1,0,85,9,2,0,85,10,3,0,85,7,4,0,82,18,6,0,82,19,8,0,82,20,9,0,82,21,10,0,82,22,7,0,134,17,0,0,80,92,3,0,18,19,20,21,22,0,0,0,121,17,18,0,82,17,6,0,82,22,8,0,5,11,17,22,82,22,9,0,5,12,11,22,82,22,10,0,5,13,12,22,82,17,7,0,3,17,13,17,134,22,0,0,184,110,4,0,17,0,0,0,85,14,22,0,82,5,14,0,137,15,0,0,139,5,0,0,119,0,6,0,1,22,0,0,85,14,22,0,82,5,14,0,137,15,0,0,139,5,0,0,1,22,0,0,139,22,0,0,140,5,10,0,0,0,0,0,1,8,40,0,134,6,0,0,116,104,4,0,8,0,0,0,85,0,6,0,25,9,1,8,109,0,4,9,25,5,0,8,1,9,0,0,83,5,9,0,25,8,6,8,134,9,0,0,44,80,4,0,8,3,0,0,25,7,6,20,116,7,4,0,106,8,4,4,109,7,4,8,106,9,4,8,109,7,8,9,106,8,4,12,109,7,12,8,106,9,4,16,109,7,16,9,1,9,1,0,83,5,9,0,109,6,4,2,1,9,0,0,85,6,9,0,139,0,0,0,140,2,16,0,0,0,0,0,2,12,0,0,255,0,0,0,1,9,0,0,136,13,0,0,0,10,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,11,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,248,151,3,0,1,14,16,0,135,13,0,0,14,0,0,0,25,8,11,8,25,5,11,4], eb + 225280);
  HEAPU8.set([0,7,11,0,25,6,11,12,85,8,0,0,85,5,1,0,1,13,0,0,85,7,13,0,1,13,0,0,83,6,13,0,82,14,8,0,134,13,0,0,52,185,3,0,14,0,0,0,83,6,13,0,82,14,8,0,134,13,0,0,0,221,3,0,14,0,0,0,120,13,22,0,78,13,6,0,32,13,13,10,120,13,19,0,78,2,6,0,82,3,5,0,82,4,7,0,25,13,4,1,85,7,13,0,95,3,4,2,82,13,7,0,1,14,255,3,45,13,13,14,132,152,3,0,1,9,5,0,119,0,7,0,82,14,8,0,134,13,0,0,52,185,3,0,14,0,0,0,83,6,13,0,119,0,231,255,32,13,9,5,121,13,14,0,82,14,8,0,134,13,0,0,0,221,3,0,14,0,0,0,120,13,9,0,82,14,8,0,134,13,0,0,52,185,3,0,14,0,0,0,19,13,13,12,32,13,13,10,121,13,245,255,119,0,1,0,82,13,5,0,82,14,7,0,1,15,0,0,95,13,14,15,137,10,0,0,82,15,5,0,139,15,0,0,140,1,17,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,64,153,3,0,1,13,32,0,135,12,0,0,13,0,0,0,25,6,11,16,25,5,11,12,25,8,11,8,25,9,11,4,0,7,11,0,85,7,0,0,82,12,7,0,120,12,6,0,1,12,0,0,85,9,12,0,82,1,9,0,137,10,0,0,139,1,0,0,82,12,7,0,134,3,0,0,88,87,4,0,12,0,0,0,116,8,7,0,82,12,8,0,120,12,8,0,1,13,130,59,1,14,246,58,2,15,0,0,140,129,0,0,1,16,16,60,135,12,1,0,13,14,15,16,82,12,8,0,106,2,12,32,82,12,8,0,25,12,12,28,116,6,12,0,85,5,2,0,82,12,6,0,134,4,0,0,192,67,4,0,12,0,0,0,82,16,5,0,5,12,4,16,7,12,3,12,85,9,12,0,82,1,9,0,137,10,0,0,139,1,0,0,140,2,12,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,40,154,3,0,1,9,16,0,135,8,0,0,9,0,0,0,0,6,7,0,25,5,0,28,25,4,5,11,78,8,4,0,34,8,8,0,121,8,24,0,82,2,5,0,1,8,0,0,83,6,8,0,134,8,0,0,240,127,4,0,2,6,0,0,1,9,0,0,109,0,32,9,78,9,4,0,34,9,9,0,121,9,20,0,25,3,0,36,82,8,5,0,82,10,3,0,2,11,0,0,255,255,255,127,19,10,10,11,134,9,0,0,64,123,4,0,8,10,0,0,1,9,0,0,85,3,9,0,119,0,8,0,1,9,0,0,83,6,9,0,134,9,0,0,240,127,4,0,5,6,0,0,1,9,0,0,83,4,9,0,116,5,1,0,106,10,1,4,109,5,4,10,106,9,1,8,109,5,8,9,1,9,0,0,85,1,9,0,1,10,0,0,109,1,4,10,1,9,0,0,109,1,8,9,137,7,0,0,139,0,0,0,140,2,17,0,0,0,0,0,136,12,0,0,0,7,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,8,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,56,155,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,6,8,8,25,5,8,4,0,3,8,0,85,6,0,0,85,5,1,0,82,2,6,0,82,12,5,0,34,12,12,0,121,12,8,0,82,12,6,0,1,13,168,0,1,14,172,0,94,14,2,14,97,12,13,14,137,7,0,0,139,0,0,0,106,14,2,16,121,14,29,0,82,9,6,0,1,14,172,0,94,14,9,14,1,13,168,0,94,13,9,13,4,14,14,13,85,3,14,0,82,14,3,0,82,13,5,0,47,14,14,13,240,155,3,0,82,10,6,0,1,14,168,0,1,13,172,0,94,13,10,13,97,10,14,13,82,11,6,0,25,14,11,16,106,14,14,4,38,14,14,63,106,12,11,28,82,15,5,0,82,16,3,0,4,15,15,16,135,13,242,0,14,12,15,0,137,7,0,0,139,0,0,0,82,13,6,0,1,14,168,0,3,4,13,14,82,14,4,0,82,13,5,0,3,14,14,13,85,4,14,0,137,7,0,0,139,0,0,0,140,0,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,32,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,76,156,3,0,1,3,32,0,135,2,0,0,3,0,0,0,0,0,1,0,134,2,0,0,232,141,4,0,134,2,0,0,232,141,4,0,134,2,0,0,232,141,4,0,134,2,0,0,180,141,4,0,1,3,227,40,134,2,0,0,228,2,3,0,0,3,0,0,2,2,0,0,224,253,1,0,82,3,0,0,85,2,3,0,2,3,0,0,228,253,1,0,106,2,0,4,85,3,2,0,2,2,0,0,232,253,1,0,106,3,0,8,85,2,3,0,2,3,0,0,236,253,1,0,106,2,0,12,85,3,2,0,2,2,0,0,240,253,1,0,106,3,0,16,85,2,3,0,1,2,255,40,134,3,0,0,228,2,3,0,0,2,0,0,2,3,0,0,244,253,1,0,82,2,0,0,85,3,2,0,2,2,0,0,248,253,1,0,106,3,0,4,85,2,3,0,2,3,0,0,252,253,1,0,106,2,0,8,85,3,2,0,2,2,0,0,0,254,1,0,106,3,0,12,85,2,3,0,2,3,0,0,4,254,1,0,106,2,0,16,85,3,2,0,1,3,35,41,134,2,0,0,228,2,3,0,0,3,0,0,2,2,0,0,28,254,1,0,82,3,0,0,85,2,3,0,2,3,0,0,32,254,1,0,106,2,0,4,85,3,2,0,2,2,0,0,36,254,1,0,106,3,0,8,85,2,3,0,2,3,0,0,40,254,1,0,106,2,0,12,85,3,2,0,2,2,0,0,44,254,1,0,106,3,0,16,85,2,3,0,1,2,60,41,134,3,0,0,228,2,3,0,0,2,0,0,2,3,0,0,8,254,1,0,82,2,0,0,85,3,2,0,2,2,0,0,12,254,1,0,106,3,0,4,85,2,3,0,2,3,0,0,16,254,1,0,106,2,0,8,85,3,2,0,2,2,0,0,20,254,1,0,106,3,0,12,85,2,3,0,2,3,0,0,24,254,1,0,106,2,0,16,85,3,2,0,137,1,0,0,139,0,0,0,140,4,17,0,0,0,0,0,136,14,0,0,0,9,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,48,158,3,0,1,15,16,0,135,14,0,0,15,0,0,0,25,6,9,3,25,7,9,2,25,8,9,1,0,5,9,0,83,6,0,0,83,7,1,0,83,8,2,0,83,5,3,0,2,14,0,0,0,220,1,0,2,15,0,0,24,255,1,0,82,15,15,0,27,15,15,48,3,10,14,15,106,15,10,20,106,14,10,8,41,14,14,2,78,16,6,0,95,15,14,16,2,16,0,0,0,220,1,0,2,14,0,0,24,255,1,0,82,14,14,0,27,14,14,48,3,11,16,14,106,14,11,20,106,16,11,8,41,16,16,2,25,16,16,1,78,15,7,0,95,14,16,15,2,15,0,0,0,220,1,0,2,16,0,0,24,255,1,0,82,16,16,0,27,16,16,48,3,12,15,16,106,16,12,20,106,15,12,8,41,15,15,2,25,15,15,2,78,14,8,0,95,16,15,14,2,14,0,0,0,220,1,0,2,15,0,0,24,255,1,0,82,15,15,0,27,15,15,48,3,13,14,15,106,15,13,20,106,14,13,8,41,14,14,2,25,14,14,3,78,16,5,0,95,15,14,16,2,16,0,0,0,220,1,0,2,14,0,0,24,255,1,0,82,14,14,0,27,14,14,48,3,16,16,14,25,4,16,8,82,16,4,0,25,16,16,1,85,4,16,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,32,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,136,159,3,0,1,10,32,0,135,9,0,0,10,0,0,0,25,5,8,16,25,7,8,12,25,4,8,8,25,6,8,4,0,3,8,0,85,4,0,0,85,6,1,0,1,9,0,0,85,3,9,0,82,9,6,0,82,10,3,0,57,9,9,10,92,160,3,0,82,10,4,0,82,11,3,0,41,11,11,2,100,9,10,11,145,9,9,0,89,7,9,0,88,9,7,0,145,9,9,0,59,10,255,255,145,10,10,0,71,9,9,10,121,9,5,0,59,9,255,255,145,9,9,0,89,5,9,0,119,0,15,0,88,9,7,0,145,9,9,0,59,10,1,0,145,10,10,0,73,9,9,10,121,9,5,0,59,9,1,0,145,9,9,0,89,5,9,0,119,0,5,0,88,9,7,0,145,9,9,0,89,5,9,0,119,0,1,0,88,2,5,0,145,2,2,0,82,9,4,0,82,10,3,0,41,10,10,2,101,9,10,2,82,10,3,0,25,10,10,1,85,3,10,0,119,0,213,255,137,8,0,0,139,0,0,0,140,0,7,0,0,0,0,0,2,2,0,0,0,220,1,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,164,160,3,0,1,4,16,0,135,3,0,0,4,0,0,0,0,0,1,0,2,3,0,0,214,4,2,0,78,3,3,0,38,3,3,1,121,3,8,0,2,4,0,0,40,255,1,0,82,4,4,0,38,4,4,31,1,5,0,0,135,3,224,0,4,5,0,0,1,4,0,0,135,3,32,1,4,0,0,0,1,4,1,0,135,3,32,1,4,0,0,0,1,4,2,0,135,3,32,1,4,0,0,0,1,4,3,0,135,3,32,1,4,0,0,0,2,4,0,0,146,136,0,0,1,5,0,0,135,3,225,0,4,5,0,0,2,5,0,0,147,136,0,0,1,4,0,0,135,3,225,0,5,4,0,0,1,3,0,0,85,0,3,0,1,3,1,0,82,4,0,0,56,3,3,4,116,162,3,0,1,4,1,0,82,5,0,0,27,5,5,48,3,5,2,5,25,5,5,32,135,3,33,1,4,5,0,0,1,5,1,0,82,4,0,0,27,4,4,48,3,4,2,4,25,4,4,32,25,4,4,4,135,3,33,1,5,4,0,0,1,4,1,0,82,5,0,0,27,5,5,48,3,5,2,5,25,5,5,32,25,5,5,8,135,3,33,1,4,5,0,0,1,5,1,0,82,4,0,0,27,4,4,48,3,4,2,4,25,4,4,32,25,4,4,12,135,3,33,1,5,4,0,0,2,3,0,0,214,4,2,0,78,3,3,0,38,3,3,1,121,3,12,0,2,4,0,0,96,0,2,0,82,4,4,0,38,4,4,63,1,5,1,0,82,6,0,0,27,6,6,48,3,6,2,6,25,6,6,28,135,3,242,0,4,5,6,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,12,135,3,7,0,4,0,0,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,16,135,3,7,0,4,0,0,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,20,135,3,7,0,4,0,0,0,82,4,0,0,27,4,4,48,3,4,2,4,106,4,4,24,135,3,7,0,4,0,0,0,82,3,0,0,25,3,3,1,85,0,3,0,119,0,178,255,137,1,0,0,139,0,0,0,140,3,9,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,48,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,200,162,3,0,1,8,48,0,135,7,0,0,8,0,0,0,25,3,6,20,0,4,6,0,116,3,1,0,106,8,1,4,109,3,4,8,106,7,1,8,109,3,8,7,106,8,1,12,109,3,12,8,106,7,1,16,109,3,16,7,134,7,0,0,212,13,3,0,4,3,0,0,116,3,2,0,106,8,2,4,109,3,4,8,106,7,2,8,109,3,8,7,106,8,2,12,109,3,12,8,134,8,0,0,160,43,2,0,4,3,0,0,116,0,4,0,106,7,4,4,109,0,4,7,106,8,4,8,109,0,8,8,106,7,4,12,109,0,12,7,106,8,4,16,109,0,16,8,137,5,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,140,163,3,0,1,5,16,0,135,4,0,0,5,0,0,0,25,2,3,4,0,1,3,0,85,2,0,0,1,4,0,0,85,1,4,0,82,4,2,0,1,5,0,0,1,6,16,0,138,4,5,6,244,163,3,0,0,164,3,0,12,164,3,0,24,164,3,0,36,164,3,0,48,164,3,0,60,164,3,0,72,164,3,0,84,164,3,0,96,164,3,0,108,164,3,0,120,164,3,0,132,164,3,0,144,164,3,0,156,164,3,0,168,164,3,0,119,0,49,0,1,5,7,0,85,1,5,0,119,0,46,0,1,5,6,0,85,1,5,0,119,0,43,0,1,5,8,0,85,1,5,0,119,0,40,0,1,5,5,0,85,1,5,0,119,0,37,0,1,5,9,0,85,1,5,0,119,0,34,0,1,5,11,0,85,1,5,0,119,0,31,0,1,5,10,0,85,1,5,0,119,0,28,0,1,5,12,0,85,1,5,0,119,0,25,0,1,5,13,0,85,1,5,0,119,0,22,0,1,5,15,0,85,1,5,0,119,0,19,0,1,5,16,0,85,1,5,0,119,0,16,0,1,5,17,0,85,1,5,0,119,0,13,0,1,5,1,0,85,1,5,0,119,0,10,0,1,5,3,0,85,1,5,0,119,0,7,0,1,5,4,0,85,1,5,0,119,0,4,0,1,5,2,0,85,1,5,0,119,0,1,0,137,3,0,0,82,4,1,0,139,4,0,0,140,5,20,0,0,0,0,0,136,15,0,0,0,13,15,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,14,15,0,136,15,0,0,1,16,208,0,3,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,16,165,3,0,1,16,208,0,135,15,0,0,16,0,0,0,1,15,204,0,3,7,14,15,1,15,200,0,3,11,14,15,1,15,196,0,3,12,14,15,1,15,192,0,3,6,14,15,1,15,188,0,3,8,14,15,1,15,184,0,3,9,14,15,0,10,14,0,85,7,0,0,85,11,1,0,85,12,2,0,85,6,3,0,85,8,4,0,82,16,7,0,134,15,0,0,232,98,4,0,10,16,0,0,82,16,11,0,82,17,12,0,82,18,6,0,82,19,8,0,134,15,0,0,136,47,3,0,10,16,17,18,19,0,0,0,85,9,15,0,82,15,9,0,120,15,4,0,82,5,9,0,137,13,0,0,139,5,0,0,82,19,7,0,1,18,0,0,1,17,172,0,94,17,10,17,1,16,168,0,94,16,10,16,4,17,17,16,4,18,18,17,1,17,1,0,134,15,0,0,212,126,4,0,19,18,17,0,82,5,9,0,137,13,0,0,139,5,0,0,140,1,14,0,0,0,0,0,2,11,0,0,148,9,0,0,120,0,53,0,1,12,80,38,82,12,12,0,120,12,3,0,1,2,0,0,119,0,6,0,1,12,80,38,82,12,12,0,134,2,0,0,220,165,3,0,12,0,0,0,134,12,0,0,120,141,4,0,82,4,12,0,120,4,3,0,0,7,2,0,119,0,33,0,0,5,4,0,0,8,2,0,1,12,255,255,106,13,5,76,47,12,12,13,88,166,3,0,134,3,0,0,32,142,4,0,5,0,0,0,119,0,2,0,1,3,0,0,106,12,5,28,106,13,5,20,48,12,12,13,132,166,3,0,134,12,0,0,164,232,3,0,5,0,0,0,20,12,12,8,0,9,12,0,119,0,2,0,0,9,8,0,121,3,4,0,134,12,0,0,20,142,4,0,5,0,0,0,106,5,5,56,120,5,3,0,0,7,9,0,119,0,3,0,0,8,9,0,119,0,227,255,134,12,0,0,204,141,4,0,0,10,7,0,119,0,22,0,106,12,0,76,36,12,12,255,121,12,5,0,134,10,0,0,164,232,3,0,0,0,0,0,119,0,15,0,134,12,0,0,32,142,4,0,0,0,0,0,32,6,12,0,134,1,0,0,164,232,3,0,0,0,0,0,121,6,3,0,0,10,1,0,119,0,5,0,134,12,0,0,20,142,4,0,0,0,0,0,0,10,1,0,139,10,0,0,140,4,16,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,100,167,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,9,12,16,25,10,12,12,25,6,12,8,25,7,12,4,0,8,12,0,89,10,0,0,85,6,1,0,85,7,2,0,85,8,3,0,88,14,10,0,145,14,14,0,134,13,0,0,112,103,4,0,14,0,0,0,121,13,6,0,116,9,8,0,82,5,9,0,137,11,0,0,139,5,0,0,119,0,14,0,82,4,7,0,82,14,6,0,88,15,10,0,145,15,15,0,134,13,0,0,40,69,4,0,14,15,0,0,41,13,13,1,3,13,4,13,85,9,13,0,82,5,9,0,137,11,0,0,139,5,0,0,1,13,0,0,139,13,0,0,140,1,16,0,0,0,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,40,168,3,0,1,12,32,0,135,11,0,0,12,0,0,0,25,6,10,16,25,5,10,12,25,8,10,8,25,9,10,4,0,7,10,0,85,7,0,0,82,11,7,0,120,11,6,0,1,11,0,0,85,9,11,0,82,1,9,0,137,10,0,0,139,1,0,0,82,11,7,0,134,3,0,0,4,138,2,0,11,0,0,0,116,8,7,0,82,11,8,0,120,11,8,0,1,12,130,59,1,13,246,58,2,14,0,0,140,129,0,0,1,15,16,60,135,11,1,0,12,13,14,15,82,11,8,0,106,2,11,32,82,11,8,0,25,11,11,28,116,6,11,0,85,5,2,0,82,11,6,0,134,4,0,0,192,67,4,0,11,0,0,0,82,15,5,0,5,11,4,15,7,11,3,11,85,9,11,0,82,1,9,0,137,10,0,0,139,1,0,0,140,4,18,0,0,0,0,0,136,15,0,0,0,13,15,0,136,15,0,0,25,15,15,63,38,15,15,192,137,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,36,169,3,0,1,16,16,0,135,15,0,0,16,0,0,0,25,5,14,12,25,7,14,8,25,8,14,4,0,6,14,0,85,5,0,0,85,7,1,0,85,8,2,0,85,6,3,0,82,16,5,0,82,17,7,0,134,15,0,0,8,42,4,0,16,17,0,0,120,15,6,0,1,4,0,0,38,15,4,1,0,9,15,0,137,13,0,0,139,9,0,0,82,15,5,0,82,17,7,0,5,10,15,17,82,15,8,0,134,17,0,0,8,42,4,0,10,15,0,0,120,17,6,0,1,4,0,0,38,17,4,1,0,9,17,0,137,13,0,0,139,9,0,0,82,17,5,0,82,15,7,0,5,11,17,15,82,15,8,0,5,12,11,15,82,17,6,0,134,15,0,0,248,45,4,0,12,17,0,0,33,4,15,0,38,15,4,1,0,9,15,0,137,13,0,0,139,9,0,0,140,2,10,0,0,0,0,0,116,0,1,0,25,8,0,4,25,9,1,4,134,7,0,0,44,80,4,0,8,9,0,0,25,2,1,16,106,3,2,4,25,4,0,16,116,4,2,0,109,4,4,3,25,9,0,24,25,8,1,24,134,7,0,0,44,80,4,0,9,8,0,0,25,8,0,36,25,9,1,36,134,7,0,0,44,80,4,0,8,9,0,0,25,9,0,48,25,8,1,48,134,7,0,0,44,80,4,0,9,8,0,0,25,5,0,60,25,6,1,60,116,5,6,0,106,8,6,4,109,5,4,8,106,7,6,8,109,5,8,7,106,8,6,12,109,5,12,8,106,7,6,16,109,5,16,7,106,8,6,20,109,5,20,8,139,0,0,0,140,5,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,208,170,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,16,25,9,12,12,25,7,12,8,25,5,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,7,2,0,85,5,3,0,89,6,4,0,82,13,7,0,82,14,5,0,5,8,13,14,82,13,10,0,82,15,9,0,88,16,6,0,145,16,16,0,134,14,0,0,24,133,3,0,13,15,8,16,137,11,0,0,139,0,0,0,140,5,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,116,171,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,16,25,9,12,12,25,7,12,8,25,5,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,7,2,0,85,5,3,0,89,6,4,0,82,13,7,0,82,14,5,0,5,8,13,14,82,13,10,0,82,15,9,0,88,16,6,0,145,16,16,0,134,14,0,0,200,31,3,0,13,15,8,16,137,11,0,0,139,0,0,0,140,5,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,24,172,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,16,25,9,12,12,25,7,12,8,25,5,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,7,2,0,85,5,3,0,89,6,4,0,82,13,7,0,82,14,5,0,5,8,13,14,82,13,10,0,82,15,9,0,88,16,6,0,145,16,16,0,134,14,0,0,28,132,3,0,13,15,8,16,137,11,0,0,139,0,0,0,140,5,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,188,172,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,16,25,9,12,12,25,7,12,8,25,5,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,7,2,0,85,5,3,0,89,6,4,0,82,13,7,0,82,14,5,0,5,8,13,14,82,13,10,0,82,15,9,0,88,16,6,0,145,16,16,0,134,14,0,0,128,139,3,0,13,15,8,16,137,11,0,0,139,0,0,0,140,5,17,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,96,173,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,10,12,16,25,9,12,12,25,7,12,8,25,5,12,4,0,6,12,0,85,10,0,0,85,9,1,0,85,7,2,0,85,5,3,0,89,6,4,0,82,13,7,0,82,14,5,0,5,8,13,14,82,13,10,0,82,15,9,0,88,16,6,0,145,16,16,0,134,14,0,0,28,131,3,0,13,15,8,16,137,11,0,0,139,0,0,0,140,1,16,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,4,174,3,0,1,13,32,0,135,12,0,0,13,0,0,0,25,6,11,20,25,9,11,16,25,3,11,12,25,7,11,8,25,8,11,4,0,5,11,0,89,6,0,0,88,1,6,0,145,1,1,0,1,13,64,38,88,12,13,0,145,12,12,0,73,12,1,12,120,12,5,0,1,13,64,38,88,12,13,0,145,12,12,0,89,6,12,0,88,2,6,0,145,2,2,0,1,13,68,38,88,12,13,0,145,12,12,0,73,12,2,12,121,12,5,0,1,13,68,38,88,12,13,0,145,12,12,0,89,6,12,0,88,12,6,0,145,12,12,0,89,5,12,0,1,12,240,28,82,13,5,0,1,14,64,38,82,14,14,0,4,13,13,14,43,13,13,20,41,13,13,2,3,12,12,13,116,9,12,0,82,12,9,0,43,12,12,16,41,12,12,9,85,3,12,0,82,12,9,0,2,13,0,0,255,255,0,0,19,12,12,13,85,7,12,0,82,12,5,0,43,12,12,12,1,13,255,0,19,12,12,13,85,8,12,0,82,12,3,0,82,14,7,0,82,15,8,0,5,13,14,15,3,12,12,13,43,12,12,16,1,13,255,0,19,12,12,13,0,4,12,0,137,10,0,0,139,4,0,0,140,1,15,0,0,0,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,68,175,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,7,12,24,25,8,12,16,0,5,12,0,82,14,0,0,134,13,0,0,92,117,4,0,7,14,0,0,112,1,7,4,145,1,1,0,25,11,0,12,88,13,11,0,145,13,13,0,64,9,1,13,145,9,9,0,82,14,0,0,134,13,0,0,92,117,4,0,8,14,0,0,88,2,8,0,145,2,2,0,25,10,0,8,88,14,10,0,145,14,14,0,64,13,2,14,145,13,13,0,134,6,0,0,180,31,4,0,9,13,0,0,145,6,6,0,106,3,0,20,25,14,0,24,134,13,0,0,44,80,4,0,5,14,0,0,88,4,10,0,145,4,4,0,88,14,11,0,145,14,14,0,134,13,0,0,32,64,3,0,3,5,4,14,6,0,0,0,134,13,0,0,204,117,4,0,5,0,0,0,137,12,0,0,139,0,0,0,140,1,11,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,32,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,76,176,3,0,1,10,32,0,135,9,0,0,10,0,0,0,25,6,8,16,25,2,8,12,25,4,8,8,25,3,8,4,0,5,8,0,85,2,0,0,82,10,2,0,134,9,0,0,36,43,4,0,10,0,0,0,1,10,255,0,19,9,9,10,85,4,9,0,82,9,4,0,38,9,9,15,85,3,9,0,82,10,2,0,134,9,0,0,36,43,4,0,10,0,0,0,1,10,255,0,19,9,9,10,85,5,9,0,82,9,4,0,41,9,9,8,82,10,5,0,3,9,9,10,30,9,9,31,121,9,9,0,1,10,177,67,134,9,0,0,40,112,4,0,10,0,0,0,85,6,9,0,82,1,6,0,137,7,0,0,139,1,0,0,82,9,5,0,38,9,9,32,121,9,9,0,1,10,193,67,134,9,0,0,40,112,4,0,10,0,0,0,85,6,9,0,82,1,6,0,137,7,0,0,139,1,0,0,82,9,3,0,33,9,9,8,121,9,10,0,1,10,208,67,134,9,0,0,40,112,4,0,10,0,0,0,85,6,9,0,82,1,6,0,137,7,0,0,139,1,0,0,119,0,6,0,1,9,1,0,85,6,9,0,82,1,6,0,137,7,0,0,139,1,0,0,1,9,0,0,139,9,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,32,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,144,177,3,0,1,10,32,0,135,9,0,0,10,0,0,0,25,3,8,20,25,6,8,16,25,5,8,12,25,7,8,8,25,4,8,4,0,2,8,0,85,3,0,0,85,6,1,0,1,10,0,0,82,11,3,0,134,9,0,0,192,196,3,0,10,11,0,0,1,11,0,0,82,10,3,0,134,9,0,0,192,196,3,0,11,10,0,0,1,10,0,0,82,11,3,0,134,9,0,0,192,196,3,0,10,11,0,0,1,9,1,0,85,5,9,0,1,9,1,0,82,11,6,0,82,11,11,0,22,9,9,11,82,11,5,0,56,9,9,11,160,178,3,0,82,9,6,0,25,9,9,4,82,11,5,0,91,9,9,11,85,7,9,0,82,9,6,0,1,11,4,1,3,9,9,11,82,11,5,0,91,9,9,11,85,4,9,0,82,9,6,0,1,11,4,2,3,9,9,11,82,11,5,0,91,9,9,11,85,2,9,0,82,11,7,0,82,10,3,0,134,9,0,0,192,196,3,0,11,10,0,0,82,10,4,0,82,11,3,0,134,9,0,0,192,196,3,0,10,11,0,0,82,11,2,0,82,10,3,0,134,9,0,0,192,196,3,0,11,10,0,0,82,9,5,0,25,9,9,1,85,5,9,0,119,0,214,255,137,8,0,0,139,0,0,0,140,5,19,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,244,178,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,9,13,20,25,10,13,16,25,11,13,12,25,6,13,8,25,8,13,4,0,5,13,0,85,9,0,0,85,10,1,0,85,11,2,0,85,6,3,0,85,8,4,0,1,14,0,0,33,14,14,0,82,15,9,0,33,15,15,0,19,14,14,15,120,14,3,0,137,12,0,0,139,0,0,0,82,14,8,0,121,14,3,0,82,7,8,0,119,0,3,0,82,14,6,0,82,7,14,0,85,5,7,0,82,15,9,0,82,16,10,0,82,16,16,0,82,17,11,0,82,17,17,0,82,18,5,0,41,18,18,2,134,14,0,0,248,6,3,0,15,16,17,18,137,12,0,0,139,0,0,0,140,2,14,0,0,0,0,0,1,9,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,220,179,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,6,11,12,25,7,11,8,25,8,11,4,0,5,11,0,85,7,0,0,85,8,1,0,1,12,0,0,85,5,12,0,82,2,7,0,82,12,8,0,82,13,5,0,90,12,12,13,120,12,3,0,1,9,6,0,119,0,18,0,134,12,0,0,52,185,3,0,2,0,0,0,1,13,255,0,19,12,12,13,0,4,12,0,82,12,8,0,82,13,5,0,90,12,12,13,46,12,4,12,76,180,3,0,1,9,4,0,119,0,5,0,82,12,5,0,25,12,12,1,85,5,12,0,119,0,233,255,32,12,9,4,121,12,7,0,1,12,0,0,85,6,12,0,82,3,6,0,137,10,0,0,139,3,0,0,119,0,11,0,32,12,9,6,121,12,9,0,134,12,0,0,248,91,4,0,2,0,0,0,1,12,1,0,85,6,12,0,82,3,6,0,137,10,0,0,139,3,0,0,1,12,0,0,139,12,0,0,140,5,17,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,248,180,3,0,1,13,32,0,135,12,0,0,13,0,0,0,25,7,11,16,25,8,11,12,25,5,11,8,25,6,11,4,0,9,11,0,85,7,0,0,85,8,1,0,85,5,2,0,85,6,3,0,85,9,4,0,82,12,7,0,32,12,12,0,82,13,8,0,33,13,13,0,19,12,12,13,121,12,3,0,82,12,8,0,116,7,12,0,82,13,7,0,82,14,8,0,82,15,5,0,82,16,6,0,134,12,0,0,48,182,3,0,13,14,15,16,137,10,0,0,82,12,9,0,139,12,0,0,140,5,16,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,32,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,180,181,3,0,1,14,32,0,135,13,0,0,14,0,0,0,25,5,12,16,25,8,12,12,25,9,12,8,25,7,12,4,0,10,12,0,85,5,0,0,85,8,1,0,85,9,2,0,85,7,3,0,85,10,4,0,82,13,5,0,82,14,8,0,109,13,20,14,82,14,5,0,82,13,8,0,109,14,16,13,82,13,5,0,82,14,8,0,82,15,9,0,3,14,14,15,109,13,24,14,82,14,5,0,82,13,7,0,109,14,28,13,82,13,5,0,82,14,10,0,134,6,0,0,128,4,3,0,13,14,0,0,137,11,0,0,139,6,0,0,140,4,17,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,32,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,124,182,3,0,1,12,32,0,135,11,0,0,12,0,0,0,25,7,10,16,25,8,10,12,25,4,10,8,25,5,10,4,0,6,10,0,85,7,0,0,85,8,1,0,85,4,2,0,85,5,3,0,82,11,7,0,33,11,11,0,82,12,4,0,37,12,12,1,19,11,11,12,120,11,3,0,137,9,0,0,139,0,0,0,82,11,7,0,25,11,11,4,116,6,11,0,82,11,6,0,120,11,3,0,137,9,0,0,139,0,0,0,82,12,6,0,38,12,12,31,82,13,7,0,82,14,8,0,82,15,4,0,82,16,5,0,135,11,4,0,12,13,14,15,16,0,0,0,137,9,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,4,61,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,8,0,119,0,130,0,1,4,74,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,9,0,119,0,123,0,1,4,90,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,23,0,119,0,116,0,1,4,100,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,10,0,119,0,109,0,1,4,113,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,9,0,119,0,102,0,1,4,124,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,11,0,119,0,95,0,1,4,139,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,3,0,119,0,88,0,1,4,152,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,81,0,1,4,171,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,5,0,119,0,74,0,1,4,191,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,6,0,119,0,67,0,1,4,212,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,7,0,119,0,60,0,1,4,234,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,10,0,119,0,53,0,1,4,252,87,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,12,0,119,0,46,0,1,4,17,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,13,0,119,0,39,0,1,4,35,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,24,0,119,0,32,0,1,4,51,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,14,0,119,0,25,0,1,4,65,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,18,0,1,4,87,88,134,3,0,0,144,58,4,0,0,4,0,0,120,3,3,0,1,1,4,0,119,0,11,0,1,4,111,88,134,3,0,0,144,58,4,0,0,4,0,0,32,2,3,0,1,4,7,0,1,5,0,0,125,3,2,4,5,0,0,0,139,3,0,0,139,1,0,0,140,1,14,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,128,185,3,0,1,12,16,0,135,11,0,0,12,0,0,0,25,7,10,4,0,8,10,0,85,8,0,0,82,3,8,0,82,11,8,0,1,12,168,0,94,11,11,12,82,12,8,0,1,13,172,0,94,12,12,13,48,11,11,12,216,185,3,0,1,11,168,0,3,5,3,11,82,4,5,0,25,11,4,1,85,5,11,0,78,11,4,0,83,7,11,0,78,2,7,0,137,9,0,0,139,2,0,0,106,11,3,32,121,11,17,0,82,12,8,0,134,11,0,0,96,204,3,0,12,0,0,0,82,11,8,0,1,12,168,0,3,6,11,12,82,1,6,0,25,12,1,1,85,6,12,0,78,12,1,0,83,7,12,0,78,2,7,0,137,9,0,0,139,2,0,0,119,0,6,0,1,12,0,0,83,7,12,0,78,2,7,0,137,9,0,0,139,2,0,0,1,12,0,0,139,12,0,0,140,2,14,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,116,186,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,9,10,4,0,5,10,0,85,9,0,0,85,5,1,0,82,12,5,0,38,12,12,1,85,5,12,0,82,12,5,0,82,13,9,0,79,13,13,0,22,12,12,13,85,5,12,0,82,12,9,0,25,6,12,1,79,12,6,0,82,13,5,0,20,12,12,13,83,6,12,0,82,4,9,0,78,12,4,0,25,12,12,1,41,12,12,24,42,12,12,24,83,4,12,0,82,12,9,0,79,12,12,0,36,12,12,7,121,12,3,0,137,10,0,0,139,0,0,0,82,11,9,0,102,2,11,1,25,7,11,8,25,8,11,4,82,3,8,0,25,12,3,1,85,8,12,0,95,7,3,2,82,12,9,0,1,13,0,0,83,12,13,0,82,13,9,0,1,12,0,0,107,13,1,12,137,10,0,0,139,0,0,0,140,3,13,0,0,0,0,0,136,10,0,0,0,8,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,120,187,3,0,1,11,16,0,135,10,0,0,11,0,0,0,25,4,9,8,25,3,9,4,0,7,9,0,85,4,0,0,85,3,1,0,85,7,2,0,82,10,3,0,120,10,13,0,82,12,4,0,112,11,12,56,145,11,11,0,134,10,0,0,112,103,4,0,11,0,0,0,33,5,10,0,1,11,4,0,1,12,5,0,125,10,5,11,12,0,0,0,85,3,10,0,82,10,7,0,120,10,13,0,82,11,4,0,112,12,11,60,145,12,12,0,134,10,0,0,112,103,4,0,12,0,0,0,33,6,10,0,1,12,4,0,1,11,5,0,125,10,6,12,11,0,0,0,85,7,10,0,82,10,4,0,82,11,3,0,109,10,80,11,82,11,4,0,82,10,7,0,109,11,84,10,137,8,0,0,139,0,0,0,140,2,16,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,108,188,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,7,11,8,25,6,11,4,0,8,11,0,85,6,0,0,89,8,1,0,88,13,8,0,145,13,13,0,134,12,0,0,112,103,4,0,13,0,0,0,33,9,12,0,1,12,192,24,82,13,6,0,41,13,13,3,3,12,12,13,106,2,12,4,88,3,8,0,145,3,3,0,121,9,21,0,59,12,1,0,145,12,12,0,66,5,12,3,145,5,5,0,38,15,2,7,135,14,238,0,15,5,0,0,145,14,14,0,59,15,2,0,145,15,15,0,65,13,14,15,145,13,13,0,135,12,18,0,13,0,0,0,75,12,12,0,85,7,12,0,82,4,7,0,137,10,0,0,139,4,0,0,119,0,16,0,38,14,2,7,135,15,238,0,14,3,0,0,145,15,15,0,59,14,2,0,145,14,14,0,65,13,15,14,145,13,13,0,135,12,18,0,13,0,0,0,75,12,12,0,85,7,12,0,82,4,7,0,137,10,0,0,139,4,0,0,1,12,0,0,139,12,0,0,140,3,8,0,0,0,0,0,2,4,0,0,128,0,0,0,120,0,3,0,1,3,1,0,119,0,91,0,35,5,1,128,121,5,4,0,83,0,1,0,1,3,1,0,119,0,86,0,134,5,0,0,60,141,4,0,1,6,188,0,94,5,5,6,82,5,5,0,120,5,15,0,38,5,1,128,2,6,0,0,128,223,0,0,45,5,5,6,180,189,3,0,83,0,1,0,1,3,1,0,119,0,72,0,134,5,0,0,120,142,4,0,1,6,25,0,85,5,6,0,1,3,255,255,119,0,66,0,1,6,0,8,48,6,1,6,252,189,3,0,43,6,1,6,1,5,192,0,20,6,6,5,83,0,6,0,38,5,1,63,20,5,5,4,107,0,1,5,1,3,2,0,119,0,54,0,2,5,0,0,0,216,0,0,16,5,1,5,1,6,0,224,19,6,1,6,2,7,0,0,0,224,0,0,13,6,6,7,20,5,5,6,121,5,14,0,43,5,1,12,1,6,224,0,20,5,5,6,83,0,5,0,43,6,1,6,38,6,6,63,20,6,6,4,107,0,1,6,38,5,1,63,20,5,5,4,107,0,2,5,1,3,3,0,119,0,31,0,2,5,0,0,0,0,1,0,4,5,1,5,2,6,0,0,0,0,16,0,48,5,5,6,184,190,3,0,43,5,1,18,1,6,240,0,20,5,5,6,83,0,5,0,43,6,1,12,38,6,6,63,20,6,6,4,107,0,1,6,43,5,1,6,38,5,5,63,20,5,5,4,107,0,2,5,38,6,1,63,20,6,6,4,107,0,3,6,1,3,4,0,119,0,7,0,134,6,0,0,120,142,4,0,1,5,25,0,85,6,5,0,1,3,255,255,119,0,1,0,139,3,0,0,140,3,13,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,32,191,3,0,1,12,16,0,135,11,0,0,12,0,0,0,0,7,10,0,25,4,0,11,78,3,4,0,41,11,3,24,42,11,11,24,34,8,11,0,121,8,3,0,106,6,0,4,119,0,4,0,1,11,255,0,19,11,3,11,0,6,11,0,48,11,6,1,108,191,3,0,4,12,1,6,134,11,0,0,56,137,3,0,0,12,2,0,119,0,19,0,121,8,10,0,82,11,0,0,3,5,11,1,1,11,0,0,83,7,11,0,134,11,0,0,240,127,4,0,5,7,0,0,109,0,4,1,119,0,9,0,1,11,0,0,83,7,11,0,3,12,0,1,134,11,0,0,240,127,4,0,12,7,0,0,83,4,1,0,119,0,1,0,137,9,0,0,139,0,0,0,140,4,19,0,0,0,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,32,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,244,191,3,0,1,17,32,0,135,16,0,0,17,0,0,0,25,14,15,19,25,13,15,18,25,8,15,17], eb + 235520);
  HEAPU8.set([25,7,15,16,25,12,15,12,25,11,15,8,25,10,15,4,0,9,15,0,83,14,0,0,83,13,1,0,83,8,2,0,83,7,3,0,79,17,14,0,76,17,17,0,145,17,17,0,59,18,255,0,145,18,18,0,66,16,17,18,145,16,16,0,89,12,16,0,79,18,13,0,76,18,18,0,145,18,18,0,59,17,255,0,145,17,17,0,66,16,18,17,145,16,16,0,89,11,16,0,79,17,8,0,76,17,17,0,145,17,17,0,59,18,255,0,145,18,18,0,66,16,17,18,145,16,16,0,89,10,16,0,79,18,7,0,76,18,18,0,145,18,18,0,59,17,255,0,145,17,17,0,66,16,18,17,145,16,16,0,89,9,16,0,88,4,12,0,145,4,4,0,88,5,11,0,145,5,5,0,88,6,10,0,145,6,6,0,88,17,9,0,145,17,17,0,135,16,33,0,4,5,6,17,137,15,0,0,139,0,0,0,140,4,20,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,32,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,12,193,3,0,1,16,32,0,135,15,0,0,16,0,0,0,25,11,14,20,25,9,14,16,25,13,14,12,25,12,14,8,25,10,14,4,0,8,14,0,85,13,0,0,85,12,1,0,85,10,2,0,85,8,3,0,82,4,13,0,82,5,12,0,82,6,8,0,116,11,10,0,85,9,6,0,82,15,11,0,134,7,0,0,192,67,4,0,15,0,0,0,1,16,0,0,82,19,9,0,5,18,7,19,5,17,5,18,135,15,5,0,4,16,17,0,137,14,0,0,139,0,0,0,140,0,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,32,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,196,193,3,0,1,6,32,0,135,5,0,0,6,0,0,0,25,0,4,4,0,1,4,0,1,5,0,0,85,1,5,0,2,5,0,0,100,2,2,0,82,5,5,0,82,6,1,0,56,5,5,6,72,194,3,0,2,5,0,0,128,2,2,0,82,5,5,0,82,6,1,0,27,6,6,36,3,5,5,6,25,2,5,16,116,0,2,0,106,6,2,4,109,0,4,6,106,5,2,8,109,0,8,5,106,6,2,12,109,0,12,6,106,5,2,16,109,0,16,5,134,5,0,0,72,138,4,0,0,0,0,0,82,5,1,0,25,5,5,1,85,1,5,0,119,0,228,255,2,5,0,0,104,2,2,0,82,5,5,0,85,0,5,0,2,6,0,0,108,2,2,0,82,6,6,0,109,0,4,6,2,5,0,0,112,2,2,0,82,5,5,0,109,0,8,5,2,6,0,0,116,2,2,0,82,6,6,0,109,0,12,6,2,5,0,0,120,2,2,0,82,5,5,0,109,0,16,5,134,5,0,0,112,88,4,0,0,0,0,0,2,6,0,0,128,2,2,0,82,6,6,0,135,5,7,0,6,0,0,0,2,6,0,0,124,2,2,0,82,6,6,0,135,5,7,0,6,0,0,0,137,3,0,0,139,0,0,0,140,4,19,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,32,195,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,11,13,16,25,5,13,12,25,7,13,8,25,8,13,4,0,6,13,0,85,5,0,0,85,7,1,0,85,8,2,0,85,6,3,0,82,15,5,0,82,16,7,0,82,17,8,0,82,18,6,0,134,14,0,0,216,168,3,0,15,16,17,18,121,14,16,0,82,14,5,0,82,18,7,0,5,9,14,18,82,18,8,0,5,10,9,18,82,14,6,0,3,14,10,14,134,18,0,0,184,110,4,0,14,0,0,0,85,11,18,0,82,4,11,0,137,12,0,0,139,4,0,0,119,0,6,0,1,18,0,0,85,11,18,0,82,4,11,0,137,12,0,0,139,4,0,0,1,18,0,0,139,18,0,0,140,4,16,0,0,0,0,0,1,11,0,0,32,12,3,1,121,12,13,0,106,12,0,8,106,13,0,4,4,8,12,13,34,13,8,0,41,13,13,31,42,13,13,31,134,6,0,0,8,120,4,0,1,2,8,13,0,4,6,0,135,5,3,0,119,0,3,0,0,4,1,0,0,5,2,0,25,10,0,20,25,9,0,28,82,13,9,0,82,12,10,0,48,13,13,12,80,196,3,0,106,12,0,36,38,12,12,15,1,14,0,0,1,15,0,0,135,13,9,1,12,0,14,15,82,13,10,0,120,13,3,0,1,7,255,255,119,0,4,0,1,11,5,0,119,0,2,0,1,11,5,0,32,13,11,5,121,13,25,0,1,12,0,0,109,0,16,12,1,12,0,0,85,9,12,0,1,12,0,0,85,10,12,0,106,13,0,40,38,13,13,3,135,12,13,0,13,0,4,5,3,0,0,0,135,12,3,0,34,12,12,0,121,12,3,0,1,7,255,255,119,0,9,0,1,13,0,0,109,0,8,13,1,12,0,0,109,0,4,12,82,12,0,0,38,12,12,239,85,0,12,0,1,7,0,0,139,7,0,0,140,2,15,0,0,0,0,0,2,13,0,0,255,0,0,0,1,12,0,0,106,14,1,76,34,14,14,0,121,14,3,0,1,12,3,0,119,0,36,0,134,14,0,0,32,142,4,0,1,0,0,0,120,14,3,0,1,12,3,0,119,0,30,0,19,14,0,13,0,7,14,0,19,14,0,13,0,8,14,0,102,14,1,75,45,14,8,14,36,197,3,0,1,12,10,0,119,0,12,0,25,11,1,20,82,3,11,0,106,14,1,16,48,14,3,14,76,197,3,0,25,14,3,1,85,11,14,0,83,3,7,0,0,4,8,0,119,0,2,0,1,12,10,0,32,14,12,10,121,14,4,0,134,4,0,0,192,208,3,0,1,0,0,0,134,14,0,0,20,142,4,0,1,0,0,0,0,9,4,0,32,14,12,3,121,14,21,0,19,14,0,13,0,5,14,0,19,14,0,13,0,6,14,0,102,14,1,75,46,14,6,14,192,197,3,0,25,10,1,20,82,2,10,0,106,14,1,16,48,14,2,14,192,197,3,0,25,14,2,1,85,10,14,0,83,2,5,0,0,9,6,0,119,0,4,0,134,9,0,0,192,208,3,0,1,0,0,0,139,9,0,0,140,7,15,0,0,0,0,0,85,0,1,0,25,12,0,4,59,13,0,0,145,13,13,0,89,12,13,0,25,10,0,8,59,13,0,0,145,13,13,0,89,10,13,0,59,14,0,0,145,14,14,0,113,0,12,14,134,13,0,0,28,125,4,0,109,0,20,13,25,11,0,24,1,13,0,0,85,11,13,0,1,14,0,0,109,11,4,14,1,13,0,0,109,11,8,13,1,14,0,0,109,11,12,14,109,0,40,6,1,13,0,0,107,0,44,13,85,0,1,0,89,12,2,0,0,7,3,0,106,8,7,4,0,9,10,0,116,9,7,0,109,9,4,8,109,0,16,5,134,13,0,0,152,91,4,0,11,4,0,0,139,0,0,0,140,2,16,0,0,0,0,0,103,14,1,1,41,14,14,16,79,15,1,0,41,15,15,24,20,14,14,15,103,15,1,2,41,15,15,8,20,14,14,15,103,15,1,3,20,14,14,15,0,9,14,0,25,4,0,3,78,2,4,0,103,14,0,1,41,14,14,16,79,15,0,0,41,15,15,24,20,14,14,15,103,15,0,2,41,15,15,8,20,14,14,15,1,15,255,0,19,15,2,15,20,14,14,15,0,10,14,0,41,14,2,24,42,14,14,24,32,13,14,0,13,14,10,9,20,14,14,13,121,14,4,0,0,5,4,0,0,12,13,0,119,0,21,0,0,6,4,0,0,7,10,0,25,8,6,1,78,3,8,0,41,14,7,8,1,15,255,0,19,15,3,15,20,14,14,15,0,7,14,0,41,14,3,24,42,14,14,24,32,11,14,0,13,14,7,9,20,14,14,11,121,14,4,0,0,5,8,0,0,12,11,0,119,0,3,0,0,6,8,0,119,0,239,255,121,12,4,0,1,15,0,0,0,14,15,0,119,0,3,0,26,15,5,3,0,14,15,0,139,14,0,0,140,2,16,0,0,0,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,63,38,13,13,192,137,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,188,199,3,0,1,14,16,0,135,13,0,0,14,0,0,0,0,10,12,0,1,13,0,0,83,10,13,0,88,2,0,0,145,2,2,0,88,3,1,0,145,3,3,0,112,14,1,8,145,14,14,0,63,13,3,14,145,13,13,0,71,13,2,13,121,13,33,0,88,4,0,0,145,4,4,0,112,13,0,8,145,13,13,0,63,9,4,13,145,9,9,0,88,13,1,0,145,13,13,0,73,13,9,13,121,13,23,0,112,5,0,4,145,5,5,0,112,6,1,4,145,6,6,0,112,14,1,12,145,14,14,0,63,13,6,14,145,13,13,0,71,13,5,13,121,13,13,0,112,7,0,4,145,7,7,0,112,13,0,12,145,13,13,0,63,8,7,13,145,8,8,0,112,13,1,4,145,13,13,0,73,13,8,13,121,13,3,0,1,13,1,0,83,10,13,0,137,11,0,0,78,13,10,0,38,13,13,1,139,13,0,0,140,3,14,0,0,0,0,0,136,12,0,0,0,8,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,9,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,204,200,3,0,1,13,16,0,135,12,0,0,13,0,0,0,25,6,9,8,25,4,9,4,0,7,9,0,85,6,0,0,85,4,1,0,85,7,2,0,82,12,6,0,25,5,12,16,82,3,4,0,116,5,3,0,106,13,3,4,109,5,4,13,106,12,3,8,109,5,8,12,82,12,6,0,82,13,7,0,109,12,28,13,82,13,6,0,1,12,128,0,109,13,36,12,82,12,6,0,1,13,1,0,109,12,32,13,82,10,6,0,1,13,176,0,25,12,10,40,97,10,13,12,82,13,6,0,134,12,0,0,96,204,3,0,13,0,0,0,82,11,6,0,1,12,180,0,1,13,172,0,94,13,11,13,97,11,12,13,137,8,0,0,139,0,0,0,140,5,17,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,32,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,176,201,3,0,1,15,32,0,135,14,0,0,15,0,0,0,25,6,13,20,25,7,13,16,25,10,13,12,25,9,13,8,25,5,13,4,0,11,13,0,85,6,0,0,85,7,1,0,89,10,2,0,85,9,3,0,85,5,4,0,82,15,7,0,88,16,10,0,145,16,16,0,134,14,0,0,32,188,3,0,15,16,0,0,85,11,14,0,82,14,11,0,82,16,9,0,5,8,14,16,137,12,0,0,82,16,6,0,82,14,5,0,3,14,8,14,41,14,14,2,3,16,16,14,139,16,0,0,140,2,17,0,0,0,0,0,136,11,0,0,0,7,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,8,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,108,202,3,0,1,12,16,0,135,11,0,0,12,0,0,0,25,5,8,4,0,4,8,0,85,5,0,0,85,4,1,0,82,12,5,0,82,13,4,0,134,11,0,0,60,148,0,0,12,13,0,0,82,9,5,0,106,13,9,124,1,12,0,0,106,15,9,20,106,16,9,64,5,14,15,16,41,14,14,2,135,11,5,0,13,12,14,0,82,14,5,0,134,11,0,0,36,91,4,0,14,0,0,0,33,6,11,0,82,10,5,0,0,3,10,0,106,2,10,124,121,6,7,0,134,11,0,0,184,225,0,0,3,2,0,0,137,7,0,0,139,0,0,0,119,0,6,0,134,11,0,0,112,192,0,0,3,2,0,0,137,7,0,0,139,0,0,0,139,0,0,0,140,5,17,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,32,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,64,203,3,0,1,13,32,0,135,12,0,0,13,0,0,0,25,9,10,16,25,8,10,12,25,7,10,8,25,5,10,4,0,6,10,0,85,9,0,0,85,8,1,0,85,7,2,0,85,5,3,0,89,6,4,0,82,11,9,0,82,13,8,0,82,14,7,0,82,15,5,0,88,16,6,0,145,16,16,0,134,12,0,0,88,243,2,0,11,11,13,14,15,16,0,0,137,10,0,0,139,0,0,0,140,4,14,0,0,0,0,0,136,12,0,0,0,9,12,0,136,12,0,0,25,12,12,80,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,208,203,3,0,1,13,80,0,135,12,0,0,13,0,0,0,25,5,9,72,25,6,9,68,25,7,9,64,0,4,9,0,89,5,1,0,89,6,2,0,89,7,3,0,0,8,4,0,25,11,8,64,1,12,0,0,85,8,12,0,25,8,8,4,54,12,8,11,244,203,3,0,88,12,5,0,145,12,12,0,89,4,12,0,88,13,6,0,145,13,13,0,113,4,20,13,88,12,7,0,145,12,12,0,113,4,40,12,59,13,1,0,145,13,13,0,113,4,60,13,0,8,0,0,0,10,4,0,25,11,8,64,116,8,10,0,25,8,8,4,25,10,10,4,54,13,8,11,68,204,3,0,137,9,0,0,139,0,0,0,140,1,15,0,0,0,0,0,136,10,0,0,0,4,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,5,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,172,204,3,0,1,11,16,0,135,10,0,0,11,0,0,0,25,3,5,4,0,2,5,0,85,3,0,0,82,6,3,0,106,11,6,16,38,11,11,15,106,12,6,28,25,13,6,40,106,14,6,36,135,10,9,1,11,12,13,14,85,2,10,0,82,1,3,0,82,10,2,0,120,10,20,0,1,11,0,0,109,1,32,11,82,7,3,0,1,11,168,0,25,10,7,40,97,7,11,10,82,8,3,0,1,10,172,0,25,11,8,40,25,11,11,1,97,8,10,11,82,11,3,0,1,10,168,0,94,11,11,10,1,10,0,0,83,11,10,0,137,4,0,0,139,0,0,0,119,0,13,0,82,10,3,0,1,11,168,0,25,14,1,40,97,10,11,14,82,9,3,0,1,14,172,0,25,11,9,40,82,10,2,0,3,11,11,10,97,9,14,11,137,4,0,0,139,0,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,164,205,3,0,1,6,16,0,135,5,0,0,6,0,0,0,25,1,4,8,0,2,4,0,134,5,0,0,92,117,4,0,1,0,0,0,88,5,1,0,145,5,5,0,59,6,34,1,145,6,6,0,69,5,5,6,121,5,21,0,134,5,0,0,92,117,4,0,2,0,0,0,112,5,2,4,145,5,5,0,59,6,74,1,145,6,6,0,71,5,5,6,121,5,10,0,59,6,1,0,145,6,6,0,134,5,0,0,52,118,4,0,0,6,0,0,59,6,14,1,145,6,6,0,113,0,16,6,119,0,4,0,1,3,5,0,119,0,2,0,1,3,5,0,32,6,3,5,121,6,31,0,134,6,0,0,92,117,4,0,1,0,0,0,88,6,1,0,145,6,6,0,59,5,244,1,145,5,5,0,69,6,6,5,121,6,13,0,59,5,255,255,145,5,5,0,134,6,0,0,52,118,4,0,0,5,0,0,59,5,90,0,145,5,5,0,113,0,16,5,134,5,0,0,92,117,4,0,1,0,0,0,119,0,10,0,59,6,1,0,145,6,6,0,134,5,0,0,104,118,4,0,0,6,0,0,59,6,0,0,145,6,6,0,113,0,16,6,119,0,1,0,137,4,0,0,139,0,0,0,140,2,16,0,0,0,0,0,103,14,1,1,41,14,14,16,79,15,1,0,41,15,15,24,20,14,14,15,103,15,1,2,41,15,15,8,20,14,14,15,0,10,14,0,25,4,0,2,78,2,4,0,103,14,0,1,41,14,14,16,79,15,0,0,41,15,15,24,20,14,14,15,1,15,255,0,19,15,2,15,41,15,15,8,20,14,14,15,0,9,14,0,41,14,2,24,42,14,14,24,32,13,14,0,13,14,9,10,20,14,14,13,121,14,4,0,0,5,4,0,0,12,13,0,119,0,21,0,0,6,4,0,0,7,9,0,25,8,6,1,78,3,8,0,1,14,255,0,19,14,3,14,20,14,7,14,41,14,14,8,0,7,14,0,41,14,3,24,42,14,14,24,32,11,14,0,13,14,7,10,20,14,14,11,121,14,4,0,0,5,8,0,0,12,11,0,119,0,3,0,0,6,8,0,119,0,239,255,121,12,4,0,1,15,0,0,0,14,15,0,119,0,3,0,26,15,5,2,0,14,15,0,139,14,0,0,140,1,13,0,0,0,0,0,1,5,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,232,207,3,0,1,9,16,0,135,8,0,0,9,0,0,0,0,4,7,0,85,4,0,0,1,8,1,0,82,9,4,0,106,9,9,8,22,8,8,9,82,9,4,0,106,9,9,12,50,8,8,9,24,208,3,0,1,5,3,0,119,0,29,0,82,9,4,0,134,8,0,0,36,43,4,0,9,0,0,0,1,9,255,0,19,8,8,9,0,2,8,0,82,8,4,0,25,1,8,12,82,8,1,0,82,9,4,0,106,9,9,8,22,9,2,9,20,8,8,9,85,1,8,0,82,8,4,0,25,3,8,8,82,8,3,0,25,8,8,8,85,3,8,0,1,8,24,0,82,9,4,0,106,9,9,8,47,8,8,9,132,208,3,0,1,5,5,0,119,0,2,0,119,0,219,255,32,8,5,3,121,8,8,0,1,9,240,66,1,10,1,63,1,11,124,15,1,12,21,67,135,8,1,0,9,10,11,12,119,0,5,0,32,8,5,5,121,8,3,0,137,6,0,0,139,0,0,0,139,0,0,0,140,2,17,0,0,0,0,0,1,11,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,16,209,3,0,1,15,16,0,135,14,0,0,15,0,0,0,0,5,13,0,1,14,255,0,19,14,1,14,0,6,14,0,83,5,6,0,25,9,0,16,82,2,9,0,120,2,10,0,134,14,0,0,168,82,4,0,0,0,0,0,120,14,4,0,82,4,9,0,1,11,4,0,119,0,5,0,1,8,255,255,119,0,3,0,0,4,2,0,1,11,4,0,32,14,11,4,121,14,26,0,25,10,0,20,82,3,10,0,48,14,3,4,160,209,3,0,1,14,255,0,19,14,1,14,0,7,14,0,102,14,0,75,46,14,7,14,160,209,3,0,25,14,3,1,85,10,14,0,83,3,6,0,0,8,7,0,119,0,11,0,106,15,0,36,38,15,15,15,1,16,1,0,135,14,9,1,15,0,5,16,32,14,14,1,121,14,3,0,79,8,5,0,119,0,2,0,1,8,255,255,137,12,0,0,139,8,0,0,140,6,21,0,0,0,0,0,136,16,0,0,0,14,16,0,136,16,0,0,25,16,16,63,38,16,16,192,137,16,0,0,0,15,16,0,136,16,0,0,25,16,16,48,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,28,210,3,0,1,17,48,0,135,16,0,0,17,0,0,0,25,11,15,40,25,12,15,36,25,13,15,32,25,7,15,28,25,9,15,24,25,10,15,20,0,8,15,0,85,11,0,0,85,12,1,0,85,13,2,0,85,7,3,0,85,9,4,0,85,10,5,0,116,8,11,0,82,16,12,0,82,17,13,0,82,18,7,0,82,19,9,0,82,20,10,0,134,6,0,0,32,164,2,0,8,16,17,18,19,20,0,0,137,14,0,0,139,6,0,0,140,4,10,0,0,0,0,0,25,5,1,16,82,4,5,0,120,4,6,0,85,5,2,0,109,1,24,3,1,9,1,0,109,1,36,9,119,0,17,0,46,9,4,2,212,210,3,0,25,6,1,36,82,9,6,0,25,9,9,1,85,6,9,0,1,8,2,0,109,1,24,8,1,9,1,0,107,1,54,9,119,0,6,0,25,7,1,24,82,9,7,0,32,9,9,2,121,9,2,0,85,7,3,0,139,0,0,0,140,1,11,0,0,0,0,0,136,9,0,0,0,3,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,4,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,56,211,3,0,1,10,16,0,135,9,0,0,10,0,0,0,25,1,4,4,0,2,4,0,85,1,0,0,82,5,1,0,82,9,1,0,79,9,9,0,103,10,5,1,41,10,10,8,3,9,9,10,103,10,5,2,41,10,10,16,3,9,9,10,85,2,9,0,82,9,2,0,82,10,2,0,41,10,10,3,21,9,9,10,85,2,9,0,82,6,2,0,43,9,6,5,3,9,6,9,85,2,9,0,82,9,2,0,82,10,2,0,41,10,10,4,21,9,9,10,85,2,9,0,82,7,2,0,43,9,7,17,3,9,7,9,85,2,9,0,82,9,2,0,82,10,2,0,41,10,10,25,21,9,9,10,85,2,9,0,82,8,2,0,43,9,8,6,3,9,8,9,85,2,9,0,137,3,0,0,82,9,2,0,139,9,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,6,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,7,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,48,212,3,0,1,10,16,0,135,9,0,0,10,0,0,0,25,4,7,8,25,5,7,4,0,3,7,0,85,4,0,0,85,5,1,0,82,8,5,0,82,10,4,0,82,10,10,0,1,11,0,0,4,11,11,8,3,10,10,11,26,10,10,4,25,11,8,4,134,9,0,0,40,19,4,0,10,11,0,0,85,3,9,0,82,9,4,0,82,9,9,0,82,11,3,0,43,11,11,24,83,9,11,0,82,11,4,0,82,11,11,0,82,9,3,0,43,9,9,16,107,11,1,9,82,9,4,0,82,9,9,0,82,11,3,0,43,11,11,8,107,9,2,11,82,11,4,0,82,11,11,0,82,9,3,0,107,11,3,9,82,2,4,0,82,9,2,0,25,9,9,4,85,2,9,0,137,6,0,0,139,0,0,0,140,0,8,0,0,0,0,0,2,3,0,0,0,220,1,0,2,4,0,0,24,255,1,0,82,4,4,0,27,4,4,48,94,3,3,4,36,3,3,0,121,3,2,0,139,0,0,0,2,3,0,0,214,4,2,0,78,3,3,0,38,3,3,1,121,3,15,0,2,4,0,0,40,255,1,0,82,4,4,0,38,4,4,31,2,5,0,0,0,220,1,0,2,6,0,0,24,255,1,0,82,6,6,0,27,6,6,48,3,5,5,6,106,5,5,28,135,3,224,0,4,5,0,0,2,4,0,0,146,136,0,0,2,5,0,0,0,220,1,0,2,6,0,0,24,255,1,0,82,6,6,0,27,6,6,48,3,5,5,6,106,5,5,32,135,3,225,0,4,5,0,0,2,3,0,0,0,220,1,0,2,5,0,0,24,255,1,0,82,5,5,0,27,5,5,48,3,0,3,5,2,3,0,0,146,136,0,0,1,4,0,0,82,6,0,0,27,6,6,12,106,7,0,12,135,5,34,1,3,4,6,7,2,7,0,0,146,136,0,0,2,6,0,0,0,220,1,0,2,4,0,0,24,255,1,0,82,4,4,0,27,4,4,48,3,6,6,4,25,6,6,32,106,6,6,4,135,5,225,0,7,6,0,0,2,5,0,0,0,220,1,0,2,6,0,0,24,255,1,0,82,6,6,0,27,6,6,48,3,1,5,6,2,5,0,0,146,136,0,0,1,7,0,0,82,4,1,0,41,4,4,3,106,3,1,16,135,6,34,1,5,7,4,3,2,3,0,0,146,136,0,0,2,4,0,0,0,220,1,0,2,7,0,0,24,255,1,0,82,7,7,0,27,7,7,48,3,4,4,7,25,4,4,32,106,4,4,8,135,6,225,0,3,4,0,0,2,6,0,0,0,220,1,0,2,4,0,0,24,255,1,0,82,4,4,0,27,4,4,48,3,2,6,4,2,6,0,0,146,136,0,0,1,3,0,0,82,7,2,0,41,7,7,2,106,5,2,20,135,4,34,1,6,3,7,5,2,4,0,0,214,4,2,0,78,4,4,0,38,4,4,1,120,4,2,0,139,0,0,0,2,5,0,0,40,255,1,0,82,5,5,0,38,5,5,31,1,7,0,0,135,4,224,0,5,7,0,0,139,0,0,0,140,4,13,0,0,0,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,32,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,16,215,3,0,1,11,32,0,135,10,0,0,11,0,0,0,25,5,9,16,25,8,9,12,25,4,9,8,25,7,9,4,0,6,9,0,85,5,0,0,85,8,1,0,85,4,2,0,85,7,3,0,1,10,0,0,85,6,10,0,82,10,7,0,82,11,6,0,57,10,10,11,164,215,3,0,82,11,8,0,82,12,4,0,134,10,0,0,60,186,3,0,11,12,0,0,82,10,4,0,43,10,10,1,85,4,10,0,82,10,8,0,106,10,10,4,1,12,255,0,45,10,10,12,148,215,3,0,82,12,5,0,82,11,8,0,134,10,0,0,184,48,4,0,12,11,0,0,82,10,6,0,25,10,10,1,85,6,10,0,119,0,231,255,137,9,0,0,139,0,0,0,140,3,13,0,0,0,0,0,2,9,0,0,78,128,0,0,136,10,0,0,0,7,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,236,215,3,0,1,11,16,0,135,10,0,0,11,0,0,0,25,4,7,8,25,6,7,4,0,5,7,0,109,7,12,0,85,4,1,0,85,6,2,0,134,10,0,0,144,86,4,0,2,10,0,0,56,1,2,0,82,12,4,0,41,12,12,2,135,11,10,0,12,0,0,0,85,10,11,0,1,11,0,0,85,5,11,0,82,11,4,0,82,10,5,0,56,11,11,10,160,216,3,0,1,11,0,2,135,3,10,0,11,0,0,0,2,11,0,0,56,1,2,0,82,11,11,0,82,10,5,0,41,10,10,2,97,11,10,3,82,10,5,0,41,10,10,2,0,8,10,0,2,11,0,0,56,1,2,0,82,11,11,0,94,11,11,8,82,12,6,0,94,12,12,8,135,10,24,0,11,12,0,0,82,10,5,0,25,10,10,1,85,5,10,0,119,0,229,255,2,10,0,0,60,1,2,0,82,12,4,0,85,10,12,0,137,7,0,0,139,0,0,0,140,3,13,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,32,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,4,217,3,0,1,10,32,0,135,9,0,0,10,0,0,0,25,5,8,16,25,4,8,8,0,6,8,0,89,6,1,0,88,3,6,0,145,3,3,0,116,4,0,0,106,10,0,4,109,4,4,10,78,10,2,0,83,5,10,0,102,9,2,1,107,5,1,9,102,10,2,2,107,5,2,10,102,9,2,3,107,5,3,9,1,10,0,0,1,11,104,1,1,12,36,0,134,9,0,0,172,89,1,0,4,3,10,11,12,5,0,0,137,7,0,0,139,0,0,0,140,1,9,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,5,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,184,217,3,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,5,4,0,2,5,0,85,2,0,0,82,7,2,0,120,7,7,0,1,7,254,255,85,3,7,0,82,1,3,0,137,4,0,0,139,1,0,0,119,0,30,0,82,6,2,0,106,8,6,100,38,8,8,63,135,7,247,0,8,6,0,0,82,8,2,0,25,8,8,16,134,7,0,0,84,96,4,0,8,0,0,0,82,8,2,0,25,8,8,48,134,7,0,0,84,96,4,0,8,0,0,0,82,8,2,0,106,8,8,92,134,7,0,0,160,113,4,0,8,0,0,0,82,8,2,0,134,7,0,0,56,84,4,0,8,0,0,0,1,7,0,0,85,3,7,0,82,1,3,0,137,4,0,0,139,1,0,0,1,7,0,0,139,7,0,0,140,3,16,0,0,0,0,0,120,2,3,0,1,12,0,0,119,0,44,0,78,4,0,0,41,13,4,24,42,13,13,24,120,13,4,0,1,3,0,0,0,10,1,0,119,0,33,0,0,6,4,0,0,8,0,0,0,9,2,0,0,11,1,0,26,9,9,1,78,5,11,0,41,13,6,24,42,13,13,24,41,14,5,24,42,14,14,24,13,13,13,14,33,14,9,0,41,15,5,24,42,15,15,24,33,15,15,0,19,14,14,15,19,13,13,14,120,13,4,0,0,3,6,0,0,10,11,0,119,0,12,0,25,8,8,1,25,7,11,1,78,6,8,0,41,13,6,24,42,13,13,24,120,13,4,0,1,3,0,0,0,10,7,0,119,0,3,0,0,11,7,0,119,0,229,255,1,13,255,0,19,13,3,13,79,14,10,0,4,12,13,14,139,12,0,0,140,3,13,0,0,0,0,0,1,7,0,0,136,10,0,0,0,8,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,116,219,3,0,1,11,16,0,135,10,0,0,11,0,0,0,25,3,9,12,25,4,9,8,25,6,9,4,0,5,9,0,85,3,0,0,85,4,1,0,85,6,2,0,1,10,0,0,85,5,10,0,82,11,5,0,82,12,6,0,47,11,11,12,188,219,3,0,82,11,5,0,1,12,2,1,15,11,11,12,0,10,11,0,119,0,3,0,1,11,0,0,0,10,11,0,120,10,3,0,1,7,5,0,119,0,15,0,82,10,3,0,82,11,5,0,91,10,10,11,82,11,4,0,82,12,5,0,91,11,11,12,46,10,10,11,248,219,3,0,1,7,5,0,119,0,5,0,82,10,5,0,25,10,10,1,85,5,10,0,119,0,229,255,32,10,7,5,121,10,4,0,137,8,0,0,82,10,5,0,139,10,0,0,1,10,0,0,139,10,0,0,140,3,11,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,112,220,3,0,1,10,16,0,135,9,0,0,10,0,0,0,0,6,8,0,1,9,239,255,48,9,9,2,140,220,3,0,134,9,0,0,244,134,4,0,0,0,0,0,35,9,2,11,121,9,4,0,107,0,11,2,0,3,0,0,119,0,14,0,25,9,2,16,38,9,9,240,0,4,9,0,134,5,0,0,116,104,4,0,4,0,0,0,85,0,5,0,2,10,0,0,0,0,0,128,20,10,4,10,109,0,8,10,109,0,4,2,0,3,5,0,134,10,0,0,96,122,4,0,3,1,2,0,1,10,0,0,83,6,10,0,3,9,3,2,134,10,0,0,240,127,4,0,9,6,0,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,5,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,76,221,3,0,1,8,16,0,135,7,0,0,8,0,0,0,25,2,5,4,0,3,5,0,85,3,0,0,82,7,3,0,106,7,7,16,121,7,23,0,82,8,3,0,25,8,8,16,106,8,8,8,38,8,8,63,82,9,3,0,106,9,9,28,135,7,247,0,8,9,0,0,120,7,6,0,1,7,0,0,85,2,7,0,82,1,2,0,137,4,0,0,139,1,0,0,82,7,3,0,106,7,7,32,120,7,6,0,1,7,1,0,85,2,7,0,82,1,2,0,137,4,0,0,139,1,0,0,82,6,3,0,1,7,172,0,94,7,6,7,1,8,168,0,94,8,6,8,18,7,7,8,38,7,7,1,85,2,7,0,82,1,2,0,137,4,0,0,139,1,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,52,222,3,0,1,10,16,0,135,9,0,0,10,0,0,0,25,5,8,4,0,4,8,0,85,5,0,0,85,4,1,0,82,10,5,0,82,11,4,0,134,9,0,0,60,148,0,0,10,11,0,0,82,11,5,0,134,9,0,0,36,91,4,0,11,0,0,0,33,6,9,0,82,2,5,0,82,9,5,0,82,11,4,0,134,3,0,0,108,76,3,0,9,11,0,0,121,6,7,0,134,11,0,0,184,225,0,0,2,3,0,0,137,7,0,0,139,0,0,0,119,0,6,0,134,11,0,0,112,192,0,0,2,3,0,0,137,7,0,0,139,0,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,7,0,0,136,10,0,0,0,8,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,8,223,3,0,1,11,16,0,135,10,0,0,11,0,0,0,25,4,9,8,25,6,9,4,0,5,9,0,85,4,1,0,1,10,63,0,85,6,10,0,1,10,0,0,85,5,10,0,106,10,0,4,82,11,5,0,49,10,10,11,64,223,3,0,1,7,6,0,119,0,12,0,82,2,5,0,106,10,0,32,82,11,5,0,27,11,11,36,94,10,10,11,82,11,4,0,52,10,10,11,108,223,3,0,25,10,2,1,85,5,10,0,119,0,240,255,32,10,7,6,121,10,4,0,82,3,6,0,137,8,0,0,139,3,0,0,85,6,2,0,82,3,6,0,137,8,0,0,139,3,0,0,140,0,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,32,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,200,223,3,0,1,5,32,0,135,4,0,0,5,0,0,0,25,2,3,24,25,1,3,4,0,0,3,0,1,4,255,255,85,0,4,0,2,4,0,0,48,254,1,0,82,4,4,0,85,1,4,0,2,5,0,0,52,254,1,0,82,5,5,0,109,1,4,5,2,4,0,0,56,254,1,0,82,4,4,0,109,1,8,4,2,5,0,0,60,254,1,0,82,5,5,0,109,1,12,5,2,4,0,0,64,254,1,0,82,4,4,0,109,1,16,4,78,4,0,0,83,2,4,0,102,5,0,1,107,2,1,5,102,4,0,2,107,2,2,4,102,5,0,3,107,2,3,5,1,4,0,0,1,6,0,0,134,5,0,0,192,84,3,0,1,4,6,2,137,3,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,6,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,184,224,3,0,1,10,16,0,135,9,0,0,10,0,0,0,25,4,8,8,25,5,8,4,0,3,8,0,85,5,0,0,1,9,0,0,85,3,9,0,1,9,8,0,82,10,3,0,49,9,9,10,232,224,3,0,1,6,6,0,119,0,19,0,82,10,5,0,134,9,0,0,52,185,3,0,10,0,0,0,1,10,255,0,19,9,9,10,0,2,9,0,1,9,95,68,82,10,3,0,91,9,9,10,46,9,2,9,32,225,3,0,1,6,4,0,119,0,5,0,82,9,3,0,25,9,9,1,85,3,9,0,119,0,233,255,32,9,6,4,121,9,10,0,1,10,224,67,134,9,0,0,40,112,4,0,10,0,0,0,85,4,9,0,82,1,4,0,137,7,0,0,139,1,0,0,119,0,8,0,32,9,6,6,121,9,6,0,1,9,1,0,85,4,9,0,82,1,4,0,137,7,0,0,139,1,0,0,1,9,0,0,139,9,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,204,225,3,0,1,10,16,0,135,9,0,0,10,0,0,0,25,6,8,8,25,4,8,4,0,3,8,0,85,6,0,0,85,4,1,0,82,9,6,0,106,9,9,8,82,10,4,0,47,9,9,10,4,226,3,0,82,10,6,0,134,9,0,0,152,207,3,0,10,0,0,0,82,9,6,0,106,9,9,12,1,10,1,0,82,11,4,0,22,10,10,11,26,10,10,1,19,9,9,10,85,3,9,0,82,9,6,0,25,2,9,12,82,9,2,0,82,10,4,0,24,9,9,10,85,2,9,0,82,9,6,0,25,5,9,8,82,9,5,0,82,10,4,0,4,9,9,10,85,5,9,0,137,7,0,0,82,9,3,0,139,9,0,0,140,3,15,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,172,226,3,0,1,12,16,0,135,11,0,0,12,0,0,0,25,8,10,12,25,4,10,8,25,6,10,4,0,5,10,0,85,4,0,0,85,6,1,0,85,5,2,0,82,12,4,0,82,13,6,0,82,14,5,0,134,11,0,0,0,20,4,0,12,13,14,0,121,11,14,0,82,11,4,0,82,14,6,0,5,7,11,14,82,11,5,0,3,11,7,11,134,14,0,0,184,110,4,0,11,0,0,0,85,8,14,0,82,3,8,0,137,9,0,0,139,3,0,0,119,0,6,0,1,14,0,0,85,8,14,0,82,3,8,0,137,9,0,0,139,3,0,0,1,14,0,0,139,14,0,0,140,5,18,0,0,0,0,0,136,14,0,0,0,12,14,0,136,14,0,0,25,14,14,63,38,14,14,192,137,14,0,0,0,13,14,0,136,14,0,0,1,15,208,0,3,14,14,15,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,132,227,3,0,1,15,208,0,135,14,0,0,15,0,0,0,1,14,200,0,3,7,13,14,1,14,196,0,3,10,13,14,1,14,192,0,3,11,13,14,1,14,188,0,3,6,13,14,1,14,184,0,3,8,13,14,0,9,13,0,85,7,0,0,85,10,1,0,85,11,2,0,85,6,3,0,85,8,4,0,82,15,7,0,134,14,0,0,232,98,4,0,9,15,0,0,82,14,10,0,82,15,11,0,82,16,6,0,82,17,8,0,134,5,0,0,84,40,3,0,9,14,15,16,17,0,0,0,137,12,0,0,139,5,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,3,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,72,228,3,0,1,7,16,0,135,6,0,0,7,0,0,0,0,2,4,0,85,2,0,0,82,7,2,0,82,7,7,0,1,8,140,0,3,7,7,8,106,7,7,20,38,7,7,63,82,8,2,0,25,8,8,4,135,6,247,0,7,8,0,0,82,1,2,0,82,6,2,0,25,6,6,4,106,6,6,76,120,6,12,0,82,6,2,0,25,5,6,4,82,7,1,0,1,8,140,0,3,7,7,8,106,7,7,36,38,7,7,3,25,8,5,28,135,6,35,1,7,8,5,0,119,0,241,255,25,6,1,4,1,7,0,0,109,6,76,7,82,6,2,0,82,6,6,0,1,8,140,0,3,6,6,8,106,6,6,24,38,6,6,63,82,8,2,0,25,8,8,4,135,7,247,0,6,8,0,0,137,3,0,0,1,7,1,0,139,7,0,0,140,2,12,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,68,229,3,0,1,10,16,0,135,9,0,0,10,0,0,0,0,6,8,0,1,10,121,85,78,11,1,0,134,9,0,0,176,124,4,0,10,11,0,0,120,9,7,0,134,9,0,0,120,142,4,0,1,11,28,0,85,9,11,0,1,5,0,0,119,0,31,0,134,11,0,0,216,43,4,0,1,0,0,0,2,9,0,0,0,128,0,0,20,11,11,9,0,4,11,0,85,6,0,0,109,6,4,4,1,9,182,1,109,6,8,9,1,11,5,0,135,9,36,1,11,6,0,0,134,2,0,0,244,121,4,0,9,0,0,0,34,9,2,0,121,9,3,0,1,5,0,0,119,0,10,0,134,3,0,0,220,50,3,0,2,1,0,0,120,3,5,0,135,9,37,1,2,0,0,0,1,5,0,0,119,0,2,0,0,5,3,0,137,7,0,0,139,5,0,0,140,3,14,0,0,0,0,0,136,10,0,0,0,8,10,0,136,10,0,0,25,10,10,63,38,10,10,192,137,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,68,230,3,0,1,11,16,0,135,10,0,0,11,0,0,0,25,7,9,12,25,4,9,8,25,6,9,4,0,5,9,0,85,4,0,0,85,6,1,0,85,5,2,0,1,10,0,0,82,11,6,0,49,10,10,11,144,230,3,0,82,10,6,0,82,11,5,0,47,10,10,11,144,230,3,0,116,7,6,0,82,3,7,0,137,8,0,0,139,3,0,0,82,11,4,0,82,12,6,0,82,13,5,0,134,10,0,0,220,29,3,0,11,12,13,0,85,7,10,0,82,3,7,0,137,8,0,0,139,3,0,0,140,2,16,0,0,0,0,0,1,12,255,3,47,12,12,1,68,231,3,0,62,12,0,0,0,0,0,0,0,0,224,127,65,7,0,12,1,12,254,7,15,5,12,1,1,12,254,7,4,10,1,12,121,5,8,0,1,14,255,3,15,14,10,14,1,15,255,3,125,13,14,10,15,0,0,0,0,12,13,0,119,0,4,0,1,13,255,3,4,13,1,13,0,12,13,0,0,9,12,0,121,5,7,0,62,13,0,0,0,0,0,0,0,0,224,127,65,13,7,13,58,12,13,0,119,0,2,0,58,12,7,0,58,11,12,0,119,0,36,0,1,12,2,252,47,12,1,12,200,231,3,0,62,12,0,0,0,0,0,0,0,0,16,0,65,8,0,12,1,12,4,248,15,6,1,12,1,12,252,7,3,4,1,12,121,6,8,0,1,15,2,252,15,15,15,4,1,14,2,252,125,13,15,4,14,0,0,0,0,12,13,0,119,0,4,0,1,13,254,3,3,13,1,13,0,12,13,0,0,9,12,0,121,6,7,0,62,13,0,0,0,0,0,0,0,0,16,0,65,13,8,13,58,12,13,0,119,0,2,0,58,12,8,0,58,11,12,0,119,0,3,0,0,9,1,0,58,11,0,0,1,12,255,3,3,12,9,12,1,13,0,0,1,14,52,0,135,2,6,0,12,13,14,0,135,3,3,0,127,14,0,0,85,14,2,0,127,14,0,0,109,14,4,3,127,14,0,0], eb + 245760);
  HEAPU8.set([86,14,14,0,65,14,11,14,139,14,0,0,140,4,16,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,88,232,3,0,1,12,16,0,135,11,0,0,12,0,0,0,25,7,10,12,25,5,10,8,25,6,10,4,0,8,10,0,85,7,0,0,85,5,1,0,85,6,2,0,85,8,3,0,1,11,0,0,82,12,7,0,82,13,5,0,82,14,6,0,82,15,8,0,134,4,0,0,172,180,3,0,11,12,13,14,15,0,0,0,137,9,0,0,139,4,0,0,140,1,14,0,0,0,0,0,1,9,0,0,25,8,0,20,25,7,0,28,82,10,7,0,82,11,8,0,48,10,10,11,248,232,3,0,106,11,0,36,38,11,11,15,1,12,0,0,1,13,0,0,135,10,9,1,11,0,12,13,82,10,8,0,120,10,3,0,1,4,255,255,119,0,4,0,1,9,3,0,119,0,2,0,1,9,3,0,32,10,9,3,121,10,29,0,25,5,0,4,82,1,5,0,25,3,0,8,82,2,3,0,48,10,1,2,72,233,3,0,4,6,1,2,106,11,0,40,38,11,11,3,34,13,6,0,41,13,13,31,42,13,13,31,1,12,1,0,135,10,13,0,11,0,6,13,12,0,0,0,135,10,3,0,1,11,0,0,109,0,16,11,1,11,0,0,85,7,11,0,1,11,0,0,85,8,11,0,1,11,0,0,85,3,11,0,1,11,0,0,85,5,11,0,1,4,0,0,139,4,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,32,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,176,233,3,0,1,8,32,0,135,7,0,0,8,0,0,0,0,5,6,0,25,3,6,16,25,4,6,8,85,3,1,0,1,7,44,38,82,7,7,0,85,4,7,0,1,8,48,38,82,8,8,0,109,4,4,8,82,8,3,0,34,8,8,10,121,8,10,0,2,8,0,0,48,220,1,0,82,7,3,0,41,7,7,3,3,2,8,7,116,4,2,0,106,8,2,4,109,4,4,8,119,0,8,0,1,8,10,0,85,5,8,0,1,7,4,0,1,9,244,54,134,8,0,0,48,143,3,0,7,9,5,0,116,0,4,0,106,9,4,4,109,0,4,9,137,6,0,0,139,0,0,0,140,1,12,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,132,234,3,0,1,9,16,0,135,8,0,0,9,0,0,0,25,5,7,4,0,4,7,0,89,4,0,0,88,8,4,0,145,8,8,0,62,9,0,0,26,195,59,192,220,181,164,63,145,9,9,0,72,3,8,9,88,1,4,0,145,1,1,0,121,3,14,0,62,8,0,0,42,162,203,64,10,215,41,64,145,8,8,0,66,9,1,8,145,9,9,0,89,5,9,0,88,2,5,0,145,2,2,0,137,6,0,0,145,9,2,0,139,9,0,0,119,0,24,0,62,11,0,0,45,167,251,191,245,40,172,63,145,11,11,0,63,10,1,11,145,10,10,0,62,11,0,0,148,129,168,160,71,225,240,63,145,11,11,0,66,8,10,11,145,8,8,0,61,11,0,0,154,153,25,64,135,9,17,0,8,11,0,0,145,9,9,0,89,5,9,0,88,2,5,0,145,2,2,0,137,6,0,0,145,9,2,0,139,9,0,0,59,9,0,0,145,9,9,0,139,9,0,0,140,1,12,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,160,235,3,0,1,9,16,0,135,8,0,0,9,0,0,0,25,5,7,4,0,4,7,0,89,4,0,0,88,8,4,0,145,8,8,0,62,9,0,0,8,79,230,127,195,165,105,63,145,9,9,0,72,3,8,9,88,1,4,0,145,1,1,0,121,3,14,0,62,8,0,0,42,162,203,64,10,215,41,64,145,8,8,0,65,9,1,8,145,9,9,0,89,5,9,0,88,2,5,0,145,2,2,0,137,6,0,0,145,9,2,0,139,9,0,0,119,0,24,0,61,11,0,0,85,85,213,62,135,10,17,0,1,11,0,0,145,10,10,0,62,11,0,0,148,129,168,160,71,225,240,63,145,11,11,0,65,8,10,11,145,8,8,0,62,11,0,0,45,167,251,191,245,40,172,63,145,11,11,0,64,9,8,11,145,9,9,0,89,5,9,0,88,2,5,0,145,2,2,0,137,6,0,0,145,9,2,0,139,9,0,0,59,9,0,0,145,9,9,0,139,9,0,0,140,2,13,0,0,0,0,0,127,9,0,0,87,9,0,0,127,9,0,0,82,2,9,0,127,9,0,0,106,3,9,4,1,9,52,0,135,4,16,0,2,3,9,0,135,9,3,0,1,9,255,7,19,9,4,9,1,11,0,0,1,10,0,8,138,9,11,10,252,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,180,12,4,0,68,13,4,0,1,10,255,7,19,10,4,10,1,11,254,3,4,10,10,11,85,1,10,0,127,10,0,0,85,10,2,0,127,10,0,0,2,11,0,0,255,255,15,128,19,11,3,11,2,12,0,0,0,0,224,63,20,11,11,12,109,10,4,11,127,11,0,0,86,6,11,0,119,0,21,0,59,10,0,0,70,10,0,10,121,10,11,0,61,10,0,0,0,0,128,95,65,10,0,10,134,5,0,0,112,236,3,0,10,1,0,0,82,10,1,0,26,7,10,64,58,8,5,0,119,0,3,0,1,7,0,0,58,8,0,0,85,1,7,0,58,6,8,0,119,0,3,0,58,6,0,0,119,0,1,0,139,6,0,0,140,2,12,0,0,0,0,0,136,10,0,0,0,7,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,136,13,4,0,1,11,16,0,135,10,0,0,11,0,0,0,25,5,7,4,0,6,7,0,89,5,0,0,89,6,1,0,88,2,5,0,145,2,2,0,2,10,0,0,0,220,1,0,2,11,0,0,24,255,1,0,82,11,11,0,27,11,11,48,3,8,10,11,106,11,8,16,106,10,8,4,41,10,10,1,41,10,10,2,101,11,10,2,88,3,6,0,145,3,3,0,2,10,0,0,0,220,1,0,2,11,0,0,24,255,1,0,82,11,11,0,27,11,11,48,3,9,10,11,106,11,9,16,106,10,9,4,41,10,10,1,25,10,10,1,41,10,10,2,101,11,10,3,2,10,0,0,0,220,1,0,2,11,0,0,24,255,1,0,82,11,11,0,27,11,11,48,3,10,10,11,25,4,10,4,82,10,4,0,25,10,10,1,85,4,10,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,140,14,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,3,7,12,25,5,7,8,25,4,7,4,0,2,7,0,85,2,0,0,82,8,2,0,120,8,7,0,1,8,0,0,85,4,8,0,82,1,4,0,137,6,0,0,139,1,0,0,119,0,12,0,116,3,2,0,82,8,3,0,25,8,8,12,116,5,8,0,82,8,5,0,33,8,8,0,38,8,8,1,85,4,8,0,82,1,4,0,137,6,0,0,139,1,0,0,1,8,0,0,139,8,0,0,140,2,6,0,0,0,0,0,78,2,1,0,41,5,2,24,42,5,5,24,120,5,3,0,0,4,0,0,119,0,47,0,41,5,2,24,42,5,5,24,134,3,0,0,176,124,4,0,0,5,0,0,120,3,3,0,1,4,0,0,119,0,39,0,102,5,1,1,120,5,3,0,0,4,3,0,119,0,35,0,102,5,3,1,120,5,3,0,1,4,0,0,119,0,31,0,102,5,1,2,120,5,5,0,134,4,0,0,240,36,4,0,3,1,0,0,119,0,25,0,102,5,3,2,120,5,3,0,1,4,0,0,119,0,21,0,102,5,1,3,120,5,5,0,134,4,0,0,172,206,3,0,3,1,0,0,119,0,15,0,102,5,3,3,120,5,3,0,1,4,0,0,119,0,11,0,102,5,1,4,120,5,5,0,134,4,0,0,116,198,3,0,3,1,0,0,119,0,5,0,134,4,0,0,40,202,1,0,3,1,0,0,119,0,1,0,139,4,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0], eb + 256000);
  HEAPU8.set([130,7,0,0,136,8,0,0,49,7,7,8,28,16,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,6,8,25,4,6,4,89,4,0,0,89,6,1,0,88,8,4,0,145,8,8,0,135,7,9,0,8,0,0,0,145,7,7,0,89,4,7,0,88,7,4,0,145,7,7,0,59,8,1,0,145,8,8,0,72,7,7,8,121,7,14,0,59,8,1,0,145,8,8,0,88,9,4,0,145,9,9,0,64,7,8,9,145,7,7,0,89,3,7,0,88,2,3,0,145,2,2,0,137,5,0,0,145,7,2,0,139,7,0,0,119,0,9,0,59,7,0,0,145,7,7,0,89,3,7,0,88,2,3,0,145,2,2,0,137,5,0,0,145,7,2,0,139,7,0,0,59,7,0,0,145,7,7,0,139,7,0,0,140,1,10,0,0,0,0,0,1,4,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,12,17,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,6,4,0,2,6,0,85,3,0,0,1,7,0,0,85,2,7,0,1,7,0,4,82,8,2,0,49,7,7,8,56,17,4,0,1,4,6,0,119,0,23,0,82,7,3,0,82,8,2,0,90,7,7,8,120,7,2,0,119,0,18,0,82,8,3,0,82,9,2,0,90,8,8,9,134,7,0,0,240,131,4,0,8,0,0,0,1,8,255,0,19,7,7,8,0,1,7,0,2,7,0,0,0,245,1,0,82,8,2,0,95,7,8,1,82,8,2,0,25,8,8,1,85,2,8,0,119,0,229,255,32,8,4,6,121,8,5,0,137,5,0,0,2,8,0,0,0,245,1,0,139,8,0,0,2,8,0,0,0,245,1,0,82,7,2,0,1,9,0,0,95,8,7,9,137,5,0,0,2,9,0,0,0,245,1,0,139,9,0,0,140,2,18,0,0,0,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,4,18,4,0,1,13,16,0,135,12,0,0,13,0,0,0,0,8,11,0,88,2,0,0,145,2,2,0,88,12,1,0,145,12,12,0,64,9,2,12,145,9,9,0,88,3,0,0,145,3,3,0,88,13,1,0,145,13,13,0,64,12,3,13,145,12,12,0,65,7,9,12,145,7,7,0,112,4,0,4,145,4,4,0,112,12,1,4,145,12,12,0,64,10,4,12,145,10,10,0,112,5,0,4,145,5,5,0,112,16,1,4,145,16,16,0,64,15,5,16,145,15,15,0,65,14,10,15,145,14,14,0,63,13,7,14,145,13,13,0,135,12,237,0,13,0,0,0,145,12,12,0,89,8,12,0,88,6,8,0,145,6,6,0,137,11,0,0,145,12,6,0,139,12,0,0,140,3,13,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,240,18,4,0,1,10,16,0,135,9,0,0,10,0,0,0,25,5,8,8,25,4,8,4,0,6,8,0,85,5,0,0,85,4,1,0,85,6,2,0,82,9,5,0,82,11,4,0,82,12,6,0,5,10,11,12,41,10,10,2,3,3,9,10,137,7,0,0,139,3,0,0,140,2,14,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,116,19,4,0,1,10,16,0,135,9,0,0,10,0,0,0,25,3,8,12,25,6,8,8,25,4,8,4,0,5,8,0,85,3,0,0,85,6,1,0,1,9,255,255,85,4,9,0,1,9,0,0,85,5,9,0,82,2,4,0,82,9,6,0,82,10,5,0,56,9,9,10,244,19,4,0,43,9,2,8,1,10,128,20,82,11,3,0,82,12,5,0,91,11,11,12,82,12,4,0,1,13,255,0,19,12,12,13,21,11,11,12,41,11,11,2,94,10,10,11,21,9,9,10,85,4,9,0,82,9,5,0,25,9,9,1,85,5,9,0,119,0,235,255,137,7,0,0,11,9,2,0,139,9,0,0,140,3,14,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,76,20,4,0,1,12,16,0,135,11,0,0,12,0,0,0,25,4,10,8,25,6,10,4,0,5,10,0,85,4,0,0,85,6,1,0,85,5,2,0,82,12,4,0,82,13,6,0,134,11,0,0,8,42,4,0,12,13,0,0,120,11,6,0,1,3,0,0,38,11,3,1,0,7,11,0,137,9,0,0,139,7,0,0,82,11,4,0,82,13,6,0,5,8,11,13,82,11,5,0,134,13,0,0,248,45,4,0,8,11,0,0,33,3,13,0,38,13,3,1,0,7,13,0,137,9,0,0,139,7,0,0,140,1,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,252,20,4,0,1,8,16,0,135,7,0,0,8,0,0,0,0,2,6,0,25,3,6,4,85,2,0,0,1,7,0,0,83,3,7,0,2,7,0,0,228,4,2,0,82,8,2,0,90,7,7,8,2,8,0,0,231,4,2,0,82,9,2,0,90,8,8,9,46,7,7,8,88,21,4,0,2,7,0,0,228,4,2,0,82,8,2,0,90,7,7,8,33,7,7,1,121,7,4,0,1,5,3,0,119,0,2,0,1,5,3,0,32,7,5,3,121,7,11,0,1,8,1,0,134,7,0,0,208,94,4,0,8,0,0,0,120,7,6,0,78,1,3,0,38,7,1,1,0,4,7,0,137,6,0,0,139,4,0,0,1,7,1,0,83,3,7,0,78,1,3,0,38,7,1,1,0,4,7,0,137,6,0,0,139,4,0,0,140,2,12,0,0,0,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,224,21,4,0,1,9,16,0,135,8,0,0,9,0,0,0,0,5,7,0,112,2,1,4,145,2,2,0,112,8,0,4,145,8,8,0,64,6,2,8,145,6,6,0,88,3,1,0,145,3,3,0,88,11,0,0,145,11,11,0,64,10,3,11,145,10,10,0,134,9,0,0,84,160,2,0,6,10,0,0,145,9,9,0,62,10,0,0,72,183,111,255,219,165,76,64,145,10,10,0,65,8,9,10,145,8,8,0,89,5,8,0,88,8,5,0,145,8,8,0,59,10,0,0,145,10,10,0,71,8,8,10,120,8,6,0,88,4,5,0,145,4,4,0,137,7,0,0,145,8,4,0,139,8,0,0,88,10,5,0,145,10,10,0,59,9,104,1,145,9,9,0,63,8,10,9,145,8,8,0,89,5,8,0,88,4,5,0,145,4,4,0,137,7,0,0,145,8,4,0,139,8,0,0,140,0,8,0,0,0,0,0,136,5,0,0,0,2,5,0,136,5,0,0,25,5,5,64,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,212,22,4,0,1,6,64,0,135,5,0,0,6,0,0,0,0,0,2,0,1,5,0,0,2,6,0,0,204,254,1,0,82,6,6,0,47,5,5,6,112,23,4,0,0,1,0,0,2,5,0,0,0,212,1,0,2,6,0,0,204,254,1,0,82,6,6,0,26,6,6,1,41,6,6,6,3,3,5,6,25,4,1,64,116,1,3,0,25,1,1,4,25,3,3,4,54,6,1,4,24,23,4,0,2,6,0,0,136,254,1,0,82,1,6,0,0,3,0,0,25,4,1,64,116,1,3,0,25,1,1,4,25,3,3,4,54,6,1,4,64,23,4,0,2,6,0,0,204,254,1,0,2,5,0,0,204,254,1,0,82,5,5,0,26,5,5,1,85,6,5,0,2,5,0,0,204,254,1,0,82,5,5,0,32,5,5,0,1,6,32,38,82,6,6,0,1,7,0,23,13,6,6,7,19,5,5,6,120,5,3,0,137,2,0,0,139,0,0,0,2,5,0,0,136,254,1,0,2,6,0,0,140,254,1,0,85,5,6,0,2,6,0,0,213,4,2,0,1,5,0,0,83,6,5,0,137,2,0,0,139,0,0,0,140,1,10,0,0,0,0,0,135,9,23,0,0,0,0,0,25,9,9,1,135,1,10,0,9,0,0,0,135,9,24,0,1,0,0,0,1,9,21,99,134,5,0,0,244,14,4,0,1,9,0,0,121,5,3,0,1,9,0,0,83,5,9,0,1,9,25,99,134,6,0,0,244,14,4,0,1,9,0,0,121,6,3,0,1,9,0,0,83,6,9,0,1,9,29,99,134,7,0,0,244,14,4,0,1,9,0,0,121,7,3,0,1,9,0,0,83,7,9,0,1,9,33,99,134,2,0,0,244,14,4,0,1,9,0,0,121,2,3,0,1,9,0,0,83,2,9,0,1,9,39,99,134,3,0,0,244,14,4,0,1,9,0,0,121,3,3,0,1,9,0,0,83,3,9,0,134,4,0,0,0,38,1,0,1,0,0,0,120,4,5,0,134,8,0,0,8,183,3,0,1,0,0,0,119,0,2,0,0,8,4,0,135,9,7,0,1,0,0,0,139,8,0,0,140,1,12,0,0,0,0,0,1,10,255,255,106,11,0,76,47,10,10,11,212,24,4,0,134,7,0,0,32,142,4,0,0,0,0,0,119,0,2,0,1,7,0,0,134,10,0,0,108,109,4,0,0,0,0,0,82,10,0,0,38,10,10,1,33,9,10,0,120,9,17,0,134,5,0,0,120,141,4,0,106,2,0,52,25,1,0,56,121,2,3,0,82,11,1,0,109,2,56,11,82,3,1,0,121,3,2,0,109,3,52,2,82,11,5,0,45,11,11,0,44,25,4,0,85,5,3,0,134,11,0,0,204,141,4,0,134,6,0,0,220,165,3,0,0,0,0,0,106,10,0,12,38,10,10,63,135,11,247,0,10,0,0,0,20,11,11,6,0,8,11,0,106,4,0,96,121,4,3,0,135,11,7,0,4,0,0,0,121,9,6,0,121,7,7,0,134,11,0,0,20,142,4,0,0,0,0,0,119,0,3,0,135,11,7,0,0,0,0,0,139,8,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,196,25,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,4,5,8,25,3,5,4,0,2,5,0,85,3,0,0,1,6,0,0,85,2,6,0,82,6,3,0,121,6,7,0,82,7,3,0,1,8,149,57,134,6,0,0,176,46,4,0,7,8,0,0,85,2,6,0,82,6,2,0,121,6,11,0,82,6,2,0,82,8,3,0,46,6,6,8,44,26,4,0,82,6,2,0,25,6,6,1,85,4,6,0,82,1,4,0,137,5,0,0,139,1,0,0,116,4,3,0,82,1,4,0,137,5,0,0,139,1,0,0,140,3,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,1,7,16,1,3,6,6,7,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,120,26,4,0,1,7,16,1,135,6,0,0,7,0,0,0,1,6,12,1,3,3,5,6,0,4,5,0,85,3,0,0,1,6,8,1,97,5,6,1,1,6,4,1,97,5,6,2,82,6,3,0,32,6,6,4,121,6,16,0,1,6,0,0,121,6,14,0,135,6,38,1,4,0,0,0,82,6,4,0,121,6,5,0,135,6,39,1,135,6,38,1,4,0,0,0,119,0,6,0,1,7,0,0,1,8,1,0,135,6,40,1,7,8,0,0,119,0,1,0,137,5,0,0,1,6,0,0,139,6,0,0,140,1,9,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,36,27,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,6,12,25,5,6,8,25,4,6,4,0,2,6,0,85,2,0,0,82,7,2,0,120,7,7,0,1,7,0,0,85,4,7,0,82,1,4,0,137,6,0,0,139,1,0,0,119,0,12,0,116,3,2,0,82,7,3,0,25,7,7,12,116,5,7,0,82,7,5,0,32,7,7,2,38,7,7,1,85,4,7,0,82,1,4,0,137,6,0,0,139,1,0,0,1,7,0,0,139,7,0,0,140,1,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,32,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,196,27,4,0,1,8,32,0,135,7,0,0,8,0,0,0,25,3,6,8,25,4,6,24,0,5,6,0,106,1,0,40,25,8,0,28,134,7,0,0,44,80,4,0,3,8,0,0,134,7,0,0,92,117,4,0,4,0,0,0,88,2,4,0,145,2,2,0,134,7,0,0,92,117,4,0,5,0,0,0,112,8,5,4,145,8,8,0,134,7,0,0,140,215,2,0,1,3,2,8,134,7,0,0,204,117,4,0,3,0,0,0,137,6,0,0,139,0,0,0,140,2,14,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,100,28,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,4,4,0,2,4,0,85,3,0,0,85,2,1,0,2,7,0,0,40,1,2,0,82,8,3,0,85,7,8,0,2,8,0,0,44,1,2,0,82,7,2,0,85,8,7,0,2,7,0,0,48,1,2,0,82,5,7,0,2,7,0,0,52,1,2,0,82,6,7,0,28,8,5,2,28,9,6,2,2,10,0,0,40,1,2,0,82,10,10,0,4,10,10,5,2,11,0,0,44,1,2,0,82,11,11,0,4,11,11,6,134,7,0,0,140,57,4,0,8,9,10,11,1,11,1,23,134,7,0,0,216,101,4,0,11,0,0,0,134,7,0,0,92,101,4,0,59,11,0,0,2,10,0,0,40,1,2,0,82,10,10,0,76,10,10,0,2,9,0,0,44,1,2,0,82,9,9,0,76,9,9,0,59,8,0,0,59,12,0,0,59,13,1,0,134,7,0,0,180,67,3,0,11,10,9,8,12,13,0,0,1,13,0,23,134,7,0,0,216,101,4,0,13,0,0,0,134,7,0,0,92,101,4,0,137,4,0,0,139,0,0,0,140,4,12,0,0,0,0,0,102,5,0,11,41,10,5,24,42,10,10,24,34,9,10,0,121,9,3,0,106,6,0,4,119,0,4,0,1,10,255,0,19,10,5,10,0,6,10,0,48,10,6,3,156,29,4,0,134,10,0,0,228,134,4,0,0,0,0,0,4,8,6,3,16,10,8,2,125,4,10,8,2,0,0,0,121,9,3,0,82,7,0,0,119,0,2,0,0,7,0,0,3,11,7,3,134,10,0,0,96,122,4,0,1,11,4,0,139,4,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,28,30,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,20,38,5,5,63,82,6,1,0,25,6,6,4,135,4,247,0,5,6,0,0,82,4,1,0,25,4,4,4,1,5,1,0,109,4,76,5,82,4,1,0,82,4,4,0,1,6,140,0,3,4,4,6,106,4,4,40,38,4,4,63,82,6,1,0,25,6,6,4,25,6,6,28,135,5,247,0,4,6,0,0,82,4,1,0,82,4,4,0,1,6,140,0,3,4,4,6,106,4,4,24,38,4,4,63,82,6,1,0,25,6,6,4,135,5,247,0,4,6,0,0,137,2,0,0,1,5,1,0,139,5,0,0,140,5,17,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,1,13,0,1,3,12,12,13,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,12,31,4,0,1,13,0,1,135,12,0,0,13,0,0,0,0,8,11,0,15,12,3,2,2,13,0,0,0,32,1,0,19,13,4,13,32,13,13,0,19,12,12,13,121,12,33,0,4,9,2,3,41,13,1,24,42,13,13,24,1,15,0,1,16,15,9,15,1,16,0,1,125,14,15,9,16,0,0,0,135,12,5,0,8,13,14,0,1,12,255,0,48,12,12,9,156,31,4,0,4,5,2,3,0,7,9,0,1,14,0,1,134,12,0,0,196,130,4,0,0,8,14,0,1,12,0,1,4,7,7,12,1,12,255,0,55,12,12,7,104,31,4,0,1,12,255,0,19,12,5,12,0,6,12,0,119,0,2,0,0,6,9,0,134,12,0,0,196,130,4,0,0,8,6,0,137,10,0,0,139,0,0,0,140,2,11,0,0,0,0,0,59,9,0,0,145,9,9,0,69,9,0,9,59,10,0,0,145,10,10,0,69,10,1,10,19,9,9,10,121,9,4,0,59,6,0,0,145,6,6,0,119,0,45,0,145,9,0,0,135,3,9,0,9,0,0,0,145,3,3,0,59,9,0,0,145,9,9,0,74,9,1,9,120,9,12,0,62,2,0,0,222,30,132,128,124,217,2,64,145,2,2,0,63,9,3,1,145,9,9,0,64,10,3,1,145,10,10,0,66,5,9,10,145,5,5,0,119,0,11,0,62,2,0,0,80,53,221,95,251,33,233,63,145,2,2,0,64,10,1,3,145,10,10,0,63,9,3,1,145,9,9,0,66,5,10,9,145,5,5,0,62,10,0,0,80,53,221,95,251,33,233,63,145,10,10,0,65,9,5,10,145,9,9,0,64,8,2,9,145,8,8,0,59,9,0,0,145,9,9,0,71,4,0,9,68,7,8,0,145,7,7,0,126,6,4,7,8,0,0,0,145,9,6,0,139,9,0,0,140,0,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,216,32,4,0,1,4,16,0,135,3,0,0,4,0,0,0,25,1,2,4,0,0,2,0,134,3,0,0,228,132,0,0,134,3,0,0,244,52,4,0,1,3,245,255,83,0,3,0,1,4,245,255,107,0,1,4,1,3,245,255,107,0,2,3,1,4,255,255,107,0,3,4,78,4,0,0,83,1,4,0,102,3,0,1,107,1,1,3,102,4,0,2,107,1,2,4,102,3,0,3,107,1,3,3,134,3,0,0,60,121,4,0,1,0,0,0,134,3,0,0,204,118,1,0,134,3,0,0,92,208,2,0,137,2,0,0,139,0,0,0,140,2,12,0,0,0,0,0,120,0,4,0,135,5,10,0,1,0,0,0,139,5,0,0,1,7,191,255,48,7,7,1,144,33,4,0,134,7,0,0,120,142,4,0,1,8,48,0,85,7,8,0,1,5,0,0,139,5,0,0,26,8,0,8,35,9,1,11,121,9,4,0,1,9,16,0,0,7,9,0,119,0,4,0,25,9,1,11,38,9,9,248,0,7,9,0,134,4,0,0,80,234,1,0,8,7,0,0,121,4,3,0,25,5,4,8,139,5,0,0,135,3,10,0,1,0,0,0,120,3,3,0,1,5,0,0,139,5,0,0,26,7,0,4,82,2,7,0,38,7,2,248,38,9,2,3,32,9,9,0,1,10,8,0,1,11,4,0,125,8,9,10,11,0,0,0,4,6,7,8,16,11,6,1,125,7,11,6,1,0,0,0,135,8,2,0,3,0,7,0,135,8,7,0,0,0,0,0,0,5,3,0,139,5,0,0,140,5,15,0,0,0,0,0,136,12,0,0,0,10,12,0,136,12,0,0,25,12,12,63,38,12,12,192,137,12,0,0,0,11,12,0,136,12,0,0,1,13,144,0,3,12,12,13,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,124,34,4,0,1,13,144,0,135,12,0,0,13,0,0,0,0,8,11,0,1,12,0,0,85,8,12,0,25,9,8,4,85,9,0,0,109,8,44,0,25,5,8,8,34,13,0,0,121,13,4,0,1,13,255,255,0,12,13,0,119,0,5,0,2,13,0,0,255,255,255,127,3,13,0,13,0,12,13,0,85,5,12,0,1,13,255,255,109,8,76,13,1,12,0,0,1,14,0,0,134,13,0,0,168,69,4,0,8,12,14,0,1,13,1,0,134,6,0,0,152,28,1,0,8,2,13,3,4,0,0,0,135,7,3,0,121,1,8,0,82,13,9,0,106,14,8,120,3,13,13,14,82,14,5,0,4,13,13,14,3,13,0,13,85,1,13,0,135,13,12,0,7,0,0,0,137,10,0,0,139,6,0,0,140,2,11,0,0,0,0,0,59,9,0,0,145,9,9,0,69,9,0,9,59,10,0,0,145,10,10,0,69,10,1,10,19,9,9,10,121,9,4,0,59,6,0,0,145,6,6,0,119,0,45,0,145,9,0,0,135,3,9,0,9,0,0,0,145,3,3,0,59,9,0,0,145,9,9,0,74,9,1,9,120,9,12,0,62,2,0,0,222,30,132,128,124,217,2,64,145,2,2,0,63,9,3,1,145,9,9,0,64,10,3,1,145,10,10,0,66,5,9,10,145,5,5,0,119,0,11,0,62,2,0,0,80,53,221,95,251,33,233,63,145,2,2,0,64,10,1,3,145,10,10,0,63,9,3,1,145,9,9,0,66,5,10,9,145,5,5,0,62,10,0,0,80,53,221,95,251,33,233,63,145,10,10,0,65,9,5,10,145,9,9,0,64,8,2,9,145,8,8,0,59,9,0,0,145,9,9,0,71,4,0,9,68,7,8,0,145,7,7,0,126,6,4,7,8,0,0,0,145,9,6,0,139,9,0,0,140,1,10,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,32,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,72,36,4,0,1,7,32,0,135,6,0,0,7,0,0,0,25,2,5,16,25,3,5,8,0,4,5,0,89,2,0,0,1,6,0,0,85,3,6,0,1,7,0,0,109,3,4,7,88,6,2,0,145,6,6,0,59,8,232,3,145,8,8,0,66,7,6,8,145,7,7,0,75,7,7,0,85,4,7,0,82,7,4,0,1,8,232,3,5,1,7,8,76,8,1,0,145,1,8,0,88,7,2,0,145,7,7,0,64,8,7,1,145,8,8,0,89,2,8,0,116,3,4,0,88,6,2,0,145,6,6,0,60,9,0,0,64,66,15,0,145,9,9,0,65,7,6,9,145,7,7,0,75,7,7,0,109,3,4,7,135,7,41,1,3,3,0,0,32,7,7,255,120,7,253,255,137,5,0,0,139,0,0,0,140,2,15,0,0,0,0,0,2,11,0,0,255,0,0,0,2,12,0,0,255,255,0,0,79,13,1,0,41,13,13,8,103,14,1,1,20,13,13,14,0,10,13,0,25,5,0,1,78,2,5,0,41,13,2,24,42,13,13,24,120,13,3,0,1,4,0,0,119,0,25,0,0,7,5,0,79,13,0,0,41,13,13,8,19,14,2,11,20,13,13,14,0,8,13,0,19,13,8,12,0,6,13,0,52,13,6,10,148,37,4,0,25,9,7,1,78,3,9,0,41,13,3,24,42,13,13,24,120,13,3,0,1,4,0,0,119,0,8,0,0,7,9,0,41,13,6,8,19,14,3,11,20,13,13,14,0,8,13,0,119,0,240,255,26,4,7,1,139,4,0,0,140,2,11,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,232,37,4,0,1,10,16,0,135,9,0,0,10,0,0,0,25,4,8,8,25,5,8,4,0,6,8,0,85,4,0,0,85,5,1,0,1,9,0,0,85,6,9,0,82,2,5,0,26,9,2,1,85,5,9,0,82,3,6,0,120,2,2,0,119,0,10,0,41,9,3,1,82,10,4,0,38,10,10,1,20,9,9,10,85,6,9,0,82,9,4,0,42,9,9,1,85,4,9,0,119,0,242,255,137,7,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,132,38,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,1,4,4,0,2,4,0,85,1,0,0,1,5,0,0,85,2,5,0,82,5,1,0,1,6,0,0,1,7,4,0,138,5,6,7,188,38,4,0,204,38,4,0,212,38,4,0,220,38,4,0,119,0,11,0,1,6,1,0,85,2,6,0,1,3,3,0,119,0,7,0,1,3,3,0,119,0,5,0,1,3,4,0,119,0,3,0,1,3,5,0,119,0,1,0,32,5,3,3,121,5,4,0,1,5,2,0,85,2,5,0,1,3,4,0,32,5,3,4,121,5,4,0,1,5,3,0,85,2,5,0,1,3,5,0,32,5,3,5,121,5,3,0,1,5,3,0,85,2,5,0,137,4,0,0,82,5,2,0,139,5,0,0,140,2,12,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,116,39,4,0,1,9,32,0,135,8,0,0,9,0,0,0,25,5,7,20,25,4,7,16,0,3,7,0,85,5,0,0,2,8,0,0,0,223,1,0,2,9,0,0,132,2,2,0,82,9,9,0,41,9,9,10,3,8,8,9,85,4,8,0,85,3,1,0,82,9,4,0,82,10,5,0,134,8,0,0,32,131,4,0,9,10,3,0,2,8,0,0,132,2,2,0,82,8,8,0,25,2,8,1,2,8,0,0,132,2,2,0,85,8,2,0,2,8,0,0,132,2,2,0,1,9,4,0,2,11,0,0,132,2,2,0,82,11,11,0,17,9,9,11,1,11,0,0,125,10,9,11,2,0,0,0,85,8,10,0,137,6,0,0,82,10,4,0,139,10,0,0,140,1,12,0,0,0,0,0,25,4,0,74,78,3,4,0,1,8,255,0,3,8,3,8,20,8,8,3,83,4,8,0,25,7,0,20,25,6,0,28,82,8,6,0,82,9,7,0,48,8,8,9,96,40,4,0,106,9,0,36,38,9,9,15,1,10,0,0,1,11,0,0,135,8,9,1,9,0,10,11,1,9,0,0,109,0,16,9,1,9,0,0,85,6,9,0,1,9,0,0,85,7,9,0,82,1,0,0,38,9,1,4,120,9,10,0,106,9,0,44,106,8,0,48,3,2,9,8,109,0,8,2,109,0,4,2,41,8,1,27,42,8,8,31,0,5,8,0,119,0,4,0,39,8,1,32,85,0,8,0,1,5,255,255,139,5,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,3,6,0,136,6,0,0,25,6,6,64,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,240,40,4,0,1,7,64,0,135,6,0,0,7,0,0,0,0,1,3,0,0,2,1,0,25,5,2,64,1,6,0,0,85,2,6,0,25,2,2,4,54,6,2,5,252,40,4,0,59,6,1,0,145,6,6,0,89,1,6,0,59,7,1,0,145,7,7,0,113,1,20,7,59,6,1,0,145,6,6,0,113,1,40,6,59,7,1,0,145,7,7,0,113,1,60,7,0,2,0,0,0,4,1,0,25,5,2,64,116,2,4,0,25,2,2,4,25,4,4,4,54,7,2,5,76,41,4,0,137,3,0,0,139,0,0,0,140,1,10,0,0,0,0,0,82,7,0,0,134,1,0,0,0,124,4,0,7,0,0,0,82,7,1,0,82,7,7,0,38,7,7,63,135,4,247,0,7,1,0,0,82,7,4,0,106,7,7,8,38,7,7,63,135,5,247,0,7,4,0,0,82,7,5,0,106,7,7,12,38,7,7,63,135,6,247,0,7,5,0,0,82,7,6,0,106,7,7,4,38,7,7,63,135,2,247,0,7,6,0,0,82,7,2,0,106,7,7,16,38,7,7,63,135,3,247,0,7,2,0,0,82,9,3,0,106,9,9,20,38,9,9,63,135,8,247,0,9,3,0,0,134,7,0,0,32,137,4,0,8,0,0,0,139,7,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,84,42,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,4,6,8,25,2,6,4,0,3,6,0,85,2,0,0,85,3,1,0,82,7,2,0,34,7,7,0,82,8,3,0,34,8,8,0,20,7,7,8,121,7,4,0,1,7,0,0,85,4,7,0,119,0,15,0,82,7,3,0,120,7,4,0,1,7,1,0,85,4,7,0,119,0,10,0,82,7,2,0,2,8,0,0,255,255,255,127,82,9,3,0,6,8,8,9,17,7,7,8,38,7,7,1,85,4,7,0,119,0,1,0,137,5,0,0,82,7,4,0,139,7,0,0,140,6,9,0,0,0,0,0,106,8,1,8,134,7,0,0,220,114,4,0,0,8,5,0,121,7,7,0,1,8,0,0,134,7,0,0,20,134,3,0,8,1,2,3,4,0,0,0,119,0,8,0,106,6,0,8,82,8,6,0,106,8,8,20,38,8,8,3,135,7,251,0,8,6,1,2,3,4,5,0,139,0,0,0,140,1,10,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,112,43,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,4,7,4,0,5,7,0,85,5,0,0,82,8,5,0,106,8,8,4,82,9,5,0,82,9,9,0,50,8,8,9,172,43,4,0,1,8,0,0,83,4,8,0,78,3,4,0,137,6,0,0,139,3,0,0,119,0,10,0,82,1,5,0,82,2,1,0,25,8,2,1,85,1,8,0,78,8,2,0,83,4,8,0,78,3,4,0,137,6,0,0,139,3,0,0,1,8,0,0,139,8,0,0,140,1,13,0,0,0,0,0,1,12,43,0,134,11,0,0,176,124,4,0,0,12,0,0,32,7,11,0,78,1,0,0,41,11,1,24,42,11,11,24,0,10,11,0,121,7,5,0,33,12,10,114,38,12,12,1,0,11,12,0,119,0,3,0,1,12,2,0,0,11,12,0,0,2,11,0,1,12,120,0,134,11,0,0,176,124,4,0,0,12,0,0,32,9,11,0,121,9,3,0,0,11,2,0,119,0,4,0,1,12,128,0,20,12,2,12,0,11,12,0,0,5,11,0,1,12,101,0,134,11,0,0,176,124,4,0,0,12,0,0,32,8,11,0,121,8,3,0,0,11,5,0,119,0,5,0,2,12,0,0,0,0,8,0,20,12,5,12,0,11,12,0,0,3,11,0,32,12,10,114,121,12,3,0,0,11,3,0,119,0,3,0,39,12,3,64,0,11,12,0,0,6,11,0,32,12,10,119,121,12,5,0,1,12,0,2,20,12,6,12,0,11,12,0,119,0,2,0,0,11,6,0,0,4,11,0,32,12,10,97,121,12,5,0,1,12,0,4,20,12,4,12,0,11,12,0,119,0,2,0,0,11,4,0,139,11,0,0,140,3,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,28,45,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,8,25,4,5,4,85,3,0,0,85,4,1,0,85,5,2,0,82,6,3,0,33,6,6,1,121,6,4,0,137,5,0,0,1,6,0,0,139,6,0,0,82,7,4,0,25,7,7,32,1,8,103,55,134,6,0,0,144,58,4,0,7,8,0,0,121,6,4,0,137,5,0,0,1,6,0,0,139,6,0,0,135,6,39,1,137,5,0,0,1,6,0,0,139,6,0,0,140,4,12,0,0,0,0,0,82,4,2,0,0,5,0,0,4,10,1,0,42,10,10,2,0,6,10,0,120,6,2,0,119,0,21,0,43,10,6,1,0,9,10,0,41,10,9,2,3,7,5,10,82,10,7,0,16,8,10,4,121,8,4,0,25,11,7,4,0,10,11,0,119,0,2,0,0,10,5,0,0,5,10,0,121,8,5,0,26,11,6,1,4,11,11,9,0,10,11,0,119,0,2,0,0,10,9,0,0,6,10,0,119,0,235,255,139,5,0,0,140,2,11,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,68,46,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,5,7,8,25,3,7,4,0,4,7,0,85,3,0,0,85,4,1,0,82,8,4,0,34,8,8,0,121,8,7,0,1,8,0,0,85,5,8,0,82,2,5,0,137,6,0,0,139,2,0,0,119,0,12,0,82,8,3,0,2,9,0,0,255,255,255,127,82,10,4,0,4,9,9,10,17,8,8,9,38,8,8,1,85,5,8,0,82,2,5,0,137,6,0,0,139,2,0,0,1,8,0,0,139,8,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,232,46,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,5,6,8,25,3,6,4,0,4,6,0,85,5,0,0,85,3,1,0,1,7,0,0,85,4,7,0,82,8,5,0,82,9,3,0,134,7,0,0,236,124,4,0,8,9,0,0,85,5,7,0,82,7,5,0,120,7,2,0,119,0,6,0,82,2,5,0,25,7,2,1,85,5,7,0,85,4,2,0,119,0,243,255,137,6,0,0,82,7,4,0,139,7,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,148,47,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,2,5,4,0,3,5,0,89,3,0,0,88,6,3,0,145,6,6,0,59,7,0,0,145,7,7,0,71,6,6,7,121,6,5,0,59,6,0,0,145,6,6,0,89,2,6,0,119,0,15,0,88,6,3,0,145,6,6,0,59,7,1,0,145,7,7,0,73,6,6,7,121,6,5,0,59,6,1,0,145,6,6,0,89,2,6,0,119,0,5,0,88,6,3,0,145,6,6,0,89,2,6,0,119,0,1,0,88,1,2,0,145,1,1,0,137,4,0,0,145,6,1,0,139,6,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,76,48,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,4,5,8,25,3,5,4,0,2,5,0,85,3,0,0,82,7,3,0,1,8,46,0,134,6,0,0,124,134,4,0,7,8,0,0,85,2,6,0,82,6,2,0,121,6,11,0,82,6,2,0,82,8,3,0,46,6,6,8,164,48,4,0,82,6,2,0,25,6,6,1,85,4,6,0,82,1,4,0,137,5,0,0,139,1,0,0,1,6,0,0,85,4,6,0,82,1,4,0,137,5,0,0,139,1,0,0,140,2,11,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,240,48,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,2,4,4,0,3,4,0,85,2,0,0,85,3,1,0,82,7,3,0,106,7,7,4,82,8,2,0,134,6,0,0,192,196,3,0,7,8,0,0,82,5,3,0,25,8,5,8,1,7,1,0,106,9,5,4,82,10,2,0,134,6,0,0,4,58,4,0,8,7,9,10,82,6,3,0,1,10,0,0,83,6,10,0,82,10,3,0,1,6,0,0,107,10,1,6,82,6,3,0,1,10,0,0,109,6,4,10,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,176,49,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,2,5,0,0,170,170,0,0,19,4,4,5,42,4,4,1,82,5,1,0,1,6,85,85,19,5,5,6,41,5,5,1,20,4,4,5,85,1,4,0,82,4,1,0,2,5,0,0,204,204,0,0,19,4,4,5,42,4,4,2,82,5,1,0,1,6,51,51,19,5,5,6,41,5,5,2,20,4,4,5,85,1,4,0,82,4,1,0,2,5,0,0,240,240,0,0,19,4,4,5,42,4,4,4,82,5,1,0,1,6,15,15,19,5,5,6,41,5,5,4,20,4,4,5,85,1,4,0,82,4,1,0,2,5,0,0,0,255,0,0,19,4,4,5,42,4,4,8,82,5,1,0,1,6,255,0,19,5,5,6,41,5,5,8,20,4,4,5,85,1,4,0,137,2,0,0,82,4,1,0,139,4,0,0,140,1,8,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,172,50,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,2,3,0,106,1,0,4,1,4,0,0,85,2,4,0,1,5,0,0,109,2,4,5,1,4,0,0,109,2,8,4,1,5,206,39,1,7,206,39,134,6,0,0,252,136,4,0,7,0,0,0,134,4,0,0,36,220,3,0,2,5,6,0,134,4,0,0,240,153,3,0,1,2,0,0,134,4,0,0,204,117,4,0,2,0,0,0,137,3,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,68,51,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,2,3,0,106,1,0,4,1,4,0,0,85,2,4,0,1,5,0,0,109,2,4,5,1,4,0,0,109,2,8,4,1,5,206,39,1,7,206,39,134,6,0,0,252,136,4,0,7,0,0,0,134,4,0,0,36,220,3,0,2,5,6,0,134,4,0,0,240,153,3,0,1,2,0,0,134,4,0,0,204,117,4,0,2,0,0,0,137,3,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,220,51,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,2,3,0,106,1,0,4,1,4,0,0,85,2,4,0,1,5,0,0,109,2,4,5,1,4,0,0,109,2,8,4,1,5,206,39,1,7,206,39,134,6,0,0,252,136,4,0,7,0,0,0,134,4,0,0,36,220,3,0,2,5,6,0,134,4,0,0,240,153,3,0,1,2,0,0,134,4,0,0,204,117,4,0,2,0,0,0,137,3,0,0,139,0,0,0,140,1,14,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,116,52,4,0,1,10,16,0,135,9,0,0,10,0,0,0,0,7,8,0,88,1,0,0,145,1,1,0,88,9,0,0,145,9,9,0,65,6,1,9,145,6,6,0,112,2,0,4,145,2,2,0,112,10,0,4,145,10,10,0,65,9,2,10,145,9,9,0,63,5,6,9,145,5,5,0,112,3,0,8,145,3,3,0,112,12,0,8,145,12,12,0,65,11,3,12,145,11,11,0,63,10,5,11,145,10,10,0,135,9,237,0,10,0,0,0,145,9,9,0,89,7,9,0,88,4,7,0,145,4,4,0,137,8,0,0,145,9,4,0,139,9,0,0,140,0,9,0,0,0,0,0,136,6,0,0,0,3,6,0,136,6,0,0,1,7,128,0,3,6,6,7,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,48,53,4,0,1,7,128,0,135,6,0,0,7,0,0,0,25,0,3,64,0,1,3,0,2,6,0,0,56,253,1,0,134,7,0,0,88,142,4,0,87,6,7,0,2,7,0,0,64,253,1,0,2,6,0,0,56,253,1,0,86,6,6,0,2,8,0,0,40,253,1,0,86,8,8,0,64,6,6,8,87,7,6,0,2,6,0,0,40,253,1,0,2,7,0,0,56,253,1,0,86,7,7,0,87,6,7,0,134,7,0,0,92,101,4,0,0,2,0,0,2,4,0,0,216,0,2,0,25,5,2,64,116,2,4,0,25,2,2,4,25,4,4,4,54,7,2,5,164,53,4,0,134,7,0,0,148,100,3,0,1,0,0,0,134,7,0,0,12,240,2,0,1,0,0,0,137,3,0,0,139,0,0,0,140,4,15,0,0,0,0,0,136,11,0,0,0,9,11,0,136,11,0,0,25,11,11,63,38,11,11,192,137,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,36,54,4,0,1,12,16,0,135,11,0,0,12,0,0,0,0,8,10,0,106,13,0,60,1,14,255,0,19,14,3,14,135,12,42,1,13,1,2,14,8,0,0,0,134,11,0,0,0,121,4,0,12,0,0,0,120,11,5,0,0,7,8,0,106,5,7,4,82,6,7,0,119,0,8,0,0,4,8,0,1,11,255,255,85,4,11,0,1,12,255,255,109,4,4,12,1,5,255,255,1,6,255,255,135,12,12,0,5,0,0,0,137,9,0,0,139,6,0,0,140,2,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,216,54,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,134,5,0,0,208,55,4,0,2,0,0,0,134,5,0,0,56,96,3,0,0,2,1,0,134,5,0,0,204,117,4,0,2,0,0,0,137,3,0,0,139,0,0,0,140,1,9,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,84,55,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,4,0,2,5,0,85,3,0,0,82,7,3,0,1,8,255,63,134,6,0,0,140,179,3,0,7,8,0,0,85,2,6,0,82,8,3,0,134,6,0,0,248,91,4,0,8,0,0,0,82,6,2,0,121,6,4,0,82,1,2,0,137,4,0,0,139,1,0,0,82,8,3,0,1,7,11,64,134,6,0,0,140,179,3,0,8,7,0,0,85,2,6,0,82,7,3,0,134,6,0,0,248,91,4,0,7,0,0,0,82,1,2,0,137,4,0,0,139,1,0,0,140,1,5,0,0,0,0,0,1,3,0,0,85,0,3,0,1,4,0,0,109,0,4,4,1,3,0,0,109,0,8,3,1,1,0,0,32,3,1,3,120,3,6,0,41,3,1,2], eb + 266240);
  HEAPU8.set([1,4,0,0,97,0,3,4,25,1,1,1,119,0,250,255,102,4,0,11,34,4,4,0,121,4,7,0,106,4,0,8,2,3,0,0,255,255,255,127,19,4,4,3,26,2,4,1,119,0,2,0,1,2,10,0,1,3,0,0,134,4,0,0,212,190,3,0,0,2,3,0,139,0,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,152,56,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,4,0,2,5,0,85,2,0,0,82,6,2,0,121,6,12,0,82,6,2,0,82,6,6,0,121,6,9,0,82,7,2,0,134,6,0,0,208,29,4,0,7,0,0,0,85,3,6,0,82,1,3,0,137,4,0,0,139,1,0,0,1,6,0,0,85,3,6,0,82,1,3,0,137,4,0,0,139,1,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,56,57,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,4,0,2,5,0,85,2,0,0,82,6,2,0,121,6,12,0,82,6,2,0,82,6,6,0,121,6,9,0,82,7,2,0,134,6,0,0,252,227,3,0,7,0,0,0,85,3,6,0,82,1,3,0,137,4,0,0,139,1,0,0,1,6,0,0,85,3,6,0,82,1,3,0,137,4,0,0,139,1,0,0,140,4,14,0,0,0,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,196,57,4,0,1,10,16,0,135,9,0,0,10,0,0,0,25,6,8,12,25,7,8,8,25,5,8,4,0,4,8,0,85,6,0,0,85,7,1,0,85,5,2,0,85,4,3,0,82,10,6,0,82,11,7,0,82,12,5,0,82,13,4,0,135,9,43,1,10,11,12,13,137,8,0,0,139,0,0,0,140,4,12,0,0,0,0,0,5,7,2,1,32,10,1,0,1,11,0,0,125,9,10,11,2,0,0,0,1,11,255,255,106,10,3,76,47,11,11,10,108,58,4,0,134,11,0,0,32,142,4,0,3,0,0,0,32,8,11,0,134,4,0,0,92,121,3,0,0,7,3,0,121,8,3,0,0,5,4,0,119,0,9,0,134,11,0,0,20,142,4,0,3,0,0,0,0,5,4,0,119,0,4,0,134,5,0,0,92,121,3,0,0,7,3,0,45,11,5,7,136,58,4,0,0,6,9,0,119,0,2,0,7,6,5,1,139,6,0,0,140,2,13,0,0,0,0,0,78,4,0,0,78,5,1,0,41,11,4,24,42,11,11,24,32,11,11,0,121,11,4,0,1,11,1,0,0,10,11,0,119,0,7,0,41,11,4,24,42,11,11,24,41,12,5,24,42,12,12,24,14,11,11,12,0,10,11,0,121,10,4,0,0,2,5,0,0,3,4,0,119,0,23,0,0,8,0,0,0,9,1,0,25,8,8,1,25,9,9,1,78,6,8,0,78,7,9,0,41,11,6,24,42,11,11,24,32,11,11,0,121,11,4,0,1,11,1,0,0,10,11,0,119,0,7,0,41,11,6,24,42,11,11,24,41,12,7,24,42,12,12,24,14,11,11,12,0,10,11,0,121,10,239,255,0,2,7,0,0,3,6,0,1,10,255,0,19,10,3,10,1,11,255,0,19,11,2,11,4,10,10,11,139,10,0,0,140,3,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,140,59,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,3,4,4,109,4,8,0,85,3,1,0,85,4,2,0,82,5,3,0,1,6,16,5,94,5,5,6,121,5,9,0,82,5,3,0,1,6,20,5,94,5,5,6,34,5,5,4,121,5,4,0,137,4,0,0,1,5,0,0,139,5,0,0,137,4,0,0,1,5,0,0,139,5,0,0,140,3,13,0,0,0,0,0,136,9,0,0,0,7,9,0,136,9,0,0,25,9,9,63,38,9,9,192,137,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,36,60,4,0,1,10,16,0,135,9,0,0,10,0,0,0,25,6,8,8,25,4,8,4,0,5,8,0,85,6,0,0,85,4,1,0,85,5,2,0,82,9,4,0,1,10,1,0,82,11,5,0,82,12,6,0,134,3,0,0,220,79,3,0,9,10,11,12,137,7,0,0,139,3,0,0,140,2,11,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,172,60,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,4,7,4,0,5,7,0,25,3,7,8,85,4,0,0,85,5,1,0,1,8,0,0,83,3,8,0,82,9,4,0,82,10,5,0,134,8,0,0,144,58,4,0,9,10,0,0,32,2,8,0,1,10,1,0,1,9,0,0,125,8,2,10,9,0,0,0,83,3,8,0,137,6,0,0,78,8,3,0,38,8,8,1,139,8,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,60,61,4,0,1,8,16,0,135,7,0,0,8,0,0,0,0,5,6,0,25,4,6,12,25,3,6,8,85,4,0,0,85,3,1,0,82,2,3,0,116,5,4,0,109,5,4,2,1,8,4,0,1,9,105,58,134,7,0,0,48,143,3,0,8,9,5,0,137,6,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,176,61,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,3,4,8,0,2,4,0,106,1,0,4,59,5,20,0,145,5,5,0,89,2,5,0,59,6,85,0,145,6,6,0,113,2,4,6,116,3,2,0,106,5,2,4,109,3,4,5,134,5,0,0,212,122,4,0,1,3,0,0,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,44,62,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,3,4,8,0,2,4,0,106,1,0,4,59,5,20,0,145,5,5,0,89,2,5,0,59,6,85,0,145,6,6,0,113,2,4,6,116,3,2,0,106,5,2,4,109,3,4,5,134,5,0,0,212,122,4,0,1,3,0,0,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,168,62,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,3,4,8,0,2,4,0,106,1,0,4,59,5,20,0,145,5,5,0,89,2,5,0,59,6,85,0,145,6,6,0,113,2,4,6,116,3,2,0,106,5,2,4,109,3,4,5,134,5,0,0,212,122,4,0,1,3,0,0,137,4,0,0,139,0,0,0,140,4,8,0,0,0,0,0,106,6,1,8,1,7,0,0,134,5,0,0,220,114,4,0,0,6,7,0,121,5,6,0,1,7,0,0,134,5,0,0,128,210,3,0,7,1,2,3,119,0,8,0,106,4,0,8,82,7,4,0,106,7,7,28,38,7,7,31,135,5,4,0,7,4,1,2,3,0,0,0,139,0,0,0,140,4,11,0,0,0,0,0,32,9,0,0,32,10,1,0,19,9,9,10,121,9,3,0,0,7,2,0,119,0,22,0,0,4,0,0,0,5,1,0,0,8,2,0,26,6,8,1,1,9,112,33,38,10,4,15,91,9,9,10,20,9,9,3,83,6,9,0,1,9,4,0,135,4,16,0,4,5,9,0,135,5,3,0,32,9,4,0,32,10,5,0,19,9,9,10,121,9,3,0,0,7,6,0,119,0,3,0,0,8,6,0,119,0,239,255,139,7,0,0,140,0,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,240,63,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,2,3,0,2,4,0,0,200,0,2,0,82,4,4,0,121,4,35,0,1,5,59,0,2,6,0,0,200,0,2,0,82,6,6,0,134,4,0,0,192,196,3,0,5,6,0,0,2,6,0,0,200,0,2,0,82,6,6,0,134,4,0,0,172,24,4,0,6,0,0,0,2,6,0,0,68,254,1,0,82,6,6,0,135,4,7,0,6,0,0,0,2,4,0,0,200,0,2,0,1,6,0,0,85,4,6,0,2,6,0,0,68,254,1,0,1,4,0,0,85,6,4,0,1,4,1,0,83,2,4,0,78,0,2,0,38,4,0,1,0,1,4,0,137,3,0,0,139,1,0,0,119,0,8,0,1,4,0,0,83,2,4,0,78,0,2,0,38,4,0,1,0,1,4,0,137,3,0,0,139,1,0,0,1,4,0,0,139,4,0,0,140,2,12,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,252,64,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,4,6,4,0,2,6,0,85,4,0,0,85,2,1,0,82,7,2,0,36,7,7,16,121,7,12,0,82,7,4,0,134,3,0,0,100,49,4,0,7,0,0,0,137,5,0,0,1,7,16,0,82,8,2,0,4,7,7,8,23,7,3,7,139,7,0,0,119,0,7,0,1,8,211,66,1,9,1,63,1,10,42,15,1,11,222,66,135,7,1,0,8,9,10,11,1,7,0,0,139,7,0,0,140,1,10,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,176,65,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,89,2,0,0,88,5,2,0,145,5,5,0,59,6,1,0,145,6,6,0,72,5,5,6,121,5,16,0,88,6,2,0,145,6,6,0,59,7,2,0,145,7,7,0,66,5,6,7,145,5,5,0,61,7,0,0,0,0,0,63,145,7,7,0,63,1,5,7,145,1,1,0,137,3,0,0,145,7,1,0,139,7,0,0,119,0,7,0,1,5,117,74,1,6,184,68,1,8,12,3,1,9,128,74,135,7,1,0,5,6,8,9,59,7,0,0,145,7,7,0,139,7,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,124,66,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,32,38,5,5,63,82,6,1,0,25,6,6,4,25,6,6,28,135,4,247,0,5,6,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,16,38,5,5,63,82,6,1,0,25,6,6,4,135,4,247,0,5,6,0,0,137,2,0,0,139,0,0,0,140,2,9,0,0,0,0,0,82,2,1,0,25,5,2,4,82,3,5,0,82,4,2,0,109,4,4,3,82,7,5,0,85,7,4,0,25,6,0,8,82,7,6,0,26,7,7,1,85,6,7,0,25,8,2,8,134,7,0,0,64,128,4,0,8,0,0,0,1,8,56,0,134,7,0,0,64,123,4,0,2,8,0,0,139,3,0,0,140,3,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,112,67,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,4,5,4,0,3,5,0,109,5,8,0,85,4,1,0,85,3,2,0,82,7,4,0,82,8,3,0,134,6,0,0,44,28,4,0,7,8,0,0,2,6,0,0,208,0,2,0,82,8,4,0,85,6,8,0,2,8,0,0,212,0,2,0,82,6,3,0,85,8,6,0,137,5,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,32,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,248,67,4,0,1,5,32,0,135,4,0,0,5,0,0,0,25,1,3,24,0,2,3,0,85,1,0,0,1,4,0,4,82,4,4,0,85,2,4,0,1,5,4,4,82,5,5,0,109,2,4,5,1,4,8,4,82,4,4,0,109,2,8,4,1,5,12,4,82,5,5,0,109,2,12,5,1,4,16,4,82,4,4,0,109,2,16,4,1,5,20,4,82,5,5,0,109,2,20,5,137,3,0,0,82,5,1,0,41,5,5,2,94,5,2,5,139,5,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,156,68,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,1,4,0,25,2,4,4,85,1,0,0,1,5,0,0,83,2,5,0,82,6,1,0,134,5,0,0,4,107,4,0,6,0,0,0,38,5,5,1,32,5,5,1,121,5,3,0,1,3,4,0,119,0,14,0,1,6,4,0,134,5,0,0,208,94,4,0,6,0,0,0,121,5,3,0,1,3,4,0,119,0,7,0,1,6,8,0,134,5,0,0,208,94,4,0,6,0,0,0,121,5,2,0,1,3,4,0,32,5,3,4,121,5,3,0,1,5,1,0,83,2,5,0,137,4,0,0,78,5,2,0,38,5,5,1,139,5,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,116,69,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,6,4,0,4,6,0,85,3,0,0,89,4,1,0,82,8,3,0,88,9,4,0,145,9,9,0,134,7,0,0,116,140,3,0,8,9,0,0,28,2,7,2,137,5,0,0,139,2,0,0,140,3,13,0,0,0,0,0,25,4,0,112,85,4,1,0,109,4,4,2,106,5,0,8,106,6,0,4,4,8,5,6,34,9,8,0,41,9,9,31,42,9,9,31,0,7,9,0,25,3,0,120,85,3,8,0,109,3,4,7,33,9,1,0,33,10,2,0,20,9,9,10,15,10,2,7,13,11,7,2,16,12,1,8,19,11,11,12,20,10,10,11,19,9,9,10,121,9,4,0,3,10,6,1,109,0,104,10,119,0,2,0,109,0,104,5,139,0,0,0,140,2,8,0,0,0,0,0,1,6,12,0,134,5,0,0,116,104,4,0,6,0,0,0,82,7,1,0,109,5,8,7,85,5,0,0,25,3,0,4,82,2,3,0,109,5,4,2,85,2,5,0,85,3,5,0,25,4,0,8,82,7,4,0,25,7,7,1,85,4,7,0,139,0,0,0,140,1,11,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,5,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,184,70,4,0,1,8,16,0,135,7,0,0,8,0,0,0,0,2,5,0,85,2,0,0,82,7,2,0,1,8,152,0,94,1,7,8,82,6,2,0,106,8,6,80,112,9,6,56,145,9,9,0,134,7,0,0,32,188,3,0,8,9,0,0,5,3,1,7,137,4,0,0,139,3,0,0,140,2,9,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,64,71,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,8,0,2,5,0,85,3,1,0,82,7,3,0,134,6,0,0,220,87,4,0,7,0,0,0,85,2,6,0,82,8,3,0,134,7,0,0,220,87,4,0,8,0,0,0,109,2,4,7,116,0,2,0,106,6,2,4,109,0,4,6,137,4,0,0,139,0,0,0,140,1,11,0,0,0,0,0,136,7,0,0,0,4,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,5,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,212,71,4,0,1,8,16,0,135,7,0,0,8,0,0,0,0,2,5,0,85,2,0,0,82,7,2,0,1,8,156,0,94,1,7,8,82,6,2,0,106,8,6,84,112,9,6,60,145,9,9,0,134,7,0,0,32,188,3,0,8,9,0,0,5,3,1,7,137,4,0,0,139,3,0,0,140,3,11,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,92,72,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,5,7,8,25,4,7,4,0,3,7,0,85,5,0,0,85,4,1,0,85,3,2,0,137,6,0,0,82,8,5,0,27,8,8,77,82,9,4,0,1,10,150,0,5,9,9,10,3,8,8,9,82,9,3,0,27,9,9,29,3,8,8,9,42,8,8,8,2,9,0,0,255,255,0,0,19,8,8,9,139,8,0,0,140,3,9,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,252,72,4,0,1,8,16,0,135,7,0,0,8,0,0,0,0,4,6,0,116,4,2,0,82,7,0,0,106,7,7,16,38,7,7,15,135,3,9,1,7,0,1,4,121,3,2,0,116,2,4,0,137,5,0,0,38,7,3,1,139,7,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,100,73,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,25,2,3,4,85,1,0,0,1,4,0,0,83,2,4,0,2,4,0,0,228,4,2,0,82,5,1,0,90,4,4,5,2,5,0,0,231,4,2,0,82,6,1,0,90,5,5,6,46,4,4,5,188,73,4,0,2,4,0,0,228,4,2,0,82,5,1,0,90,4,4,5,120,4,3,0,1,4,1,0,83,2,4,0,137,3,0,0,78,4,2,0,38,4,4,1,139,4,0,0,140,3,12,0,0,0,0,0,2,9,0,0,255,0,0,0,120,2,3,0,1,5,0,0,119,0,22,0,0,6,0,0,0,7,2,0,0,8,1,0,78,3,6,0,78,4,8,0,41,10,3,24,42,10,10,24,41,11,4,24,42,11,11,24,53,10,10,11,48,74,4,0,26,7,7,1,120,7,3,0,1,5,0,0,119,0,7,0,25,6,6,1,25,8,8,1,119,0,242,255,19,10,3,9,19,11,4,9,4,5,10,11,139,5,0,0,140,0,7,0,0,0,0,0,136,4,0,0,0,1,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,120,74,4,0,1,5,16,0,135,4,0,0,5,0,0,0,1,4,32,0,2,5,0,0,204,254,1,0,82,5,5,0,49,4,4,5,164,74,4,0,1,5,5,0,1,6,231,41,134,4,0,0,48,143,3,0,5,6,1,0,1,4,32,38,82,4,4,0,1,6,0,23,45,4,4,6,220,74,4,0,2,4,0,0,213,4,2,0,1,6,1,0,83,4,6,0,2,6,0,0,136,254,1,0,2,4,0,0,208,254,1,0,85,6,4,0,2,4,0,0,0,212,1,0,2,6,0,0,204,254,1,0,82,6,6,0,41,6,6,6,3,0,4,6,2,6,0,0,136,254,1,0,82,2,6,0,25,3,0,64,116,0,2,0,25,0,0,4,25,2,2,4,54,6,0,3,8,75,4,0,2,6,0,0,204,254,1,0,2,4,0,0,204,254,1,0,82,4,4,0,25,4,4,1,85,6,4,0,137,1,0,0,139,0,0,0,140,2,9,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,120,75,4,0,1,7,16,0,135,6,0,0,7,0,0,0,102,2,1,11,41,6,2,24,42,6,6,24,34,4,6,0,121,4,4,0,82,7,1,0,0,6,7,0,119,0,2,0,0,6,1,0,121,4,4,0,106,8,1,4,0,7,8,0,119,0,4,0,1,8,255,0,19,8,2,8,0,7,8,0,134,3,0,0,40,81,3,0,5,6,7,0,137,5,0,0,139,3,0,0,140,3,11,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,24,76,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,5,7,8,25,4,7,4,0,3,7,0,85,5,0,0,85,4,1,0,85,3,2,0,137,6,0,0,82,8,5,0,27,8,8,77,82,9,4,0,1,10,150,0,5,9,9,10,3,8,8,9,82,9,3,0,27,9,9,29,3,8,8,9,42,8,8,8,1,9,255,0,19,8,8,9,139,8,0,0,140,3,11,0,0,0,0,0,88,3,2,0,145,3,3,0,65,6,3,3,145,6,6,0,25,7,2,4,88,4,7,0,145,4,4,0,65,9,4,4,145,9,9,0,63,8,6,9,145,8,8,0,134,5,0,0,52,119,4,0,1,8,0,0,145,5,5,0,88,9,2,0,145,9,9,0,65,8,5,9,145,8,8,0,89,0,8,0,88,10,7,0,145,10,10,0,65,9,5,10,145,9,9,0,113,0,4,9,139,0,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,36,77,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,3,6,8,25,4,6,4,0,2,6,0,85,3,0,0,85,4,1,0,82,8,3,0,82,9,4,0,134,7,0,0,248,228,3,0,8,9,0,0,85,2,7,0,137,5,0,0,82,7,2,0,139,7,0,0,140,1,10,0,0,0,0,0,136,6,0,0,0,3,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,4,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,168,77,4,0,1,7,16,0,135,6,0,0,7,0,0,0,0,2,4,0,85,2,0,0,82,5,2,0,106,6,5,120,1,8,144,0,94,8,5,8,106,9,5,64,5,7,8,9,41,7,7,2,3,1,6,7,137,3,0,0,139,1,0,0,140,2,7,0,0,0,0,0,1,5,92,0,134,4,0,0,116,104,4,0,5,0,0,0,1,5,0,0,85,4,5,0,25,6,4,8,134,5,0,0,220,169,3,0,6,1,0,0,109,4,4,0,82,2,0,0,85,4,2,0,109,2,4,4,85,0,4,0,25,3,0,8,82,5,3,0,25,5,5,1,85,3,5,0,139,0,0,0,140,2,9,0,0,0,0,0,82,2,1,0,25,5,2,4,82,3,5,0,82,4,2,0,109,4,4,3,82,7,5,0,85,7,4,0,25,6,0,8,82,7,6,0,26,7,7,1,85,6,7,0,1,8,12,0,134,7,0,0,64,123,4,0,2,8,0,0,139,3,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,176,78,4,0,1,5,16,0,135,4,0,0,5,0,0,0,25,1,3,8,0,2,3,0,1,4,0,0,85,1,4,0,1,5,0,0,109,1,4,5,1,4,0,0,134,5,0,0,120,233,3,0,2,4,0,0,116,1,2,0,106,4,2,4,109,1,4,4,116,0,1,0,106,5,1,4,109,0,4,5,137,3,0,0,139,0,0,0,140,3,10,0,0,0,0,0,32,8,0,0,32,9,1,0,19,8,8,9,121,8,3,0,0,6,2,0,119,0,20,0,0,3,0,0,0,4,1,0,0,7,2,0,26,5,7,1,38,8,3,7,39,8,8,48,83,5,8,0,1,8,3,0,135,3,16,0,3,4,8,0,135,4,3,0,32,8,3,0,32,9,4,0,19,8,8,9,121,8,3,0,0,6,5,0,119,0,3,0,0,7,5,0,119,0,241,255,139,6,0,0,140,6,8,0,0,0,0,0,106,7,1,8,134,6,0,0,220,114,4,0,0,7,5,0,121,6,6,0,1,7,0,0,134,6,0,0,20,134,3,0,7,1,2,3,4,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,25,1,0,16,1,2,0,0,85,1,2,0,1,3,0,0,109,1,4,3,1,2,0,0,109,1,8,2,1,3,0,0,109,1,12,3,1,2,0,0,109,1,16,2,1,3,0,0,109,1,20,3,134,2,0,0,28,125,4,0,109,0,40,2,1,2,0,0,85,0,2,0,59,3,0,0,145,3,3,0,113,0,4,3,1,2,100,0,109,0,8,2,1,3,5,0,109,0,12,3,59,2,0,0,145,2,2,0,113,0,20,2,59,3,0,0,145,3,3,0,113,0,24,3,1,2,0,0,107,0,44,2,139,0,0,0,140,2,5,0,0,0,0,0,1,2,0,0,85,0,2,0,1,3,0,0,109,0,4,3,1,2,0,0,109,0,8,2,102,2,1,11,34,2,2,0,121,2,7,0,82,3,1,0,106,4,1,4,134,2,0,0,36,220,3,0,0,3,4,0,119,0,6,0,116,0,1,0,106,4,1,4,109,0,4,4,106,2,1,8,109,0,8,2,139,0,0,0,140,2,7,0,0,0,0,0,120,0,3,0,1,4,0,0,119,0,14,0,5,3,1,0,2,5,0,0,255,255,0,0,20,6,1,0,48,5,5,6,204,80,4,0,7,5,3,0,13,5,5,1,1,6,255,255,125,4,5,3,6,0,0,0,119,0,2,0,0,4,3,0,135,2,10,0,4,0,0,0,120,2,2,0,139,2,0,0,26,6,2,4,82,6,6,0,38,6,6,3,120,6,2,0,139,2,0,0,1,5,0,0,135,6,5,0,2,5,4,0,139,2,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,60,81,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,2,3,0,25,1,3,8,85,1,0,0,82,4,1,0,34,4,4,1,121,4,6,0,2,4,0,0,80,253,1,0,59,5,0,0,87,4,5,0,119,0,8,0,2,5,0,0,80,253,1,0,59,4,1,0,82,6,1,0,76,6,6,0,66,4,4,6,87,5,4,0,2,6,0,0,80,253,1,0,86,5,6,0,145,5,5,0,59,6,232,3,145,6,6,0,65,4,5,6,145,4,4,0,87,2,4,0,1,6,3,0,1,5,180,58,134,4,0,0,48,143,3,0,6,5,2,0,137,3,0,0,139,0,0,0,140,4,6,0,0,0,0,0,106,5,1,4,45,5,5,2,236,81,4,0,25,4,1,28,82,5,4,0,33,5,5,1,121,5,2,0,85,4,3,0,139,0,0,0,140,2,8,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,60,82,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,2,5,4,0,3,5,0,85,2,0,0,85,3,1,0,137,4,0,0,82,6,2,0,82,7,3,0,41,7,7,3,3,6,6,7,139,6,0,0,140,4,11,0,0,0,0,0,0,4,0,0,0,5,2,0,134,6,0,0,220,102,4,0,4,5,0,0,135,7,3,0,5,9,1,5,5,10,3,4,3,9,9,10,3,9,9,7,38,10,7,0,20,9,9,10,135,8,12,0,9,0,0,0,139,6,0,0,140,1,8,0,0,0,0,0,25,4,0,74,78,3,4,0,1,6,255,0,3,6,3,6,20,6,6,3,83,4,6,0,82,1,0,0,38,6,1,8,120,6,13,0,1,7,0,0,109,0,8,7,1,6,0,0,109,0,4,6,106,2,0,44,109,0,28,2,109,0,20,2,106,7,0,48,3,7,2,7,109,0,16,7,1,5,0,0,119,0,4,0,39,7,1,32,85,0,7,0,1,5,255,255,139,5,0,0,140,2,10,0,0,0,0,0,136,8,0,0,0,4,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,5,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,96,83,4,0,1,9,16,0,135,8,0,0,9,0,0,0,25,2,5,4,0,3,5,0,85,2,0,0,85,3,1,0,137,4,0,0,82,6,2,0,82,7,3,0,47,9,6,7,140,83,4,0,0,8,6,0,119,0,2,0,0,8,7,0,139,8,0,0,140,1,9,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,224,83,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,2,6,4,0,4,6,0,85,2,0,0,82,8,2,0,134,7,0,0,52,185,3,0,8,0,0,0,1,8,255,0,19,7,7,8,85,4,7,0,82,7,4,0,41,7,7,8,0,3,7,0,82,8,2,0,134,7,0,0,52,185,3,0,8,0,0,0,1,8,255,0,19,7,7,8,3,1,3,7,137,5,0,0,139,1,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,132,84,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,1,4,4,0,2,4,0,85,1,0,0,82,6,1,0,134,5,0,0,128,114,4,0,6,0,0,0,85,2,5,0,137,3,0,0,82,5,2,0,139,5,0,0,140,1,8,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,232,84,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,2,3,0,25,1,3,4,85,2,0,0,1,4,0,0,83,1,4,0,1,5,0,32,2,6,0,0,0,220,1,0,2,7,0,0,24,255,1,0,82,7,7,0,27,7,7,48,94,6,6,7,82,7,2,0,3,6,6,7,17,5,5,6,1,6,1,0,1,7,0,0,125,4,5,6,7,0,0,0,83,1,4,0,137,3,0,0,78,4,1,0,38,4,4,1,139,4,0,0,140,0,5,0,0,0,0,0,2,1,0,0,30,128,0,0,2,2,0,0,120,0,2,0,82,2,2,0,32,2,2,1,2,3,0,0,120,0,2,0,82,3,3,0,32,3,3,2,20,2,2,3,2,3,0,0,124,0,2,0,82,3,3,0,34,3,3,2,19,2,2,3,121,2,7,0,2,2,0,0,120,0,2,0,1,3,4,0,85,2,3,0,134,3,0,0,184,119,4,0,134,0,0,0,184,119,4,0,2,3,0,0,24,253,1,0,86,3,3,0,64,3,0,3,59,2,44,1,73,3,3,2,2,2,0,0,120,0,2,0,82,2,2,0,32,2,2,8,19,3,3,2,2,2,0,0,124,0,2,0,82,2,2,0,34,2,2,2,19,3,3,2,121,3,11,0,2,3,0,0,120,0,2,0,1,2,4,0,85,3,2,0,134,2,0,0,184,119,4,0,2,2,0,0,226,4,2,0,1,3,1,0,83,2,3,0,2,3,0,0,120,0,2,0,82,3,3,0,32,3,3,16,2,2,0,0,120,0,2,0,82,2,2,0,32,2,2,64,20,3,3,2,2,2,0,0,120,0,2,0,82,2,2,0,32,2,2,32,20,3,3,2,2,2,0,0,120,0,2,0,82,2,2,0,1,4,128,0,13,2,2,4,20,3,3,2,120,3,2,0,139,0,0,0,2,3,0,0,120,0,2,0,1,2,0,0,85,3,2,0,139,0,0,0,140,0,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,200,86,4,0,1,4,16,0,135,3,0,0,4,0,0,0,0,1,2,0,2,3,0,0,60,1,2,0,82,3,3,0,36,3,3,0,121,3,3,0,137,2,0,0,139,0,0,0,1,3,0,0,85,1,3,0,2,3,0,0,56,1,2,0,82,0,3,0,2,3,0,0,60,1,2,0,82,3,3,0,82,4,1,0,56,3,3,4,56,87,4,0,82,4,1,0,41,4,4,2,94,4,0,4,135,3,7,0,4,0,0,0,82,3,1,0,25,3,3,1,85,1,3,0,119,0,239,255,135,3,7,0,0,0,0,0,2,3,0,0,60,1,2,0,1,4,0,0,85,3,4,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,164,87,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,2,4,4,0,1,4,0,85,1,0,0,82,5,1,0,120,5,4,0,1,5,0,0,85,2,5,0,119,0,4,0,82,5,1,0,25,5,5,4,116,2,5,0,137,3,0,0,82,5,2,0,139,5,0,0,140,1,9,0,0,0,0,0,136,7,0,0,0,5,7,0,136,7,0,0,25,7,7,63,38,7,7,192,137,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,40,88,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,2,6,4,0,4,6,0,85,2,0,0,82,8,2,0,134,7,0,0,148,83,4,0,8,0,0,0,85,4,7,0,82,7,4,0,41,7,7,16,0,3,7,0,82,8,2,0,134,7,0,0,148,83,4,0,8,0,0,0,3,1,3,7,137,5,0,0,139,1,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,188,88,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,82,4,0,0,37,4,4,0,121,4,3,0,137,2,0,0,139,0,0,0,82,5,0,0,134,4,0,0,240,112,4,0,5,0,0,0,116,1,0,0,1,5,3,0,1,6,3,82,134,4,0,0,48,143,3,0,5,6,1,0,137,2,0,0,139,0,0,0,140,0,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,32,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,60,89,4,0,1,3,32,0,135,2,0,0,3,0,0,0,0,0,1,0,134,2,0,0,232,141,4,0,134,2,0,0,180,141,4,0,1,3,190,41,134,2,0,0,228,2,3,0,0,3,0,0,2,2,0,0,48,254,1,0,82,3,0,0,85,2,3,0,2,3,0,0,52,254,1,0,106,2,0,4,85,3,2,0,2,2,0,0,56,254,1,0,106,3,0,8,85,2,3,0,2,3,0,0,60,254,1,0,106,2,0,12,85,3,2,0,2,2,0,0,64,254,1,0,106,3,0,16,85,2,3,0,137,1,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,4,90,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,8,38,5,5,3,82,6,1,0,106,6,6,4,1,7,0,0,135,4,35,1,5,6,7,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,140,90,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,85,2,0,0,82,6,2,0,112,5,6,60,145,5,5,0,134,1,0,0,112,103,4,0,5,0,0,0,137,3,0,0,139,1,0,0,140,1,8,0,0,0,0,0,82,7,0,0,78,7,7,0,134,6,0,0,108,140,4,0,7,0,0,0,120,6,3,0,1,3,0,0,119,0,18,0,1,4,0,0,82,1,0,0,27,6,4,10,26,6,6,48,78,7,1,0,3,2,6,7,25,5,1,1,85,0,5,0,78,6,5,0,134,7,0,0,108,140,4,0,6,0,0,0,120,7,3,0,0,3,2,0,119,0,3,0,0,4,2,0,119,0,241,255,139,3,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,112,91,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,85,2,0,0,82,6,2,0,112,5,6,56,145,5,5,0,134,1,0,0,112,103,4,0,5,0,0,0,137,3,0,0,139,1,0,0,140,2,8,0,0,0,0,0,46,4,0,1,244,91,4,0,102,2,1,11,41,4,2,24,42,4,4,24,34,3,4,0,121,3,4,0,82,6,1,0,0,5,6,0,119,0,2,0,0,5,1,0,121,3,4,0,106,7,1,4,0,6,7,0,119,0,4,0,1,7,255,0,19,7,2,7,0,6,7,0,134,4,0,0,240,145,3,0,0,5,6,0,139,0,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,2,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,3,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,68,92,4,0,1,7,16,0,135,6,0,0,7,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,1,6,168,0,1,7,176,0,94,7,4,7,97,4,6,7,82,5,1,0,1,7,172,0,1,6,180,0,94,6,5,6,97,5,7,6,137,2,0,0,139,0,0,0,140,2,10,0,0,0,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,180,92,4,0,1,8,16,0,135,7,0,0,8,0,0,0,25,4,6,4,0,5,6,0,89,4,0,0,89,5,1,0,88,2,4,0,145,2,2,0,88,3,5,0,145,3,3,0,1,9,36,38,88,8,9,0,145,8,8,0,134,7,0,0,44,223,2,0,2,3,8,0,137,6,0,0,139,0,0,0,140,2,7,0,0,0,0,0,135,2,23,0,1,0,0,0,25,5,2,13,134,3,0,0,116,104,4,0,5,0,0,0,85,3,2,0,109,3,4,2,1,6,0,0,109,3,8,6,134,4,0,0,176,131,4,0,3,0,0,0,25,5,2,1,135,6,2,0,4,1,5,0,85,0,4,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,144,93,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,24,38,5,5,63,82,6,1,0,25,6,6,4,135,4,247,0,5,6,0,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,20,94,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,16,38,5,5,63,82,6,1,0,25,6,6,4,135,4,247,0,5,6,0,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,152,94,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,82,5,5,0,1,6,140,0,3,5,5,6,106,5,5,20,38,5,5,63,82,6,1,0,25,6,6,4,135,4,247,0,5,6,0,0,137,2,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,8,95,4,0,1,5,16,0,135,4,0,0,5,0,0,0,25,2,3,4,0,1,3,0,85,1,0,0,1,4,255,3,2,5,0,0,120,0,2,0,82,5,5,0,19,4,4,5,82,5,1,0,45,4,4,5,64,95,4,0,1,4,1,0,83,2,4,0,119,0,3,0,1,4,0,0,83,2,4,0,137,3,0,0,78,4,2,0,38,4,4,1,139,4,0,0,140,2,10,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,164,95,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,4,0,2,5,0,85,3,0,0,85,2,1,0,82,7,3,0,82,8,2,0,1,9,1,0,134,6,0,0,212,126,4,0,7,8,9,0,137,4,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16], eb + 276480);
  HEAPU8.set([137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,32,96,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,121,4,8,0,82,4,1,0,82,4,4,0,121,4,5,0,82,5,1,0,134,4,0,0,68,93,4,0,5,0,0,0,137,2,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,160,96,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,121,4,8,0,82,4,1,0,82,4,4,0,121,4,5,0,82,5,1,0,134,4,0,0,200,93,4,0,5,0,0,0,137,2,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,32,97,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,121,4,8,0,82,4,1,0,82,4,4,0,121,4,5,0,82,5,1,0,134,4,0,0,48,66,4,0,5,0,0,0,137,2,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,160,97,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,121,4,8,0,82,4,1,0,82,4,4,0,121,4,5,0,82,5,1,0,134,4,0,0,76,94,4,0,5,0,0,0,137,2,0,0,139,0,0,0,140,4,7,0,0,0,0,0,106,5,1,8,1,6,0,0,134,4,0,0,220,114,4,0,0,5,6,0,121,4,5,0,1,6,0,0,134,4,0,0,128,210,3,0,6,1,2,3,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,84,98,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,4,1,0,120,4,3,0,137,2,0,0,139,0,0,0,82,5,1,0,134,4,0,0,184,89,4,0,5,0,0,0,137,2,0,0,139,0,0,0,140,3,7,0,0,0,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,32,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,188,98,4,0,1,6,32,0,135,5,0,0,6,0,0,0,0,3,4,0,109,4,16,0,111,4,8,1,87,3,2,0,2,5,0,0,64,1,2,0,86,6,3,0,75,6,6,0,85,5,6,0,137,4,0,0,139,0,0,0,140,2,10,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,52,99,4,0,1,7,16,0,135,6,0,0,7,0,0,0,25,3,5,4,0,2,5,0,85,3,0,0,85,2,1,0,82,7,3,0,1,8,52,38,82,9,2,0,134,6,0,0,128,200,3,0,7,8,9,0,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,176,99,4,0,1,6,16,0,135,5,0,0,6,0,0,0,25,2,4,4,0,1,4,0,85,2,0,0,82,6,2,0,134,5,0,0,104,224,3,0,6,0,0,0,85,1,5,0,82,6,2,0,134,5,0,0,248,91,4,0,6,0,0,0,137,3,0,0,82,5,1,0,139,5,0,0,140,0,6,0,0,0,0,0,136,2,0,0,0,0,2,0,136,2,0,0,25,2,2,63,38,2,2,192,137,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,56,100,4,0,1,3,16,0,135,2,0,0,3,0,0,0,1,2,0,0,121,2,25,0,2,3,0,0,28,2,2,0,134,2,0,0,84,96,4,0,3,0,0,0,1,3,64,99,134,2,0,0,128,89,3,0,3,0,0,0,2,3,0,0,80,1,2,0,134,2,0,0,108,217,3,0,3,0,0,0,134,2,0,0,232,105,4,0,1,3,3,0,1,4,81,62,134,2,0,0,48,143,3,0,3,4,1,0,137,0,0,0,139,0,0,0,119,0,9,0,1,4,4,0,1,3,114,62,25,5,1,8,134,2,0,0,48,143,3,0,4,3,5,0,137,0,0,0,139,0,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,16,101,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,1,4,0,134,5,0,0,16,40,4,0,0,0,0,0,120,5,12,0,106,6,0,32,38,6,6,15,1,7,1,0,135,5,9,1,6,0,1,7,32,5,5,1,121,5,3,0,79,2,1,0,119,0,4,0,1,2,255,255,119,0,2,0,1,2,255,255,137,3,0,0,139,2,0,0,140,0,8,0,0,0,0,0,136,6,0,0,0,3,6,0,136,6,0,0,25,6,6,64,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,148,101,4,0,1,7,64,0,135,6,0,0,7,0,0,0,0,1,3,0,2,6,0,0,136,254,1,0,82,0,6,0,134,6,0,0,184,40,4,0,1,0,0,0,0,2,0,0,0,4,1,0,25,5,2,64,116,2,4,0,25,2,2,4,25,4,4,4,54,6,2,5,188,101,4,0,137,3,0,0,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,16,102,4,0,1,4,16,0,135,3,0,0,4,0,0,0,0,1,2,0,85,1,0,0,82,3,1,0,1,4,1,23,45,3,3,4,64,102,4,0,2,3,0,0,136,254,1,0,2,4,0,0,72,254,1,0,85,3,4,0,119,0,10,0,82,4,1,0,1,3,0,23,45,4,4,3,100,102,4,0,2,4,0,0,136,254,1,0,2,3,0,0,140,254,1,0,85,4,3,0,1,3,32,38,82,4,1,0,85,3,4,0,137,2,0,0,139,0,0,0,140,4,9,0,0,0,0,0,1,7,255,255,106,8,0,76,47,7,7,8,204,102,4,0,134,7,0,0,32,142,4,0,0,0,0,0,32,6,7,0,134,4,0,0,188,195,3,0,0,1,2,3,121,6,3,0,0,5,4,0,119,0,9,0,134,7,0,0,20,142,4,0,0,0,0,0,0,5,4,0,119,0,4,0,134,5,0,0,188,195,3,0,0,1,2,3,139,5,0,0,140,2,12,0,0,0,0,0,2,9,0,0,255,255,0,0,19,9,0,9,0,2,9,0,2,9,0,0,255,255,0,0,19,9,1,9,0,3,9,0,5,4,3,2,43,9,0,16,0,5,9,0,43,9,4,16,5,10,3,5,3,6,9,10,43,10,1,16,0,7,10,0,5,8,7,2,43,9,6,16,5,11,7,5,3,9,9,11,2,11,0,0,255,255,0,0,19,11,6,11,3,11,11,8,43,11,11,16,3,9,9,11,135,10,12,0,9,0,0,0,3,10,6,8,41,10,10,16,2,9,0,0,255,255,0,0,19,9,4,9,20,10,10,9,139,10,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,188,103,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,89,2,0,0,88,5,2,0,145,5,5,0,59,6,1,0,145,6,6,0,73,5,5,6,38,5,5,1,0,1,5,0,137,3,0,0,139,1,0,0,140,3,8,0,0,0,0,0,120,2,3,0,1,5,0,0,119,0,15,0,1,6,255,0,19,6,1,6,0,3,6,0,0,4,2,0,26,4,4,1,90,6,0,4,41,7,3,24,42,7,7,24,52,6,6,7,48,104,4,0,120,4,250,255,1,5,0,0,119,0,2,0,3,5,0,4,139,5,0,0,140,3,8,0,0,0,0,0,25,6,0,20,82,3,6,0,106,7,0,16,4,5,7,3,16,7,2,5,125,4,7,2,5,0,0,0,135,7,2,0,3,1,4,0,82,7,6,0,3,7,7,4,85,6,7,0,139,2,0,0,140,1,7,0,0,0,0,0,32,5,0,0,1,6,1,0,125,4,5,6,0,0,0,0,135,1,10,0,4,0,0,0,121,1,3,0,0,2,1,0,119,0,10,0,134,3,0,0,104,142,4,0,120,3,3,0,1,2,0,0,119,0,5,0,38,5,3,7,135,6,44,1,5,0,0,0,119,0,243,255,139,2,0,0,140,4,10,0,0,0,0,0,136,8,0,0,0,6,8,0,136,8,0,0,25,8,8,63,38,8,8,192,137,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,20,105,4,0,1,9,16,0,135,8,0,0,9,0,0,0,0,4,7,0,85,4,3,0,134,5,0,0,248,141,3,0,0,1,2,4,137,6,0,0,139,5,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,124,105,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,137,2,0,0,82,4,1,0,102,4,4,96,38,4,4,1,139,4,0,0,140,1,5,0,0,0,0,0,134,4,0,0,16,137,4,0,0,0,0,0,121,4,14,0,82,4,0,0,134,2,0,0,228,132,4,0,4,0,0,0,25,3,2,8,82,1,3,0,26,4,1,1,85,3,4,0,34,4,1,1,121,4,4,0,134,4,0,0,224,140,4,0,2,0,0,0,139,0,0,0,140,0,5,0,0,0,0,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,63,38,3,3,192,137,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,52,106,4,0,1,4,16,0,135,3,0,0,4,0,0,0,0,0,2,0,1,3,0,0,85,0,3,0,1,3,16,0,82,4,0,0,56,3,3,4,128,106,4,0,2,4,0,0,224,181,0,0,82,4,4,0,135,3,7,0,4,0,0,0,1,4,0,0,135,3,7,0,4,0,0,0,82,3,0,0,25,3,3,1,85,0,3,0,119,0,241,255,137,1,0,0,139,0,0,0,140,1,6,0,0,0,0,0,25,2,0,60,82,1,2,0,120,1,4,0,1,3,1,0,106,4,0,64,119,0,3,0,1,3,0,0,26,4,1,1,85,2,4,0,139,3,0,0,140,1,3,0,0,0,0,0,25,2,0,48,134,1,0,0,204,117,4,0,2,0,0,0,25,2,0,36,134,1,0,0,204,117,4,0,2,0,0,0,25,2,0,24,134,1,0,0,204,117,4,0,2,0,0,0,25,2,0,4,134,1,0,0,204,117,4,0,2,0,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,60,107,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,2,5,0,0,196,0,2,0,82,5,5,0,82,6,1,0,135,4,45,1,5,6,0,0,33,2,4,0,137,3,0,0,139,2,0,0,140,0,5,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,160,107,4,0,1,3,16,0,135,2,0,0,3,0,0,0,0,0,1,0,134,2,0,0,200,116,4,0,134,2,0,0,100,160,3,0,1,3,1,0,2,4,0,0,28,255,1,0,135,2,46,1,3,4,0,0,2,2,0,0,28,255,1,0,82,2,2,0,85,0,2,0,1,4,3,0,1,3,179,54,134,2,0,0,48,143,3,0,4,3,0,0,2,3,0,0,16,255,1,0,82,3,3,0,135,2,7,0,3,0,0,0,137,1,0,0,139,0,0,0,140,1,8,0,0,0,0,0,136,6,0,0,0,4,6,0,136,6,0,0,25,6,6,63,38,6,6,192,137,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,84,108,4,0,1,7,16,0,135,6,0,0,7,0,0,0,0,3,5,0,0,1,3,0,1,6,0,0,85,1,6,0,1,7,0,0,109,1,4,7,0,2,3,0,26,7,0,1,85,2,7,0,1,6,0,0,109,2,4,6,137,4,0,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,160,134,4,0,134,0,0,0,56,140,4,0,134,0,0,0,172,139,4,0,134,0,0,0,24,140,4,0,134,0,0,0,32,138,4,0,134,0,0,0,248,137,4,0,134,0,0,0,208,137,4,0,134,0,0,0,140,138,4,0,134,0,0,0,0,136,4,0,134,0,0,0,196,135,4,0,134,0,0,0,224,133,4,0,134,0,0,0,156,133,4,0,139,0,0,0,140,2,7,0,0,0,0,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,56,109,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,3,4,0,85,3,1,0,1,5,72,38,82,2,5,0,134,5,0,0,128,130,4,0,2,0,3,0,1,6,10,0,134,5,0,0,192,196,3,0,6,2,0,0,135,5,15,0,139,0,0,0,140,1,7,0,0,0,0,0,106,5,0,68,121,5,19,0,1,5,132,0,94,3,0,5,1,5,128,0,3,1,0,5,121,3,4,0,1,5,128,0,82,6,1,0,97,3,5,6,82,4,1,0,120,4,6,0,134,6,0,0,40,141,4,0,1,5,232,0,3,2,6,5,119,0,3,0,1,5,132,0,3,2,4,5,85,2,3,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,20,110,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,85,2,0,0,82,5,2,0,134,1,0,0,32,111,4,0,5,0,0,0,137,3,0,0,139,1,0,0,140,2,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,108,110,4,0,1,4,16,0,135,3,0,0,4,0,0,0,109,2,4,0,85,2,1,0,1,3,16,0,2,4,0,0,68,1,2,0,82,4,4,0,49,3,3,4,148,110,4,0,137,2,0,0,139,0,0,0,2,3,0,0,68,1,2,0,2,4,0,0,68,1,2,0,82,4,4,0,25,4,4,1,85,3,4,0,137,2,0,0,139,0,0,0,140,1,7,0,0,0,0,0,136,5,0,0,0,3,5,0,136,5,0,0,25,5,5,63,38,5,5,192,137,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,4,111,4,0,1,6,16,0,135,5,0,0,6,0,0,0,0,2,4,0,85,2,0,0,82,5,2,0,135,1,10,0,5,0,0,0,137,3,0,0,139,1,0,0,140,1,6,0,0,0,0,0,1,4,255,255,106,5,0,76,47,4,4,5,108,111,4,0,134,4,0,0,32,142,4,0,0,0,0,0,32,3,4,0,82,4,0,0,43,4,4,4,38,4,4,1,0,1,4,0,121,3,3,0,0,2,1,0,119,0,7,0,0,2,1,0,119,0,5,0,82,4,0,0,43,4,4,4,38,4,4,1,0,2,4,0,139,2,0,0,140,0,4,0,0,0,0,0,136,1,0,0,0,0,1,0,136,1,0,0,25,1,1,16,137,1,0,0,130,1,0,0,136,2,0,0,49,1,1,2,184,111,4,0,1,2,16,0,135,1,0,0,2,0,0,0,2,1,0,0,234,4,2,0,78,1,1,0,38,1,1,1,121,1,7,0,134,1,0,0,184,63,4,0,2,1,0,0,234,4,2,0,1,2,0,0,83,1,2,0,134,2,0,0,120,193,3,0,134,2,0,0,104,107,4,0,2,1,0,0,196,0,2,0,82,1,1,0,135,2,47,1,1,0,0,0,135,2,208,0,1,1,3,0,1,3,143,58,134,2,0,0,48,143,3,0,1,3,0,0,137,0,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,116,112,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,2,4,0,0,136,2,2,0,82,5,1,0,85,4,5,0,137,2,0,0,1,5,0,0,139,5,0,0,140,0,4,0,0,0,0,0,134,1,0,0,0,142,4,0,121,1,12,0,82,0,1,0,121,0,10,0,25,3,0,48,134,2,0,0,124,136,4,0,3,0,0,0,121,2,5,0,106,3,0,12,134,2,0,0,156,118,4,0,3,0,0,0,134,3,0,0,140,142,4,0,134,2,0,0,156,118,4,0,3,0,0,0,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,40,113,4,0,1,4,16,0,135,3,0,0,4,0,0,0,0,1,2,0,85,1,0,0,1,3,0,0,82,4,1,0,48,3,3,4,76,113,4,0,1,4,1,0,135,3,46,1,4,1,0,0,137,2,0,0,139,0,0,0,140,3,6,0,0,0,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,140,113,4,0,1,5,16,0,135,4,0,0,5,0,0,0,113,3,8,0,113,3,4,1,89,3,2,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,136,4,0,0,0,2,4,0,136,4,0,0,25,4,4,63,38,4,4,192,137,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,236,113,4,0,1,5,16,0,135,4,0,0,5,0,0,0,0,1,3,0,85,1,0,0,82,5,1,0,135,4,7,0,5,0,0,0,137,2,0,0,139,0,0,0,140,2,6,0,0,0,0,0,25,3,0,8,82,2,3,0,47,5,1,2,48,114,4,0,4,5,2,1,85,3,5,0,1,4,1,0,119,0,2,0,1,4,0,0,139,4,0,0,140,2,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,112,114,4,0,1,4,16,0,135,3,0,0,4,0,0,0,109,2,4,0,85,2,1,0,137,2,0,0,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,63,38,3,3,192,137,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,204,114,4,0,1,4,16,0,135,3,0,0,4,0,0,0,85,2,0,0,137,1,0,0,1,3,0,0,139,3,0,0,140,3,7,0,0,0,0,0,121,2,8,0,106,5,0,4,106,6,1,4,134,4,0,0,144,58,4,0,5,6,0,0,32,3,4,0,119,0,2,0,13,3,0,1,139,3,0,0,140,2,5,0,0,0,0,0,136,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,68,115,4,0,1,4,16,0,135,3,0,0,4,0,0,0,109,2,4,0,85,2,1,0,137,2,0,0,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,63,38,3,3,192,137,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,160,115,4,0,1,4,16,0,135,3,0,0,4,0,0,0,89,2,0,0,137,1,0,0,59,3,0,0,145,3,3,0,139,3,0,0,140,1,5,0,0,0,0,0,0,1,0,0,2,2,0,0,96,2,2,0,25,3,1,36,116,1,2,0,25,1,1,4,25,2,2,4,54,4,1,3,204,115,4,0,139,0,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,63,38,3,3,192,137,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,48,116,4,0,1,4,16,0,135,3,0,0,4,0,0,0,89,2,0,0,137,1,0,0,59,3,2,0,145,3,3,0,139,3,0,0,140,1,5,0,0,0,0,0,136,3,0,0,0,1,3,0,136,3,0,0,25,3,3,63,38,3,3,192,137,3,0,0,0,2,3,0,136,3,0,0,25,3,3,16,137,3,0,0,130,3,0,0,136,4,0,0,49,3,3,4,144,116,4,0,1,4,16,0,135,3,0,0,4,0,0,0,89,2,0,0,137,1,0,0,59,3,1,0,145,3,3,0,139,3,0,0,140,2,4,0,0,0,0,0,134,3,0,0,252,136,4,0,1,0,0,0,134,2,0,0,240,145,3,0,0,1,3,0,139,2,0,0,140,0,3,0,0,0,0,0,1,1,0,0,135,0,220,0,1,0,0,0,2,1,0,0,104,0,2,0,82,1,1,0,2,2,0,0,112,0,2,0,82,2,2,0,135,0,48,1,1,2,0,0,2,2,0,0,104,0,2,0,82,2,2,0,2,1,0,0,116,0,2,0,82,1,1,0,135,0,48,1,2,1,0,0,2,1,0,0,112,0,2,0,82,1,1,0,135,0,49,1,1,0,0,0,2,1,0,0,116,0,2,0,82,1,1,0,135,0,49,1,1,0,0,0,2,1,0,0,104,0,2,0,82,1,1,0,135,0,2,1,1,0,0,0,139,0,0,0,140,2,6,0,0,0,0,0,25,2,1,20,106,3,2,4,0,4,0,0,116,4,2,0,109,4,4,3,139,0,0,0,140,2,6,0,0,0,0,0,25,2,1,16,106,3,2,4,0,4,0,0,116,4,2,0,109,4,4,3,139,0,0,0,140,1,5,0,0,0,0,0,2,1,0,0,72,254,1,0,0,2,0,0,25,3,1,64,116,1,2,0,25,1,1,4,25,2,2,4,54,4,1,3,180,117,4,0,139,0,0,0,140,1,5,0,0,0,0,0,102,1,0,11,34,1,1,0,121,1,9,0,82,2,0,0,106,3,0,8,2,4,0,0,255,255,255,127,19,3,3,4,134,1,0,0,64,123,4,0,2,3,0,0,139,0,0,0,140,1,5,0,0,0,0,0,2,1,0,0,140,254,1,0,0,2,0,0,25,3,1,64,116,1,2,0,25,1,1,4,25,2,2,4,54,4,1,3,28,118,4,0,139,0,0,0,140,2,6,0,0,0,0,0,112,4,0,4,145,4,4,0,65,2,4,1,145,2,2,0,25,3,0,24,88,5,3,0,145,5,5,0,63,4,5,2,145,4,4,0,89,3,4,0,139,0,0,0,140,2,6,0,0,0,0,0,112,4,0,4,145,4,4,0,65,2,4,1,145,2,2,0,25,3,0,20,88,5,3,0,145,5,5,0,63,4,5,2,145,4,4,0,89,3,4,0,139,0,0,0,140,1,4,0,0,0,0,0,136,2,0,0,25,2,2,63,38,2,2,192,137,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,224,118,4,0,1,3,16,0,135,2,0,0,3,0,0,0,38,3,0,7,135,2,44,1,3,0,0,0,1,3,144,86,134,2,0,0,244,108,4,0,3,1,0,0,139,0,0,0,140,1,5,0,0,0,0,0,134,2,0,0,120,141,4,0,82,4,2,0,109,0,56,4,82,1,2,0,121,1,2,0,109,1,52,0,85,2,0,0,134,4,0,0,204,141,4,0,139,0,0,0,140,2,7,0,0,0,0,0,61,4,0,0,0,0,240,63,145,4,4,0,61,6,0,0,0,0,160,63,145,6,6,0,65,5,1,6,145,5,5,0,64,3,4,5,145,3,3,0,61,6,0,0,0,0,192,62,145,6,6,0,65,4,1,6,145,4,4,0,65,5,4,1,145,5,5,0,63,2,3,5,145,2,2,0,139,2,0,0,140,3,6,0,0,0,0,0,121,1,8,0,134,4,0,0,216,136,4,0,2,0,0,0,1,5,255,0,19,4,4,5,135,3,5,0,0,4,1,0,139,0,0,0,140,0,4,0,0,0,0,0,136,2,0,0,0,1,2,0,136,2,0,0,25,2,2,16,137,2,0,0,130,2,0,0,136,3,0,0,49,2,2,3,240,119,4,0,1,3,16,0,135,2,0,0,3,0,0,0,0,0,1,0,59,2,0,0,87,0,2,0,137,1,0,0,86,2,0,0,139,2,0,0,140,4,7,0,0,0,0,0,4,5,1,3,0,4,5,0,16,6,0,2,4,4,5,6,135,6,12,0,4,0,0,0,4,6,0,2,139,6,0,0,140,3,4,0,0,0,0,0,120,2,3,0,1,3,0,0,119,0,4,0,134,3,0,0,204,73,4,0,0,1,2,0,139,3,0,0,140,2,6,0,0,0,0,0,25,2,0,8,82,4,2,0,4,3,4,1,85,2,3,0,34,4,3,1,121,4,3,0,1,5,1,0,107,0,44,5,139,0,0,0,140,1,3,0,0,0,0,0,1,1,0,0,85,0,1,0,1,2,0,0,109,0,4,2,1,1,0,0,109,0,8,1,1,2,0,0,109,0,12,2,1,1,0,0,109,0,16,1,2,2,0,0,0,0,128,63,109,0,20,2,139,0,0,0,140,2,6,0,0,0,0,0,82,4,1,0,1,5,8,0,26,5,5,1,3,4,4,5,1,5,8,0,26,5,5,1,11,5,5,0,19,4,4,5,0,2,4,0,86,3,2,0,25,4,2,8,85,1,4,0,87,0,3,0,139,0,0,0,140,1,4,0,0,0,0,0,41,2,0,16,42,2,2,16,120,2,3,0,1,1,0,0,119,0,8,0,134,2,0,0,120,142,4,0,2,3,0,0,255,255,0,0,19,3,0,3,85,2,3,0,1,1,255,255,139,1,0,0,140,1,6,0,0,0,0,0,78,2,0,0,102,3,0,1,102,4,0,2,102,5,0,3,134,1,0,0,188,191,3,0,2,3,4,5,134,1,0,0,16,141,4,0,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,204,117,4,0,0,0,0,0,139,0,0,0,140,5,6,0,0,0,0,0,135,5,197,0,0,1,2,3,4,0,0,0,139,0,0,0,140,0,3,0,0,0,0,0,136,1,0,0,25,1,1,63,38,1,1,192,137,1,0,0,0,0,1,0,136,1,0,0,25,1,1,16,137,1,0,0,130,1,0,0,136,2,0,0,49,1,1,2,224,121,4,0,1,2,16,0,135,1,0,0,2,0,0,0,1,2,31,87,134,1,0,0,244,108,4,0,2,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,1,2,0,240,48,2,2,0,36,122,4,0,134,2,0,0,120,142,4,0,1,3,0,0,4,3,3,0,85,2,3,0,1,1,255,255,119,0,2,0,0,1,0,0,139,1,0,0,140,2,4,0,0,0,0,0,25,2,0,8,82,3,2,0,3,3,3,1,85,2,3,0,139,0,0,0,140,3,4,0,0,0,0,0,121,2,3,0,135,3,11,0,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,121,2,3,0,135,3,2,0,0,1,2,0,139,0,0,0,140,1,4,0,0,0,0,0,127,2,0,0,87,2,0,0,127,2,0,0,82,1,2,0,127,3,0,0,106,3,3,4,135,2,12,0,3,0,0,0,139,1,0,0,140,5,6,0,0,0,0,0,135,5,182,0,0,1,2,3,4,0,0,0,139,0,0,0,140,9,11,0,0,0,0,0,1,10,27,0,135,9,50,1,10,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,82,3,1,0,109,0,20,3,106,2,1,4,109,0,24,2,139,0,0,0,140,0,3,0,0,0,0,0,136,1,0,0,0,0,1,0,136,1,0,0,25,1,1,32,137,1,0,0,130,1,0,0,136,2,0,0,49,1,1,2,40,123,4,0,1,2,32,0,135,1,0,0,2,0,0,0,1,2,92,41,134,1,0,0,228,2,3,0,0,2,0,0,137,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,134,2,0,0,40,135,4,0,0,0,0,0,139,0,0,0,140,2,6,0,0,0,0,0,82,3,0,0,4,2,3,1,1,4,0,0,15,4,4,2,1,5,0,0,125,3,4,2,5,0,0,0,85,0,3,0,139,0,0,0,140,1,2,0,0,0,0,0,1,1,0,0,85,0,1,0,134,1,0,0,152,124,4,0,0,0,0,0,139,0,0,0,140,4,8,0,0,0,0,0,3,4,0,2,3,6,1,3,16,7,4,0,3,6,6,7,135,5,12,0,6,0,0,0,139,4,0,0,140,4,5,0,0,0,0,0,135,4,195,0,0,1,2,3,139,0,0,0,140,2,4,0,0,0,0,0,1,2,160,39,85,0,2,0,25,3,0,4,134,2,0,0,244,92,4,0,3,1,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,48,0,134,1,0,0,116,104,4,0,2,0,0,0,134,2,0,0,156,79,4,0,1,0,0,0,109,0,4,1,139,0,0,0,140,3,6,0,0,0,0,0,2,4,0,0,0,0,0,128,1,5,0,0,134,3,0,0,44,34,4,0,0,1,2,4,5,0,0,0,135,5,3,0,139,3,0,0,140,8,10,0,0,0,0,0,1,9,26,0,135,8,51,1,9,0,0,0,139,0,0,0,140,4,5,0,0,0,0,0,135,4,75,0,0,1,2,3,139,0,0,0,140,4,5,0,0,0,0,0,135,4,66,0,0,1,2,3,139,0,0,0,140,1,2,0,0,0,0,0,82,1,0,0,39,1,1,1,85,0,1,0,139,0,0,0,140,2,6,0,0,0,0,0,134,2,0,0,132,97,3,0,0,1,0,0,78,4,2,0,1,5,255,0,19,5,1,5,41,5,5,24,42,5,5,24,13,4,4,5,1,5,0,0,125,3,4,2,5,0,0,0,139,3,0,0,140,2,6,0,0,0,0,0,134,3,0,0,68,108,3,0,0,1,0,0,3,2,0,3,78,4,2,0,32,4,4,0,1,5,0,0,125,3,4,5,2,0,0,0,139,3,0,0,140,0,2,0,0,0,0,0,2,0,0,0,16,253,1,0,78,0,0,0,120,0,17,0,2,1,0,0,16,253,1,0,134,0,0,0,128,125,4,0,1,0,0,0,121,0,11,0,2,1,0,0,196,253,1,0,134,0,0,0,128,120,4,0,1,0,0,0,2,1,0,0,16,253,1,0,134,0,0,0,132,123,4,0,1,0,0,0,2,0,0,0,196,253,1,0,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,16,127,4,0,0,0,0,0,40,1,1,1,38,1,1,1,139,1,0,0,140,4,5,0,0,0,0,0,135,4,178,0,0,1,2,3,139,0,0,0,140,1,6,0,0,0,0,0,120,0,3,0,1,1,0,0,119,0,10,0,1,3,32,37,1,4,120,37,1,5,0,0,134,2,0,0,4,219,2,0,0,3,4,5,33,2,2,0,38,2,2,1,0,1,2,0,139,1,0,0,140,0,2,0,0,0,0,0,2,0,0,0,220,253,1,0,1,1,0,0,85,0,1,0,134,1,0,0,4,89,4,0,134,1,0,0,20,156,3,0,134,1,0,0,240,122,4,0,2,1,0,0,144,253,1,0,1,0,0,0,85,1,0,0,1,1,244,37,134,0,0,0,136,133,4,0,1,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,0,0,134,4,0,0,88,185,1,0,0,1,2,3,5,0,0,0,139,4,0,0,140,2,5,0,0,0,0,0,135,2,23,0,0,0,0,0,1,4,1,0,134,3,0,0,4,58,4,0,0,4,2,1,14,3,3,2,41,3,3,31,42,3,3,31,139,3,0,0,140,2,4,0,0,0,0,0,120,0,3,0,1,2,0,0,119,0,5,0,1,3,0,0,134,2,0,0,76,189,3,0,0,1,3,0,139,2,0,0,140,7,9,0,0,0,0,0,1,8,25,0,135,7,52,1,8,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,34,4,1,0,41,4,4,31,42,4,4,31,134,3,0,0,120,102,4,0,0,1,4,2,139,3,0,0,140,5,7,0,0,0,0,0,1,6,18,0,135,5,53,1,6,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,78,1,0,0,33,1,1,0,139,1,0,0,140,0,2,0,0,0,0,0,2,0,0,0,0,220,1,0,2,1,0,0,24,255,1,0,82,1,1,0,27,1,1,48,94,0,0,1,36,0,0,0,121,0,2,0,139,0,0,0,134,0,0,0,216,212,3,0,134,0,0,0,12,2,2,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,61,3,0,0,0,0,160,63,145,3,3,0,134,1,0,0,12,133,4,0,2,3,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,59,3,1,0,145,3,3,0,134,1,0,0,12,133,4,0,2,3,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,61,3,0,0,0,0,64,63,145,3,3,0,134,1,0,0,12,133,4,0,2,3,0,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,193,0,0,1,2,0,139,0,0,0,140,2,3,0,0,0,0,0,78,2,1,0,83,0,2,0,139,0,0,0,140,1,5,0,0,0,0,0,1,2,32,3,1,3,194,1,1,4,192,39,134,1,0,0,52,129,3,0,2,3,4,0,134,1,0,0,240,125,4,0,1,4,60,0,134,1,0,0,4,81,4,0,4,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,25,2,0,24,134,1,0,0,204,117,4,0,2,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,60,139,4,0,0,0,0,0,134,1,0,0,224,140,4,0,0,0,0,0,139,0,0,0,140,2,2,0,0,0,0,0,137,0,0,0,132,0,0,1,139,0,0,0,140,6,8,0,0,0,0,0,1,7,4,0,135,6,54,1,7,0,0,0,1,6,0,0,139,6,0,0,140,4,6,0,0,0,0,0,1,5,0,0,135,4,12,0,5,0,0,0,1,4,0,0,139,4,0,0,140,1,3,0,0,0,0,0,1,1,160,39,85,0,1,0,25,2,0,4,134,1,0,0,152,105,4,0,2,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,60,139,4,0,0,0,0,0,134,1,0,0,224,140,4,0,0,0,0,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,165,0,0,1,2,0,139,0,0,0,140,3,4,0,0,0,0,0,135,3,174,0,0,1,2,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,10,0,134,1,0,0,192,131,4,0,2,3,0,0,139,0,0,0,140,2,2,0,0,0,0,0,85,0,1,0,139,0,0,0,140,6,8,0,0,0,0,0,1,7,24,0,135,6,55,1,7,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,15,0,134,1,0,0,192,131,4,0,2,3,0,0,139,0,0,0,140,0,4,0,0,0,0,0,1,1,136,37,134,0,0,0,4,128,4,0,1,0,0,0,1,1,2,0,1,2,0,0,1,3,1,0,135,0,56,1,1,2,3,0,134,0,0,0,236,99,4,0,134,0,0,0,128,111,4,0,1,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,2,0,134,1,0,0,4,135,4,0,2,3,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,5,0,134,1,0,0,192,131,4,0,2,3,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,11,0,135,4,57,1,5,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,3,0,134,1,0,0,4,135,4,0,2,3,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,100,0,134,1,0,0,64,133,4,0,2,3,0,0,139,0,0,0,140,3,6,0,0,0,0,0,1,4,1,0,1,5,6,0,134,3,0,0,68,24,3,0,0,1,2,4,5,0,0,0,139,3,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,125,0,134,1,0,0,64,133,4,0,2,3,0,0,139,0,0,0,140,3,4,0,0,0,0,0,82,3,0,0,38,3,3,32,120,3,4,0,134,3,0,0,92,121,3,0,1,2,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,2,0,4,1,3,75,0,134,1,0,0,64,133,4,0,2,3,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,17,0,135,4,58,1,5,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,2,4,0,0,255,255,255,127,134,3,0,0,248,141,3,0,0,4,1,2,139,3,0,0,140,0,2,0,0,0,0,0,2,0,0,0,0,220,1,0,2,1,0,0,24,255,1,0,82,1,1,0,27,1,1,48,94,0,0,1,1,1,0,32,47,0,0,1,116,131,4,0,139,0,0,0,134,0,0,0,36,127,4,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,150,0,0,1,0,0,139,0,0,0,140,1,3,0,0,0,0,0,25,2,0,4,134,1,0,0,96,135,4,0,2,0,0,0,139,1,0,0,140,1,2,0,0,0,0,0,25,1,0,12,139,1,0,0,140,2,3,0,0,0,0,0,109,0,12,1,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,64,137,4,0,0,0,0,0,1,1,188,37,85,0,1,0,139,0,0,0,140,1,4,0,0,0,0,0,134,2,0,0,88,140,4,0,0,0,0,0,32,1,2,0,121,1,3,0,0,2,0,0,119,0,3,0,39,3,0,32,0,2,3,0,139,2,0,0,140,2,3,0,0,0,0,0,135,2,191,0,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,154,0,0,1,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,95,0,0,1,0,0,139,0,0,0,140,1,4,0,0,0,0,0,106,3,0,60,134,2,0,0,108,141,4,0,3,0,0,0,135,1,37,1,2,0,0,0,2,2,0,0,255,255,0,0,19,1,1,2,139,1,0,0,140,1,3,0,0,0,0,0,106,1,0,4,1,2,1,0,85,1,2,0,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,64,137,4,0,0,0,0,0,1,1,220,37,85,0,1,0,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,64,137,4,0,0,0,0,0,1,1,156,37,85,0,1,0,139,0,0,0,140,1,2,0,0,0,0,0,26,1,0,12,139,1,0,0,140,5,7,0,0,0,0,0,1,6,23,0,135,5,59,1,6,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,113,0,4,1,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,204,128,4,0,0,0,0,0,134,1,0,0,224,140,4,0,0,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,109,0,8,1,139,0,0,0,140,1,2,0,0,0,0,0,134,1,0,0,204,128,4,0,0,0,0,0,134,1,0,0,224,140,4,0,0,0,0,0,139,0,0,0,140,2,3,0,0,0,0,0,135,2,170,0,0,1,0,0,139,0,0,0,140,1,2,0,0,0,0,0,25,1,0,4,116,0,1,0,139,0,0,0,140,0,2,0,0,0,0,0,2,0,0,0,184,253,1,0,2,1,0,0,184,253,1,0,85,0,1,0,2,1,0,0,188,253,1,0,2,0,0,0,184,253,1,0,85,1,0,0,2,0,0,0,192,253,1,0,1,1,0,0,85,0,1,0,139,0,0,0,140,0,2,0,0,0,0,0,2,0,0,0,172,253,1,0,2,1,0,0,172,253,1,0,85,0,1,0,2,1,0,0,176,253,1,0,2,0,0,0,172,253,1,0,85,1,0,0,2,0,0,0,180,253,1,0,1,1,0,0,85,0,1,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,7,0,135,4,60,1,5,0,0,0,1,4,0,0,139,4,0,0,140,2,4,0,0,0,0,0,1,3,76,38,82,3,3,0,134,2,0,0,128,130,4,0,3,0,1,0,139,2,0,0,140,1,3,0,0,0,0,0,1,2,0,0,135,1,12,0,2,0,0,0,1,1,0,0,139,1,0,0,140,2,4,0,0,0,0,0,135,3,23,0,0,0,0,0,25,3,3,1,134,2,0,0,232,103,4,0,0,1,3,0,139,2,0,0,140,0,2,0,0,0,0,0,2,0,0,0,88,253,1,0,2,1,0,0,88,253,1,0,85,0,1,0,2,1,0,0,92,253,1,0,2,0,0,0,88,253,1,0,85,1,0,0,2,0,0,0,96,253,1,0,1,1,0,0,85,0,1,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,15,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,15,0,139,0,0,0,140,2,2,0,0,0,0,0,85,0,1,0,139,0,0,0,140,1,2,0,0,0,0,0,102,1,0,44,33,1,1,0,139,1,0,0,140,1,2,0,0,0,0,0,134,1,0,0,224,140,4,0,0,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,1,0,135,2,61,1,3,0,0,0,59,2,0,0,145,2,2,0,139,2,0,0,140,1,2,0,0,0,0,0,82,1,0,0,139,1,0,0,140,4,6,0,0,0,0,0,1,5,22,0,135,4,62,1,5,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,102,1,0,44,33,1,1,0,139,1,0,0,140,1,2,0,0,0,0,0,106,1,0,4,139,1,0,0,140,3,5,0,0,0,0,0,1,4,16,0,135,3,63,1,4,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,0,0,0,160,253,1,0,1,1,0,0,85,0,1,0,2,1,0,0,164,253,1,0,1,0,0,0,85,1,0,0,2,0,0,0,168,253,1,0,1,1,0,0,85,0,1,0,139,0,0,0], eb + 286720);
  HEAPU8.set([140,0,2,0,0,0,0,0,2,0,0,0,148,253,1,0,1,1,0,0,85,0,1,0,2,1,0,0,152,253,1,0,1,0,0,0,85,1,0,0,2,0,0,0,156,253,1,0,1,1,0,0,85,0,1,0,139,0,0,0,140,1,2,0,0,0,0,0,135,1,64,1,0,0,0,0,134,1,0,0,152,112,4,0,139,0,0,0,140,1,2,0,0,0,0,0,106,1,0,8,139,1,0,0,140,1,2,0,0,0,0,0,135,1,76,0,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,1,1,0,0,139,1,0,0,140,1,4,0,0,0,0,0,59,2,0,0,74,2,0,2,121,2,8,0,61,3,0,0,0,0,0,63,63,3,0,3,135,2,246,0,3,0,0,0,58,1,2,0,119,0,7,0,61,3,0,0,0,0,0,63,64,3,0,3,135,2,18,0,3,0,0,0,58,1,2,0,139,1,0,0,140,1,2,0,0,0,0,0,1,1,255,0,19,1,0,1,139,1,0,0,140,1,2,0,0,0,0,0,82,1,0,0,139,1,0,0,140,1,2,0,0,0,0,0,135,1,23,0,0,0,0,0,139,1,0,0,140,1,2,0,0,0,0,0,1,1,1,0,139,1,0,0,140,1,2,0,0,0,0,0,106,1,0,4,139,1,0,0,140,1,2,0,0,0,0,0,106,1,0,12,139,1,0,0,140,1,2,0,0,0,0,0,1,1,8,38,85,0,1,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,6,0,135,3,65,1,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,20,0,135,3,66,1,4,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,32,1,0,32,26,2,0,9,35,2,2,5,20,1,1,2,38,1,1,1,139,1,0,0,140,1,2,0,0,0,0,0,135,1,147,0,0,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,1,0,107,0,44,2,139,0,0,0,140,0,3,0,0,0,0,0,2,1,0,0,132,253,1,0,2,2,0,0,116,253,1,0,134,0,0,0,92,129,4,0,1,2,0,0,139,0,0,0,140,0,3,0,0,0,0,0,2,1,0,0,128,253,1,0,2,2,0,0,108,253,1,0,134,0,0,0,92,129,4,0,1,2,0,0,139,0,0,0,140,0,3,0,0,0,0,0,2,1,0,0,124,253,1,0,2,2,0,0,100,253,1,0,134,0,0,0,92,129,4,0,1,2,0,0,139,0,0,0,140,1,3,0,0,0,0,0,82,2,0,0,135,1,7,0,2,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,106,1,0,8,139,1,0,0,140,0,2,0,0,0,0,0,1,0,0,0,134,1,0,0,96,139,4,0,15,0,0,1,139,0,0,0,140,0,2,0,0,0,0,0,2,0,0,0,136,253,1,0,134,1,0,0,28,125,4,0,85,0,1,0,139,0,0,0,140,1,2,0,0,0,0,0,82,1,0,0,139,1,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,21,0,135,3,67,1,4,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,10,0,135,2,68,1,3,0,0,0,139,0,0,0,140,0,3,0,0,0,0,0,1,2,0,0,135,1,69,1,2,0,0,0,134,0,0,0,8,108,4,0,1,0,0,0,2,0,0,0,40,253,1,0,134,1,0,0,88,142,4,0,87,0,1,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,14,0,135,3,70,1,4,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,72,142,4,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,0,0,135,1,71,1,2,0,0,0,59,1,0,0,145,1,1,0,139,1,0,0,140,2,3,0,0,0,0,0,134,2,0,0,184,230,3,0,0,1,0,0,139,2,0,0,140,0,2,0,0,0,0,0,2,1,0,0,108,253,1,0,134,0,0,0,208,131,4,0,1,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,5,0,135,2,72,1,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,15,0,135,2,73,1,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,12,0,135,2,74,1,3,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,116,253,1,0,134,0,0,0,164,132,4,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,100,253,1,0,134,0,0,0,196,132,4,0,1,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,26,1,0,65,35,1,1,26,139,1,0,0,140,1,2,0,0,0,0,0,26,1,0,48,35,1,1,10,139,1,0,0,140,0,2,0,0,0,0,0,2,1,0,0,196,0,2,0,82,1,1,0,135,0,75,1,1,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,19,0,135,2,76,1,3,0,0,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,1,1,0,0,139,1,0,0,140,1,2,0,0,0,0,0,135,1,7,0,0,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,48,253,1,0,86,0,1,0,145,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,0,65,135,0,35,0,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,184,142,4,0,139,0,0,0,140,0,1,0,0,0,0,0,134,0,0,0,184,142,4,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,3,0,135,1,77,1,2,0,0,0,1,1,0,0,139,1,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,208,2,2,0,135,0,78,1,1,0,0,0,2,0,0,0,216,2,2,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,9,0,135,1,79,1,2,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,212,0,2,0,82,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,2,1,0,0,208,2,2,0,135,0,80,1,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,208,0,2,0,82,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,220,2,2,0,139,0,0,0,140,1,1,0,0,0,0,0,139,0,0,0,140,1,2,0,0,0,0,0,1,1,1,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,13,0,135,1,81,1,2,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,135,0,82,1,139,0,0,0,140,0,1,0,0,0,0,0,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,2,0,0,0,204,2,2,0,139,0,0,0,140,0,1,0,0,0,0,0,1,0,3,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,2,0,135,0,83,1,1,0,0,0,1,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,1,0,84,38,139,0,0,0,140,0,1,0,0,0,0,0,1,0,4,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,8,0,135,0,84,1,1,0,0,0,139,0,0,0], eb + 296960);

  var relocations = [];
  relocations = relocations.concat([84,380,404,640,696,768,804,928,948,952,956,960,964,968,972,1260,1396,1516,1544,1572,1576,1580,1584,1588,1592,1596,1648,1812,1992,2168,2364,2592,2776,3012,3116,3120,3124,3128,3132,3136,3140,3192,3268,3340,3432,3556,3636,3920,4208,4524,4584,5156,5216,5280,5344,5408,5472,5596,6024,6200,7452,7488,8216,8360,8412,8756,8792,9964,10000,10764,10924,10956,10976,11024,11052,11084,11112,11144,11172,11204,11232,11264,11292,11324,11352,11384,11412,11444,11472,11504,11532,11564,11592,11624,11652,11684,11712,11744,11772,11804,11832,11864,11892,11924,11952,11984,12012,12044,12072,12104,12132,12164,12192,12224,12252,12284,12312,12344,12372,12404,12432,12464,12492,12524,12552,12584,12612,12644,12672,12704,12732,12764,12792,12824,12852,12888,12916,12952,12980,13016,13044,13080,13108,13144,13172,13208,13236,13272,13300,13336,13364,13400,13428,13464,13492,13528,13556,13592,13620,13656,13684,13720,13748,13784,13812,13848,13876,14012,14016,14020,14024,14028,14032,14036,14040,14044,14048,14280,14972,15224,15628,15668,15796,15828,15860,15904,16000,16060,16204,16264,16304,16360,16456,16684,16864,16892,16944,17040,17132,17168,17872,17884,17916,17948,18000,18096,18128,18348,18376,18456,18504,18820,19296,19312,19332,19392,19412,19448,19552,19584,19608,19648,19804,19824,19920,19968,20136,20344,20452,20572,20616,20636,20680,20720,20752,20904,21012,21052,21148,21208,21280,21360,21464,21468,21472,21476,21480,21484,21488,21492,21496,21500,21504,21508,21512,21516,21520,21524,21528,21532,21536,21540,21544,21548,21552,21556,21560,21564,21568,21572,21576,21580,21584,21588,21592,21596,21600,21604,21608,21612,21616,21620,21624,21628,21632,21636,21640,21644,21648,21652,21656,21660,21664,21668,21672,21676,21680,21684,21688,21692,21696,21700,21704,21708,21712,21716,21720,21724,21728,21732,21736,21740,21744,21748,21752,21756,21760,21764,21768,21772,21776,21780,21784,21788,21792,21796,21800,21804,21808,21812,21816,21820,21824,21828,21832,21836,21840,21844,21848,21852,21856,21860,21864,21868,21872,21876,21880,21884,21888,21892,21896,21900,21904,21908,21912,21916,21920,21924,21928,21932,21936,21940,21944,21948,21952,21956,21960,21964,21968,23732,23796,24192,24964,25076,25668,25704,26616,26652,27072,27172,27860,27864,27868,27872,27892,28008,28048,28268,28384,28584,28700,28988,29104,29472,29588,30112,30200,30220,30316,30320,30324,30328,30332,30336,30340,30344,30348,30352,30356,30360,30364,30368,30372,30376,30380,30384,30388,30392,30396,30400,30404,30408,30412,30416,30420,30424,30428,30432,30436,30440,30444,30448,30452,30456,30460,30464,31540,31608,31900,31904,31908,31912,31916,31920,31924,31928,31932,31936,31940,31944,31948,31952,31956,31960,31964,31968,31972,31976,31980,31984,31988,31992,31996,32000,32004,32008,32012,32016,32020,32024,32028,32032,32036,32040,32044,32048,32052,32056,32060,32064,32068,32072,32076,32080,32084,32088,32092,32096,32100,32104,32108,32112,32116,32120,32520,32524,32528,32532,32536,32540,32544,32548,33268,33404,33436,33544,33992,34124,34544,34604,34856,35400,35928,37080,37156,37180,37244,37268,37404,37452,37584,38024,38456,38476,38492,38516,38616,38620,38624,38628,38632,38636,38640,38644,38688,38764,38880,38956,39144,39220,39344,39420,39652,39728,39848,39924,40148,40224,40324,40400,40620,40776,40792,40932,40956,41048,41072,41292,41552,41672,41876,41940,42064,42112,42180,42280,42436,42668,42708,42784,42920,42952,43044,43144,43460,43684,43900,43932,44272,44396,44420,44604,44736,44864,44996,45220,45468,45676,45680,45684,45688,45692,45696,45700,45704,45708,45712,45788,46084,46484,46824,47168,47608,48024,48408,48692,48948,49332,49832,49836,49840,49844,49868,49992,50104,50320,50432,50700,50820,51176,51296,51732,51852,52396,55328,55912,55936,55956,56292,56400,56420,56552,56816,56944,56964,57096,57192,57288,57456,57660,57872,58104,58212,58248,58284,58324,58364,58392,58396,58400,58404,58424,58536,58676,58868,59148,59508,59960,59964,59968,59972,59976,59980,59984,59988,59992,59996,60000,60004,60008,60012,60016,60020,60024,60028,60032,60036,60040,60044,60048,60052,60056,60060,60064,60068,60072,60076,60080,60084,60088,60092,60096,60100,60104,60108,60112,60116,60424,60740,60876,60892,61008,61024,61132,61136,61140,61144,61148,61152,61156,61160,61212,61252,61424,61464,61720,61760,61940,61980,62312,62352,62520,62560,62868,62908,63028,63068,63392,63416,63500,63528,63536,63552,63564,63624,63640,63660,63708,63836,63872,63892,63912,63972,64052,64076,64132,64160,64220,64276,64316,64384,64444,64524,64552,64560,64576,64588,64640,64656,64676,64716,64844,64880,64900,64920,64968,65040,65064,65112,65140,65188,65240,65308,65408,65480,65744,65844,65888,66028,66332,66404,66492,66512,66532,66552,66572,66592,66716,66732,67136,67164,67228,67292,67444,67496,67524,67588,67652,67856,68572,68804,68892,68916,69096,69116,69136,69612,69672,69756,69844,69912,69972,70056,70144,70212,70272,70356,70444,70512,70568,70644,70724,70836,71024,71332,71368,71404,71440,71476,71516,71644,71672,71760,71792,72480,72596,72940,72992,73056,73060,73064,73112,73192,73284,73328,73468,73612,73812,73900,74040,74076,74304,74428,74460,74568,74776,74820,74900,74916,74956,79856,80280,80408,80412,80416,80420,80444,80484,80628,80752,80964,81256,81672,81716,83732,83836,84948,85144,85292,85340,85372,85440,85472,85568,86184,86356,86500,87256,87368,87496,87608,87976,88112,88132,88236,88256,88316,88336,88376,88600,88728,89152,91456,91536,91608,91628,91632,91636,91640,91644,91648,91652,91656,91660,91664,93932,94260,94420,94436,94536,94624,94688,94728,95904,96032,96248,96288,96320,96368,96392,96456,97632,97740,97888,97908,97912,97916,97920,97924,97928,97932,97936,97940,97944,100100,100192,100400,100500,100504,100508,100512,100516,100520,100524,100528,100532,100536,100540,100544,100548,100552,100556,100560,100564,100568,100572,100576,100580,100584,100588,100592,100596,100600,102012,102104,102304,102396,102400,102404,102408,102412,102416,102420,102424,102428,102432,102436,102440,102444,102448,102452,102456,102460,102464,102468,102472,102476,102480,102484,102488,102492,102496,103912,103992,106152,106876,107420,107568,109276,109324,109512,109576,109640,109688,109960,110096,110264,110344,110368,110388,110500,110588,110836,110968,111148,111480,111616,112124,112428,114388,114688,114704,114708,114712,114716,114720,114724,114992,114996,115000,115004,115008,115012,115052,115144,115236,115348,115500,115596,115776,115968,116012,116040,116072,116228,116376,116404,116436,116580,116716,116880,117016,117040,117196,117364,117664,117672,117728,117780,117860,117868,117924,117976,118236,118276,118448,118528,118548,118640,118748,118832,118856,118876,118988,119084,119344,119476,119636,120040,120664,120692,124424,124616,124688,125652,125672,125700,125724,125824,125856,125940,125964,125988,126160,126192,126228,126236,126252,126264,126316,126332,126352,126392,126520,126556,126576,126596,126652,126724,126748,126796,126824,126872,127088,127652,127732,128240,128428,129176,129212,129252,130416,130988,131292,131668,131784,131820,131876,131924,131956,132008,132064,132100,132160,132816,133432,133468,133492,133760,134452,134924,135060,135644,135860,135952,136764,136788,137008,137032,137396,137476,138604,138680,138884,138952,139008,139624,139912,141060,141204,141364,141456,141472,141488,141524,141536,141552,141564,141728,141744,141896,141912,141928,141964,141976,141992,142004,142212,142300,142936,142992,143476,143612,143664,143736,143756,143944,144056,144256,144536,144768,145068,145820,146356,146376,146848,147600,148372,148444,148576,148652,148724,148800,149196,150120,151420,152076,152556,152620,152848,153328,153392,153588,153884,154008,154316,154564,154828,154928,154964,155056,155308,155344,155904,156060,156100,156180,156212,156308,156440,156632,156840,157020,157112,157144,157176,157208,158444,158620,158792,158860,158916,159404,159536,159812,159972,160016,160136,160272,160372,160376,160380,160384,160388,160392,160396,160400,160404,160408,160412,160416,160420,160424,160428,160432,160436,160440,160444,160448,160452,161388,161600,161800,161844,161992,162204,162404,162448,162580,163244,163352,163612,163640,163664,163800,163984,164248,164272,164836,165316,165340,165468,165500,165532,165724,165940,166060,166088,166108,166136,166284,166464,166888,167188,167276,167548,167632,167692,168160,168220,168448,168588,169200,169468,169492,169764,170080,170344,170436,170460,170476,170580,170800,170876,170976,171072,171128,171148,171240,171708,172180,172220,172244,172312,172316,172320,172324,172396,172412,172500,172524,172544,172548,172552,172556,172660,172664,172668,172672,172928,172932,172936,173148,173436,173816,173932,173964,173988,174012,174408,174860,175480,175704,175836,176088,176356,176380,176552,176584,176760,176864,177316,177388,177620,177700,177848,178252,178496,178728,178832,178896,178960,179172,179244,179248,179252,179256,179820,179960,180108,180200,180516,180676,180720,180800,180896,180988,181500,181924,181928,181932,181936,181940,181944,181948,181952,181956,181960,182684,183124,183968,184452,185336,186292,186676,186764,186796,186916,186948,186992,187040,187072,187116,187200,187308,187460,187464,187652,188048,188248,188416,188488,188844,189460,189976,189992,190100,190116,191036,191104,191164,191900,192100,192384,192436,192468,192512,192568,192920,192952,192996,193068,193408,193488,193492,193496,193500,193504,193848,194016,194108,194240,194420,194460,194568,194628,194688,194844,194980,195080,195264,195616,195632,195896,195968,196028,196764,196912,197408,197848,198464,198628,198716,198924,199024,199040,199100,199116,199244,199700,200208,200328,201060,201412,201516,201960,202128,202168,202224,202408,202608,202884,202948,203004,203368,203476,203656,203808,204312,204380,204384,204388,204392,204460,204512,204556,204592,204648,204804,204928,205220,206156,206696,206992,207400,208008,208040,208092,208400,208528,208836,209224,209492,209688,210196,210660,210840,210944,210968,210992,211016,211132,211312,211412,211436,211460,211484,211600,211776,212008,212256,212456,212708,212792,212816,212848,212880,213064,213332,213648,213732,213984,214156,214188,214232,214308,214644,215000,215448,215708,215792,215912,216056,216248,216420,216572,216776,216852,216940,216992,217096,217168,217412,217576,217580,217584,217776,217952,218172,218364,218616,218988,219144,219304,219580,220044,220068,220220,220300,220620,220664,220860,220968,221300,221432,221440,222060,222396,222440,222664,222716,222992,223184,223352,223508,223908,224396,224780,224860,224864,224868,224872,224876,224880,224884,224888,224892,224896,224900,224904,224908,224912,224916,224920,224924,224928,224932,224936,224940,225212,225656,225816,225848,225892,225964,226448,226552,226604,226668,226768,226904,227084,227400,227664,227772,227908,228004,228304,228472,228488,228520,228628,228844,229012,229028,229064,229184,229288,229444,229496,229724,230232,230336,230488,230592,230740,230844,230956,231052,231204,231480,231796,231896,232380,232484,232624,232704,233020,233080,233328,233432,233452,233456,233460,233464,233468,233472,233624,233716,234028,234104,234288,234588,234796,234812,235100,235496,235640,235824,236056,236328,236456,236604,237088,237432,237496,237716,237892,238264,238460,238512,238516,238520,238524,238528,238532,238536,238540,238544,238548,238552,238556,238560,238564,238568,238572,238848,239172,239208,239444,239640,239892,240320,240484,240648,240812,240976,241140,241460,241724,242048,242188,242404,242636,242752,242920,243108,243308,244080,244140,244324,244584,244828,245156,245204,245360,245520,245588,245732,246012,246196,246248,246544,246812,247064,247092,247188,247208,247724,247996,248224,248412,248624,248768,248836,248916,248988,249236,249816,249868,249976,250112,250224,250248,250380,250540,250664,250912,251648,251720,251772,251868,251964,252148,252328,252772,252836,252908,253024,253052,253244,253476,253688,253748,253788,253880,254120,254172,254228,254396,254448,254620,254836,255032,255284,255540,255596,255612,255688,255820,256072,256196,256280,256416,256628,256912,257204,257208,257212,257216,257220,257224,257228,257232,257236,257240,257244,257248,257252,257256,257260,257264,257268,257272,257276,257280,257284,257288,257292,257296,257300,257304,257308,257312,257316,257320,257324,257328,257332,257336,257340,257344,257348,257352,257356,257360,257364,257368,257372,257376,257380,257384,257388,257392,257396,257400,257404,257408,257412,257416,257420,257424,257428,257432,257436,257440,257444,257448,257452,257456,257460,257464,257468,257472,257476,257480,257484,257488,257492,257496,257500,257504,257508,257512,257516,257520,257524,257528,257532,257536,257540,257544,257548,257552,257556,257560,257564,257568,257572,257576,257580,257584,257588,257592,257596,257600,257604,257608,257612,257616,257620,257624,257628,257632,257636,257640,257644,257648,257652,257656,257660,257664,257668,257672,257676,257680,257684,257688,257692,257696,257700,257704,257708,257712,257716,257720,257724,257728,257732,257736,257740,257744,257748,257752,257756,257760,257764,257768,257772,257776,257780,257784,257788,257792,257796,257800,257804,257808,257812,257816,257820,257824,257828,257832,257836,257840,257844,257848,257852,257856,257860,257864,257868,257872,257876,257880,257884,257888,257892,257896,257900,257904,257908,257912,257916,257920,257924,257928,257932,257936,257940,257944,257948,257952,257956,257960,257964,257968,257972,257976,257980,257984,257988,257992,257996,258000,258004,258008,258012,258016,258020,258024,258028,258032,258036,258040,258044,258048,258052,258056,258060,258064,258068,258072,258076,258080,258084,258088,258092,258096,258100,258104,258108,258112,258116,258120,258124,258128,258132,258136,258140,258144,258148,258152,258156,258160,258164,258168,258172,258176,258180,258184,258188,258192,258196,258200,258204,258208,258212,258216,258220,258224,258228,258232,258236,258240,258244,258248,258252,258256,258260,258264,258268,258272,258276,258280,258284,258288,258292,258296,258300,258304,258308,258312,258316,258320,258324,258328,258332,258336,258340,258344,258348,258352,258356,258360,258364,258368,258372,258376,258380,258384,258388,258392,258396,258400,258404,258408,258412,258416,258420,258424,258428,258432,258436,258440,258444,258448,258452,258456,258460,258464,258468,258472,258476,258480,258484,258488,258492,258496,258500,258504,258508,258512,258516,258520,258524,258528,258532,258536,258540,258544,258548,258552,258556,258560,258564,258568,258572,258576,258580,258584,258588,258592,258596,258600,258604,258608,258612,258616,258620,258624,258628,258632,258636,258640,258644,258648,258652,258656,258660,258664,258668,258672,258676,258680,258684,258688,258692,258696,258700,258704,258708,258712,258716,258720,258724,258728,258732,258736,258740,258744,258748,258752,258756,258760,258764,258768,258772,258776,258780,258784,258788,258792,258796,258800,258804,258808,258812,258816,258820,258824,258828,258832,258836,258840,258844,258848,258852,258856,258860,258864,258868,258872,258876,258880,258884,258888,258892,258896,258900,258904,258908,258912,258916,258920,258924,258928,258932,258936,258940,258944,258948,258952,258956,258960,258964,258968,258972,258976,258980,258984,258988,258992,258996,259000,259004,259008,259012,259016,259020,259024,259028,259032,259036,259040,259044,259048,259052,259056,259060,259064,259068,259072,259076,259080,259084,259088,259092,259096,259100,259104,259108,259112,259116,259120,259124,259128,259132,259136,259140,259144,259148,259152,259156,259160,259164,259168,259172,259176,259180,259184,259188,259192,259196,259200,259204,259208,259212,259216,259220,259224,259228,259232,259236,259240,259244,259248,259252,259256,259260,259264,259268,259272,259276,259280,259284,259288,259292,259296,259300,259304,259308,259312,259316,259320,259324,259328,259332,259336,259340,259344,259348,259352,259356,259360,259364,259368,259372,259376,259380,259384,259388,259392,259396,259400,259404,259408,259412,259416,259420,259424,259428,259432,259436,259440,259444,259448,259452,259456,259460,259464,259468,259472,259476,259480,259484,259488,259492,259496,259500,259504,259508,259512,259516,259520,259524,259528,259532,259536,259540,259544,259548,259552,259556,259560,259564,259568,259572,259576,259580,259584,259588,259592,259596,259600,259604,259608,259612,259616,259620,259624,259628,259632,259636,259640,259644,259648,259652,259656,259660,259664,259668,259672,259676,259680,259684,259688,259692,259696,259700,259704,259708,259712,259716,259720,259724,259728,259732,259736,259740,259744,259748,259752,259756,259760,259764,259768,259772,259776,259780,259784,259788,259792,259796,259800,259804,259808,259812,259816,259820,259824,259828,259832,259836,259840,259844,259848,259852,259856,259860,259864,259868,259872,259876,259880,259884,259888,259892,259896,259900,259904,259908,259912,259916,259920,259924,259928,259932,259936,259940,259944,259948,259952,259956,259960,259964,259968,259972,259976,259980,259984,259988,259992,259996,260000,260004,260008,260012,260016,260020,260024,260028,260032,260036,260040,260044,260048,260052,260056,260060,260064,260068,260072,260076,260080,260084,260088,260092,260096,260100,260104,260108,260112,260116,260120,260124,260128,260132,260136,260140,260144,260148,260152,260156,260160,260164,260168,260172,260176,260180,260184,260188,260192,260196,260200,260204,260208,260212,260216,260220,260224,260228,260232,260236,260240,260244,260248,260252,260256,260260,260264,260268,260272,260276,260280,260284,260288,260292,260296,260300,260304,260308,260312,260316,260320,260324,260328,260332,260336,260340,260344,260348,260352,260356,260360,260364,260368,260372,260376,260380,260384,260388,260392,260396,260400,260404,260408,260412,260416,260420,260424,260428,260432,260436,260440,260444,260448,260452,260456,260460,260464,260468,260472,260476,260480,260484,260488,260492,260496,260500,260504,260508,260512,260516,260520,260524,260528,260532,260536,260540,260544,260548,260552,260556,260560,260564,260568,260572,260576,260580,260584,260588,260592,260596,260600,260604,260608,260612,260616,260620,260624,260628,260632,260636,260640,260644,260648,260652,260656,260660,260664,260668,260672,260676,260680,260684,260688,260692,260696,260700,260704,260708,260712,260716,260720,260724,260728,260732,260736,260740,260744,260748,260752,260756,260760,260764,260768,260772,260776,260780,260784,260788,260792,260796,260800,260804,260808,260812,260816,260820,260824,260828,260832,260836,260840,260844,260848,260852,260856,260860,260864,260868,260872,260876,260880,260884,260888,260892,260896,260900,260904,260908,260912,260916,260920,260924,260928,260932,260936,260940,260944,260948,260952,260956,260960,260964,260968,260972,260976,260980,260984,260988,260992,260996,261000,261004,261008,261012,261016,261020,261024,261028,261032,261036,261040,261044,261048,261052,261056,261060,261064,261068,261072,261076,261080,261084,261088,261092,261096,261100,261104,261108,261112,261116,261120,261124,261128,261132,261136,261140,261144,261148,261152,261156,261160,261164,261168,261172,261176,261180,261184,261188,261192,261196,261200,261204,261208,261212,261216,261220,261224,261228,261232,261236,261240,261244,261248,261252,261256,261260,261264,261268,261272,261276,261280,261284,261288,261292,261296,261300,261304,261308,261312,261316,261320,261324,261328,261332,261336,261340,261344,261348,261352,261356,261360,261364,261368,261372,261376,261380,261384,261388,261392,261396,261400,261404,261408,261412,261416,261420,261424,261428,261432,261436,261440,261444,261448,261452,261456,261460,261464,261468,261472,261476,261480,261484,261488,261492,261496,261500,261504,261508,261512,261516,261520,261524,261528,261532,261536,261540,261544,261548,261552,261556,261560,261564,261568,261572,261576,261580,261584,261588,261592,261596,261600,261604,261608,261612,261616,261620,261624,261628,261632,261636,261640,261644,261648,261652,261656,261660,261664,261668,261672,261676,261680,261684,261688,261692,261696,261700,261704,261708,261712,261716,261720,261724,261728,261732,261736,261740,261744,261748,261752,261756,261760,261764,261768,261772,261776,261780,261784,261788,261792,261796,261800,261804,261808,261812,261816,261820,261824,261828,261832,261836,261840,261844,261848,261852,261856,261860,261864,261868,261872,261876,261880,261884,261888,261892,261896,261900,261904,261908,261912,261916,261920,261924,261928,261932,261936,261940,261944,261948,261952,261956,261960,261964,261968,261972,261976,261980,261984,261988,261992,261996,262000,262004,262008,262012,262016,262020,262024,262028,262032,262036,262040,262044,262048,262052,262056,262060,262064,262068,262072,262076,262080,262084,262088,262092,262096,262100,262104,262108,262112,262116,262120,262124,262128,262132,262136,262140,262144,262148,262152,262156,262160,262164,262168,262172,262176,262180,262184,262188,262192,262196,262200,262204,262208,262212,262216,262220,262224,262228,262232,262236,262240,262244,262248,262252,262256,262260,262264,262268,262272,262276,262280,262284,262288,262292,262296,262300,262304,262308,262312,262316,262320,262324,262328,262332,262336,262340,262344,262348,262352,262356,262360,262364,262368,262372,262376,262380,262384,262388,262392,262396,262400,262404,262408,262412,262416,262420,262424,262428,262432,262436,262440,262444,262448,262452,262456,262460,262464,262468,262472,262476,262480,262484,262488,262492,262496,262500,262504,262508,262512,262516,262520,262524,262528,262532,262536,262540,262544,262548,262552,262556,262560,262564,262568,262572,262576,262580,262584,262588,262592,262596,262600,262604,262608,262612,262616,262620,262624,262628,262632,262636,262640,262644,262648,262652,262656,262660,262664,262668,262672,262676,262680,262684,262688,262692,262696,262700,262704,262708,262712,262716,262720,262724,262728,262732,262736,262740,262744,262748,262752,262756,262760,262764,262768,262772,262776,262780,262784,262788,262792,262796,262800,262804,262808,262812,262816,262820,262824,262828,262832,262836,262840,262844,262848,262852,262856,262860,262864,262868,262872,262876,262880,262884,262888,262892,262896,262900,262904,262908,262912,262916,262920,262924,262928,262932,262936,262940,262944,262948,262952,262956,262960,262964,262968,262972,262976,262980,262984,262988,262992,262996,263000,263004,263008,263012,263016,263020,263024,263028,263032,263036,263040,263044,263048,263052,263056,263060,263064,263068,263072,263076,263080,263084,263088,263092,263096,263100,263104,263108,263112,263116,263120,263124,263128,263132,263136,263140,263144,263148,263152,263156,263160,263164,263168,263172,263176,263180,263184,263188,263192,263196,263200,263204,263208,263212,263216,263220,263224,263228,263232,263236,263240,263244,263248,263252,263256,263260,263264,263268,263272,263276,263280,263284,263288,263292,263296,263300,263304,263308,263312,263316,263320,263324,263328,263332,263336,263340,263344,263348,263352,263356,263360,263364,263368,263372,263376,263380,263384,263388,263392,263396,263400,263404,263408,263412,263416,263420,263424,263428,263432,263436,263440,263444,263448,263452,263456,263460,263464,263468,263472,263476,263480,263484,263488,263492,263496,263500,263504,263508,263512,263516,263520,263524,263528,263532,263536,263540,263544,263548,263552,263556,263560,263564,263568,263572,263576,263580,263584,263588,263592,263596,263600,263604,263608,263612,263616,263620,263624,263628,263632,263636,263640,263644,263648,263652,263656,263660,263664,263668,263672,263676,263680,263684,263688,263692,263696,263700,263704,263708,263712,263716,263720,263724,263728,263732,263736,263740,263744,263748,263752,263756,263760,263764,263768,263772,263776,263780,263784,263788,263792,263796,263800,263804,263808,263812,263816,263820,263824,263828,263832,263836,263840,263844,263848,263852,263856,263860,263864,263868,263872,263876,263880,263884,263888,263892,263896,263900,263904,263908,263912,263916,263920,263924,263928,263932,263936,263940,263944,263948,263952,263956,263960,263964,263968,263972,263976,263980,263984,263988,263992,263996,264000,264004,264008,264012,264016,264020,264024,264028,264032,264036,264040,264044,264048,264052,264056,264060,264064,264068,264072,264076,264080,264084,264088,264092,264096,264100,264104,264108,264112,264116,264120,264124,264128,264132,264136,264140,264144,264148,264152,264156,264160,264164,264168,264172,264176,264180,264184,264188,264192,264196,264200,264204,264208,264212,264216,264220,264224,264228,264232,264236,264240,264244,264248,264252,264256,264260,264264,264268,264272,264276,264280,264284,264288,264292,264296,264300,264304,264308,264312,264316,264320,264324,264328,264332,264336,264340,264344,264348,264352,264356,264360,264364,264368,264372,264376,264380,264384,264388,264392,264396,264400,264404,264408,264412,264416,264420,264424,264428,264432,264436,264440,264444,264448,264452,264456,264460,264464,264468,264472,264476,264480,264484,264488,264492,264496,264500,264504,264508,264512,264516,264520,264524,264528,264532,264536,264540,264544,264548,264552,264556,264560,264564,264568,264572,264576,264580,264584,264588,264592,264596,264600,264604,264608,264612,264616,264620,264624,264628,264632,264636,264640,264644,264648,264652,264656,264660,264664,264668,264672,264676,264680,264684,264688,264692,264696,264700,264704,264708,264712,264716,264720,264724,264728,264732,264736,264740,264744,264748,264752,264756,264760,264764,264768,264772,264776,264780,264784,264788,264792,264796,264800,264804,264808,264812,264816,264820,264824,264828,264832,264836,264840,264844,264848,264852,264856,264860,264864,264868,264872,264876,264880,264884,264888,264892,264896,264900,264904,264908,264912,264916,264920,264924,264928,264932,264936,264940,264944,264948,264952,264956,264960,264964,264968,264972,264976,264980,264984,264988,264992,264996,265000,265004,265008,265012,265016,265020,265024,265028,265032,265036,265040,265044,265048,265052,265056,265060,265064,265068,265072,265076,265080,265084,265088,265092,265096,265100,265104,265108,265112,265116,265120,265124,265128,265132,265136,265140,265144,265148,265152,265156,265160,265164,265168,265172,265176,265180,265184,265188,265192,265196,265200,265204,265208,265212,265216,265220,265224,265228,265232,265236,265240,265244,265248,265252,265256,265260,265264,265268,265272,265276,265280,265284,265288,265292,265296,265300,265304,265308,265312,265316,265320,265324,265328,265332,265336,265340,265344,265348,265352,265356,265360,265364,265368,265372,265376,265380,265384,265388,265392,265592,265852,266252,266492,266540,266740,266976,267108,267180,267324,267500,267572,267728,267972,268012,268072,268112,268480,268580,268724,268816,268904,269076,269236,269396,269708,269836,270076,270172,270216,270536,270708,270956,271416,271708,271832,271988,272040,272044,272048,272052,272228,272452,272608,272652,272732,272964,273248,273296,273676,273972,274136,274308,274492,274568,274656,274848,275100,275252,275404,275556,275744,275892,275988,276168,276292,276616,276776,276916,277036,277116,277372,277524,277660,277804,277920,278044,278168,278496,278764,278944,279148,279392,279528,279692,279908,280232,280368,280516,280652,280812,280916,280988,281104,281192,281228,281268,281368,281448,281608,281876,282008,282272,282800,282924,283092,283180,283472,283520,283600,283764,283864,284344,284432,284564,284696,284844,284972,285172,285308,285536,285604,285748,285860,286080,286212,286344,286456,286512,286612,286736,286864,286992,287120,287300,287404,287524,287648,287784,288000,288132,288204,288256,288292,288332,288396,288684,288800,289028,289132,289316,289356,289580,289680,289860,290088,290308,290396,290440,290548,290612,290728,290916,291096,291132,291196,291292,291356,291424,291516,291636,291728,291804,291872,291968,292292,292396,292560,292832,293328,293380,293656,295788,452,488,532,552,652,1136,2420,2824,3488,3684,3780,7080,7240,7344,7412,7572,7816,7944,8180,8236,8320,8380,8544,8648,8716,8876,9116,9228,9248,9284,9360,9440,9520,9600,9752,9856,9924,10084,10324,10436,10532,10624,10816,10872,14320,14348,14536,14552,14652,14676,14704,14960,15296,15312,15340,15360,15400,15416,15440,15716,15736,15756,15772,17640,17768,17784,17812,17860,17984,18032,18084,18172,18248,18332,18392,18436,18548,18624,18644,18668,19200,19272,19368,19684,19752,19892,19940,19988,20108,20236,20276,20316,20764,20796,20828,21064,21220,21292,21424,21440,21984,22020,22056,22092,22128,22164,22200,22236,22272,22308,22344,22380,22416,22476,22512,22548,22584,22620,22656,22728,22764,22800,22836,22872,22908,23004,23040,23084,23156,23284,23536,23612,23660,23744,23832,23956,24052,24892,24936,24952,25004,25036,25120,25168,25484,25568,25628,25776,26008,26124,26228,26280,26432,26516,26576,26724,26952,27052,27768,27940,28228,28316,28544,28632,28948,29036,29432,29520,29996,30228,30600,30636,30940,31216,31292,31320,31744,32212,32324,32720,32864,33024,33152,33224,33328,33388,33424,33656,33724,33740,33768,33792,33808,33832,33920,34324,34340,34412,34428,34500,34516,34564,34584,34636,34652,34672,34688,34736,34752,34824,34844,34896,34908,34920,34956,34968,35012,35024,35040,35056,35068,35080,35092,35108,35136,35180,35196,35216,35232,35280,35296,35368,35388,35432,35444,35456,35492,35504,35548,35560,35576,35592,35604,35616,35628,35644,35672,35708,35724,35744,35760,35808,35824,35896,35916,35960,35972,35984,36020,36032,36076,36088,36104,36120,36132,36144,36156,36172,36200,36244,36328,36396,36432,36448,36516,36604,36628,36644,36660,36728,36816,36840,36856,36872,36940,37028,37052,37100,37124,37136,37204,37224,37296,37316,37356,37368,37384,37484,37504,37528,37544,37564,37632,37688,37760,37792,37848,37920,37936,38276,38332,38724,38916,39180,39380,39480,39688,39884,39980,40184,40360,40436,41580,41700,41788,41844,41960,42156,42484,42580,42760,42968,43016,43064,43112,43168,43216,43256,43304,43408,43484,43532,43632,43700,43748,43780,43828,43948,43996,44028,44076,44116,44164,44232,44632,44764,44892,45024,45536,45596,46528,46588,46648,47212,47272,47332,47652,47712,47772,47832,49248,49684,49780,52656,52672,52796,52888,53004,53016,53028,53044,53208,53360,53452,53488,53600,53692,53728,53840,53932,53968,54080,54092,54128,54236,54252,54288,54396,54412,54448,54556,54572,54608,54716,54732,54768,54876,54892,54928,55036,55052,55064,55084,55212,55228,55820,55844,56028,56228,56492,56752,56896,57036,57260,57596,58032,61296,61516,61600,61804,62032,62048,62184,62396,62612,62628,62752,63120,66824,66956,67040,67900,67964,68028,68104,68164,68224,68280,68336,68392,69264,71168,71972,72012,72052,72092,72132,72172,72372,72684,72748,72768,72792,72808,72948,73016,73028,73140,73216,73308,73372,73520,73532,73636,73700,73788,73836,74100,74328,74484,74588,74672,74752,74800,74940,74964,75112,75136,75184,75236,75280,75308,75336,75364,75392,75420,75448,75476,75504,75532,75560,75588,75616,75644,75672,75700,75728,75756,75784,75812,75840,75868,75896,75924,75952,75980,76008,76036,76064,76092,76120,76148,76176,76204,76232,76260,76288,76316,76344,76372,76400,76428,76456,76484,76512,76540,76568,76596,76624,76652,76680,76708,76736,76764,76792,76820,76848,76876,76904,76932,76960,76988,77016,77044,77072,77100,77128,77156,77184,77212,77240,77268,77296,77324,77352,77380,77408,77436,77464,77492,77520,77548,77576,77604,77632,77660,77688,77716,77744,77772,77800,77828,77856,77884,77912,77940,77968,77996,78024,78052,78080,78108,78136,78164,78192,78220,78248,78276,78304,78332,78360,78388,78416,78444,78472,78500,78528,78556,78584,78612,78640,78668,78696,78724,78752,78780,78808,78836,78864,78892,78920,78948,78976,79004,79032,79060,79088,79116,79144,79172,79200,79228,79256,79284,79312,79340,79368,79396,79424,79452,79480,79508,79536,79564,79592,79620,79648,79676,79704,79732,79760,80228,80376,84100,84124,84148,84168,84220,84260,84300,84352,84380,84400,84468,84524,84544,84616,84704,84728,84796,84828,84968,84992,85016,85104,85180,85272,85304,85484,85636,85716,85740,85824,85900,85984,86068,86232,86300,86680,86716,86784,86888,86920,86952,86988,87024,87060,87208,87324,87564,87812,87928,88172,88216,88424,88440,88852,89064,89080,89088,89104,89120,89176,89276,89304,89428,89592,89740,89936,90060,90288,90372,90380,90412,90512,90540,90664,90828,90976,91172,91296,91324,91336,91344,91552,94480,94576,94768,94944,95508,95720,95872,96176,96220,96268,96340,96416,96436,96484,96500,96572,96600,96612,96624,96644,96664,96680,96692,96708,96720,96732,96752,96772,96788,96800,96840,96856,96928,96956,96968,96980,97000,97020,97036,97048,97064,97076,97088,97108,97128,97144,97156,97192,97208,97280,97308,97320,97332,97352,97372,97388,97400,97416,97428,97440,97460,97480,97496,97508,97524,97756,97844,100292,100332,101244,101348,101588,101692,102196,102236,103140,103244,103484,103588,104096,104296,104552,104664,104728,104808,104968,105068,105152,105416,105528,105568,105788,105836,106000,106036,106240,107160,107196,107232,107272,107352,107536,107592,107776,107828,107880,107924,107968,108036,108080,108148,108200,108252,108304,108380,108432,108528,108552,108592,108616,108656,108696,108736,108776,108816,108876,108916,108956,109040,109100,109124,109136,109228,109236,109540,109600,109648,109892,109992,110168,110180,110196,110540,110648,110792,111052,111844,111860,111920,112796,112896,112968,113964,114068,114168,114876,115412,115644,115908,115936,116124,116496,116756,116956,116984,117080,117128,117232,118128,118248,118680,119028,119156,119300,119948,120008,120620,124644,124696,125276,125792,127004,127140,127172,127216,127268,127340,127400,127768,128388,128464,128740,128784,128872,129392,129428,129672,129720,129772,129824,129876,130152,130188,130240,130316,130640,130816,130856,130912,130936,130964,131004,131036,131080,131104,131140,131208,131264,131344,131364,131512,131580,131964,132108,132168,134016,134088,134168,134248,134328,134424,134472,134492,134548,134968,134992,135228,135356,135484,135612,135716,135732,135828,136144,136164,136184,136204,136228,136256,136276,136296,136316,136340,136368,136392,136420,136444,136472,136496,136524,136560,136580,136628,136736,136940,137052,137156,137180,137212,137240,137272,137308,137328,140060,140104,140136,140160,140300,140328,140360,140384,140484,140532,140556,140576,140632,140652,140708,140728,140788,140844,140916,142828,143236,143280,143348,143376,143444,143500,143540,143572,143992,144396,144420,144572,144624,144660,144676,144792,144840,144892,144928,144944,145004,145156,145168,145216,145228,145268,145280,145396,145408,145420,145432,145444,145456,145504,145516,145556,145568,145724,145740,145752,145764,146108,146448,146668,146716,146928,146940,146988,147000,147040,147052,147192,147204,147216,147228,147240,147252,147300,147312,147352,147364,147504,147516,147528,147540,147680,147692,147740,147752,147792,147804,147944,147956,147968,147980,147992,148004,148052,148064,148104,148116,148256,148268,148280,148292,149168,149988,150344,150356,150388,150432,150484,150500,150528,150564,150652,150708,150736,150840,150912,150940,151028,151116,151144,151216,151288,151316,151328,151336,151344,151756,151808,151832,151844,151932,153724,153756,153784,153900,153956,154028,154152,154228,154280,154392,154436,154516,154576,154616,154676,154904,154984,155140,155176,155264,155364,155584,155704,155748,156256,156564,156820,157376,157584,157716,157896,158104,158228,158404,158540,159980,160068,160100,160184,160468,162920,162976,163036,163092,163252,163708,163760,164104,164140,164208,164404,164432,164468,164548,164624,164700,164716,164964,165000,165068,165240,165268,165296,165360,165400,165444,165568,165584,165880,166016,166256,166304,166324,168492,168516,169324,169364,170280,170392,170492,170512,170552,170600,170620,170700,170744,171016,172252,172900,173264,173324,173496,173552,174172,174780,174960,175028,175100,175144,175308,175368,175396,175616,175644,176208,176252,177928,177964,178124,178168,178196,178272,178300,178340,178416,178572,178740,178844,178908,178984,179460,181192,181288,181684,181720,181832,182884,182920,183032,183400,183412,183480,183528,183564,183588,183624,183716,183760,183800,183864,183888,184132,184216,184288,184316,184372,184492,184592,184648,184796,184900,184916,184924,184932,184948,185152,185172,185368,185384,185396,185428,185472,185524,185540,185576,185604,185704,185732,185856,185884,186032,186060,186184,186212,186224,186232,186240,186340,186352,186400,186412,186452,186464,186580,186592,186604,186616,186860,186956,187080,187124,187336,187952,188104,188176,188424,188784,188884,188892,188972,188988,189024,189108,189124,189160,189244,189260,189296,189380,189556,189580,189624,189652,189708,189732,189756,189788,189808,189828,189872,189904,191576,191592,191908,192216,192284,192348,192476,192960,193348,193548,193600,193652,193704,193756,193940,194044,194160,194344,194732,194888,195048,195160,195196,195236,195284,195476,195524,195544,195564,196440,196456,196772,196956,196988,197040,197084,197200,197252,197284,197496,197552,197636,197704,197908,197988,198012,198040,198104,198144,198168,198196,200348,201120,201228,201372,201664,201708,201740,201760,201832,201896,202084,202188,202256,202328,202964,203012,203124,203240,203272,205304,205416,205452,205492,205528,205568,205596,205624,205652,205680,205708,205736,205764,205792,205820,205856,205884,205912,205940,205968,205996,206024,206052,206080,206572,206896,207068,207112,207160,207192,207224,207316,207540,207636,208048,208168,208184,208204,208244,208268,208320,208492,208936,209076,209160,209396,209548,209600,209732,209748,209816,210132,210424,210480,210500,210560,211688,211812,211840,212200,212328,213108,213120,213256,213272,213440,213472,213516,213540,213580,213656,213924,214100,214196,214408,214488,214748,214804,214844,214860,215600,215640,215716,215856,216480,216604,216680,216912,216968,217032,217104,217252,217328,217368,217892,218024,218084,218136,218208,218220,218544,218656,218680,218708,218720,218868,218900,218916,219016,219064,219468,219496,219620,219648,219668,219712,219736,219760,219812,219836,219856,219876,219920,219940,220028,220052,220196,220228,220368,220420,220480,220548,220712,220768,220824,221416,221476,221504,222216,222880,222908,223088,223116,223368,223384,223404,223416,223428,223444,223608,223740,223764,223776,223800,223832,224700,225760,225856,226860,227160,227704,228048,228092,228132,228156,228172,228200,228216,228228,228768,229320,229452,229572,229588,229628,229652,229788,229832,229880,229888,231256,231308,231328,231344,231396,231592,231652,231920,231980,232032,232116,232144,232160,232744,233108,233204,233604,233784,233936,234144,234180,234204,234408,234428,234480,234500,234736,234756,234776,234920,234964,235184,235240,235312,235352,235560,235580,235660,235692,235712,235900,235980,236112,236168,236200,236628,236636,236644,236652,236664,236760,236856,236952,238328,238368,238944,238972,239048,239120,239132,239180,239216,239248,239284,239312,239328,239344,239368,239508,239560,239716,239796,239952,240004,240064,240116,240156,240176,240196,240408,240572,240736,240900,241064,241496,241540,241580,241604,241632,241648,241772,241812,241864,241908,241952,242108,242128,242148,242272,242292,242312,242556,242716,242824,243028,243232,243480,243508,243536,243564,243592,243620,243648,243676,243704,243732,243760,243788,243816,243844,243872,243900,243928,243956,243984,244200,244648,244704,244876,245120,245176,245436,245600,245636,245668,246096,246320,246428,246616,246660,246764,247020,247132,247144,247236,247308,247400,248128,248300,248456,248508,248540,248564,248708,249264,249300,249344,249392,249436,249460,249484,249888,250164,250476,250984,251736,251788,251912,252248,252420,252440,252460,252476,253060,253104,253144,253168,253520,253536,253564,253580,253604,254040,254192,254272,254460,254680,254716,254924,254952,255316,255332,255356,255412,255440,255648,256144,256540,265496,266016,266080,266120,266160,266176,266588,267376,267428,267628,267800,268280,268308,268336,268364,268392,268416,268432,268488,268508,268536,268592,268600,268660,268784,269276,269288,269308,269328,269340,269528,269544,269556,269612,269632,269644,269716,269764,270192,270244,270564,270572,270644,270656,270664,270716,270776,271060,271076,272308,272760,272892,273120,273140,273384,273452,273500,273752,274192,274536,274704,274736,275160,275172,275184,275196,275312,275324,275336,275348,275464,275476,275488,275500,275780,275856,275900,275912,276036,276192,276204,276216,276332,276352,276392,276412,276544,276672,276832,277044,277060,277084,277104,277584,277716,277864,277988,278112,278236,278272,278292,278552,278576,278816,279324,279340,279440,279736,279772,279800,279956,280112,280288,280404,280424,280572,281244,281532,281760,281924,282088,282112,282220,282320,282488,282508,282588,282724,283060,283256,283636,283676,283800,284076,284084,284176,284732,284764,284892,284916,284996,285004,285016,285348,285384,285444,285576,285676,285924,285964,285992,286660,286788,286916,287044,287172,287208,287228,287348,287572,287684,287704,287820,287836,287856,287868,287884,287920,288024,288168,288404,288420,288444,288464,288932,289056,289188,289208,289244,289480,289496,289512,289528,289704,289712,289764,289940,289948,289956,289964,289972,289980,289988,289996,290004,290012,290020,290028,290124,290140,290216,290340,290620,290768,290792,290800,290840,290980,291004,291024,291036,291044,291572,292016,292028,292344,292596,292620,292652,292764,292936,293152,293208,293220,293240,293352,293388,293680,293708,293784,293876,293904,293916,293956,294076,294136,294208,294232,294252,294284,294360,294412,294420,294428,294456,294484,294524,294576,294636,294744,294752,294788,294824,294864,294940,294952,294964,294992,295016,295028,295140,295164,295176,295248,295320,295348,295380,295388,295420,295452,295508,295540,295572,295608,295644,295676,295732,295800,295844,295900,295932,296044,296112,296144,296232,296244,296284,296296,296532,296596,296756,297040,297452,297492,297532,297600,297632,297756,297776,297836,297888,297920,298028,298060,298292,298312]);

  for (var i = 0; i < relocations.length; i++) {
    assert(relocations[i] % 4 === 0);
    assert(relocations[i] >= 0 && relocations[i] < eb + 298736); // in range
    assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var ___exception_infos={};
  
  var ___exception_caught= [];
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }

  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(
  ) {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

  function _abort() {
      abort();
    }

   

   

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      noExitRuntime = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        noExitRuntime = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        noExitRuntime = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,contextAttributes:{alpha:false,depth:false,stencil:false,antialias:false},stringCache:{},setErrorCode:function(code) {
        EGL.errorCode = code;
      },chooseConfig:function(display, attribList, config, config_size, numConfigs) {
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for(;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function() { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function(target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function() {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  function __requestPointerLock(target) {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else if (target.mozRequestPointerLock) {
        target.mozRequestPointerLock();
      } else if (target.webkitRequestPointerLock) {
        target.webkitRequestPointerLock();
      } else if (target.msRequestPointerLock) {
        target.msRequestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
          return -3;
        } else {
          return -1;
        }
      }
      return 0;
    }function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(__requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      warnOnce('Rules for selecting event targets in HTML5 API are changing: instead of using document.getElementById() that only can refer to elements by their DOM ID, new event target selection mechanism uses the more flexible function document.querySelector() that can look up element names, classes, and complex CSS selectors. Build with -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 to change to the new lookup rules. See https://github.com/emscripten-core/emscripten/pull/7977 for more details.');
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function _emscripten_get_element_css_size(target, width, height) {
      target = target ? __findEventTarget(target) : Module['canvas'];
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  
  function __fillGamepadEventData(eventStruct, e) {
      HEAPF64[((eventStruct)>>3)]=e.timestamp;
      for(var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
        }
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
        } else {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
        }
      }
      HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
      HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
      HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_num_gamepads() {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  
  function __fillPointerlockChangeEventData(eventStruct, e) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[((eventStruct)>>2)]=isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) __fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

   

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },acquireInstancedArraysExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('ANGLE_instanced_arrays');
        if (ext) {
          ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
          ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
          ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        }
      },acquireVertexArrayObjectExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('OES_vertex_array_object');
        if (ext) {
          ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
          ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
          ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
          ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        }
      },acquireDrawBuffersExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        }
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          GL.acquireInstancedArraysExtension(GLctx);
          GL.acquireVertexArrayObjectExtension(GLctx);
          GL.acquireDrawBuffersExtension(GLctx);
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2",
                                               // Old style prefixed forms of extensions (but still currently used on e.g. iPhone Xs as
                                               // tested on iOS 12.4.1):
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.timerQueriesEXT[id]);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _emscripten_glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  
  var __tempFixedLengthArray=[];function _emscripten_glDrawBuffersWEBGL(n, bufs) {
  
      var bufArray = __tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 0: HEAP32[((p)>>2)]=ret;    break;
        case 2:   HEAPF32[((p)>>2)]=ret;  break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          case 5: HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArrayOES(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.timerQueriesEXT[id], target);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function __heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
  
      if (type == 1) return HEAPU8;
  
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function __heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = __heapObjectForWebGLType(type);
      var shift = __heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = __findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(__requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return __requestPointerLock(target);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  
  
  function __fillMouseEventData(eventStruct, e, target) {
      HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
      HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(40))>>1)]=e.button;
      HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
      HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
      HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
      if (Module['canvas']) {
        var rect = Module['canvas'].getBoundingClientRect();
        HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
      } else { // Canvas is not initialized, return 0.
        HEAP32[(((eventStruct)+(60))>>2)]=0;
        HEAP32[(((eventStruct)+(64))>>2)]=0;
      }
      if (target) {
        var rect = JSEvents.getBoundingClientRectOrZeros(target);
        HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
      } else { // No specific target passed, return 0.
        HEAP32[(((eventStruct)+(52))>>2)]=0;
        HEAP32[(((eventStruct)+(56))>>2)]=0;
      }
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      // In IE, mousedown events don't either allow deferred calls to be run!
      if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  
  
  function __fillFullscreenChangeEventData(eventStruct, e) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      HEAP32[((eventStruct)>>2)]=isFullscreen;
      HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
      HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(ev) {
        var e = ev || event;
  
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        __fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = target ? __findEventTarget(target) : __specialEventTargets[1];
      if (!target) return -4;
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange", targetThread);
      return 0;
    }

  
  function __registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var gamepadEvent = JSEvents.gamepadEvent;
        __fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }


  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touch.changed = false;
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
        var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          if (canvasRect) {
            HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
            HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
          } else {
            HEAP32[(((ptr)+(44))>>2)]=0;
            HEAP32[(((ptr)+(48))>>2)]=0;            
          }
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        dynCall_vii(GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        dynCall_viiiii(GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        dynCall_vidd(GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        dynCall_viiii(GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        dynCall_vidd(GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        dynCall_viii(GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        dynCall_viii(GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        dynCall_viii(win.windowSizeFunc, win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          dynCall_vi(win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      return GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.cursorEnterFunc;
      win.cursorEnterFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      return GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      var prevcbfun = GLFW.errorFunc;
      GLFW.errorFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      return GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      return GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      return GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowIconifyFunc;
      win.windowIconifyFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      return GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



  var _llvm_cos_f32=Math_cos;

  
   

  var _llvm_sin_f32=Math_sin;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        ___setErrNo(28);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        ___setErrNo(28);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var GLctx; GL.init();
for (var i = 0; i < 32; i++) __tempFixedLengthArray.push(new Array(i));;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array

function nullFunc_ff(x) { abortFnPtrError(x, 'ff'); }
function nullFunc_fff(x) { abortFnPtrError(x, 'fff'); }
function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vf(x) { abortFnPtrError(x, 'vf'); }
function nullFunc_vff(x) { abortFnPtrError(x, 'vff'); }
function nullFunc_vffff(x) { abortFnPtrError(x, 'vffff'); }
function nullFunc_vfi(x) { abortFnPtrError(x, 'vfi'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vidd(x) { abortFnPtrError(x, 'vidd'); }
function nullFunc_vif(x) { abortFnPtrError(x, 'vif'); }
function nullFunc_viff(x) { abortFnPtrError(x, 'viff'); }
function nullFunc_vifff(x) { abortFnPtrError(x, 'vifff'); }
function nullFunc_viffff(x) { abortFnPtrError(x, 'viffff'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viif(x) { abortFnPtrError(x, 'viif'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }
function nullFunc_viiiiiii(x) { abortFnPtrError(x, 'viiiiiii'); }
function nullFunc_viiiiiiii(x) { abortFnPtrError(x, 'viiiiiiii'); }
function nullFunc_viiiiiiiii(x) { abortFnPtrError(x, 'viiiiiiiii'); }

var asmGlobalArg = {};

var asmLibraryArg = { "EMTSTACKTOP": EMTSTACKTOP, "EMT_STACK_MAX": EMT_STACK_MAX, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_throw": ___cxa_throw, "___exception_addRef": ___exception_addRef, "___exception_deAdjust": ___exception_deAdjust, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__colorChannelsInGlTextureFormat": __colorChannelsInGlTextureFormat, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__fillFullscreenChangeEventData": __fillFullscreenChangeEventData, "__fillGamepadEventData": __fillGamepadEventData, "__fillMouseEventData": __fillMouseEventData, "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData, "__findEventTarget": __findEventTarget, "__glGenObject": __glGenObject, "__heapAccessShiftForWebGLHeap": __heapAccessShiftForWebGLHeap, "__heapObjectForWebGLType": __heapObjectForWebGLType, "__memory_base": 1024, "__registerFullscreenChangeEventCallback": __registerFullscreenChangeEventCallback, "__registerGamepadEventCallback": __registerGamepadEventCallback, "__registerKeyEventCallback": __registerKeyEventCallback, "__registerMouseEventCallback": __registerMouseEventCallback, "__registerTouchEventCallback": __registerTouchEventCallback, "__requestPointerLock": __requestPointerLock, "__table_base": 0, "_abort": _abort, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE, "_emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT, "_emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT, "_emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT, "_emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT, "_emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_run_script": _emscripten_run_script, "_emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data, "_emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread, "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "_emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread, "_emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread, "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "_exit": _exit, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBlendFunc": _glBlendFunc, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepthf": _glClearDepthf, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteProgram": _glDeleteProgram, "_glDeleteShader": _glDeleteShader, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_glDetachShader": _glDetachShader, "_glDisable": _glDisable, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glDrawArrays": _glDrawArrays, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetFloatv": _glGetFloatv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glPixelStorei": _glPixelStorei, "_glReadPixels": _glReadPixels, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform4f": _glUniform4f, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateWindow": _glfwCreateWindow, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwDestroyWindow": _glfwDestroyWindow, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetMouseButton": _glfwGetMouseButton, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glfwGetTime": _glfwGetTime, "_glfwGetVideoModes": _glfwGetVideoModes, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetDropCallback": _glfwSetDropCallback, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_nanosleep": _nanosleep, "_time": _time, "_usleep": _usleep, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter, "demangle": demangle, "demangleAll": demangleAll, "eb": eb, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "getTempRet0": getTempRet0, "jsStackTrace": jsStackTrace, "memory": wasmMemory, "nullFunc_ff": nullFunc_ff, "nullFunc_fff": nullFunc_fff, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vf": nullFunc_vf, "nullFunc_vff": nullFunc_vff, "nullFunc_vffff": nullFunc_vffff, "nullFunc_vfi": nullFunc_vfi, "nullFunc_vi": nullFunc_vi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_vif": nullFunc_vif, "nullFunc_viff": nullFunc_viff, "nullFunc_vifff": nullFunc_vifff, "nullFunc_viffff": nullFunc_viffff, "nullFunc_vii": nullFunc_vii, "nullFunc_viif": nullFunc_viif, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "setTempRet0": setTempRet0, "stackTrace": stackTrace, "stringToNewUTF8": stringToNewUTF8, "table": wasmTable, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;
var __GLOBAL__sub_I_gameplayScreen_cpp = Module["__GLOBAL__sub_I_gameplayScreen_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_gameplayScreen_cpp"].apply(null, arguments)
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_can_catch"].apply(null, arguments)
};

var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments)
};

var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments)
};

var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments)
};

var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments)
};

var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments)
};

var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments)
};

var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_get_sbrk_ptr"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments)
};

var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments)
};

var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments)
};

var _llvm_round_f64 = Module["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_round_f64"].apply(null, arguments)
};

var _ma_device_process_pcm_frames_capture__webaudio = Module["_ma_device_process_pcm_frames_capture__webaudio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ma_device_process_pcm_frames_capture__webaudio"].apply(null, arguments)
};

var _ma_device_process_pcm_frames_playback__webaudio = Module["_ma_device_process_pcm_frames_playback__webaudio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ma_device_process_pcm_frames_playback__webaudio"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments)
};

var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments)
};

var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments)
};

var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments)
};

var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strstr"].apply(null, arguments)
};

var emtStackRestore = Module["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackRestore"].apply(null, arguments)
};

var emtStackSave = Module["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackSave"].apply(null, arguments)
};

var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments)
};

var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments)
};

var getEmtStackMax = Module["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getEmtStackMax"].apply(null, arguments)
};

var setAsyncState = Module["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setAsyncState"].apply(null, arguments)
};

var setEmtStackMax = Module["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setEmtStackMax"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var dynCall_ff = Module["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ff"].apply(null, arguments)
};

var dynCall_fff = Module["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fff"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_vf = Module["dynCall_vf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vf"].apply(null, arguments)
};

var dynCall_vff = Module["dynCall_vff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vff"].apply(null, arguments)
};

var dynCall_vffff = Module["dynCall_vffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vffff"].apply(null, arguments)
};

var dynCall_vfi = Module["dynCall_vfi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfi"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments)
};

var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments)
};

var dynCall_viff = Module["dynCall_viff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viff"].apply(null, arguments)
};

var dynCall_vifff = Module["dynCall_vifff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifff"].apply(null, arguments)
};

var dynCall_viffff = Module["dynCall_viffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffff"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments)
};
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["calledRun"] = calledRun;



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {


    var ret = entryFunction(argc, argv);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (!noExitRuntime) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}










